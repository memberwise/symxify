//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountsPayableService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountsPayableService\generated-output -n AccountsPayableService
namespace AccountsPayableService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("InvoiceFields", Namespace="http://www.symxchange.generated.symitar.com/crud/accountspayable/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("InvoiceFields", Namespace="http://www.symxchange.generated.symitar.com/crud/accountspayable/dto/retrieve")]
    public partial class InvoiceFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AchAcknowledge", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AchAcknowledgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AchAcknowledge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AchAcknowledgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AchAcknowledge
        {
            get
            {
                if (this.AchAcknowledgeValueSpecified)
                {
                    return this.AchAcknowledgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AchAcknowledgeValue = value.GetValueOrDefault();
                this.AchAcknowledgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AchGroupNumber", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AchGroupNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AchGroupNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AchGroupNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AchGroupNumber
        {
            get
            {
                if (this.AchGroupNumberValueSpecified)
                {
                    return this.AchGroupNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AchGroupNumberValue = value.GetValueOrDefault();
                this.AchGroupNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AchTranCodeOut", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AchTranCodeOutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AchTranCodeOut property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AchTranCodeOutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AchTranCodeOut
        {
            get
            {
                if (this.AchTranCodeOutValueSpecified)
                {
                    return this.AchTranCodeOutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AchTranCodeOutValue = value.GetValueOrDefault();
                this.AchTranCodeOutValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdditionalDesc", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AdditionalDescValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalDesc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdditionalDescValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdditionalDesc
        {
            get
            {
                if (this.AdditionalDescValueSpecified)
                {
                    return this.AdditionalDescValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalDescValue = value.GetValueOrDefault();
                this.AdditionalDescValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApPaymentTermsType", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool ApPaymentTermsTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApPaymentTermsType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApPaymentTermsTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApPaymentTermsType
        {
            get
            {
                if (this.ApPaymentTermsTypeValueSpecified)
                {
                    return this.ApPaymentTermsTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApPaymentTermsTypeValue = value.GetValueOrDefault();
                this.ApPaymentTermsTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Approval", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool ApprovalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Approval property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApprovalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Approval
        {
            get
            {
                if (this.ApprovalValueSpecified)
                {
                    return this.ApprovalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApprovalValue = value.GetValueOrDefault();
                this.ApprovalValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _completedActions;
        
        [XmlElementAttribute("CompletedActions", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> CompletedActions
        {
            get
            {
                return _completedActions;
            }
            set
            {
                _completedActions = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CompletedActions collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CompletedActionsSpecified
        {
            get
            {
                return ((this.CompletedActions != null) 
                            && (this.CompletedActions.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InvoiceFields" /> class.</para>
        /// </summary>
        public InvoiceFields()
        {
            this._completedActions = new Collection<short>();
            this._dueAmount = new Collection<short>();
            this._dueDate = new Collection<short>();
            this._expenseAmount = new Collection<short>();
            this._expenseTable = new Collection<short>();
            this._glExpense = new Collection<short>();
            this._glNameExpense = new Collection<short>();
            this._paymentAmount = new Collection<short>();
            this._paymentCheck = new Collection<short>();
            this._paymentDate = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateAddenda", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool CreateAddendaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateAddenda property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateAddendaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateAddenda
        {
            get
            {
                if (this.CreateAddendaValueSpecified)
                {
                    return this.CreateAddendaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateAddendaValue = value.GetValueOrDefault();
                this.CreateAddendaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Description", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool DescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Description property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Description
        {
            get
            {
                if (this.DescriptionValueSpecified)
                {
                    return this.DescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DescriptionValue = value.GetValueOrDefault();
                this.DescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DfiAccount", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool DfiAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DfiAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DfiAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DfiAccount
        {
            get
            {
                if (this.DfiAccountValueSpecified)
                {
                    return this.DfiAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DfiAccountValue = value.GetValueOrDefault();
                this.DfiAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DiscountAmount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool DiscountAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscountAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DiscountAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DiscountAmount
        {
            get
            {
                if (this.DiscountAmountValueSpecified)
                {
                    return this.DiscountAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DiscountAmountValue = value.GetValueOrDefault();
                this.DiscountAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DiscountDate", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool DiscountDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscountDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DiscountDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DiscountDate
        {
            get
            {
                if (this.DiscountDateValueSpecified)
                {
                    return this.DiscountDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DiscountDateValue = value.GetValueOrDefault();
                this.DiscountDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DiscountTaken", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool DiscountTakenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscountTaken property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DiscountTakenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DiscountTaken
        {
            get
            {
                if (this.DiscountTakenValueSpecified)
                {
                    return this.DiscountTakenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DiscountTakenValue = value.GetValueOrDefault();
                this.DiscountTakenValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dueAmount;
        
        [XmlElementAttribute("DueAmount", Order=13, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DueAmount
        {
            get
            {
                return _dueAmount;
            }
            set
            {
                _dueAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DueAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DueAmountSpecified
        {
            get
            {
                return ((this.DueAmount != null) 
                            && (this.DueAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dueDate;
        
        [XmlElementAttribute("DueDate", Order=14, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DueDate
        {
            get
            {
                return _dueDate;
            }
            set
            {
                _dueDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DueDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DueDateSpecified
        {
            get
            {
                return ((this.DueDate != null) 
                            && (this.DueDate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDateFinal", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool DueDateFinalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDateFinal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDateFinalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DueDateFinal
        {
            get
            {
                if (this.DueDateFinalValueSpecified)
                {
                    return this.DueDateFinalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDateFinalValue = value.GetValueOrDefault();
                this.DueDateFinalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Event", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool EventValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Event property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EventValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Event
        {
            get
            {
                if (this.EventValueSpecified)
                {
                    return this.EventValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EventValue = value.GetValueOrDefault();
                this.EventValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EventDate", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool EventDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EventDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EventDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EventDate
        {
            get
            {
                if (this.EventDateValueSpecified)
                {
                    return this.EventDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EventDateValue = value.GetValueOrDefault();
                this.EventDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpEffectiveDate", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool ExpEffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpEffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpEffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpEffectiveDate
        {
            get
            {
                if (this.ExpEffectiveDateValueSpecified)
                {
                    return this.ExpEffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpEffectiveDateValue = value.GetValueOrDefault();
                this.ExpEffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpPostDate", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool ExpPostDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpPostDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpPostDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpPostDate
        {
            get
            {
                if (this.ExpPostDateValueSpecified)
                {
                    return this.ExpPostDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpPostDateValue = value.GetValueOrDefault();
                this.ExpPostDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _expenseAmount;
        
        [XmlElementAttribute("ExpenseAmount", Order=20, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ExpenseAmount
        {
            get
            {
                return _expenseAmount;
            }
            set
            {
                _expenseAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ExpenseAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ExpenseAmountSpecified
        {
            get
            {
                return ((this.ExpenseAmount != null) 
                            && (this.ExpenseAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _expenseTable;
        
        [XmlElementAttribute("ExpenseTable", Order=21, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ExpenseTable
        {
            get
            {
                return _expenseTable;
            }
            set
            {
                _expenseTable = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ExpenseTable collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ExpenseTableSpecified
        {
            get
            {
                return ((this.ExpenseTable != null) 
                            && (this.ExpenseTable.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlAcctsPay", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool GlAcctsPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlAcctsPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlAcctsPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlAcctsPay
        {
            get
            {
                if (this.GlAcctsPayValueSpecified)
                {
                    return this.GlAcctsPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlAcctsPayValue = value.GetValueOrDefault();
                this.GlAcctsPayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlDiscount", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool GlDiscountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlDiscount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlDiscountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlDiscount
        {
            get
            {
                if (this.GlDiscountValueSpecified)
                {
                    return this.GlDiscountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlDiscountValue = value.GetValueOrDefault();
                this.GlDiscountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _glExpense;
        
        [XmlElementAttribute("GlExpense", Order=24, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> GlExpense
        {
            get
            {
                return _glExpense;
            }
            set
            {
                _glExpense = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GlExpense collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool GlExpenseSpecified
        {
            get
            {
                return ((this.GlExpense != null) 
                            && (this.GlExpense.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlNameAcctsPay", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool GlNameAcctsPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlNameAcctsPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlNameAcctsPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlNameAcctsPay
        {
            get
            {
                if (this.GlNameAcctsPayValueSpecified)
                {
                    return this.GlNameAcctsPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlNameAcctsPayValue = value.GetValueOrDefault();
                this.GlNameAcctsPayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlNameDiscount", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool GlNameDiscountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlNameDiscount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlNameDiscountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlNameDiscount
        {
            get
            {
                if (this.GlNameDiscountValueSpecified)
                {
                    return this.GlNameDiscountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlNameDiscountValue = value.GetValueOrDefault();
                this.GlNameDiscountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _glNameExpense;
        
        [XmlElementAttribute("GlNameExpense", Order=27, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> GlNameExpense
        {
            get
            {
                return _glNameExpense;
            }
            set
            {
                _glNameExpense = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GlNameExpense collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool GlNameExpenseSpecified
        {
            get
            {
                return ((this.GlNameExpense != null) 
                            && (this.GlNameExpense.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImageId", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool ImageIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImageId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImageIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImageId
        {
            get
            {
                if (this.ImageIdValueSpecified)
                {
                    return this.ImageIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImageIdValue = value.GetValueOrDefault();
                this.ImageIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvoiceDate", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool InvoiceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvoiceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvoiceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvoiceDate
        {
            get
            {
                if (this.InvoiceDateValueSpecified)
                {
                    return this.InvoiceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvoiceDateValue = value.GetValueOrDefault();
                this.InvoiceDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvoiceFrequency", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool InvoiceFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvoiceFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvoiceFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvoiceFrequency
        {
            get
            {
                if (this.InvoiceFrequencyValueSpecified)
                {
                    return this.InvoiceFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvoiceFrequencyValue = value.GetValueOrDefault();
                this.InvoiceFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextRecurInvoiceDate", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool NextRecurInvoiceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextRecurInvoiceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextRecurInvoiceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NextRecurInvoiceDate
        {
            get
            {
                if (this.NextRecurInvoiceDateValueSpecified)
                {
                    return this.NextRecurInvoiceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextRecurInvoiceDateValue = value.GetValueOrDefault();
                this.NextRecurInvoiceDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Number", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool NumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Number
        {
            get
            {
                if (this.NumberValueSpecified)
                {
                    return this.NumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberValue = value.GetValueOrDefault();
                this.NumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginatingInvoiceNumber", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool OriginatingInvoiceNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginatingInvoiceNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginatingInvoiceNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OriginatingInvoiceNumber
        {
            get
            {
                if (this.OriginatingInvoiceNumberValueSpecified)
                {
                    return this.OriginatingInvoiceNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginatingInvoiceNumberValue = value.GetValueOrDefault();
                this.OriginatingInvoiceNumberValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _paymentAmount;
        
        [XmlElementAttribute("PaymentAmount", Order=36, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PaymentAmount
        {
            get
            {
                return _paymentAmount;
            }
            set
            {
                _paymentAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PaymentAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PaymentAmountSpecified
        {
            get
            {
                return ((this.PaymentAmount != null) 
                            && (this.PaymentAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _paymentCheck;
        
        [XmlElementAttribute("PaymentCheck", Order=37, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PaymentCheck
        {
            get
            {
                return _paymentCheck;
            }
            set
            {
                _paymentCheck = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PaymentCheck collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PaymentCheckSpecified
        {
            get
            {
                return ((this.PaymentCheck != null) 
                            && (this.PaymentCheck.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _paymentDate;
        
        [XmlElementAttribute("PaymentDate", Order=38, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PaymentDate
        {
            get
            {
                return _paymentDate;
            }
            set
            {
                _paymentDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PaymentDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PaymentDateSpecified
        {
            get
            {
                return ((this.PaymentDate != null) 
                            && (this.PaymentDate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentMethod", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentMethod
        {
            get
            {
                if (this.PaymentMethodValueSpecified)
                {
                    return this.PaymentMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentMethodValue = value.GetValueOrDefault();
                this.PaymentMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PoNumber", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool PoNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PoNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PoNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PoNumber
        {
            get
            {
                if (this.PoNumberValueSpecified)
                {
                    return this.PoNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PoNumberValue = value.GetValueOrDefault();
                this.PoNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreNoteDfiAccount", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool PreNoteDfiAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreNoteDfiAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreNoteDfiAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PreNoteDfiAccount
        {
            get
            {
                if (this.PreNoteDfiAccountValueSpecified)
                {
                    return this.PreNoteDfiAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreNoteDfiAccountValue = value.GetValueOrDefault();
                this.PreNoteDfiAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurrenceDay1", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool RecurrenceDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurrenceDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurrenceDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecurrenceDay1
        {
            get
            {
                if (this.RecurrenceDay1ValueSpecified)
                {
                    return this.RecurrenceDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurrenceDay1Value = value.GetValueOrDefault();
                this.RecurrenceDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurrenceDay2", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool RecurrenceDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurrenceDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurrenceDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecurrenceDay2
        {
            get
            {
                if (this.RecurrenceDay2ValueSpecified)
                {
                    return this.RecurrenceDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurrenceDay2Value = value.GetValueOrDefault();
                this.RecurrenceDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurrenceEndDate", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool RecurrenceEndDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurrenceEndDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurrenceEndDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecurrenceEndDate
        {
            get
            {
                if (this.RecurrenceEndDateValueSpecified)
                {
                    return this.RecurrenceEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurrenceEndDateValue = value.GetValueOrDefault();
                this.RecurrenceEndDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RemainingRecurringInvoices", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool RemainingRecurringInvoicesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RemainingRecurringInvoices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RemainingRecurringInvoicesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RemainingRecurringInvoices
        {
            get
            {
                if (this.RemainingRecurringInvoicesValueSpecified)
                {
                    return this.RemainingRecurringInvoicesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RemainingRecurringInvoicesValue = value.GetValueOrDefault();
                this.RemainingRecurringInvoicesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalExpenses", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool TotalExpensesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalExpenses property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalExpensesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TotalExpenses
        {
            get
            {
                if (this.TotalExpensesValueSpecified)
                {
                    return this.TotalExpensesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalExpensesValue = value.GetValueOrDefault();
                this.TotalExpensesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalInvoiceAmtDue", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool TotalInvoiceAmtDueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalInvoiceAmtDue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalInvoiceAmtDueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TotalInvoiceAmtDue
        {
            get
            {
                if (this.TotalInvoiceAmtDueValueSpecified)
                {
                    return this.TotalInvoiceAmtDueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalInvoiceAmtDueValue = value.GetValueOrDefault();
                this.TotalInvoiceAmtDueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalPayments", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool TotalPaymentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalPayments property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalPaymentsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TotalPayments
        {
            get
            {
                if (this.TotalPaymentsValueSpecified)
                {
                    return this.TotalPaymentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalPaymentsValue = value.GetValueOrDefault();
                this.TotalPaymentsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnpaidBalance", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool UnpaidBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnpaidBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnpaidBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UnpaidBalance
        {
            get
            {
                if (this.UnpaidBalanceValueSpecified)
                {
                    return this.UnpaidBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnpaidBalanceValue = value.GetValueOrDefault();
                this.UnpaidBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("User", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool UserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the User property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> User
        {
            get
            {
                if (this.UserValueSpecified)
                {
                    return this.UserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserValue = value.GetValueOrDefault();
                this.UserValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=54, Form=XmlSchemaForm.Unqualified)]
        public AccountsPayableService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=55)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
