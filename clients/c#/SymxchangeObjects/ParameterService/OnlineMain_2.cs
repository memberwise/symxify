//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("OnlineMain", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("OnlineMain", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(OnlineMainFields_2))]
    public partial class OnlineMain_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptLoanThresholdPayment", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptLoanThresholdPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptLoanThresholdPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptLoanThresholdPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptLoanThresholdPayment
        {
            get
            {
                if (this.AcceptLoanThresholdPaymentValueSpecified)
                {
                    return this.AcceptLoanThresholdPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptLoanThresholdPaymentValue = value.GetValueOrDefault();
                this.AcceptLoanThresholdPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptUnappliedPartialPmt", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptUnappliedPartialPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptUnappliedPartialPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptUnappliedPartialPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptUnappliedPartialPmt
        {
            get
            {
                if (this.AcceptUnappliedPartialPmtValueSpecified)
                {
                    return this.AcceptUnappliedPartialPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptUnappliedPartialPmtValue = value.GetValueOrDefault();
                this.AcceptUnappliedPartialPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AppendAtmTerminalId", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AppendAtmTerminalIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AppendAtmTerminalId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AppendAtmTerminalIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AppendAtmTerminalId
        {
            get
            {
                if (this.AppendAtmTerminalIdValueSpecified)
                {
                    return this.AppendAtmTerminalIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AppendAtmTerminalIdValue = value.GetValueOrDefault();
                this.AppendAtmTerminalIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AtmAvailBalApprExclList", Order=3, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap AtmAvailBalApprExclList { get; set; }
        
        [XmlElementAttribute("AtmAvailBalPostExclList", Order=4, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap AtmAvailBalPostExclList { get; set; }
        
        [XmlElementAttribute("AtmFeeDescription", Order=5, Form=XmlSchemaForm.Unqualified)]
        public string AtmFeeDescription { get; set; }
        
        [XmlElementAttribute("AtmWarningCodeList", Order=6, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap AtmWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AvsAction", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short AvsActionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AvsAction property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AvsActionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AvsAction
        {
            get
            {
                if (this.AvsActionValueSpecified)
                {
                    return this.AvsActionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AvsActionValue = value.GetValueOrDefault();
                this.AvsActionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AvsMethod", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short AvsMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AvsMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AvsMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AvsMethod
        {
            get
            {
                if (this.AvsMethodValueSpecified)
                {
                    return this.AvsMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AvsMethodValue = value.GetValueOrDefault();
                this.AvsMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BillPayFeeDescription", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string BillPayFeeDescription { get; set; }
        
        [XmlElementAttribute("BpAvailBalApprExclList", Order=10, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap BpAvailBalApprExclList { get; set; }
        
        [XmlElementAttribute("BpAvailBalPostExclList", Order=11, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap BpAvailBalPostExclList { get; set; }
        
        [XmlElementAttribute("BpWarningCodeList", Order=12, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap BpWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardinHistoryDigitCount", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short CardinHistoryDigitCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardinHistoryDigitCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardinHistoryDigitCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardinHistoryDigitCount
        {
            get
            {
                if (this.CardinHistoryDigitCountValueSpecified)
                {
                    return this.CardinHistoryDigitCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardinHistoryDigitCountValue = value.GetValueOrDefault();
                this.CardinHistoryDigitCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CashMccTypes", Order=14, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CashMccTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargePartialCapFee", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool ChargePartialCapFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargePartialCapFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargePartialCapFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargePartialCapFee
        {
            get
            {
                if (this.ChargePartialCapFeeValueSpecified)
                {
                    return this.ChargePartialCapFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargePartialCapFeeValue = value.GetValueOrDefault();
                this.ChargePartialCapFeeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckWarningCodeList", Order=16, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CheckWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Chng1GasAuthHoldAmount", Order=17, Form=XmlSchemaForm.Unqualified)]
        public decimal Chng1GasAuthHoldAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Chng1GasAuthHoldAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Chng1GasAuthHoldAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Chng1GasAuthHoldAmount
        {
            get
            {
                if (this.Chng1GasAuthHoldAmountValueSpecified)
                {
                    return this.Chng1GasAuthHoldAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Chng1GasAuthHoldAmountValue = value.GetValueOrDefault();
                this.Chng1GasAuthHoldAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClearingGlCode", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short ClearingGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClearingGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClearingGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ClearingGlCode
        {
            get
            {
                if (this.ClearingGlCodeValueSpecified)
                {
                    return this.ClearingGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClearingGlCodeValue = value.GetValueOrDefault();
                this.ClearingGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyNotices", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyNotices
        {
            get
            {
                if (this.CourtesyNoticesValueSpecified)
                {
                    return this.CourtesyNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyNoticesValue = value.GetValueOrDefault();
                this.CourtesyNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayCommentCode", Order=20, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayCommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayCommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayCommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayCommentCode
        {
            get
            {
                if (this.CourtesyPayCommentCodeValueSpecified)
                {
                    return this.CourtesyPayCommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayCommentCodeValue = value.GetValueOrDefault();
                this.CourtesyPayCommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CourtesyPayFeeDescription", Order=21, Form=XmlSchemaForm.Unqualified)]
        public string CourtesyPayFeeDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayFeeGlCode", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayFeeGlCode
        {
            get
            {
                if (this.CourtesyPayFeeGlCodeValueSpecified)
                {
                    return this.CourtesyPayFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayFeeGlCodeValue = value.GetValueOrDefault();
                this.CourtesyPayFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateExceptionItems", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool CreateExceptionItemsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateExceptionItems property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateExceptionItemsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateExceptionItems
        {
            get
            {
                if (this.CreateExceptionItemsValueSpecified)
                {
                    return this.CreateExceptionItemsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateExceptionItemsValue = value.GetValueOrDefault();
                this.CreateExceptionItemsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CreditCardFeeDescription", Order=24, Form=XmlSchemaForm.Unqualified)]
        public string CreditCardFeeDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuAtmCheckDepHoldDays", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short CuAtmCheckDepHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuAtmCheckDepHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuAtmCheckDepHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CuAtmCheckDepHoldDays
        {
            get
            {
                if (this.CuAtmCheckDepHoldDaysValueSpecified)
                {
                    return this.CuAtmCheckDepHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuAtmCheckDepHoldDaysValue = value.GetValueOrDefault();
                this.CuAtmCheckDepHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuAtmEnvDepHoldDays", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short CuAtmEnvDepHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuAtmEnvDepHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuAtmEnvDepHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CuAtmEnvDepHoldDays
        {
            get
            {
                if (this.CuAtmEnvDepHoldDaysValueSpecified)
                {
                    return this.CuAtmEnvDepHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuAtmEnvDepHoldDaysValue = value.GetValueOrDefault();
                this.CuAtmEnvDepHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuAtmUseRegCcPolicy", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool CuAtmUseRegCcPolicyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuAtmUseRegCcPolicy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuAtmUseRegCcPolicyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CuAtmUseRegCcPolicy
        {
            get
            {
                if (this.CuAtmUseRegCcPolicyValueSpecified)
                {
                    return this.CuAtmUseRegCcPolicyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuAtmUseRegCcPolicyValue = value.GetValueOrDefault();
                this.CuAtmUseRegCcPolicyValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DebitCardFeeDescription", Order=28, Form=XmlSchemaForm.Unqualified)]
        public string DebitCardFeeDescription { get; set; }
        
        [XmlElementAttribute("DepWarningCodeList", Order=29, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap DepWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqGraceDaysForAddon", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short DqGraceDaysForAddonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqGraceDaysForAddon property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqGraceDaysForAddonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqGraceDaysForAddon
        {
            get
            {
                if (this.DqGraceDaysForAddonValueSpecified)
                {
                    return this.DqGraceDaysForAddonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqGraceDaysForAddonValue = value.GetValueOrDefault();
                this.DqGraceDaysForAddonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqGraceDaysForWd", Order=31, Form=XmlSchemaForm.Unqualified)]
        public short DqGraceDaysForWdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqGraceDaysForWd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqGraceDaysForWdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqGraceDaysForWd
        {
            get
            {
                if (this.DqGraceDaysForWdValueSpecified)
                {
                    return this.DqGraceDaysForWdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqGraceDaysForWdValue = value.GetValueOrDefault();
                this.DqGraceDaysForWdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DqWarningCodeList", Order=32, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap DqWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DuplicateKeyPurgeTime", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short DuplicateKeyPurgeTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DuplicateKeyPurgeTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DuplicateKeyPurgeTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DuplicateKeyPurgeTime
        {
            get
            {
                if (this.DuplicateKeyPurgeTimeValueSpecified)
                {
                    return this.DuplicateKeyPurgeTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DuplicateKeyPurgeTimeValue = value.GetValueOrDefault();
                this.DuplicateKeyPurgeTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DuplicateKeyRetentionDays", Order=34, Form=XmlSchemaForm.Unqualified)]
        public short DuplicateKeyRetentionDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DuplicateKeyRetentionDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DuplicateKeyRetentionDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DuplicateKeyRetentionDays
        {
            get
            {
                if (this.DuplicateKeyRetentionDaysValueSpecified)
                {
                    return this.DuplicateKeyRetentionDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DuplicateKeyRetentionDaysValue = value.GetValueOrDefault();
                this.DuplicateKeyRetentionDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("EnvWarningCodeList", Order=35, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap EnvWarningCodeList { get; set; }
        
        [XmlElementAttribute("FeeTypeToCap", Order=36, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap FeeTypeToCap { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrgnAtmCheckDepHoldDays", Order=37, Form=XmlSchemaForm.Unqualified)]
        public short FrgnAtmCheckDepHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrgnAtmCheckDepHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrgnAtmCheckDepHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FrgnAtmCheckDepHoldDays
        {
            get
            {
                if (this.FrgnAtmCheckDepHoldDaysValueSpecified)
                {
                    return this.FrgnAtmCheckDepHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrgnAtmCheckDepHoldDaysValue = value.GetValueOrDefault();
                this.FrgnAtmCheckDepHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrgnAtmEnvDepHoldDays", Order=38, Form=XmlSchemaForm.Unqualified)]
        public short FrgnAtmEnvDepHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrgnAtmEnvDepHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrgnAtmEnvDepHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FrgnAtmEnvDepHoldDays
        {
            get
            {
                if (this.FrgnAtmEnvDepHoldDaysValueSpecified)
                {
                    return this.FrgnAtmEnvDepHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrgnAtmEnvDepHoldDaysValue = value.GetValueOrDefault();
                this.FrgnAtmEnvDepHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrgnAtmUseRegCcPolicy", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool FrgnAtmUseRegCcPolicyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrgnAtmUseRegCcPolicy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrgnAtmUseRegCcPolicyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FrgnAtmUseRegCcPolicy
        {
            get
            {
                if (this.FrgnAtmUseRegCcPolicyValueSpecified)
                {
                    return this.FrgnAtmUseRegCcPolicyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrgnAtmUseRegCcPolicyValue = value.GetValueOrDefault();
                this.FrgnAtmUseRegCcPolicyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCategory", Order=40, Form=XmlSchemaForm.Unqualified)]
        public short GlCategoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCategory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCategoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlCategory
        {
            get
            {
                if (this.GlCategoryValueSpecified)
                {
                    return this.GlCategoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCategoryValue = value.GetValueOrDefault();
                this.GlCategoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GraceAmountforCashPayments", Order=41, Form=XmlSchemaForm.Unqualified)]
        public decimal GraceAmountforCashPaymentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GraceAmountforCashPayments property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GraceAmountforCashPaymentsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> GraceAmountforCashPayments
        {
            get
            {
                if (this.GraceAmountforCashPaymentsValueSpecified)
                {
                    return this.GraceAmountforCashPaymentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GraceAmountforCashPaymentsValue = value.GetValueOrDefault();
                this.GraceAmountforCashPaymentsValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainGroupMccHoldTime_2> _groupMccHoldTime;
        
        [XmlElementAttribute("GroupMccHoldTime", Order=42, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainGroupMccHoldTime_2> GroupMccHoldTime
        {
            get
            {
                return _groupMccHoldTime;
            }
            set
            {
                _groupMccHoldTime = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GroupMccHoldTime collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool GroupMccHoldTimeSpecified
        {
            get
            {
                return ((this.GroupMccHoldTime != null) 
                            && (this.GroupMccHoldTime.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OnlineMain_2" /> class.</para>
        /// </summary>
        public OnlineMain_2()
        {
            this._groupMccHoldTime = new Collection<OnlineMainGroupMccHoldTime_2>();
            this._groupMccHoldUnits = new Collection<OnlineMainGroupMccHoldUnits_2>();
            this._groupMccSourceCodes = new Collection<OnlineMainGroupMccSourceCodes_2>();
            this._mccTypes = new Collection<OnlineMainMccTypes_2>();
            this._relAltCourtesyPayFee1 = new Collection<OnlineMainRelAltCourtesyPayFee1_2>();
            this._relAltCourtesyPayFee2 = new Collection<OnlineMainRelAltCourtesyPayFee2_2>();
            this._relAltCourtesyPayFee3 = new Collection<OnlineMainRelAltCourtesyPayFee3_2>();
            this._relAltCourtesyPayFee4 = new Collection<OnlineMainRelAltCourtesyPayFee4_2>();
            this._relAltCourtesyPayFee5 = new Collection<OnlineMainRelAltCourtesyPayFee5_2>();
            this._relAltCourtesyPayFee6 = new Collection<OnlineMainRelAltCourtesyPayFee6_2>();
            this._relAltCourtesyPayTier1 = new Collection<OnlineMainRelAltCourtesyPayTier1_2>();
            this._relAltCourtesyPayTier2 = new Collection<OnlineMainRelAltCourtesyPayTier2_2>();
            this._relAltCourtesyPayTier3 = new Collection<OnlineMainRelAltCourtesyPayTier3_2>();
            this._relAltCourtesyPayTier4 = new Collection<OnlineMainRelAltCourtesyPayTier4_2>();
            this._relAltCourtesyPayTier5 = new Collection<OnlineMainRelAltCourtesyPayTier5_2>();
            this._relAltCourtesyPayTier6 = new Collection<OnlineMainRelAltCourtesyPayTier6_2>();
            this._relCodeList = new Collection<OnlineMainRelCodeList_2>();
            this._relCourtesyPayFee1 = new Collection<OnlineMainRelCourtesyPayFee1_2>();
            this._relCourtesyPayFee2 = new Collection<OnlineMainRelCourtesyPayFee2_2>();
            this._relCourtesyPayFee3 = new Collection<OnlineMainRelCourtesyPayFee3_2>();
            this._relCourtesyPayFee4 = new Collection<OnlineMainRelCourtesyPayFee4_2>();
            this._relCourtesyPayFee5 = new Collection<OnlineMainRelCourtesyPayFee5_2>();
            this._relCourtesyPayFee6 = new Collection<OnlineMainRelCourtesyPayFee6_2>();
            this._relCourtesyPayTier1 = new Collection<OnlineMainRelCourtesyPayTier1_2>();
            this._relCourtesyPayTier2 = new Collection<OnlineMainRelCourtesyPayTier2_2>();
            this._relCourtesyPayTier3 = new Collection<OnlineMainRelCourtesyPayTier3_2>();
            this._relCourtesyPayTier4 = new Collection<OnlineMainRelCourtesyPayTier4_2>();
            this._relCourtesyPayTier5 = new Collection<OnlineMainRelCourtesyPayTier5_2>();
            this._relCourtesyPayTier6 = new Collection<OnlineMainRelCourtesyPayTier6_2>();
            this._relNsfFee = new Collection<OnlineMainRelNsfFee_2>();
            this._relOverdrawAddonXfrFee = new Collection<OnlineMainRelOverdrawAddonXfrFee_2>();
            this._relOverdrawComboXfrFee = new Collection<OnlineMainRelOverdrawComboXfrFee_2>();
            this._relOverdrawWdXfrFee = new Collection<OnlineMainRelOverdrawWdXfrFee_2>();
            this._relOvlFee = new Collection<OnlineMainRelOvlFee_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainGroupMccHoldUnits_2> _groupMccHoldUnits;
        
        [XmlElementAttribute("GroupMccHoldUnits", Order=43, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainGroupMccHoldUnits_2> GroupMccHoldUnits
        {
            get
            {
                return _groupMccHoldUnits;
            }
            set
            {
                _groupMccHoldUnits = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GroupMccHoldUnits collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool GroupMccHoldUnitsSpecified
        {
            get
            {
                return ((this.GroupMccHoldUnits != null) 
                            && (this.GroupMccHoldUnits.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainGroupMccSourceCodes_2> _groupMccSourceCodes;
        
        [XmlElementAttribute("GroupMccSourceCodes", Order=44, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainGroupMccSourceCodes_2> GroupMccSourceCodes
        {
            get
            {
                return _groupMccSourceCodes;
            }
            set
            {
                _groupMccSourceCodes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GroupMccSourceCodes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool GroupMccSourceCodesSpecified
        {
            get
            {
                return ((this.GroupMccSourceCodes != null) 
                            && (this.GroupMccSourceCodes.Count != 0));
            }
        }
        
        [XmlElementAttribute("HoldWarningCodeList", Order=45, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap HoldWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeOnlineFeesinAppr", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeOnlineFeesinApprValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeOnlineFeesinAppr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeOnlineFeesinApprValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeOnlineFeesinAppr
        {
            get
            {
                if (this.IncludeOnlineFeesinApprValueSpecified)
                {
                    return this.IncludeOnlineFeesinApprValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeOnlineFeesinApprValue = value.GetValueOrDefault();
                this.IncludeOnlineFeesinApprValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("InstitutionName", Order=47, Form=XmlSchemaForm.Unqualified)]
        public string InstitutionName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardCcaFeeGlCode", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short MasterCardCcaFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardCcaFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardCcaFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MasterCardCcaFeeGlCode
        {
            get
            {
                if (this.MasterCardCcaFeeGlCodeValueSpecified)
                {
                    return this.MasterCardCcaFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardCcaFeeGlCodeValue = value.GetValueOrDefault();
                this.MasterCardCcaFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardIcaFeeGlCode", Order=49, Form=XmlSchemaForm.Unqualified)]
        public short MasterCardIcaFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardIcaFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardIcaFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MasterCardIcaFeeGlCode
        {
            get
            {
                if (this.MasterCardIcaFeeGlCodeValueSpecified)
                {
                    return this.MasterCardIcaFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardIcaFeeGlCodeValue = value.GetValueOrDefault();
                this.MasterCardIcaFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxInvalidPinAttempts", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short MaxInvalidPinAttemptsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxInvalidPinAttempts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxInvalidPinAttemptsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxInvalidPinAttempts
        {
            get
            {
                if (this.MaxInvalidPinAttemptsValueSpecified)
                {
                    return this.MaxInvalidPinAttemptsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxInvalidPinAttemptsValue = value.GetValueOrDefault();
                this.MaxInvalidPinAttemptsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumAddonOverLoc", Order=51, Form=XmlSchemaForm.Unqualified)]
        public decimal MaximumAddonOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumAddonOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumAddonOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MaximumAddonOverLoc
        {
            get
            {
                if (this.MaximumAddonOverLocValueSpecified)
                {
                    return this.MaximumAddonOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumAddonOverLocValue = value.GetValueOrDefault();
                this.MaximumAddonOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumWdBelowAvailable", Order=52, Form=XmlSchemaForm.Unqualified)]
        public decimal MaximumWdBelowAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumWdBelowAvailable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumWdBelowAvailableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MaximumWdBelowAvailable
        {
            get
            {
                if (this.MaximumWdBelowAvailableValueSpecified)
                {
                    return this.MaximumWdBelowAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumWdBelowAvailableValue = value.GetValueOrDefault();
                this.MaximumWdBelowAvailableValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainMccTypes_2> _mccTypes;
        
        [XmlElementAttribute("MccTypes", Order=53, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainMccTypes_2> MccTypes
        {
            get
            {
                return _mccTypes;
            }
            set
            {
                _mccTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MccTypes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MccTypesSpecified
        {
            get
            {
                return ((this.MccTypes != null) 
                            && (this.MccTypes.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumLineofCreditAddon", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumLineofCreditAddonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumLineofCreditAddon property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumLineofCreditAddonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumLineofCreditAddon
        {
            get
            {
                if (this.MinimumLineofCreditAddonValueSpecified)
                {
                    return this.MinimumLineofCreditAddonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumLineofCreditAddonValue = value.GetValueOrDefault();
                this.MinimumLineofCreditAddonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticesPrinterType", Order=55, Form=XmlSchemaForm.Unqualified)]
        public short NoticesPrinterTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticesPrinterType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticesPrinterTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NoticesPrinterType
        {
            get
            {
                if (this.NoticesPrinterTypeValueSpecified)
                {
                    return this.NoticesPrinterTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticesPrinterTypeValue = value.GetValueOrDefault();
                this.NoticesPrinterTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NsfFeeDescIfNotPaid", Order=56, Form=XmlSchemaForm.Unqualified)]
        public string NsfFeeDescIfNotPaid { get; set; }
        
        [XmlElementAttribute("NsfFeeDescIfPaid", Order=57, Form=XmlSchemaForm.Unqualified)]
        public string NsfFeeDescIfPaid { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeForUncollectedFunds", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool NsfFeeForUncollectedFundsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeForUncollectedFunds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeForUncollectedFundsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfFeeForUncollectedFunds
        {
            get
            {
                if (this.NsfFeeForUncollectedFundsValueSpecified)
                {
                    return this.NsfFeeForUncollectedFundsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeForUncollectedFundsValue = value.GetValueOrDefault();
                this.NsfFeeForUncollectedFundsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeGlCode", Order=59, Form=XmlSchemaForm.Unqualified)]
        public short NsfFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfFeeGlCode
        {
            get
            {
                if (this.NsfFeeGlCodeValueSpecified)
                {
                    return this.NsfFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeGlCodeValue = value.GetValueOrDefault();
                this.NsfFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfNotices", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool NsfNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfNotices
        {
            get
            {
                if (this.NsfNoticesValueSpecified)
                {
                    return this.NsfNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfNoticesValue = value.GetValueOrDefault();
                this.NsfNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdTransferFeeCalcOption", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short OdTransferFeeCalcOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdTransferFeeCalcOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdTransferFeeCalcOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OdTransferFeeCalcOption
        {
            get
            {
                if (this.OdTransferFeeCalcOptionValueSpecified)
                {
                    return this.OdTransferFeeCalcOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdTransferFeeCalcOptionValue = value.GetValueOrDefault();
                this.OdTransferFeeCalcOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OdtAuthFeeOvrSrcCodes", Order=62, Form=XmlSchemaForm.Unqualified)]
        public string OdtAuthFeeOvrSrcCodes { get; set; }
        
        [XmlElementAttribute("OdtAuthFeeRecurSrcCodes", Order=63, Form=XmlSchemaForm.Unqualified)]
        public string OdtAuthFeeRecurSrcCodes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlyLoanTransferNotices", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool OnlyLoanTransferNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlyLoanTransferNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlyLoanTransferNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OnlyLoanTransferNotices
        {
            get
            {
                if (this.OnlyLoanTransferNoticesValueSpecified)
                {
                    return this.OnlyLoanTransferNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlyLoanTransferNoticesValue = value.GetValueOrDefault();
                this.OnlyLoanTransferNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonDqGraceDays", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawAddonDqGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonDqGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonDqGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawAddonDqGraceDays
        {
            get
            {
                if (this.OverdrawAddonDqGraceDaysValueSpecified)
                {
                    return this.OverdrawAddonDqGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonDqGraceDaysValue = value.GetValueOrDefault();
                this.OverdrawAddonDqGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonIncrement", Order=66, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawAddonIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawAddonIncrement
        {
            get
            {
                if (this.OverdrawAddonIncrementValueSpecified)
                {
                    return this.OverdrawAddonIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonIncrementValue = value.GetValueOrDefault();
                this.OverdrawAddonIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonMaxOverLoc", Order=67, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawAddonMaxOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonMaxOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonMaxOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawAddonMaxOverLoc
        {
            get
            {
                if (this.OverdrawAddonMaxOverLocValueSpecified)
                {
                    return this.OverdrawAddonMaxOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonMaxOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonMaxOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonPctOverLoc", Order=68, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawAddonPctOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonPctOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonPctOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawAddonPctOverLoc
        {
            get
            {
                if (this.OverdrawAddonPctOverLocValueSpecified)
                {
                    return this.OverdrawAddonPctOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonPctOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonPctOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawFeeOption", Order=69, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawFeeOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawFeeOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawFeeOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawFeeOption
        {
            get
            {
                if (this.OverdrawFeeOptionValueSpecified)
                {
                    return this.OverdrawFeeOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawFeeOptionValue = value.GetValueOrDefault();
                this.OverdrawFeeOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawIncrementOverride", Order=70, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawIncrementOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawIncrementOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawIncrementOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawIncrementOverride
        {
            get
            {
                if (this.OverdrawIncrementOverrideValueSpecified)
                {
                    return this.OverdrawIncrementOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawIncrementOverrideValue = value.GetValueOrDefault();
                this.OverdrawIncrementOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawNoticesfor2ndAcct", Order=71, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawNoticesfor2NdAcctValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawNoticesfor2NdAcct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawNoticesfor2NdAcctValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawNoticesfor2NdAcct
        {
            get
            {
                if (this.OverdrawNoticesfor2NdAcctValueSpecified)
                {
                    return this.OverdrawNoticesfor2NdAcctValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawNoticesfor2NdAcctValue = value.GetValueOrDefault();
                this.OverdrawNoticesfor2NdAcctValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawOption", Order=72, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawOption
        {
            get
            {
                if (this.OverdrawOptionValueSpecified)
                {
                    return this.OverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawOptionValue = value.GetValueOrDefault();
                this.OverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawRegDLimiting", Order=73, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawRegDLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawRegDLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawRegDLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawRegDLimiting
        {
            get
            {
                if (this.OverdrawRegDLimitingValueSpecified)
                {
                    return this.OverdrawRegDLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawRegDLimitingValue = value.GetValueOrDefault();
                this.OverdrawRegDLimitingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTierOption", Order=74, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawTierOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTierOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTierOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawTierOption
        {
            get
            {
                if (this.OverdrawTierOptionValueSpecified)
                {
                    return this.OverdrawTierOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTierOptionValue = value.GetValueOrDefault();
                this.OverdrawTierOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferFeeGlCode", Order=75, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawTransferFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawTransferFeeGlCode
        {
            get
            {
                if (this.OverdrawTransferFeeGlCodeValueSpecified)
                {
                    return this.OverdrawTransferFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferFeeGlCodeValue = value.GetValueOrDefault();
                this.OverdrawTransferFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferNotices", Order=76, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawTransferNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawTransferNotices
        {
            get
            {
                if (this.OverdrawTransferNoticesValueSpecified)
                {
                    return this.OverdrawTransferNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferNoticesValue = value.GetValueOrDefault();
                this.OverdrawTransferNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawWithdrawalIncrement", Order=77, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawWithdrawalIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawWithdrawalIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawWithdrawalIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawWithdrawalIncrement
        {
            get
            {
                if (this.OverdrawWithdrawalIncrementValueSpecified)
                {
                    return this.OverdrawWithdrawalIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawWithdrawalIncrementValue = value.GetValueOrDefault();
                this.OverdrawWithdrawalIncrementValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OvlFeeDescIfNotPaid", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string OvlFeeDescIfNotPaid { get; set; }
        
        [XmlElementAttribute("OvlFeeDescIfPaid", Order=79, Form=XmlSchemaForm.Unqualified)]
        public string OvlFeeDescIfPaid { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlFeeForUncollectedFunds", Order=80, Form=XmlSchemaForm.Unqualified)]
        public bool OvlFeeForUncollectedFundsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlFeeForUncollectedFunds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlFeeForUncollectedFundsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlFeeForUncollectedFunds
        {
            get
            {
                if (this.OvlFeeForUncollectedFundsValueSpecified)
                {
                    return this.OvlFeeForUncollectedFundsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlFeeForUncollectedFundsValue = value.GetValueOrDefault();
                this.OvlFeeForUncollectedFundsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlFeeGlCode", Order=81, Form=XmlSchemaForm.Unqualified)]
        public short OvlFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OvlFeeGlCode
        {
            get
            {
                if (this.OvlFeeGlCodeValueSpecified)
                {
                    return this.OvlFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlFeeGlCodeValue = value.GetValueOrDefault();
                this.OvlFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlNotices", Order=82, Form=XmlSchemaForm.Unqualified)]
        public bool OvlNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlNotices
        {
            get
            {
                if (this.OvlNoticesValueSpecified)
                {
                    return this.OvlNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlNoticesValue = value.GetValueOrDefault();
                this.OvlNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PercentOverLineofCredit", Order=83, Form=XmlSchemaForm.Unqualified)]
        public decimal PercentOverLineofCreditValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PercentOverLineofCredit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PercentOverLineofCreditValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PercentOverLineofCredit
        {
            get
            {
                if (this.PercentOverLineofCreditValueSpecified)
                {
                    return this.PercentOverLineofCreditValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PercentOverLineofCreditValue = value.GetValueOrDefault();
                this.PercentOverLineofCreditValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinPreAuthGasHoldTime", Order=84, Form=XmlSchemaForm.Unqualified)]
        public short PinPreAuthGasHoldTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinPreAuthGasHoldTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinPreAuthGasHoldTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PinPreAuthGasHoldTime
        {
            get
            {
                if (this.PinPreAuthGasHoldTimeValueSpecified)
                {
                    return this.PinPreAuthGasHoldTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinPreAuthGasHoldTimeValue = value.GetValueOrDefault();
                this.PinPreAuthGasHoldTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinPreAuthGasHoldUnits", Order=85, Form=XmlSchemaForm.Unqualified)]
        public short PinPreAuthGasHoldUnitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinPreAuthGasHoldUnits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinPreAuthGasHoldUnitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PinPreAuthGasHoldUnits
        {
            get
            {
                if (this.PinPreAuthGasHoldUnitsValueSpecified)
                {
                    return this.PinPreAuthGasHoldUnitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinPreAuthGasHoldUnitsValue = value.GetValueOrDefault();
                this.PinPreAuthGasHoldUnitsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PosAvailBalAuthExclList", Order=86, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap PosAvailBalAuthExclList { get; set; }
        
        [XmlElementAttribute("PosAvailBalPostExclList", Order=87, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap PosAvailBalPostExclList { get; set; }
        
        [XmlElementAttribute("PosFeeDescription", Order=88, Form=XmlSchemaForm.Unqualified)]
        public string PosFeeDescription { get; set; }
        
        [XmlElementAttribute("PosWarningCodeList", Order=89, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap PosWarningCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostAtmBalanceInquiries", Order=90, Form=XmlSchemaForm.Unqualified)]
        public bool PostAtmBalanceInquiriesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostAtmBalanceInquiries property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostAtmBalanceInquiriesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PostAtmBalanceInquiries
        {
            get
            {
                if (this.PostAtmBalanceInquiriesValueSpecified)
                {
                    return this.PostAtmBalanceInquiriesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostAtmBalanceInquiriesValue = value.GetValueOrDefault();
                this.PostAtmBalanceInquiriesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostAtmStatements", Order=91, Form=XmlSchemaForm.Unqualified)]
        public bool PostAtmStatementsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostAtmStatements property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostAtmStatementsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PostAtmStatements
        {
            get
            {
                if (this.PostAtmStatementsValueSpecified)
                {
                    return this.PostAtmStatementsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostAtmStatementsValue = value.GetValueOrDefault();
                this.PostAtmStatementsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthExpHoldMatchDays", Order=92, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthExpHoldMatchDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthExpHoldMatchDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthExpHoldMatchDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthExpHoldMatchDays
        {
            get
            {
                if (this.PreAuthExpHoldMatchDaysValueSpecified)
                {
                    return this.PreAuthExpHoldMatchDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthExpHoldMatchDaysValue = value.GetValueOrDefault();
                this.PreAuthExpHoldMatchDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthFmHistoryOption", Order=93, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthFmHistoryOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthFmHistoryOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthFmHistoryOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthFmHistoryOption
        {
            get
            {
                if (this.PreAuthFmHistoryOptionValueSpecified)
                {
                    return this.PreAuthFmHistoryOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthFmHistoryOptionValue = value.GetValueOrDefault();
                this.PreAuthFmHistoryOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthHoldTime", Order=94, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthHoldTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthHoldTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthHoldTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthHoldTime
        {
            get
            {
                if (this.PreAuthHoldTimeValueSpecified)
                {
                    return this.PreAuthHoldTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthHoldTimeValue = value.GetValueOrDefault();
                this.PreAuthHoldTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthHoldUnits", Order=95, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthHoldUnitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthHoldUnits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthHoldUnitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthHoldUnits
        {
            get
            {
                if (this.PreAuthHoldUnitsValueSpecified)
                {
                    return this.PreAuthHoldUnitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthHoldUnitsValue = value.GetValueOrDefault();
                this.PreAuthHoldUnitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthMatchVariance", Order=96, Form=XmlSchemaForm.Unqualified)]
        public decimal PreAuthMatchVarianceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthMatchVariance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthMatchVarianceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PreAuthMatchVariance
        {
            get
            {
                if (this.PreAuthMatchVarianceValueSpecified)
                {
                    return this.PreAuthMatchVarianceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthMatchVarianceValue = value.GetValueOrDefault();
                this.PreAuthMatchVarianceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthMaxHoldDays", Order=97, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthMaxHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthMaxHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthMaxHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthMaxHoldDays
        {
            get
            {
                if (this.PreAuthMaxHoldDaysValueSpecified)
                {
                    return this.PreAuthMaxHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthMaxHoldDaysValue = value.GetValueOrDefault();
                this.PreAuthMaxHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthTeHoldTime", Order=98, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthTeHoldTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthTeHoldTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthTeHoldTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthTeHoldTime
        {
            get
            {
                if (this.PreAuthTeHoldTimeValueSpecified)
                {
                    return this.PreAuthTeHoldTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthTeHoldTimeValue = value.GetValueOrDefault();
                this.PreAuthTeHoldTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthTeHoldUnits", Order=99, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthTeHoldUnitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthTeHoldUnits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthTeHoldUnitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthTeHoldUnits
        {
            get
            {
                if (this.PreAuthTeHoldUnitsValueSpecified)
                {
                    return this.PreAuthTeHoldUnitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthTeHoldUnitsValue = value.GetValueOrDefault();
                this.PreAuthTeHoldUnitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrependRegEComments", Order=100, Form=XmlSchemaForm.Unqualified)]
        public bool PrependRegECommentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrependRegEComments property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrependRegECommentsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PrependRegEComments
        {
            get
            {
                if (this.PrependRegECommentsValueSpecified)
                {
                    return this.PrependRegECommentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrependRegECommentsValue = value.GetValueOrDefault();
                this.PrependRegECommentsValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayFee1_2> _relAltCourtesyPayFee1;
        
        [XmlElementAttribute("RelAltCourtesyPayFee1", Order=101, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayFee1_2> RelAltCourtesyPayFee1
        {
            get
            {
                return _relAltCourtesyPayFee1;
            }
            set
            {
                _relAltCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee1 != null) 
                            && (this.RelAltCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayFee2_2> _relAltCourtesyPayFee2;
        
        [XmlElementAttribute("RelAltCourtesyPayFee2", Order=102, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayFee2_2> RelAltCourtesyPayFee2
        {
            get
            {
                return _relAltCourtesyPayFee2;
            }
            set
            {
                _relAltCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee2 != null) 
                            && (this.RelAltCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayFee3_2> _relAltCourtesyPayFee3;
        
        [XmlElementAttribute("RelAltCourtesyPayFee3", Order=103, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayFee3_2> RelAltCourtesyPayFee3
        {
            get
            {
                return _relAltCourtesyPayFee3;
            }
            set
            {
                _relAltCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee3 != null) 
                            && (this.RelAltCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayFee4_2> _relAltCourtesyPayFee4;
        
        [XmlElementAttribute("RelAltCourtesyPayFee4", Order=104, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayFee4_2> RelAltCourtesyPayFee4
        {
            get
            {
                return _relAltCourtesyPayFee4;
            }
            set
            {
                _relAltCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee4 != null) 
                            && (this.RelAltCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayFee5_2> _relAltCourtesyPayFee5;
        
        [XmlElementAttribute("RelAltCourtesyPayFee5", Order=105, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayFee5_2> RelAltCourtesyPayFee5
        {
            get
            {
                return _relAltCourtesyPayFee5;
            }
            set
            {
                _relAltCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee5 != null) 
                            && (this.RelAltCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayFee6_2> _relAltCourtesyPayFee6;
        
        [XmlElementAttribute("RelAltCourtesyPayFee6", Order=106, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayFee6_2> RelAltCourtesyPayFee6
        {
            get
            {
                return _relAltCourtesyPayFee6;
            }
            set
            {
                _relAltCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee6 != null) 
                            && (this.RelAltCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayTier1_2> _relAltCourtesyPayTier1;
        
        [XmlElementAttribute("RelAltCourtesyPayTier1", Order=107, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayTier1_2> RelAltCourtesyPayTier1
        {
            get
            {
                return _relAltCourtesyPayTier1;
            }
            set
            {
                _relAltCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier1 != null) 
                            && (this.RelAltCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayTier2_2> _relAltCourtesyPayTier2;
        
        [XmlElementAttribute("RelAltCourtesyPayTier2", Order=108, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayTier2_2> RelAltCourtesyPayTier2
        {
            get
            {
                return _relAltCourtesyPayTier2;
            }
            set
            {
                _relAltCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier2 != null) 
                            && (this.RelAltCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayTier3_2> _relAltCourtesyPayTier3;
        
        [XmlElementAttribute("RelAltCourtesyPayTier3", Order=109, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayTier3_2> RelAltCourtesyPayTier3
        {
            get
            {
                return _relAltCourtesyPayTier3;
            }
            set
            {
                _relAltCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier3 != null) 
                            && (this.RelAltCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayTier4_2> _relAltCourtesyPayTier4;
        
        [XmlElementAttribute("RelAltCourtesyPayTier4", Order=110, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayTier4_2> RelAltCourtesyPayTier4
        {
            get
            {
                return _relAltCourtesyPayTier4;
            }
            set
            {
                _relAltCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier4 != null) 
                            && (this.RelAltCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayTier5_2> _relAltCourtesyPayTier5;
        
        [XmlElementAttribute("RelAltCourtesyPayTier5", Order=111, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayTier5_2> RelAltCourtesyPayTier5
        {
            get
            {
                return _relAltCourtesyPayTier5;
            }
            set
            {
                _relAltCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier5 != null) 
                            && (this.RelAltCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelAltCourtesyPayTier6_2> _relAltCourtesyPayTier6;
        
        [XmlElementAttribute("RelAltCourtesyPayTier6", Order=112, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelAltCourtesyPayTier6_2> RelAltCourtesyPayTier6
        {
            get
            {
                return _relAltCourtesyPayTier6;
            }
            set
            {
                _relAltCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier6 != null) 
                            && (this.RelAltCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCodeList_2> _relCodeList;
        
        [XmlElementAttribute("RelCodeList", Order=113, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCodeList_2> RelCodeList
        {
            get
            {
                return _relCodeList;
            }
            set
            {
                _relCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCodeListSpecified
        {
            get
            {
                return ((this.RelCodeList != null) 
                            && (this.RelCodeList.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayFee1_2> _relCourtesyPayFee1;
        
        [XmlElementAttribute("RelCourtesyPayFee1", Order=114, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayFee1_2> RelCourtesyPayFee1
        {
            get
            {
                return _relCourtesyPayFee1;
            }
            set
            {
                _relCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee1 != null) 
                            && (this.RelCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayFee2_2> _relCourtesyPayFee2;
        
        [XmlElementAttribute("RelCourtesyPayFee2", Order=115, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayFee2_2> RelCourtesyPayFee2
        {
            get
            {
                return _relCourtesyPayFee2;
            }
            set
            {
                _relCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee2 != null) 
                            && (this.RelCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayFee3_2> _relCourtesyPayFee3;
        
        [XmlElementAttribute("RelCourtesyPayFee3", Order=116, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayFee3_2> RelCourtesyPayFee3
        {
            get
            {
                return _relCourtesyPayFee3;
            }
            set
            {
                _relCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee3 != null) 
                            && (this.RelCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayFee4_2> _relCourtesyPayFee4;
        
        [XmlElementAttribute("RelCourtesyPayFee4", Order=117, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayFee4_2> RelCourtesyPayFee4
        {
            get
            {
                return _relCourtesyPayFee4;
            }
            set
            {
                _relCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee4 != null) 
                            && (this.RelCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayFee5_2> _relCourtesyPayFee5;
        
        [XmlElementAttribute("RelCourtesyPayFee5", Order=118, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayFee5_2> RelCourtesyPayFee5
        {
            get
            {
                return _relCourtesyPayFee5;
            }
            set
            {
                _relCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee5 != null) 
                            && (this.RelCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayFee6_2> _relCourtesyPayFee6;
        
        [XmlElementAttribute("RelCourtesyPayFee6", Order=119, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayFee6_2> RelCourtesyPayFee6
        {
            get
            {
                return _relCourtesyPayFee6;
            }
            set
            {
                _relCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee6 != null) 
                            && (this.RelCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayTier1_2> _relCourtesyPayTier1;
        
        [XmlElementAttribute("RelCourtesyPayTier1", Order=120, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayTier1_2> RelCourtesyPayTier1
        {
            get
            {
                return _relCourtesyPayTier1;
            }
            set
            {
                _relCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier1 != null) 
                            && (this.RelCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayTier2_2> _relCourtesyPayTier2;
        
        [XmlElementAttribute("RelCourtesyPayTier2", Order=121, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayTier2_2> RelCourtesyPayTier2
        {
            get
            {
                return _relCourtesyPayTier2;
            }
            set
            {
                _relCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier2 != null) 
                            && (this.RelCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayTier3_2> _relCourtesyPayTier3;
        
        [XmlElementAttribute("RelCourtesyPayTier3", Order=122, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayTier3_2> RelCourtesyPayTier3
        {
            get
            {
                return _relCourtesyPayTier3;
            }
            set
            {
                _relCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier3 != null) 
                            && (this.RelCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayTier4_2> _relCourtesyPayTier4;
        
        [XmlElementAttribute("RelCourtesyPayTier4", Order=123, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayTier4_2> RelCourtesyPayTier4
        {
            get
            {
                return _relCourtesyPayTier4;
            }
            set
            {
                _relCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier4 != null) 
                            && (this.RelCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayTier5_2> _relCourtesyPayTier5;
        
        [XmlElementAttribute("RelCourtesyPayTier5", Order=124, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayTier5_2> RelCourtesyPayTier5
        {
            get
            {
                return _relCourtesyPayTier5;
            }
            set
            {
                _relCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier5 != null) 
                            && (this.RelCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelCourtesyPayTier6_2> _relCourtesyPayTier6;
        
        [XmlElementAttribute("RelCourtesyPayTier6", Order=125, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelCourtesyPayTier6_2> RelCourtesyPayTier6
        {
            get
            {
                return _relCourtesyPayTier6;
            }
            set
            {
                _relCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier6 != null) 
                            && (this.RelCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelNsfFee_2> _relNsfFee;
        
        [XmlElementAttribute("RelNsfFee", Order=126, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelNsfFee_2> RelNsfFee
        {
            get
            {
                return _relNsfFee;
            }
            set
            {
                _relNsfFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelNsfFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelNsfFeeSpecified
        {
            get
            {
                return ((this.RelNsfFee != null) 
                            && (this.RelNsfFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelOverdrawAddonXfrFee_2> _relOverdrawAddonXfrFee;
        
        [XmlElementAttribute("RelOverdrawAddonXfrFee", Order=127, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelOverdrawAddonXfrFee_2> RelOverdrawAddonXfrFee
        {
            get
            {
                return _relOverdrawAddonXfrFee;
            }
            set
            {
                _relOverdrawAddonXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawAddonXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawAddonXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawAddonXfrFee != null) 
                            && (this.RelOverdrawAddonXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelOverdrawComboXfrFee_2> _relOverdrawComboXfrFee;
        
        [XmlElementAttribute("RelOverdrawComboXfrFee", Order=128, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelOverdrawComboXfrFee_2> RelOverdrawComboXfrFee
        {
            get
            {
                return _relOverdrawComboXfrFee;
            }
            set
            {
                _relOverdrawComboXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawComboXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawComboXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawComboXfrFee != null) 
                            && (this.RelOverdrawComboXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelOverdrawWdXfrFee_2> _relOverdrawWdXfrFee;
        
        [XmlElementAttribute("RelOverdrawWdXfrFee", Order=129, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelOverdrawWdXfrFee_2> RelOverdrawWdXfrFee
        {
            get
            {
                return _relOverdrawWdXfrFee;
            }
            set
            {
                _relOverdrawWdXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawWdXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawWdXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawWdXfrFee != null) 
                            && (this.RelOverdrawWdXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineMainRelOvlFee_2> _relOvlFee;
        
        [XmlElementAttribute("RelOvlFee", Order=130, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineMainRelOvlFee_2> RelOvlFee
        {
            get
            {
                return _relOvlFee;
            }
            set
            {
                _relOvlFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOvlFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOvlFeeSpecified
        {
            get
            {
                return ((this.RelOvlFee != null) 
                            && (this.RelOvlFee.Count != 0));
            }
        }
        
        [XmlElementAttribute("ReportTitle", Order=131, Form=XmlSchemaForm.Unqualified)]
        public string ReportTitle { get; set; }
        
        [XmlElementAttribute("SigAvailBalAuthExclList", Order=132, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap SigAvailBalAuthExclList { get; set; }
        
        [XmlElementAttribute("SigAvailBalPostExclList", Order=133, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap SigAvailBalPostExclList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigPreAuthGasHoldTime", Order=134, Form=XmlSchemaForm.Unqualified)]
        public short SigPreAuthGasHoldTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigPreAuthGasHoldTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigPreAuthGasHoldTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SigPreAuthGasHoldTime
        {
            get
            {
                if (this.SigPreAuthGasHoldTimeValueSpecified)
                {
                    return this.SigPreAuthGasHoldTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigPreAuthGasHoldTimeValue = value.GetValueOrDefault();
                this.SigPreAuthGasHoldTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigPreAuthGasHoldUnits", Order=135, Form=XmlSchemaForm.Unqualified)]
        public short SigPreAuthGasHoldUnitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigPreAuthGasHoldUnits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigPreAuthGasHoldUnitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SigPreAuthGasHoldUnits
        {
            get
            {
                if (this.SigPreAuthGasHoldUnitsValueSpecified)
                {
                    return this.SigPreAuthGasHoldUnitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigPreAuthGasHoldUnitsValue = value.GetValueOrDefault();
                this.SigPreAuthGasHoldUnitsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SigWarningCodeList", Order=136, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap SigWarningCodeList { get; set; }
        
        [XmlElementAttribute("UseFeeStatusfromAuth", Order=137, Form=XmlSchemaForm.Unqualified)]
        public string UseFeeStatusfromAuth { get; set; }
        
        [XmlElementAttribute("UseLowQualMatchFeeStatus", Order=138, Form=XmlSchemaForm.Unqualified)]
        public string UseLowQualMatchFeeStatus { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseNetworkPreAuthHoldTime", Order=139, Form=XmlSchemaForm.Unqualified)]
        public bool UseNetworkPreAuthHoldTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseNetworkPreAuthHoldTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseNetworkPreAuthHoldTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseNetworkPreAuthHoldTime
        {
            get
            {
                if (this.UseNetworkPreAuthHoldTimeValueSpecified)
                {
                    return this.UseNetworkPreAuthHoldTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseNetworkPreAuthHoldTimeValue = value.GetValueOrDefault();
                this.UseNetworkPreAuthHoldTimeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UsePostExclListonFinReq", Order=140, Form=XmlSchemaForm.Unqualified)]
        public string UsePostExclListonFinReq { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaMultiCrrncyIsaFeeGl", Order=141, Form=XmlSchemaForm.Unqualified)]
        public short VisaMultiCrrncyIsaFeeGlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaMultiCrrncyIsaFeeGl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaMultiCrrncyIsaFeeGlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> VisaMultiCrrncyIsaFeeGl
        {
            get
            {
                if (this.VisaMultiCrrncyIsaFeeGlValueSpecified)
                {
                    return this.VisaMultiCrrncyIsaFeeGlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaMultiCrrncyIsaFeeGlValue = value.GetValueOrDefault();
                this.VisaMultiCrrncyIsaFeeGlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaSglCrrncyIsaFeeGl", Order=142, Form=XmlSchemaForm.Unqualified)]
        public short VisaSglCrrncyIsaFeeGlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaSglCrrncyIsaFeeGl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaSglCrrncyIsaFeeGlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> VisaSglCrrncyIsaFeeGl
        {
            get
            {
                if (this.VisaSglCrrncyIsaFeeGlValueSpecified)
                {
                    return this.VisaSglCrrncyIsaFeeGlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaSglCrrncyIsaFeeGlValue = value.GetValueOrDefault();
                this.VisaSglCrrncyIsaFeeGlValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("WaiveFeeforAuthAdvice", Order=143, Form=XmlSchemaForm.Unqualified)]
        public string WaiveFeeforAuthAdvice { get; set; }
        
        [XmlElementAttribute("WaiveFeeonNoHoldMatch", Order=144, Form=XmlSchemaForm.Unqualified)]
        public string WaiveFeeonNoHoldMatch { get; set; }
        
        [XmlElementAttribute("WaiveFeeonNoHoldRecur", Order=145, Form=XmlSchemaForm.Unqualified)]
        public string WaiveFeeonNoHoldRecur { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdBelowAvailableOption", Order=146, Form=XmlSchemaForm.Unqualified)]
        public short WdBelowAvailableOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdBelowAvailableOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdBelowAvailableOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WdBelowAvailableOption
        {
            get
            {
                if (this.WdBelowAvailableOptionValueSpecified)
                {
                    return this.WdBelowAvailableOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdBelowAvailableOptionValue = value.GetValueOrDefault();
                this.WdBelowAvailableOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("WdWarningCodeList", Order=147, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap WdWarningCodeList { get; set; }
        
        [XmlElementAttribute("Version_1", Order=148, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=149)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
