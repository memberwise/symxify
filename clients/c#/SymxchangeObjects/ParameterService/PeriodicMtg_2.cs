//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("PeriodicMtg", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("PeriodicMtg", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(PeriodicMtgFields_2))]
    public partial class PeriodicMtg_2
    {
        
        [XmlElementAttribute("AmountDueNoteList", Order=0, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap AmountDueNoteList { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<PeriodicMtgCollateralCodeList_2> _collateralCodeList;
        
        [XmlElementAttribute("CollateralCodeList", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<PeriodicMtgCollateralCodeList_2> CollateralCodeList
        {
            get
            {
                return _collateralCodeList;
            }
            set
            {
                _collateralCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CollateralCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CollateralCodeListSpecified
        {
            get
            {
                return ((this.CollateralCodeList != null) 
                            && (this.CollateralCodeList.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PeriodicMtg_2" /> class.</para>
        /// </summary>
        public PeriodicMtg_2()
        {
            this._collateralCodeList = new Collection<PeriodicMtgCollateralCodeList_2>();
            this._loanPurposeList = new Collection<PeriodicMtgLoanPurposeList_2>();
            this._loanTypeList = new Collection<PeriodicMtgLoanTypeList_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlElementAttribute("DqNoticeNoteList", Order=2, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap DqNoticeNoteList { get; set; }
        
        [XmlElementAttribute("ExplAmtDueNoteList", Order=3, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ExplAmtDueNoteList { get; set; }
        
        [XmlElementAttribute("ForeclosureNoteList", Order=4, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ForeclosureNoteList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LateChargeWarningCode", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short LateChargeWarningCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LateChargeWarningCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LateChargeWarningCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LateChargeWarningCode
        {
            get
            {
                if (this.LateChargeWarningCodeValueSpecified)
                {
                    return this.LateChargeWarningCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LateChargeWarningCodeValue = value.GetValueOrDefault();
                this.LateChargeWarningCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanInfoNoteList", Order=6, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LoanInfoNoteList { get; set; }
        
        [XmlElementAttribute("LoanMsgsNoteList", Order=7, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LoanMsgsNoteList { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<PeriodicMtgLoanPurposeList_2> _loanPurposeList;
        
        [XmlElementAttribute("LoanPurposeList", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<PeriodicMtgLoanPurposeList_2> LoanPurposeList
        {
            get
            {
                return _loanPurposeList;
            }
            set
            {
                _loanPurposeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LoanPurposeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LoanPurposeListSpecified
        {
            get
            {
                return ((this.LoanPurposeList != null) 
                            && (this.LoanPurposeList.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<PeriodicMtgLoanTypeList_2> _loanTypeList;
        
        [XmlElementAttribute("LoanTypeList", Order=9, Form=XmlSchemaForm.Unqualified)]
        public Collection<PeriodicMtgLoanTypeList_2> LoanTypeList
        {
            get
            {
                return _loanTypeList;
            }
            set
            {
                _loanTypeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LoanTypeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LoanTypeListSpecified
        {
            get
            {
                return ((this.LoanTypeList != null) 
                            && (this.LoanTypeList.Count != 0));
            }
        }
        
        [XmlElementAttribute("LossMitNoteList", Order=10, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LossMitNoteList { get; set; }
        
        [XmlElementAttribute("PastPmtsNoteList", Order=11, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap PastPmtsNoteList { get; set; }
        
        [XmlElementAttribute("TransActNoteList", Order=12, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap TransActNoteList { get; set; }
        
        [XmlElementAttribute("Version_1", Order=13, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=14)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
