//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanAppDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LoanAppDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class LoanAppDefault
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AccountType", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short AccountTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccountType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AccountTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AccountType
        {
            get
            {
                if (this.AccountTypeValueSpecified)
                {
                    return this.AccountTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AccountTypeValue = value.GetValueOrDefault();
                this.AccountTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApplicationType", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short ApplicationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApplicationType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApplicationTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ApplicationType
        {
            get
            {
                if (this.ApplicationTypeValueSpecified)
                {
                    return this.ApplicationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApplicationTypeValue = value.GetValueOrDefault();
                this.ApplicationTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApplyAsBilled", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short ApplyAsBilledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApplyAsBilled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApplyAsBilledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ApplyAsBilled
        {
            get
            {
                if (this.ApplyAsBilledValueSpecified)
                {
                    return this.ApplyAsBilledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApplyAsBilledValue = value.GetValueOrDefault();
                this.ApplyAsBilledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApprovalCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short ApprovalCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApprovalCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApprovalCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ApprovalCode
        {
            get
            {
                if (this.ApprovalCodeValueSpecified)
                {
                    return this.ApprovalCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApprovalCodeValue = value.GetValueOrDefault();
                this.ApprovalCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingDefaultDays", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short BillingDefaultDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingDefaultDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingDefaultDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillingDefaultDays
        {
            get
            {
                if (this.BillingDefaultDaysValueSpecified)
                {
                    return this.BillingDefaultDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingDefaultDaysValue = value.GetValueOrDefault();
                this.BillingDefaultDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingMethod", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short BillingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillingMethod
        {
            get
            {
                if (this.BillingMethodValueSpecified)
                {
                    return this.BillingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingMethodValue = value.GetValueOrDefault();
                this.BillingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingNotice", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short BillingNoticeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingNotice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingNoticeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillingNotice
        {
            get
            {
                if (this.BillingNoticeValueSpecified)
                {
                    return this.BillingNoticeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingNoticeValue = value.GetValueOrDefault();
                this.BillingNoticeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingNoticeMin", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal BillingNoticeMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingNoticeMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingNoticeMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillingNoticeMin
        {
            get
            {
                if (this.BillingNoticeMinValueSpecified)
                {
                    return this.BillingNoticeMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingNoticeMinValue = value.GetValueOrDefault();
                this.BillingNoticeMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BtLimitMax", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal BtLimitMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BtLimitMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BtLimitMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BtLimitMax
        {
            get
            {
                if (this.BtLimitMaxValueSpecified)
                {
                    return this.BtLimitMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BtLimitMaxValue = value.GetValueOrDefault();
                this.BtLimitMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BtPercent", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal BtPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BtPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BtPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BtPercent
        {
            get
            {
                if (this.BtPercentValueSpecified)
                {
                    return this.BtPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BtPercentValue = value.GetValueOrDefault();
                this.BtPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CaLimitMax", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal CaLimitMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CaLimitMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CaLimitMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CaLimitMax
        {
            get
            {
                if (this.CaLimitMaxValueSpecified)
                {
                    return this.CaLimitMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CaLimitMaxValue = value.GetValueOrDefault();
                this.CaLimitMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CaPercent", Order=12, Form=XmlSchemaForm.Unqualified)]
        public decimal CaPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CaPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CaPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CaPercent
        {
            get
            {
                if (this.CaPercentValueSpecified)
                {
                    return this.CaPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CaPercentValue = value.GetValueOrDefault();
                this.CaPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollateralCode", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short CollateralCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollateralCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollateralCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CollateralCode
        {
            get
            {
                if (this.CollateralCodeValueSpecified)
                {
                    return this.CollateralCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollateralCodeValue = value.GetValueOrDefault();
                this.CollateralCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CombinedCaBtLimitMax", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal CombinedCaBtLimitMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CombinedCaBtLimitMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CombinedCaBtLimitMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CombinedCaBtLimitMax
        {
            get
            {
                if (this.CombinedCaBtLimitMaxValueSpecified)
                {
                    return this.CombinedCaBtLimitMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CombinedCaBtLimitMaxValue = value.GetValueOrDefault();
                this.CombinedCaBtLimitMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CombinedCaBtPercent", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal CombinedCaBtPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CombinedCaBtPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CombinedCaBtPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CombinedCaBtPercent
        {
            get
            {
                if (this.CombinedCaBtPercentValueSpecified)
                {
                    return this.CombinedCaBtPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CombinedCaBtPercentValue = value.GetValueOrDefault();
                this.CombinedCaBtPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ComboLnSegmentMax", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short ComboLnSegmentMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ComboLnSegmentMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ComboLnSegmentMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ComboLnSegmentMax
        {
            get
            {
                if (this.ComboLnSegmentMaxValueSpecified)
                {
                    return this.ComboLnSegmentMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ComboLnSegmentMaxValue = value.GetValueOrDefault();
                this.ComboLnSegmentMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ComboPmtOrderMeth", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short ComboPmtOrderMethValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ComboPmtOrderMeth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ComboPmtOrderMethValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ComboPmtOrderMeth
        {
            get
            {
                if (this.ComboPmtOrderMethValueSpecified)
                {
                    return this.ComboPmtOrderMethValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ComboPmtOrderMethValue = value.GetValueOrDefault();
                this.ComboPmtOrderMethValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ComboSeg0PmtOrder", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short ComboSeg0PmtOrderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ComboSeg0PmtOrder property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ComboSeg0PmtOrderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ComboSeg0PmtOrder
        {
            get
            {
                if (this.ComboSeg0PmtOrderValueSpecified)
                {
                    return this.ComboSeg0PmtOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ComboSeg0PmtOrderValue = value.GetValueOrDefault();
                this.ComboSeg0PmtOrderValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreationDate", Order=19, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CreationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CreationDate
        {
            get
            {
                if (this.CreationDateValueSpecified)
                {
                    return this.CreationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreationDateValue = value.GetValueOrDefault();
                this.CreationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditBureau", Order=20, Form=XmlSchemaForm.Unqualified)]
        public short CreditBureauValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditBureau property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditBureauValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditBureau
        {
            get
            {
                if (this.CreditBureauValueSpecified)
                {
                    return this.CreditBureauValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditBureauValue = value.GetValueOrDefault();
                this.CreditBureauValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditLimit", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal CreditLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CreditLimit
        {
            get
            {
                if (this.CreditLimitValueSpecified)
                {
                    return this.CreditLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditLimitValue = value.GetValueOrDefault();
                this.CreditLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditScoreType", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short CreditScoreTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditScoreType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditScoreTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditScoreType
        {
            get
            {
                if (this.CreditScoreTypeValueSpecified)
                {
                    return this.CreditScoreTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditScoreTypeValue = value.GetValueOrDefault();
                this.CreditScoreTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DealerCity", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string DealerCity { get; set; }
        
        [XmlElementAttribute("DealerCounty", Order=24, Form=XmlSchemaForm.Unqualified)]
        public string DealerCounty { get; set; }
        
        [XmlElementAttribute("DealerState", Order=25, Form=XmlSchemaForm.Unqualified)]
        public string DealerState { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppDefaultDebtRatioType> _debtRatioType;
        
        [XmlElementAttribute("DebtRatioType", Order=26, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppDefaultDebtRatioType> DebtRatioType
        {
            get
            {
                return _debtRatioType;
            }
            set
            {
                _debtRatioType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DebtRatioType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DebtRatioTypeSpecified
        {
            get
            {
                return ((this.DebtRatioType != null) 
                            && (this.DebtRatioType.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanAppDefault" /> class.</para>
        /// </summary>
        public LoanAppDefault()
        {
            this._debtRatioType = new Collection<LoanAppDefaultDebtRatioType>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DenialDate", Order=27, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DenialDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DenialDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DenialDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DenialDate
        {
            get
            {
                if (this.DenialDateValueSpecified)
                {
                    return this.DenialDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DenialDateValue = value.GetValueOrDefault();
                this.DenialDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DiscountRate", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal DiscountRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscountRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DiscountRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DiscountRate
        {
            get
            {
                if (this.DiscountRateValueSpecified)
                {
                    return this.DiscountRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DiscountRateValue = value.GetValueOrDefault();
                this.DiscountRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqCalculationMethod", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short DqCalculationMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqCalculationMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqCalculationMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqCalculationMethod
        {
            get
            {
                if (this.DqCalculationMethodValueSpecified)
                {
                    return this.DqCalculationMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqCalculationMethodValue = value.GetValueOrDefault();
                this.DqCalculationMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDateAdvanceCode", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short DueDateAdvanceCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDateAdvanceCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDateAdvanceCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDateAdvanceCode
        {
            get
            {
                if (this.DueDateAdvanceCodeValueSpecified)
                {
                    return this.DueDateAdvanceCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDateAdvanceCodeValue = value.GetValueOrDefault();
                this.DueDateAdvanceCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay1", Order=31, Form=XmlSchemaForm.Unqualified)]
        public short DueDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDay1
        {
            get
            {
                if (this.DueDay1ValueSpecified)
                {
                    return this.DueDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay1Value = value.GetValueOrDefault();
                this.DueDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay2", Order=32, Form=XmlSchemaForm.Unqualified)]
        public short DueDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDay2
        {
            get
            {
                if (this.DueDay2ValueSpecified)
                {
                    return this.DueDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay2Value = value.GetValueOrDefault();
                this.DueDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EcoaCode", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short EcoaCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EcoaCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EcoaCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EcoaCode
        {
            get
            {
                if (this.EcoaCodeValueSpecified)
                {
                    return this.EcoaCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EcoaCodeValue = value.GetValueOrDefault();
                this.EcoaCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveApr", Order=34, Form=XmlSchemaForm.Unqualified)]
        public decimal EffectiveAprValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveApr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveAprValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EffectiveApr
        {
            get
            {
                if (this.EffectiveAprValueSpecified)
                {
                    return this.EffectiveAprValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveAprValue = value.GetValueOrDefault();
                this.EffectiveAprValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=35, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExceedLevelPmtAmt", Order=36, Form=XmlSchemaForm.Unqualified)]
        public short ExceedLevelPmtAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExceedLevelPmtAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExceedLevelPmtAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExceedLevelPmtAmt
        {
            get
            {
                if (this.ExceedLevelPmtAmtValueSpecified)
                {
                    return this.ExceedLevelPmtAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExceedLevelPmtAmtValue = value.GetValueOrDefault();
                this.ExceedLevelPmtAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=37, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Fasb91Code", Order=38, Form=XmlSchemaForm.Unqualified)]
        public short Fasb91CodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Fasb91Code property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Fasb91CodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Fasb91Code
        {
            get
            {
                if (this.Fasb91CodeValueSpecified)
                {
                    return this.Fasb91CodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Fasb91CodeValue = value.GetValueOrDefault();
                this.Fasb91CodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedDealerCityTaxRate", Order=39, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedDealerCityTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedDealerCityTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedDealerCityTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedDealerCityTaxRate
        {
            get
            {
                if (this.FixedDealerCityTaxRateValueSpecified)
                {
                    return this.FixedDealerCityTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedDealerCityTaxRateValue = value.GetValueOrDefault();
                this.FixedDealerCityTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedDealerCountyTaxRate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedDealerCountyTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedDealerCountyTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedDealerCountyTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedDealerCountyTaxRate
        {
            get
            {
                if (this.FixedDealerCountyTaxRateValueSpecified)
                {
                    return this.FixedDealerCountyTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedDealerCountyTaxRateValue = value.GetValueOrDefault();
                this.FixedDealerCountyTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedDealerStateTaxRate", Order=41, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedDealerStateTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedDealerStateTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedDealerStateTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedDealerStateTaxRate
        {
            get
            {
                if (this.FixedDealerStateTaxRateValueSpecified)
                {
                    return this.FixedDealerStateTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedDealerStateTaxRateValue = value.GetValueOrDefault();
                this.FixedDealerStateTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedLesseeCityTaxRate", Order=42, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedLesseeCityTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedLesseeCityTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedLesseeCityTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedLesseeCityTaxRate
        {
            get
            {
                if (this.FixedLesseeCityTaxRateValueSpecified)
                {
                    return this.FixedLesseeCityTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedLesseeCityTaxRateValue = value.GetValueOrDefault();
                this.FixedLesseeCityTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedLesseeCountyTaxRate", Order=43, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedLesseeCountyTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedLesseeCountyTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedLesseeCountyTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedLesseeCountyTaxRate
        {
            get
            {
                if (this.FixedLesseeCountyTaxRateValueSpecified)
                {
                    return this.FixedLesseeCountyTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedLesseeCountyTaxRateValue = value.GetValueOrDefault();
                this.FixedLesseeCountyTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedLesseeStateTaxRate", Order=44, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedLesseeStateTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedLesseeStateTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedLesseeStateTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedLesseeStateTaxRate
        {
            get
            {
                if (this.FixedLesseeStateTaxRateValueSpecified)
                {
                    return this.FixedLesseeStateTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedLesseeStateTaxRateValue = value.GetValueOrDefault();
                this.FixedLesseeStateTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FormType", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short FormTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FormType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FormTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FormType
        {
            get
            {
                if (this.FormTypeValueSpecified)
                {
                    return this.FormTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FormTypeValue = value.GetValueOrDefault();
                this.FormTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InitialBcdSettingOption", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short InitialBcdSettingOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InitialBcdSettingOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InitialBcdSettingOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InitialBcdSettingOption
        {
            get
            {
                if (this.InitialBcdSettingOptionValueSpecified)
                {
                    return this.InitialBcdSettingOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InitialBcdSettingOptionValue = value.GetValueOrDefault();
                this.InitialBcdSettingOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsurabilityCode", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short InsurabilityCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsurabilityCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsurabilityCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InsurabilityCode
        {
            get
            {
                if (this.InsurabilityCodeValueSpecified)
                {
                    return this.InsurabilityCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsurabilityCodeValue = value.GetValueOrDefault();
                this.InsurabilityCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Insurance1Chosen", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short Insurance1ChosenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Insurance1Chosen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Insurance1ChosenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Insurance1Chosen
        {
            get
            {
                if (this.Insurance1ChosenValueSpecified)
                {
                    return this.Insurance1ChosenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Insurance1ChosenValue = value.GetValueOrDefault();
                this.Insurance1ChosenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Insurance2Chosen", Order=49, Form=XmlSchemaForm.Unqualified)]
        public short Insurance2ChosenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Insurance2Chosen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Insurance2ChosenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Insurance2Chosen
        {
            get
            {
                if (this.Insurance2ChosenValueSpecified)
                {
                    return this.Insurance2ChosenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Insurance2ChosenValue = value.GetValueOrDefault();
                this.Insurance2ChosenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Insurance3Chosen", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short Insurance3ChosenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Insurance3Chosen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Insurance3ChosenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Insurance3Chosen
        {
            get
            {
                if (this.Insurance3ChosenValueSpecified)
                {
                    return this.Insurance3ChosenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Insurance3ChosenValue = value.GetValueOrDefault();
                this.Insurance3ChosenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceMax", Order=51, Form=XmlSchemaForm.Unqualified)]
        public decimal InsuranceMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InsuranceMax
        {
            get
            {
                if (this.InsuranceMaxValueSpecified)
                {
                    return this.InsuranceMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceMaxValue = value.GetValueOrDefault();
                this.InsuranceMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceType", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short InsuranceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InsuranceType
        {
            get
            {
                if (this.InsuranceTypeValueSpecified)
                {
                    return this.InsuranceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceTypeValue = value.GetValueOrDefault();
                this.InsuranceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRate", Order=53, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InterestRate
        {
            get
            {
                if (this.InterestRateValueSpecified)
                {
                    return this.InterestRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateValue = value.GetValueOrDefault();
                this.InterestRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestType", Order=54, Form=XmlSchemaForm.Unqualified)]
        public short InterestTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InterestType
        {
            get
            {
                if (this.InterestTypeValueSpecified)
                {
                    return this.InterestTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestTypeValue = value.GetValueOrDefault();
                this.InterestTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseDispositionDate", Order=55, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LeaseDispositionDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseDispositionDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseDispositionDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LeaseDispositionDate
        {
            get
            {
                if (this.LeaseDispositionDateValueSpecified)
                {
                    return this.LeaseDispositionDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseDispositionDateValue = value.GetValueOrDefault();
                this.LeaseDispositionDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseDispositionFee", Order=56, Form=XmlSchemaForm.Unqualified)]
        public decimal LeaseDispositionFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseDispositionFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseDispositionFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LeaseDispositionFee
        {
            get
            {
                if (this.LeaseDispositionFeeValueSpecified)
                {
                    return this.LeaseDispositionFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseDispositionFeeValue = value.GetValueOrDefault();
                this.LeaseDispositionFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseTerminateDate", Order=57, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LeaseTerminateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseTerminateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseTerminateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LeaseTerminateDate
        {
            get
            {
                if (this.LeaseTerminateDateValueSpecified)
                {
                    return this.LeaseTerminateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseTerminateDateValue = value.GetValueOrDefault();
                this.LeaseTerminateDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseTerminateFee", Order=58, Form=XmlSchemaForm.Unqualified)]
        public decimal LeaseTerminateFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseTerminateFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseTerminateFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LeaseTerminateFee
        {
            get
            {
                if (this.LeaseTerminateFeeValueSpecified)
                {
                    return this.LeaseTerminateFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseTerminateFeeValue = value.GetValueOrDefault();
                this.LeaseTerminateFeeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LesseeCity", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string LesseeCity { get; set; }
        
        [XmlElementAttribute("LesseeCounty", Order=60, Form=XmlSchemaForm.Unqualified)]
        public string LesseeCounty { get; set; }
        
        [XmlElementAttribute("LesseeState", Order=61, Form=XmlSchemaForm.Unqualified)]
        public string LesseeState { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPaymentAmt", Order=62, Form=XmlSchemaForm.Unqualified)]
        public decimal LevelPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LevelPaymentAmt
        {
            get
            {
                if (this.LevelPaymentAmtValueSpecified)
                {
                    return this.LevelPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPaymentAmtValue = value.GetValueOrDefault();
                this.LevelPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPrincipalAmt", Order=63, Form=XmlSchemaForm.Unqualified)]
        public decimal LevelPrincipalAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPrincipalAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPrincipalAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LevelPrincipalAmt
        {
            get
            {
                if (this.LevelPrincipalAmtValueSpecified)
                {
                    return this.LevelPrincipalAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPrincipalAmtValue = value.GetValueOrDefault();
                this.LevelPrincipalAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitExpirationDate", Order=64, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LimitExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LimitExpirationDate
        {
            get
            {
                if (this.LimitExpirationDateValueSpecified)
                {
                    return this.LimitExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitExpirationDateValue = value.GetValueOrDefault();
                this.LimitExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCode", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short LoanCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LoanCode
        {
            get
            {
                if (this.LoanCodeValueSpecified)
                {
                    return this.LoanCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCodeValue = value.GetValueOrDefault();
                this.LoanCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanDescription", Order=66, Form=XmlSchemaForm.Unqualified)]
        public string LoanDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanType", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short LoanTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LoanType
        {
            get
            {
                if (this.LoanTypeValueSpecified)
                {
                    return this.LoanTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanTypeValue = value.GetValueOrDefault();
                this.LoanTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxDueDateAdvancePeriod", Order=68, Form=XmlSchemaForm.Unqualified)]
        public short MaxDueDateAdvancePeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxDueDateAdvancePeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxDueDateAdvancePeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxDueDateAdvancePeriod
        {
            get
            {
                if (this.MaxDueDateAdvancePeriodValueSpecified)
                {
                    return this.MaxDueDateAdvancePeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxDueDateAdvancePeriodValue = value.GetValueOrDefault();
                this.MaxDueDateAdvancePeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumPayment", Order=69, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumPayment
        {
            get
            {
                if (this.MinimumPaymentValueSpecified)
                {
                    return this.MinimumPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumPaymentValue = value.GetValueOrDefault();
                this.MinimumPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewSegCutoffDays", Order=70, Form=XmlSchemaForm.Unqualified)]
        public short NewSegCutoffDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewSegCutoffDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewSegCutoffDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewSegCutoffDays
        {
            get
            {
                if (this.NewSegCutoffDaysValueSpecified)
                {
                    return this.NewSegCutoffDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewSegCutoffDaysValue = value.GetValueOrDefault();
                this.NewSegCutoffDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewSegCutoffOption", Order=71, Form=XmlSchemaForm.Unqualified)]
        public short NewSegCutoffOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewSegCutoffOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewSegCutoffOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewSegCutoffOption
        {
            get
            {
                if (this.NewSegCutoffOptionValueSpecified)
                {
                    return this.NewSegCutoffOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewSegCutoffOptionValue = value.GetValueOrDefault();
                this.NewSegCutoffOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalRate", Order=72, Form=XmlSchemaForm.Unqualified)]
        public decimal OriginalRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OriginalRate
        {
            get
            {
                if (this.OriginalRateValueSpecified)
                {
                    return this.OriginalRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalRateValue = value.GetValueOrDefault();
                this.OriginalRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlAuthFee", Order=73, Form=XmlSchemaForm.Unqualified)]
        public short OvlAuthFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlAuthFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlAuthFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OvlAuthFee
        {
            get
            {
                if (this.OvlAuthFeeValueSpecified)
                {
                    return this.OvlAuthFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlAuthFeeValue = value.GetValueOrDefault();
                this.OvlAuthFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlOptIn", Order=74, Form=XmlSchemaForm.Unqualified)]
        public short OvlOptInValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlOptIn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlOptInValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OvlOptIn
        {
            get
            {
                if (this.OvlOptInValueSpecified)
                {
                    return this.OvlOptInValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlOptInValue = value.GetValueOrDefault();
                this.OvlOptInValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalcType", Order=75, Form=XmlSchemaForm.Unqualified)]
        public short PaymentCalcTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalcType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalcTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentCalcType
        {
            get
            {
                if (this.PaymentCalcTypeValueSpecified)
                {
                    return this.PaymentCalcTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalcTypeValue = value.GetValueOrDefault();
                this.PaymentCalcTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentFrequency", Order=76, Form=XmlSchemaForm.Unqualified)]
        public short PaymentFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentFrequency
        {
            get
            {
                if (this.PaymentFrequencyValueSpecified)
                {
                    return this.PaymentFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentFrequencyValue = value.GetValueOrDefault();
                this.PaymentFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentMethod", Order=77, Form=XmlSchemaForm.Unqualified)]
        public short PaymentMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentMethod
        {
            get
            {
                if (this.PaymentMethodValueSpecified)
                {
                    return this.PaymentMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentMethodValue = value.GetValueOrDefault();
                this.PaymentMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentSkipStartDay", Order=78, Form=XmlSchemaForm.Unqualified)]
        public short PaymentSkipStartDayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentSkipStartDay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentSkipStartDayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentSkipStartDay
        {
            get
            {
                if (this.PaymentSkipStartDayValueSpecified)
                {
                    return this.PaymentSkipStartDayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentSkipStartDayValue = value.GetValueOrDefault();
                this.PaymentSkipStartDayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentSkips", Order=79, Form=XmlSchemaForm.Unqualified)]
        public short PaymentSkipsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentSkips property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentSkipsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentSkips
        {
            get
            {
                if (this.PaymentSkipsValueSpecified)
                {
                    return this.PaymentSkipsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentSkipsValue = value.GetValueOrDefault();
                this.PaymentSkipsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentType", Order=80, Form=XmlSchemaForm.Unqualified)]
        public short PaymentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentType
        {
            get
            {
                if (this.PaymentTypeValueSpecified)
                {
                    return this.PaymentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentTypeValue = value.GetValueOrDefault();
                this.PaymentTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PercentPrincipal", Order=81, Form=XmlSchemaForm.Unqualified)]
        public decimal PercentPrincipalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PercentPrincipal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PercentPrincipalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PercentPrincipal
        {
            get
            {
                if (this.PercentPrincipalValueSpecified)
                {
                    return this.PercentPrincipalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PercentPrincipalValue = value.GetValueOrDefault();
                this.PercentPrincipalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PropertyAddressType", Order=82, Form=XmlSchemaForm.Unqualified)]
        public short PropertyAddressTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PropertyAddressType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PropertyAddressTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PropertyAddressType
        {
            get
            {
                if (this.PropertyAddressTypeValueSpecified)
                {
                    return this.PropertyAddressTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PropertyAddressTypeValue = value.GetValueOrDefault();
                this.PropertyAddressTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PurposeCode", Order=83, Form=XmlSchemaForm.Unqualified)]
        public short PurposeCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PurposeCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PurposeCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PurposeCode
        {
            get
            {
                if (this.PurposeCodeValueSpecified)
                {
                    return this.PurposeCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PurposeCodeValue = value.GetValueOrDefault();
                this.PurposeCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("QueuePriority", Order=84, Form=XmlSchemaForm.Unqualified)]
        public short QueuePriorityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the QueuePriority property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QueuePriorityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> QueuePriority
        {
            get
            {
                if (this.QueuePriorityValueSpecified)
                {
                    return this.QueuePriorityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QueuePriorityValue = value.GetValueOrDefault();
                this.QueuePriorityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RiskRate", Order=85, Form=XmlSchemaForm.Unqualified)]
        public decimal RiskRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RiskRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RiskRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RiskRate
        {
            get
            {
                if (this.RiskRateValueSpecified)
                {
                    return this.RiskRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RiskRateValue = value.GetValueOrDefault();
                this.RiskRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxCityIndicator", Order=86, Form=XmlSchemaForm.Unqualified)]
        public short SalesTaxCityIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxCityIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxCityIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SalesTaxCityIndicator
        {
            get
            {
                if (this.SalesTaxCityIndicatorValueSpecified)
                {
                    return this.SalesTaxCityIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxCityIndicatorValue = value.GetValueOrDefault();
                this.SalesTaxCityIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxCountyIndicator", Order=87, Form=XmlSchemaForm.Unqualified)]
        public short SalesTaxCountyIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxCountyIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxCountyIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SalesTaxCountyIndicator
        {
            get
            {
                if (this.SalesTaxCountyIndicatorValueSpecified)
                {
                    return this.SalesTaxCountyIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxCountyIndicatorValue = value.GetValueOrDefault();
                this.SalesTaxCountyIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxStateIndicator", Order=88, Form=XmlSchemaForm.Unqualified)]
        public short SalesTaxStateIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxStateIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxStateIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SalesTaxStateIndicator
        {
            get
            {
                if (this.SalesTaxStateIndicatorValueSpecified)
                {
                    return this.SalesTaxStateIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxStateIndicatorValue = value.GetValueOrDefault();
                this.SalesTaxStateIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecuredCode", Order=89, Form=XmlSchemaForm.Unqualified)]
        public short SecuredCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecuredCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecuredCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SecuredCode
        {
            get
            {
                if (this.SecuredCodeValueSpecified)
                {
                    return this.SecuredCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecuredCodeValue = value.GetValueOrDefault();
                this.SecuredCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Seg0Description", Order=90, Form=XmlSchemaForm.Unqualified)]
        public string Seg0Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Seg0PaymentOrder", Order=91, Form=XmlSchemaForm.Unqualified)]
        public short Seg0PaymentOrderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Seg0PaymentOrder property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Seg0PaymentOrderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Seg0PaymentOrder
        {
            get
            {
                if (this.Seg0PaymentOrderValueSpecified)
                {
                    return this.Seg0PaymentOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Seg0PaymentOrderValue = value.GetValueOrDefault();
                this.Seg0PaymentOrderValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubType", Order=92, Form=XmlSchemaForm.Unqualified)]
        public short SubTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SubType
        {
            get
            {
                if (this.SubTypeValueSpecified)
                {
                    return this.SubTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubTypeValue = value.GetValueOrDefault();
                this.SubTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermMonths", Order=93, Form=XmlSchemaForm.Unqualified)]
        public short TermMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermMonths
        {
            get
            {
                if (this.TermMonthsValueSpecified)
                {
                    return this.TermMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermMonthsValue = value.GetValueOrDefault();
                this.TermMonthsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=94, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnamortizedFees", Order=95, Form=XmlSchemaForm.Unqualified)]
        public decimal UnamortizedFeesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnamortizedFees property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnamortizedFeesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnamortizedFees
        {
            get
            {
                if (this.UnamortizedFeesValueSpecified)
                {
                    return this.UnamortizedFeesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnamortizedFeesValue = value.GetValueOrDefault();
                this.UnamortizedFeesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=96, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount10", Order=97, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount10Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount10 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount10ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount10
        {
            get
            {
                if (this.UserAmount10ValueSpecified)
                {
                    return this.UserAmount10Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount10Value = value.GetValueOrDefault();
                this.UserAmount10ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=98, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount3", Order=99, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount3
        {
            get
            {
                if (this.UserAmount3ValueSpecified)
                {
                    return this.UserAmount3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount3Value = value.GetValueOrDefault();
                this.UserAmount3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount4", Order=100, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount4
        {
            get
            {
                if (this.UserAmount4ValueSpecified)
                {
                    return this.UserAmount4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount4Value = value.GetValueOrDefault();
                this.UserAmount4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount5", Order=101, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount5Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount5 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount5ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount5
        {
            get
            {
                if (this.UserAmount5ValueSpecified)
                {
                    return this.UserAmount5Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount5Value = value.GetValueOrDefault();
                this.UserAmount5ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount6", Order=102, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount6Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount6 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount6ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount6
        {
            get
            {
                if (this.UserAmount6ValueSpecified)
                {
                    return this.UserAmount6Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount6Value = value.GetValueOrDefault();
                this.UserAmount6ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount7", Order=103, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount7Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount7 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount7ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount7
        {
            get
            {
                if (this.UserAmount7ValueSpecified)
                {
                    return this.UserAmount7Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount7Value = value.GetValueOrDefault();
                this.UserAmount7ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount8", Order=104, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount8Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount8 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount8ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount8
        {
            get
            {
                if (this.UserAmount8ValueSpecified)
                {
                    return this.UserAmount8Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount8Value = value.GetValueOrDefault();
                this.UserAmount8ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount9", Order=105, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount9Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount9 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount9ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount9
        {
            get
            {
                if (this.UserAmount9ValueSpecified)
                {
                    return this.UserAmount9Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount9Value = value.GetValueOrDefault();
                this.UserAmount9ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=106, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=107, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=108, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=109, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode1", Order=110, Form=XmlSchemaForm.Unqualified)]
        public short UserCode1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode1
        {
            get
            {
                if (this.UserCode1ValueSpecified)
                {
                    return this.UserCode1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode1Value = value.GetValueOrDefault();
                this.UserCode1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode10", Order=111, Form=XmlSchemaForm.Unqualified)]
        public short UserCode10Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode10 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode10ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode10
        {
            get
            {
                if (this.UserCode10ValueSpecified)
                {
                    return this.UserCode10Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode10Value = value.GetValueOrDefault();
                this.UserCode10ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode2", Order=112, Form=XmlSchemaForm.Unqualified)]
        public short UserCode2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode2
        {
            get
            {
                if (this.UserCode2ValueSpecified)
                {
                    return this.UserCode2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode2Value = value.GetValueOrDefault();
                this.UserCode2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode3", Order=113, Form=XmlSchemaForm.Unqualified)]
        public short UserCode3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode3
        {
            get
            {
                if (this.UserCode3ValueSpecified)
                {
                    return this.UserCode3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode3Value = value.GetValueOrDefault();
                this.UserCode3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode4", Order=114, Form=XmlSchemaForm.Unqualified)]
        public short UserCode4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode4
        {
            get
            {
                if (this.UserCode4ValueSpecified)
                {
                    return this.UserCode4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode4Value = value.GetValueOrDefault();
                this.UserCode4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode5", Order=115, Form=XmlSchemaForm.Unqualified)]
        public short UserCode5Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode5 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode5ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode5
        {
            get
            {
                if (this.UserCode5ValueSpecified)
                {
                    return this.UserCode5Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode5Value = value.GetValueOrDefault();
                this.UserCode5ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode6", Order=116, Form=XmlSchemaForm.Unqualified)]
        public short UserCode6Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode6 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode6ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode6
        {
            get
            {
                if (this.UserCode6ValueSpecified)
                {
                    return this.UserCode6Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode6Value = value.GetValueOrDefault();
                this.UserCode6ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode7", Order=117, Form=XmlSchemaForm.Unqualified)]
        public short UserCode7Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode7 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode7ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode7
        {
            get
            {
                if (this.UserCode7ValueSpecified)
                {
                    return this.UserCode7Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode7Value = value.GetValueOrDefault();
                this.UserCode7ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode8", Order=118, Form=XmlSchemaForm.Unqualified)]
        public short UserCode8Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode8 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode8ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode8
        {
            get
            {
                if (this.UserCode8ValueSpecified)
                {
                    return this.UserCode8Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode8Value = value.GetValueOrDefault();
                this.UserCode8ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode9", Order=119, Form=XmlSchemaForm.Unqualified)]
        public short UserCode9Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode9 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode9ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode9
        {
            get
            {
                if (this.UserCode9ValueSpecified)
                {
                    return this.UserCode9Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode9Value = value.GetValueOrDefault();
                this.UserCode9ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=120, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate10", Order=121, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate10Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate10 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate10ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate10
        {
            get
            {
                if (this.UserDate10ValueSpecified)
                {
                    return this.UserDate10Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate10Value = value.GetValueOrDefault();
                this.UserDate10ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=122, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate3", Order=123, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate3
        {
            get
            {
                if (this.UserDate3ValueSpecified)
                {
                    return this.UserDate3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate3Value = value.GetValueOrDefault();
                this.UserDate3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate4", Order=124, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate4
        {
            get
            {
                if (this.UserDate4ValueSpecified)
                {
                    return this.UserDate4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate4Value = value.GetValueOrDefault();
                this.UserDate4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate5", Order=125, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate5Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate5 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate5ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate5
        {
            get
            {
                if (this.UserDate5ValueSpecified)
                {
                    return this.UserDate5Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate5Value = value.GetValueOrDefault();
                this.UserDate5ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate6", Order=126, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate6Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate6 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate6ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate6
        {
            get
            {
                if (this.UserDate6ValueSpecified)
                {
                    return this.UserDate6Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate6Value = value.GetValueOrDefault();
                this.UserDate6ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate7", Order=127, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate7Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate7 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate7ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate7
        {
            get
            {
                if (this.UserDate7ValueSpecified)
                {
                    return this.UserDate7Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate7Value = value.GetValueOrDefault();
                this.UserDate7ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate8", Order=128, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate8Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate8 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate8ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate8
        {
            get
            {
                if (this.UserDate8ValueSpecified)
                {
                    return this.UserDate8Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate8Value = value.GetValueOrDefault();
                this.UserDate8ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate9", Order=129, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate9Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate9 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate9ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate9
        {
            get
            {
                if (this.UserDate9ValueSpecified)
                {
                    return this.UserDate9Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate9Value = value.GetValueOrDefault();
                this.UserDate9ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber1", Order=130, Form=XmlSchemaForm.Unqualified)]
        public int UserNumber1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumber1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> UserNumber1
        {
            get
            {
                if (this.UserNumber1ValueSpecified)
                {
                    return this.UserNumber1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumber1Value = value.GetValueOrDefault();
                this.UserNumber1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber2", Order=131, Form=XmlSchemaForm.Unqualified)]
        public int UserNumber2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumber2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> UserNumber2
        {
            get
            {
                if (this.UserNumber2ValueSpecified)
                {
                    return this.UserNumber2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumber2Value = value.GetValueOrDefault();
                this.UserNumber2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserRate1", Order=132, Form=XmlSchemaForm.Unqualified)]
        public decimal UserRate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserRate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserRate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserRate1
        {
            get
            {
                if (this.UserRate1ValueSpecified)
                {
                    return this.UserRate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserRate1Value = value.GetValueOrDefault();
                this.UserRate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserRate2", Order=133, Form=XmlSchemaForm.Unqualified)]
        public decimal UserRate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserRate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserRate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserRate2
        {
            get
            {
                if (this.UserRate2ValueSpecified)
                {
                    return this.UserRate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserRate2Value = value.GetValueOrDefault();
                this.UserRate2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=134, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=135)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
