//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CheckOrderDefaultFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CheckOrderDefaultFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class CheckOrderDefaultFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Accent", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AccentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AccentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Accent
        {
            get
            {
                if (this.AccentValueSpecified)
                {
                    return this.AccentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AccentValue = value.GetValueOrDefault();
                this.AccentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcctAddrInkColor", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AcctAddrInkColorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcctAddrInkColor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcctAddrInkColorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcctAddrInkColor
        {
            get
            {
                if (this.AcctAddrInkColorValueSpecified)
                {
                    return this.AcctAddrInkColorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcctAddrInkColorValue = value.GetValueOrDefault();
                this.AcctAddrInkColorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingCode", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BillingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingCode
        {
            get
            {
                if (this.BillingCodeValueSpecified)
                {
                    return this.BillingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingCodeValue = value.GetValueOrDefault();
                this.BillingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusBindingStyle", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool BusBindingStyleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusBindingStyle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusBindingStyleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusBindingStyle
        {
            get
            {
                if (this.BusBindingStyleValueSpecified)
                {
                    return this.BusBindingStyleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusBindingStyleValue = value.GetValueOrDefault();
                this.BusBindingStyleValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _busCaptions;
        
        [XmlElementAttribute("BusCaptions", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> BusCaptions
        {
            get
            {
                return _busCaptions;
            }
            set
            {
                _busCaptions = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BusCaptions collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BusCaptionsSpecified
        {
            get
            {
                return ((this.BusCaptions != null) 
                            && (this.BusCaptions.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CheckOrderDefaultFields" /> class.</para>
        /// </summary>
        public CheckOrderDefaultFields()
        {
            this._busCaptions = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusNumCopies", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool BusNumCopiesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusNumCopies property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusNumCopiesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusNumCopies
        {
            get
            {
                if (this.BusNumCopiesValueSpecified)
                {
                    return this.BusNumCopiesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusNumCopiesValue = value.GetValueOrDefault();
                this.BusNumCopiesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusVoucherNumber", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool BusVoucherNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusVoucherNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusVoucherNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusVoucherNumber
        {
            get
            {
                if (this.BusVoucherNumberValueSpecified)
                {
                    return this.BusVoucherNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusVoucherNumberValue = value.GetValueOrDefault();
                this.BusVoucherNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusinessSerial", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool BusinessSerialValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusinessSerial property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusinessSerialValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusinessSerial
        {
            get
            {
                if (this.BusinessSerialValueSpecified)
                {
                    return this.BusinessSerialValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusinessSerialValue = value.GetValueOrDefault();
                this.BusinessSerialValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeShipping", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool ChargeShippingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeShipping property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeShippingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargeShipping
        {
            get
            {
                if (this.ChargeShippingValueSpecified)
                {
                    return this.ChargeShippingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeShippingValue = value.GetValueOrDefault();
                this.ChargeShippingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckOrderProcessor", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool CheckOrderProcessorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckOrderProcessor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckOrderProcessorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckOrderProcessor
        {
            get
            {
                if (this.CheckOrderProcessorValueSpecified)
                {
                    return this.CheckOrderProcessorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckOrderProcessorValue = value.GetValueOrDefault();
                this.CheckOrderProcessorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckStyle", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool CheckStyleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckStyle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckStyleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckStyle
        {
            get
            {
                if (this.CheckStyleValueSpecified)
                {
                    return this.CheckStyleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckStyleValue = value.GetValueOrDefault();
                this.CheckStyleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckType", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool CheckTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckType
        {
            get
            {
                if (this.CheckTypeValueSpecified)
                {
                    return this.CheckTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckTypeValue = value.GetValueOrDefault();
                this.CheckTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CoverStyle", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool CoverStyleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoverStyle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CoverStyleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CoverStyle
        {
            get
            {
                if (this.CoverStyleValueSpecified)
                {
                    return this.CoverStyleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CoverStyleValue = value.GetValueOrDefault();
                this.CoverStyleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CutInkColor", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool CutInkColorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CutInkColor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CutInkColorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CutInkColor
        {
            get
            {
                if (this.CutInkColorValueSpecified)
                {
                    return this.CutInkColorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CutInkColorValue = value.GetValueOrDefault();
                this.CutInkColorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CutNumber", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool CutNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CutNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CutNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CutNumber
        {
            get
            {
                if (this.CutNumberValueSpecified)
                {
                    return this.CutNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CutNumberValue = value.GetValueOrDefault();
                this.CutNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintFont", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintFontValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintFont property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintFontValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintFont
        {
            get
            {
                if (this.ImprintFontValueSpecified)
                {
                    return this.ImprintFontValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintFontValue = value.GetValueOrDefault();
                this.ImprintFontValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintJustify", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintJustifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintJustify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintJustifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintJustify
        {
            get
            {
                if (this.ImprintJustifyValueSpecified)
                {
                    return this.ImprintJustifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintJustifyValue = value.GetValueOrDefault();
                this.ImprintJustifyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastOrderDate", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool LastOrderDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastOrderDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastOrderDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastOrderDate
        {
            get
            {
                if (this.LastOrderDateValueSpecified)
                {
                    return this.LastOrderDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastOrderDateValue = value.GetValueOrDefault();
                this.LastOrderDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NumberSigLines", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool NumberSigLinesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberSigLines property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberSigLinesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NumberSigLines
        {
            get
            {
                if (this.NumberSigLinesValueSpecified)
                {
                    return this.NumberSigLinesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberSigLinesValue = value.GetValueOrDefault();
                this.NumberSigLinesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverSigFont", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool OverSigFontValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverSigFont property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverSigFontValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverSigFont
        {
            get
            {
                if (this.OverSigFontValueSpecified)
                {
                    return this.OverSigFontValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverSigFontValue = value.GetValueOrDefault();
                this.OverSigFontValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverSigJustify", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool OverSigJustifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverSigJustify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverSigJustifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverSigJustify
        {
            get
            {
                if (this.OverSigJustifyValueSpecified)
                {
                    return this.OverSigJustifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverSigJustifyValue = value.GetValueOrDefault();
                this.OverSigJustifyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Phantom", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool PhantomValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Phantom property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PhantomValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Phantom
        {
            get
            {
                if (this.PhantomValueSpecified)
                {
                    return this.PhantomValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhantomValue = value.GetValueOrDefault();
                this.PhantomValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PoNumber", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool PoNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PoNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PoNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PoNumber
        {
            get
            {
                if (this.PoNumberValueSpecified)
                {
                    return this.PoNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PoNumberValue = value.GetValueOrDefault();
                this.PoNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Processor", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool ProcessorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Processor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProcessorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Processor
        {
            get
            {
                if (this.ProcessorValueSpecified)
                {
                    return this.ProcessorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProcessorValue = value.GetValueOrDefault();
                this.ProcessorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PromoNumber", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool PromoNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PromoNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PromoNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PromoNumber
        {
            get
            {
                if (this.PromoNumberValueSpecified)
                {
                    return this.PromoNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PromoNumberValue = value.GetValueOrDefault();
                this.PromoNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Quantity", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool QuantityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Quantity property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QuantityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Quantity
        {
            get
            {
                if (this.QuantityValueSpecified)
                {
                    return this.QuantityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QuantityValue = value.GetValueOrDefault();
                this.QuantityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RerunReason", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool RerunReasonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RerunReason property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RerunReasonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RerunReason
        {
            get
            {
                if (this.RerunReasonValueSpecified)
                {
                    return this.RerunReasonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RerunReasonValue = value.GetValueOrDefault();
                this.RerunReasonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShipMethod", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool ShipMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShipMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShipMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShipMethod
        {
            get
            {
                if (this.ShipMethodValueSpecified)
                {
                    return this.ShipMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShipMethodValue = value.GetValueOrDefault();
                this.ShipMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShipTo", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool ShipToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShipTo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShipToValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShipTo
        {
            get
            {
                if (this.ShipToValueSpecified)
                {
                    return this.ShipToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShipToValue = value.GetValueOrDefault();
                this.ShipToValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigFigure", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool SigFigureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigFigure property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigFigureValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigFigure
        {
            get
            {
                if (this.SigFigureValueSpecified)
                {
                    return this.SigFigureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigFigureValue = value.GetValueOrDefault();
                this.SigFigureValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StartNumber", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool StartNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StartNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StartNumber
        {
            get
            {
                if (this.StartNumberValueSpecified)
                {
                    return this.StartNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StartNumberValue = value.GetValueOrDefault();
                this.StartNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TaxExemptCode", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool TaxExemptCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TaxExemptCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TaxExemptCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TaxExemptCode
        {
            get
            {
                if (this.TaxExemptCodeValueSpecified)
                {
                    return this.TaxExemptCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TaxExemptCodeValue = value.GetValueOrDefault();
                this.TaxExemptCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TitleInkColor", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool TitleInkColorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TitleInkColor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TitleInkColorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TitleInkColor
        {
            get
            {
                if (this.TitleInkColorValueSpecified)
                {
                    return this.TitleInkColorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TitleInkColorValue = value.GetValueOrDefault();
                this.TitleInkColorValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=34, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=35)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
