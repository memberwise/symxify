//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ConsoleFmFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class ConsoleFmFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutomaticLogoffTime", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AutomaticLogoffTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutomaticLogoffTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutomaticLogoffTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutomaticLogoffTime
        {
            get
            {
                if (this.AutomaticLogoffTimeValueSpecified)
                {
                    return this.AutomaticLogoffTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutomaticLogoffTimeValue = value.GetValueOrDefault();
                this.AutomaticLogoffTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BellEnabled", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool BellEnabledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BellEnabled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BellEnabledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BellEnabled
        {
            get
            {
                if (this.BellEnabledValueSpecified)
                {
                    return this.BellEnabledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BellEnabledValue = value.GetValueOrDefault();
                this.BellEnabledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BlinkEnabled", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BlinkEnabledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BlinkEnabled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BlinkEnabledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BlinkEnabled
        {
            get
            {
                if (this.BlinkEnabledValueSpecified)
                {
                    return this.BlinkEnabledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BlinkEnabledValue = value.GetValueOrDefault();
                this.BlinkEnabledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashDispenseMachine", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool CashDispenseMachineValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashDispenseMachine property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashDispenseMachineValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashDispenseMachine
        {
            get
            {
                if (this.CashDispenseMachineValueSpecified)
                {
                    return this.CashDispenseMachineValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashDispenseMachineValue = value.GetValueOrDefault();
                this.CashDispenseMachineValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashMachineOrientation", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool CashMachineOrientationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashMachineOrientation property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashMachineOrientationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashMachineOrientation
        {
            get
            {
                if (this.CashMachineOrientationValueSpecified)
                {
                    return this.CashMachineOrientationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashMachineOrientationValue = value.GetValueOrDefault();
                this.CashMachineOrientationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckValidatorType", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool CheckValidatorTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckValidatorType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckValidatorTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckValidatorType
        {
            get
            {
                if (this.CheckValidatorTypeValueSpecified)
                {
                    return this.CheckValidatorTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckValidatorTypeValue = value.GetValueOrDefault();
                this.CheckValidatorTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckValidatorUse", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool CheckValidatorUseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckValidatorUse property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckValidatorUseValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckValidatorUse
        {
            get
            {
                if (this.CheckValidatorUseValueSpecified)
                {
                    return this.CheckValidatorUseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckValidatorUseValue = value.GetValueOrDefault();
                this.CheckValidatorUseValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConsoleNumber", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool ConsoleNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsoleNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConsoleNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ConsoleNumber
        {
            get
            {
                if (this.ConsoleNumberValueSpecified)
                {
                    return this.ConsoleNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConsoleNumberValue = value.GetValueOrDefault();
                this.ConsoleNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConsoleSystemFailure", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool ConsoleSystemFailureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsoleSystemFailure property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConsoleSystemFailureValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ConsoleSystemFailure
        {
            get
            {
                if (this.ConsoleSystemFailureValueSpecified)
                {
                    return this.ConsoleSystemFailureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConsoleSystemFailureValue = value.GetValueOrDefault();
                this.ConsoleSystemFailureValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DimEnabled", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool DimEnabledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DimEnabled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DimEnabledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DimEnabled
        {
            get
            {
                if (this.DimEnabledValueSpecified)
                {
                    return this.DimEnabledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DimEnabledValue = value.GetValueOrDefault();
                this.DimEnabledValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _hostCufxPosterOffHost;
        
        [XmlElementAttribute("HostCufxPosterOffHost", Order=11, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> HostCufxPosterOffHost
        {
            get
            {
                return _hostCufxPosterOffHost;
            }
            set
            {
                _hostCufxPosterOffHost = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HostCufxPosterOffHost collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HostCufxPosterOffHostSpecified
        {
            get
            {
                return ((this.HostCufxPosterOffHost != null) 
                            && (this.HostCufxPosterOffHost.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ConsoleFmFields" /> class.</para>
        /// </summary>
        public ConsoleFmFields()
        {
            this._hostCufxPosterOffHost = new Collection<short>();
            this._moneyOrderPrinter9 = new Collection<short>();
            this._totalLoanAdjustmentLimit = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcPort", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool ItcPortValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcPort property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcPortValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ItcPort
        {
            get
            {
                if (this.ItcPortValueSpecified)
                {
                    return this.ItcPortValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcPortValue = value.GetValueOrDefault();
                this.ItcPortValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcScanner", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool ItcScannerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcScanner property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcScannerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ItcScanner
        {
            get
            {
                if (this.ItcScannerValueSpecified)
                {
                    return this.ItcScannerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcScannerValue = value.GetValueOrDefault();
                this.ItcScannerValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogonPrevention", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool LogonPreventionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogonPrevention property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogonPreventionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogonPrevention
        {
            get
            {
                if (this.LogonPreventionValueSpecified)
                {
                    return this.LogonPreventionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogonPreventionValue = value.GetValueOrDefault();
                this.LogonPreventionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MicrReader", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool MicrReaderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MicrReader property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MicrReaderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MicrReader
        {
            get
            {
                if (this.MicrReaderValueSpecified)
                {
                    return this.MicrReaderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MicrReaderValue = value.GetValueOrDefault();
                this.MicrReaderValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _moneyOrderPrinter9;
        
        [XmlElementAttribute("MoneyOrderPrinter9", Order=16, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> MoneyOrderPrinter9
        {
            get
            {
                return _moneyOrderPrinter9;
            }
            set
            {
                _moneyOrderPrinter9 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MoneyOrderPrinter9 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MoneyOrderPrinter9Specified
        {
            get
            {
                return ((this.MoneyOrderPrinter9 != null) 
                            && (this.MoneyOrderPrinter9.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PurposeCode", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool PurposeCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PurposeCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PurposeCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PurposeCode
        {
            get
            {
                if (this.PurposeCodeValueSpecified)
                {
                    return this.PurposeCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PurposeCodeValue = value.GetValueOrDefault();
                this.PurposeCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScreenType", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool ScreenTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScreenType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScreenTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ScreenType
        {
            get
            {
                if (this.ScreenTypeValueSpecified)
                {
                    return this.ScreenTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScreenTypeValue = value.GetValueOrDefault();
                this.ScreenTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScreenWidth", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool ScreenWidthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScreenWidth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScreenWidthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ScreenWidth
        {
            get
            {
                if (this.ScreenWidthValueSpecified)
                {
                    return this.ScreenWidthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScreenWidthValue = value.GetValueOrDefault();
                this.ScreenWidthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TelephoneTransferDefault", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool TelephoneTransferDefaultValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TelephoneTransferDefault property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TelephoneTransferDefaultValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TelephoneTransferDefault
        {
            get
            {
                if (this.TelephoneTransferDefaultValueSpecified)
                {
                    return this.TelephoneTransferDefaultValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TelephoneTransferDefaultValue = value.GetValueOrDefault();
                this.TelephoneTransferDefaultValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _totalLoanAdjustmentLimit;
        
        [XmlElementAttribute("TotalLoanAdjustmentLimit", Order=21, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TotalLoanAdjustmentLimit
        {
            get
            {
                return _totalLoanAdjustmentLimit;
            }
            set
            {
                _totalLoanAdjustmentLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TotalLoanAdjustmentLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TotalLoanAdjustmentLimitSpecified
        {
            get
            {
                return ((this.TotalLoanAdjustmentLimit != null) 
                            && (this.TotalLoanAdjustmentLimit.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=22, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=23)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
