//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CpWorkCard", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CpWorkCard", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class CpWorkCard
    {
        
        [XmlIgnoreAttribute()]
        private Collection<CpWorkCardAdditionalInfoHeader> _additionalInfoHeader;
        
        [XmlElementAttribute("AdditionalInfoHeader", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<CpWorkCardAdditionalInfoHeader> AdditionalInfoHeader
        {
            get
            {
                return _additionalInfoHeader;
            }
            set
            {
                _additionalInfoHeader = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AdditionalInfoHeader collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AdditionalInfoHeaderSpecified
        {
            get
            {
                return ((this.AdditionalInfoHeader != null) 
                            && (this.AdditionalInfoHeader.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CpWorkCard" /> class.</para>
        /// </summary>
        public CpWorkCard()
        {
            this._additionalInfoHeader = new Collection<CpWorkCardAdditionalInfoHeader>();
            this._additionalInfoJustify = new Collection<CpWorkCardAdditionalInfoJustify>();
            this._workCardDescriptionType = new Collection<CpWorkCardWorkCardDescriptionType>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CpWorkCardAdditionalInfoJustify> _additionalInfoJustify;
        
        [XmlElementAttribute("AdditionalInfoJustify", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<CpWorkCardAdditionalInfoJustify> AdditionalInfoJustify
        {
            get
            {
                return _additionalInfoJustify;
            }
            set
            {
                _additionalInfoJustify = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AdditionalInfoJustify collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AdditionalInfoJustifySpecified
        {
            get
            {
                return ((this.AdditionalInfoJustify != null) 
                            && (this.AdditionalInfoJustify.Count != 0));
            }
        }
        
        [XmlElementAttribute("AdditionalInfoSpecfileName", Order=2, Form=XmlSchemaForm.Unqualified)]
        public string AdditionalInfoSpecfileName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutomaticAdvanceNextQueued", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short AutomaticAdvanceNextQueuedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutomaticAdvanceNextQueued property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutomaticAdvanceNextQueuedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AutomaticAdvanceNextQueued
        {
            get
            {
                if (this.AutomaticAdvanceNextQueuedValueSpecified)
                {
                    return this.AutomaticAdvanceNextQueuedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutomaticAdvanceNextQueuedValue = value.GetValueOrDefault();
                this.AutomaticAdvanceNextQueuedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollectionQueueUserDisplay", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short CollectionQueueUserDisplayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollectionQueueUserDisplay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollectionQueueUserDisplayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CollectionQueueUserDisplay
        {
            get
            {
                if (this.CollectionQueueUserDisplayValueSpecified)
                {
                    return this.CollectionQueueUserDisplayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollectionQueueUserDisplayValue = value.GetValueOrDefault();
                this.CollectionQueueUserDisplayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextWorkDateMaxAdvance", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short NextWorkDateMaxAdvanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextWorkDateMaxAdvance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextWorkDateMaxAdvanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextWorkDateMaxAdvance
        {
            get
            {
                if (this.NextWorkDateMaxAdvanceValueSpecified)
                {
                    return this.NextWorkDateMaxAdvanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextWorkDateMaxAdvanceValue = value.GetValueOrDefault();
                this.NextWorkDateMaxAdvanceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ValidCollectorIds", Order=6, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ValidCollectorIds { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CpWorkCardWorkCardDescriptionType> _workCardDescriptionType;
        
        [XmlElementAttribute("WorkCardDescriptionType", Order=7, Form=XmlSchemaForm.Unqualified)]
        public Collection<CpWorkCardWorkCardDescriptionType> WorkCardDescriptionType
        {
            get
            {
                return _workCardDescriptionType;
            }
            set
            {
                _workCardDescriptionType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WorkCardDescriptionType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WorkCardDescriptionTypeSpecified
        {
            get
            {
                return ((this.WorkCardDescriptionType != null) 
                            && (this.WorkCardDescriptionType.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=8, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=9)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
