//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("OnlineBlockFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("OnlineBlockFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class OnlineBlockFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BlockWarningsList", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool BlockWarningsListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BlockWarningsList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BlockWarningsListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BlockWarningsList
        {
            get
            {
                if (this.BlockWarningsListValueSpecified)
                {
                    return this.BlockWarningsListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BlockWarningsListValue = value.GetValueOrDefault();
                this.BlockWarningsListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardAcceptorCountryCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool CardAcceptorCountryCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardAcceptorCountryCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardAcceptorCountryCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardAcceptorCountryCode
        {
            get
            {
                if (this.CardAcceptorCountryCodeValueSpecified)
                {
                    return this.CardAcceptorCountryCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardAcceptorCountryCodeValue = value.GetValueOrDefault();
                this.CardAcceptorCountryCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardAcceptorIdCode", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool CardAcceptorIdCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardAcceptorIdCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardAcceptorIdCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardAcceptorIdCode
        {
            get
            {
                if (this.CardAcceptorIdCodeValueSpecified)
                {
                    return this.CardAcceptorIdCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardAcceptorIdCodeValue = value.GetValueOrDefault();
                this.CardAcceptorIdCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardAcceptorName", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool CardAcceptorNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardAcceptorName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardAcceptorNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardAcceptorName
        {
            get
            {
                if (this.CardAcceptorNameValueSpecified)
                {
                    return this.CardAcceptorNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardAcceptorNameValue = value.GetValueOrDefault();
                this.CardAcceptorNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardAcceptorStates", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool CardAcceptorStatesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardAcceptorStates property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardAcceptorStatesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardAcceptorStates
        {
            get
            {
                if (this.CardAcceptorStatesValueSpecified)
                {
                    return this.CardAcceptorStatesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardAcceptorStatesValue = value.GetValueOrDefault();
                this.CardAcceptorStatesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardAcceptorZipCodes", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool CardAcceptorZipCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardAcceptorZipCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardAcceptorZipCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardAcceptorZipCodes
        {
            get
            {
                if (this.CardAcceptorZipCodesValueSpecified)
                {
                    return this.CardAcceptorZipCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardAcceptorZipCodesValue = value.GetValueOrDefault();
                this.CardAcceptorZipCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardNotPresent", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool CardNotPresentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardNotPresent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardNotPresentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardNotPresent
        {
            get
            {
                if (this.CardNotPresentValueSpecified)
                {
                    return this.CardNotPresentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardNotPresentValue = value.GetValueOrDefault();
                this.CardNotPresentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardTypes", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool CardTypesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardTypes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardTypesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardTypes
        {
            get
            {
                if (this.CardTypesValueSpecified)
                {
                    return this.CardTypesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardTypesValue = value.GetValueOrDefault();
                this.CardTypesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Description", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool DescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Description property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Description
        {
            get
            {
                if (this.DescriptionValueSpecified)
                {
                    return this.DescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DescriptionValue = value.GetValueOrDefault();
                this.DescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EmvFallback", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool EmvFallbackValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmvFallback property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmvFallbackValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EmvFallback
        {
            get
            {
                if (this.EmvFallbackValueSpecified)
                {
                    return this.EmvFallbackValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmvFallbackValue = value.GetValueOrDefault();
                this.EmvFallbackValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExcludedCountryCodes", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool ExcludedCountryCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExcludedCountryCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExcludedCountryCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExcludedCountryCodes
        {
            get
            {
                if (this.ExcludedCountryCodesValueSpecified)
                {
                    return this.ExcludedCountryCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExcludedCountryCodesValue = value.GetValueOrDefault();
                this.ExcludedCountryCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardRiskScore", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool MasterCardRiskScoreValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardRiskScore property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardRiskScoreValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MasterCardRiskScore
        {
            get
            {
                if (this.MasterCardRiskScoreValueSpecified)
                {
                    return this.MasterCardRiskScoreValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardRiskScoreValue = value.GetValueOrDefault();
                this.MasterCardRiskScoreValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumTransactionAmount", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumTransactionAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumTransactionAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumTransactionAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumTransactionAmount
        {
            get
            {
                if (this.MaximumTransactionAmountValueSpecified)
                {
                    return this.MaximumTransactionAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumTransactionAmountValue = value.GetValueOrDefault();
                this.MaximumTransactionAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MerchantTypes", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool MerchantTypesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MerchantTypes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MerchantTypesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MerchantTypes
        {
            get
            {
                if (this.MerchantTypesValueSpecified)
                {
                    return this.MerchantTypesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MerchantTypesValue = value.GetValueOrDefault();
                this.MerchantTypesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumTransactionAmount", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumTransactionAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumTransactionAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumTransactionAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumTransactionAmount
        {
            get
            {
                if (this.MinimumTransactionAmountValueSpecified)
                {
                    return this.MinimumTransactionAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumTransactionAmountValue = value.GetValueOrDefault();
                this.MinimumTransactionAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverrideWarningsList", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool OverrideWarningsListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverrideWarningsList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverrideWarningsListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverrideWarningsList
        {
            get
            {
                if (this.OverrideWarningsListValueSpecified)
                {
                    return this.OverrideWarningsListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverrideWarningsListValue = value.GetValueOrDefault();
                this.OverrideWarningsListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PanEntryModes", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool PanEntryModesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PanEntryModes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PanEntryModesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PanEntryModes
        {
            get
            {
                if (this.PanEntryModesValueSpecified)
                {
                    return this.PanEntryModesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PanEntryModesValue = value.GetValueOrDefault();
                this.PanEntryModesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PersontoPersonPayment", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool PersontoPersonPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PersontoPersonPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PersontoPersonPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PersontoPersonPayment
        {
            get
            {
                if (this.PersontoPersonPaymentValueSpecified)
                {
                    return this.PersontoPersonPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PersontoPersonPaymentValue = value.GetValueOrDefault();
                this.PersontoPersonPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinlessPinTransaction", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool PinlessPinTransactionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinlessPinTransaction property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinlessPinTransactionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinlessPinTransaction
        {
            get
            {
                if (this.PinlessPinTransactionValueSpecified)
                {
                    return this.PinlessPinTransactionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinlessPinTransactionValue = value.GetValueOrDefault();
                this.PinlessPinTransactionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PseudoTerminalId", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool PseudoTerminalIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PseudoTerminalId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PseudoTerminalIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PseudoTerminalId
        {
            get
            {
                if (this.PseudoTerminalIdValueSpecified)
                {
                    return this.PseudoTerminalIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PseudoTerminalIdValue = value.GetValueOrDefault();
                this.PseudoTerminalIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RuleNumber", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool RuleNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RuleNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RuleNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RuleNumber
        {
            get
            {
                if (this.RuleNumberValueSpecified)
                {
                    return this.RuleNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RuleNumberValue = value.GetValueOrDefault();
                this.RuleNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TerminalId", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool TerminalIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TerminalId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TerminalIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TerminalId
        {
            get
            {
                if (this.TerminalIdValueSpecified)
                {
                    return this.TerminalIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TerminalIdValue = value.GetValueOrDefault();
                this.TerminalIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TrackingRecordOverride", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool TrackingRecordOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrackingRecordOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TrackingRecordOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TrackingRecordOverride
        {
            get
            {
                if (this.TrackingRecordOverrideValueSpecified)
                {
                    return this.TrackingRecordOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TrackingRecordOverrideValue = value.GetValueOrDefault();
                this.TrackingRecordOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransactionCodes", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool TransactionCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransactionCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransactionCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransactionCodes
        {
            get
            {
                if (this.TransactionCodesValueSpecified)
                {
                    return this.TransactionCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransactionCodesValue = value.GetValueOrDefault();
                this.TransactionCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransactionTypes", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool TransactionTypesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransactionTypes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransactionTypesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransactionTypes
        {
            get
            {
                if (this.TransactionTypesValueSpecified)
                {
                    return this.TransactionTypesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransactionTypesValue = value.GetValueOrDefault();
                this.TransactionTypesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaAdvAuthScore", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool VisaAdvAuthScoreValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaAdvAuthScore property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaAdvAuthScoreValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VisaAdvAuthScore
        {
            get
            {
                if (this.VisaAdvAuthScoreValueSpecified)
                {
                    return this.VisaAdvAuthScoreValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaAdvAuthScoreValue = value.GetValueOrDefault();
                this.VisaAdvAuthScoreValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=27, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=28)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OnlineBlockFields" /> class.</para>
        /// </summary>
        public OnlineBlockFields()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
