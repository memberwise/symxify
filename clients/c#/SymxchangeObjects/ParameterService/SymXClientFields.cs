//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("SymXClientFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("SymXClientFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class SymXClientFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptLoanThresholdPayment", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptLoanThresholdPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptLoanThresholdPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptLoanThresholdPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptLoanThresholdPayment
        {
            get
            {
                if (this.AcceptLoanThresholdPaymentValueSpecified)
                {
                    return this.AcceptLoanThresholdPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptLoanThresholdPaymentValue = value.GetValueOrDefault();
                this.AcceptLoanThresholdPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptUnappliedPartialPmt", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptUnappliedPartialPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptUnappliedPartialPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptUnappliedPartialPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptUnappliedPartialPmt
        {
            get
            {
                if (this.AcceptUnappliedPartialPmtValueSpecified)
                {
                    return this.AcceptUnappliedPartialPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptUnappliedPartialPmtValue = value.GetValueOrDefault();
                this.AcceptUnappliedPartialPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AddonPastDueDays", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AddonPastDueDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AddonPastDueDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AddonPastDueDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AddonPastDueDays
        {
            get
            {
                if (this.AddonPastDueDaysValueSpecified)
                {
                    return this.AddonPastDueDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AddonPastDueDaysValue = value.GetValueOrDefault();
                this.AddonPastDueDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdministrativePassword", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AdministrativePasswordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdministrativePassword property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdministrativePasswordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdministrativePassword
        {
            get
            {
                if (this.AdministrativePasswordValueSpecified)
                {
                    return this.AdministrativePasswordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdministrativePasswordValue = value.GetValueOrDefault();
                this.AdministrativePasswordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdvFeeDescription", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool AdvFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdvFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdvFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdvFeeDescription
        {
            get
            {
                if (this.AdvFeeDescriptionValueSpecified)
                {
                    return this.AdvFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdvFeeDescriptionValue = value.GetValueOrDefault();
                this.AdvFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdvFeeGlCode", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool AdvFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdvFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdvFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdvFeeGlCode
        {
            get
            {
                if (this.AdvFeeGlCodeValueSpecified)
                {
                    return this.AdvFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdvFeeGlCodeValue = value.GetValueOrDefault();
                this.AdvFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowAllIrsContributions", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AllowAllIrsContributionsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowAllIrsContributions property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowAllIrsContributionsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowAllIrsContributions
        {
            get
            {
                if (this.AllowAllIrsContributionsValueSpecified)
                {
                    return this.AllowAllIrsContributionsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowAllIrsContributionsValue = value.GetValueOrDefault();
                this.AllowAllIrsContributionsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowHsaToNonHsaDistrib", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool AllowHsaToNonHsaDistribValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowHsaToNonHsaDistrib property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowHsaToNonHsaDistribValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowHsaToNonHsaDistrib
        {
            get
            {
                if (this.AllowHsaToNonHsaDistribValueSpecified)
                {
                    return this.AllowHsaToNonHsaDistribValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowHsaToNonHsaDistribValue = value.GetValueOrDefault();
                this.AllowHsaToNonHsaDistribValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowPinFm", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool AllowPinFmValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowPinFm property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowPinFmValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowPinFm
        {
            get
            {
                if (this.AllowPinFmValueSpecified)
                {
                    return this.AllowPinFmValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowPinFmValue = value.GetValueOrDefault();
                this.AllowPinFmValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowUserAuthentication", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool AllowUserAuthenticationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowUserAuthentication property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowUserAuthenticationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowUserAuthentication
        {
            get
            {
                if (this.AllowUserAuthenticationValueSpecified)
                {
                    return this.AllowUserAuthenticationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowUserAuthenticationValue = value.GetValueOrDefault();
                this.AllowUserAuthenticationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowUserCredentials", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool AllowUserCredentialsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowUserCredentials property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowUserCredentialsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowUserCredentials
        {
            get
            {
                if (this.AllowUserCredentialsValueSpecified)
                {
                    return this.AllowUserCredentialsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowUserCredentialsValue = value.GetValueOrDefault();
                this.AllowUserCredentialsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowUserFileAccess", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool AllowUserFileAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowUserFileAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowUserFileAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowUserFileAccess
        {
            get
            {
                if (this.AllowUserFileAccessValueSpecified)
                {
                    return this.AllowUserFileAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowUserFileAccessValue = value.GetValueOrDefault();
                this.AllowUserFileAccessValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AvailBalHoldTypeExclList", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool AvailBalHoldTypeExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AvailBalHoldTypeExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AvailBalHoldTypeExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AvailBalHoldTypeExclList
        {
            get
            {
                if (this.AvailBalHoldTypeExclListValueSpecified)
                {
                    return this.AvailBalHoldTypeExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AvailBalHoldTypeExclListValue = value.GetValueOrDefault();
                this.AvailBalHoldTypeExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayGlCode", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool BillPayGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPayGlCode
        {
            get
            {
                if (this.BillPayGlCodeValueSpecified)
                {
                    return this.BillPayGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayGlCodeValue = value.GetValueOrDefault();
                this.BillPayGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPaymentOverdrawOption", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool BillPaymentOverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPaymentOverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPaymentOverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPaymentOverdrawOption
        {
            get
            {
                if (this.BillPaymentOverdrawOptionValueSpecified)
                {
                    return this.BillPaymentOverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPaymentOverdrawOptionValue = value.GetValueOrDefault();
                this.BillPaymentOverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPmtUsesSrcCodeB", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool BillPmtUsesSrcCodeBValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPmtUsesSrcCodeB property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPmtUsesSrcCodeBValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPmtUsesSrcCodeB
        {
            get
            {
                if (this.BillPmtUsesSrcCodeBValueSpecified)
                {
                    return this.BillPmtUsesSrcCodeBValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPmtUsesSrcCodeBValue = value.GetValueOrDefault();
                this.BillPmtUsesSrcCodeBValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardActivationTypeList", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool CardActivationTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardActivationTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardActivationTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardActivationTypeList
        {
            get
            {
                if (this.CardActivationTypeListValueSpecified)
                {
                    return this.CardActivationTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardActivationTypeListValue = value.GetValueOrDefault();
                this.CardActivationTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardBlockingTypeList", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool CardBlockingTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardBlockingTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardBlockingTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardBlockingTypeList
        {
            get
            {
                if (this.CardBlockingTypeListValueSpecified)
                {
                    return this.CardBlockingTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardBlockingTypeListValue = value.GetValueOrDefault();
                this.CardBlockingTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CertificateTypeList", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool CertificateTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CertificateTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CertificateTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CertificateTypeList
        {
            get
            {
                if (this.CertificateTypeListValueSpecified)
                {
                    return this.CertificateTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CertificateTypeListValue = value.GetValueOrDefault();
                this.CertificateTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargePartialCapFee", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool ChargePartialCapFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargePartialCapFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargePartialCapFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargePartialCapFee
        {
            get
            {
                if (this.ChargePartialCapFeeValueSpecified)
                {
                    return this.ChargePartialCapFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargePartialCapFeeValue = value.GetValueOrDefault();
                this.ChargePartialCapFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargedOffLoanPmtOption", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool ChargedOffLoanPmtOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargedOffLoanPmtOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargedOffLoanPmtOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargedOffLoanPmtOption
        {
            get
            {
                if (this.ChargedOffLoanPmtOptionValueSpecified)
                {
                    return this.ChargedOffLoanPmtOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargedOffLoanPmtOptionValue = value.GetValueOrDefault();
                this.ChargedOffLoanPmtOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargedOffLoanTypesList", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool ChargedOffLoanTypesListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargedOffLoanTypesList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargedOffLoanTypesListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargedOffLoanTypesList
        {
            get
            {
                if (this.ChargedOffLoanTypesListValueSpecified)
                {
                    return this.ChargedOffLoanTypesListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargedOffLoanTypesListValue = value.GetValueOrDefault();
                this.ChargedOffLoanTypesListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargedOffShareDepOption", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool ChargedOffShareDepOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargedOffShareDepOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargedOffShareDepOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargedOffShareDepOption
        {
            get
            {
                if (this.ChargedOffShareDepOptionValueSpecified)
                {
                    return this.ChargedOffShareDepOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargedOffShareDepOptionValue = value.GetValueOrDefault();
                this.ChargedOffShareDepOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargedOffShareTypesList", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool ChargedOffShareTypesListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargedOffShareTypesList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargedOffShareTypesListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargedOffShareTypesList
        {
            get
            {
                if (this.ChargedOffShareTypesListValueSpecified)
                {
                    return this.ChargedOffShareTypesListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargedOffShareTypesListValue = value.GetValueOrDefault();
                this.ChargedOffShareTypesListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckPrinter", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool CheckPrinterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckPrinter property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckPrinterValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckPrinter
        {
            get
            {
                if (this.CheckPrinterValueSpecified)
                {
                    return this.CheckPrinterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckPrinterValue = value.GetValueOrDefault();
                this.CheckPrinterValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckReference", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool CheckReferenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckReference property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckReferenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckReference
        {
            get
            {
                if (this.CheckReferenceValueSpecified)
                {
                    return this.CheckReferenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckReferenceValue = value.GetValueOrDefault();
                this.CheckReferenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckingTypeList", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool CheckingTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckingTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckingTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckingTypeList
        {
            get
            {
                if (this.CheckingTypeListValueSpecified)
                {
                    return this.CheckingTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckingTypeListValue = value.GetValueOrDefault();
                this.CheckingTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChkDisbGlCode", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool ChkDisbGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChkDisbGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChkDisbGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChkDisbGlCode
        {
            get
            {
                if (this.ChkDisbGlCodeValueSpecified)
                {
                    return this.ChkDisbGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChkDisbGlCodeValue = value.GetValueOrDefault();
                this.ChkDisbGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClearingGlCode", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool ClearingGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClearingGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClearingGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ClearingGlCode
        {
            get
            {
                if (this.ClearingGlCodeValueSpecified)
                {
                    return this.ClearingGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClearingGlCodeValue = value.GetValueOrDefault();
                this.ClearingGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClientCheckingAcctCode", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool ClientCheckingAcctCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClientCheckingAcctCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClientCheckingAcctCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ClientCheckingAcctCode
        {
            get
            {
                if (this.ClientCheckingAcctCodeValueSpecified)
                {
                    return this.ClientCheckingAcctCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClientCheckingAcctCodeValue = value.GetValueOrDefault();
                this.ClientCheckingAcctCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClientSystemName", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool ClientSystemNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClientSystemName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClientSystemNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ClientSystemName
        {
            get
            {
                if (this.ClientSystemNameValueSpecified)
                {
                    return this.ClientSystemNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClientSystemNameValue = value.GetValueOrDefault();
                this.ClientSystemNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClientSystemUserNumber", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool ClientSystemUserNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClientSystemUserNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClientSystemUserNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ClientSystemUserNumber
        {
            get
            {
                if (this.ClientSystemUserNumberValueSpecified)
                {
                    return this.ClientSystemUserNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClientSystemUserNumberValue = value.GetValueOrDefault();
                this.ClientSystemUserNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClubTypeList", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool ClubTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClubTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClubTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ClubTypeList
        {
            get
            {
                if (this.ClubTypeListValueSpecified)
                {
                    return this.ClubTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClubTypeListValue = value.GetValueOrDefault();
                this.ClubTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyNotices", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyNotices
        {
            get
            {
                if (this.CourtesyNoticesValueSpecified)
                {
                    return this.CourtesyNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyNoticesValue = value.GetValueOrDefault();
                this.CourtesyNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayCommentCode", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyPayCommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayCommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayCommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyPayCommentCode
        {
            get
            {
                if (this.CourtesyPayCommentCodeValueSpecified)
                {
                    return this.CourtesyPayCommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayCommentCodeValue = value.GetValueOrDefault();
                this.CourtesyPayCommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayFeeDescription", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyPayFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyPayFeeDescription
        {
            get
            {
                if (this.CourtesyPayFeeDescriptionValueSpecified)
                {
                    return this.CourtesyPayFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayFeeDescriptionValue = value.GetValueOrDefault();
                this.CourtesyPayFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayFeeGlCode", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyPayFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyPayFeeGlCode
        {
            get
            {
                if (this.CourtesyPayFeeGlCodeValueSpecified)
                {
                    return this.CourtesyPayFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayFeeGlCodeValue = value.GetValueOrDefault();
                this.CourtesyPayFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditCardMaskingMethod", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool CreditCardMaskingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditCardMaskingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditCardMaskingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreditCardMaskingMethod
        {
            get
            {
                if (this.CreditCardMaskingMethodValueSpecified)
                {
                    return this.CreditCardMaskingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditCardMaskingMethodValue = value.GetValueOrDefault();
                this.CreditCardMaskingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepFeeDescription", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool DepFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepFeeDescription
        {
            get
            {
                if (this.DepFeeDescriptionValueSpecified)
                {
                    return this.DepFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepFeeDescriptionValue = value.GetValueOrDefault();
                this.DepFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepFeeGlCode", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool DepFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepFeeGlCode
        {
            get
            {
                if (this.DepFeeGlCodeValueSpecified)
                {
                    return this.DepFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepFeeGlCodeValue = value.GetValueOrDefault();
                this.DepFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Disp0CountUserTotals", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool Disp0CountUserTotalsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Disp0CountUserTotals property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Disp0CountUserTotalsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Disp0CountUserTotals
        {
            get
            {
                if (this.Disp0CountUserTotalsValueSpecified)
                {
                    return this.Disp0CountUserTotalsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Disp0CountUserTotalsValue = value.GetValueOrDefault();
                this.Disp0CountUserTotalsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EnhancedUserPrivilegeCheck", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool EnhancedUserPrivilegeCheckValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnhancedUserPrivilegeCheck property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EnhancedUserPrivilegeCheckValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EnhancedUserPrivilegeCheck
        {
            get
            {
                if (this.EnhancedUserPrivilegeCheckValueSpecified)
                {
                    return this.EnhancedUserPrivilegeCheckValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnhancedUserPrivilegeCheckValue = value.GetValueOrDefault();
                this.EnhancedUserPrivilegeCheckValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeTypesToCap", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool FeeTypesToCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeTypesToCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeTypesToCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FeeTypesToCap
        {
            get
            {
                if (this.FeeTypesToCapValueSpecified)
                {
                    return this.FeeTypesToCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeTypesToCapValue = value.GetValueOrDefault();
                this.FeeTypesToCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FicsAppPassword", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool FicsAppPasswordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FicsAppPassword property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FicsAppPasswordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FicsAppPassword
        {
            get
            {
                if (this.FicsAppPasswordValueSpecified)
                {
                    return this.FicsAppPasswordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FicsAppPasswordValue = value.GetValueOrDefault();
                this.FicsAppPasswordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FicsAppUserId", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool FicsAppUserIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FicsAppUserId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FicsAppUserIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FicsAppUserId
        {
            get
            {
                if (this.FicsAppUserIdValueSpecified)
                {
                    return this.FicsAppUserIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FicsAppUserIdValue = value.GetValueOrDefault();
                this.FicsAppUserIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FicsDataSourceName", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool FicsDataSourceNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FicsDataSourceName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FicsDataSourceNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FicsDataSourceName
        {
            get
            {
                if (this.FicsDataSourceNameValueSpecified)
                {
                    return this.FicsDataSourceNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FicsDataSourceNameValue = value.GetValueOrDefault();
                this.FicsDataSourceNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FicsDbPassword", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool FicsDbPasswordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FicsDbPassword property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FicsDbPasswordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FicsDbPassword
        {
            get
            {
                if (this.FicsDbPasswordValueSpecified)
                {
                    return this.FicsDbPasswordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FicsDbPasswordValue = value.GetValueOrDefault();
                this.FicsDbPasswordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FicsDbUserId", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool FicsDbUserIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FicsDbUserId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FicsDbUserIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FicsDbUserId
        {
            get
            {
                if (this.FicsDbUserIdValueSpecified)
                {
                    return this.FicsDbUserIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FicsDbUserIdValue = value.GetValueOrDefault();
                this.FicsDbUserIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FirstPrtyCksPayeeInfoLoans", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool FirstPrtyCksPayeeInfoLoansValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstPrtyCksPayeeInfoLoans property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FirstPrtyCksPayeeInfoLoansValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FirstPrtyCksPayeeInfoLoans
        {
            get
            {
                if (this.FirstPrtyCksPayeeInfoLoansValueSpecified)
                {
                    return this.FirstPrtyCksPayeeInfoLoansValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstPrtyCksPayeeInfoLoansValue = value.GetValueOrDefault();
                this.FirstPrtyCksPayeeInfoLoansValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FirstPrtyCksPayeeInfoShare", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool FirstPrtyCksPayeeInfoShareValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstPrtyCksPayeeInfoShare property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FirstPrtyCksPayeeInfoShareValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FirstPrtyCksPayeeInfoShare
        {
            get
            {
                if (this.FirstPrtyCksPayeeInfoShareValueSpecified)
                {
                    return this.FirstPrtyCksPayeeInfoShareValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstPrtyCksPayeeInfoShareValue = value.GetValueOrDefault();
                this.FirstPrtyCksPayeeInfoShareValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmInPostingJournal", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool FmInPostingJournalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmInPostingJournal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmInPostingJournalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FmInPostingJournal
        {
            get
            {
                if (this.FmInPostingJournalValueSpecified)
                {
                    return this.FmInPostingJournalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmInPostingJournalValue = value.GetValueOrDefault();
                this.FmInPostingJournalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCategory", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool GlCategoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCategory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCategoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCategory
        {
            get
            {
                if (this.GlCategoryValueSpecified)
                {
                    return this.GlCategoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCategoryValue = value.GetValueOrDefault();
                this.GlCategoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GraceAmountForCashDepPmts", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool GraceAmountForCashDepPmtsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GraceAmountForCashDepPmts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GraceAmountForCashDepPmtsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GraceAmountForCashDepPmts
        {
            get
            {
                if (this.GraceAmountForCashDepPmtsValueSpecified)
                {
                    return this.GraceAmountForCashDepPmtsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GraceAmountForCashDepPmtsValue = value.GetValueOrDefault();
                this.GraceAmountForCashDepPmtsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GroupNumber", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool GroupNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GroupNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GroupNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GroupNumber
        {
            get
            {
                if (this.GroupNumberValueSpecified)
                {
                    return this.GroupNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GroupNumberValue = value.GetValueOrDefault();
                this.GroupNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GuaranteedHoldTypeList", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool GuaranteedHoldTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuaranteedHoldTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GuaranteedHoldTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GuaranteedHoldTypeList
        {
            get
            {
                if (this.GuaranteedHoldTypeListValueSpecified)
                {
                    return this.GuaranteedHoldTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuaranteedHoldTypeListValue = value.GetValueOrDefault();
                this.GuaranteedHoldTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldDaysForCashDepPmts", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool HoldDaysForCashDepPmtsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldDaysForCashDepPmts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldDaysForCashDepPmtsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HoldDaysForCashDepPmts
        {
            get
            {
                if (this.HoldDaysForCashDepPmtsValueSpecified)
                {
                    return this.HoldDaysForCashDepPmtsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldDaysForCashDepPmtsValue = value.GetValueOrDefault();
                this.HoldDaysForCashDepPmtsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InactivityCheckMinutes", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool InactivityCheckMinutesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InactivityCheckMinutes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InactivityCheckMinutesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InactivityCheckMinutes
        {
            get
            {
                if (this.InactivityCheckMinutesValueSpecified)
                {
                    return this.InactivityCheckMinutesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InactivityCheckMinutesValue = value.GetValueOrDefault();
                this.InactivityCheckMinutesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InstanceId", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool InstanceIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InstanceId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InstanceIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InstanceId
        {
            get
            {
                if (this.InstanceIdValueSpecified)
                {
                    return this.InstanceIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InstanceIdValue = value.GetValueOrDefault();
                this.InstanceIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvAttemptsBeforeFrozen", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool InvAttemptsBeforeFrozenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvAttemptsBeforeFrozen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvAttemptsBeforeFrozenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvAttemptsBeforeFrozen
        {
            get
            {
                if (this.InvAttemptsBeforeFrozenValueSpecified)
                {
                    return this.InvAttemptsBeforeFrozenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvAttemptsBeforeFrozenValue = value.GetValueOrDefault();
                this.InvAttemptsBeforeFrozenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanDraftTypeList", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool LoanDraftTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanDraftTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanDraftTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanDraftTypeList
        {
            get
            {
                if (this.LoanDraftTypeListValueSpecified)
                {
                    return this.LoanDraftTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanDraftTypeListValue = value.GetValueOrDefault();
                this.LoanDraftTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanExclusionWarnCodeList", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool LoanExclusionWarnCodeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanExclusionWarnCodeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanExclusionWarnCodeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanExclusionWarnCodeList
        {
            get
            {
                if (this.LoanExclusionWarnCodeListValueSpecified)
                {
                    return this.LoanExclusionWarnCodeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanExclusionWarnCodeListValue = value.GetValueOrDefault();
                this.LoanExclusionWarnCodeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanFeeGlCode", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool LoanFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanFeeGlCode
        {
            get
            {
                if (this.LoanFeeGlCodeValueSpecified)
                {
                    return this.LoanFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanFeeGlCodeValue = value.GetValueOrDefault();
                this.LoanFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdAlertMessages", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdAlertMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdAlertMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdAlertMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdAlertMessages
        {
            get
            {
                if (this.LogAdAlertMessagesValueSpecified)
                {
                    return this.LogAdAlertMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdAlertMessagesValue = value.GetValueOrDefault();
                this.LogAdAlertMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdBalanceMessages", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdBalanceMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdBalanceMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdBalanceMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdBalanceMessages
        {
            get
            {
                if (this.LogAdBalanceMessagesValueSpecified)
                {
                    return this.LogAdBalanceMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdBalanceMessagesValue = value.GetValueOrDefault();
                this.LogAdBalanceMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdFmMessages", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdFmMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdFmMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdFmMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdFmMessages
        {
            get
            {
                if (this.LogAdFmMessagesValueSpecified)
                {
                    return this.LogAdFmMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdFmMessagesValue = value.GetValueOrDefault();
                this.LogAdFmMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdInquiryMessages", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdInquiryMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdInquiryMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdInquiryMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdInquiryMessages
        {
            get
            {
                if (this.LogAdInquiryMessagesValueSpecified)
                {
                    return this.LogAdInquiryMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdInquiryMessagesValue = value.GetValueOrDefault();
                this.LogAdInquiryMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdShortNameRefMessages", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdShortNameRefMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdShortNameRefMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdShortNameRefMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdShortNameRefMessages
        {
            get
            {
                if (this.LogAdShortNameRefMessagesValueSpecified)
                {
                    return this.LogAdShortNameRefMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdShortNameRefMessagesValue = value.GetValueOrDefault();
                this.LogAdShortNameRefMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdSpecfileType", Order=67, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdSpecfileTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdSpecfileType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdSpecfileTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdSpecfileType
        {
            get
            {
                if (this.LogAdSpecfileTypeValueSpecified)
                {
                    return this.LogAdSpecfileTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdSpecfileTypeValue = value.GetValueOrDefault();
                this.LogAdSpecfileTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdSsnRefMessages", Order=68, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdSsnRefMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdSsnRefMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdSsnRefMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdSsnRefMessages
        {
            get
            {
                if (this.LogAdSsnRefMessagesValueSpecified)
                {
                    return this.LogAdSsnRefMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdSsnRefMessagesValue = value.GetValueOrDefault();
                this.LogAdSsnRefMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdTotalMessages", Order=69, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdTotalMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdTotalMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdTotalMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdTotalMessages
        {
            get
            {
                if (this.LogAdTotalMessagesValueSpecified)
                {
                    return this.LogAdTotalMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdTotalMessagesValue = value.GetValueOrDefault();
                this.LogAdTotalMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdUserNameRefMessages", Order=70, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdUserNameRefMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdUserNameRefMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdUserNameRefMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdUserNameRefMessages
        {
            get
            {
                if (this.LogAdUserNameRefMessagesValueSpecified)
                {
                    return this.LogAdUserNameRefMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdUserNameRefMessagesValue = value.GetValueOrDefault();
                this.LogAdUserNameRefMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAdVerifyUserNameMessages", Order=71, Form=XmlSchemaForm.Unqualified)]
        public bool LogAdVerifyUserNameMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAdVerifyUserNameMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAdVerifyUserNameMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAdVerifyUserNameMessages
        {
            get
            {
                if (this.LogAdVerifyUserNameMessagesValueSpecified)
                {
                    return this.LogAdVerifyUserNameMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAdVerifyUserNameMessagesValue = value.GetValueOrDefault();
                this.LogAdVerifyUserNameMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogFmMessages", Order=72, Form=XmlSchemaForm.Unqualified)]
        public bool LogFmMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogFmMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogFmMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogFmMessages
        {
            get
            {
                if (this.LogFmMessagesValueSpecified)
                {
                    return this.LogFmMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogFmMessagesValue = value.GetValueOrDefault();
                this.LogFmMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogIqmessages", Order=73, Form=XmlSchemaForm.Unqualified)]
        public bool LogIqmessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogIqmessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogIqmessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogIqmessages
        {
            get
            {
                if (this.LogIqmessagesValueSpecified)
                {
                    return this.LogIqmessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogIqmessagesValue = value.GetValueOrDefault();
                this.LogIqmessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogSpecfileMessages", Order=74, Form=XmlSchemaForm.Unqualified)]
        public bool LogSpecfileMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogSpecfileMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogSpecfileMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogSpecfileMessages
        {
            get
            {
                if (this.LogSpecfileMessagesValueSpecified)
                {
                    return this.LogSpecfileMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogSpecfileMessagesValue = value.GetValueOrDefault();
                this.LogSpecfileMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogTrMessages", Order=75, Form=XmlSchemaForm.Unqualified)]
        public bool LogTrMessagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogTrMessages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogTrMessagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogTrMessages
        {
            get
            {
                if (this.LogTrMessagesValueSpecified)
                {
                    return this.LogTrMessagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogTrMessagesValue = value.GetValueOrDefault();
                this.LogTrMessagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoginMethod", Order=76, Form=XmlSchemaForm.Unqualified)]
        public bool LoginMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoginMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoginMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoginMethod
        {
            get
            {
                if (this.LoginMethodValueSpecified)
                {
                    return this.LoginMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoginMethodValue = value.GetValueOrDefault();
                this.LoginMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxCcLoanOverPmtAmount", Order=77, Form=XmlSchemaForm.Unqualified)]
        public bool MaxCcLoanOverPmtAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxCcLoanOverPmtAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxCcLoanOverPmtAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaxCcLoanOverPmtAmount
        {
            get
            {
                if (this.MaxCcLoanOverPmtAmountValueSpecified)
                {
                    return this.MaxCcLoanOverPmtAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxCcLoanOverPmtAmountValue = value.GetValueOrDefault();
                this.MaxCcLoanOverPmtAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxHistoryLookBackCount", Order=78, Form=XmlSchemaForm.Unqualified)]
        public bool MaxHistoryLookBackCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxHistoryLookBackCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxHistoryLookBackCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaxHistoryLookBackCount
        {
            get
            {
                if (this.MaxHistoryLookBackCountValueSpecified)
                {
                    return this.MaxHistoryLookBackCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxHistoryLookBackCountValue = value.GetValueOrDefault();
                this.MaxHistoryLookBackCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxHistoryLookBackDays", Order=79, Form=XmlSchemaForm.Unqualified)]
        public bool MaxHistoryLookBackDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxHistoryLookBackDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxHistoryLookBackDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaxHistoryLookBackDays
        {
            get
            {
                if (this.MaxHistoryLookBackDaysValueSpecified)
                {
                    return this.MaxHistoryLookBackDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxHistoryLookBackDaysValue = value.GetValueOrDefault();
                this.MaxHistoryLookBackDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumAddonOverLoc", Order=80, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumAddonOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumAddonOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumAddonOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumAddonOverLoc
        {
            get
            {
                if (this.MaximumAddonOverLocValueSpecified)
                {
                    return this.MaximumAddonOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumAddonOverLocValue = value.GetValueOrDefault();
                this.MaximumAddonOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumAllFieldCount", Order=81, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumAllFieldCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumAllFieldCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumAllFieldCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumAllFieldCount
        {
            get
            {
                if (this.MaximumAllFieldCountValueSpecified)
                {
                    return this.MaximumAllFieldCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumAllFieldCountValue = value.GetValueOrDefault();
                this.MaximumAllFieldCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumMicroAmount", Order=82, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumMicroAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumMicroAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumMicroAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumMicroAmount
        {
            get
            {
                if (this.MaximumMicroAmountValueSpecified)
                {
                    return this.MaximumMicroAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumMicroAmountValue = value.GetValueOrDefault();
                this.MaximumMicroAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumResponseFields", Order=83, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumResponseFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumResponseFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumResponseFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumResponseFields
        {
            get
            {
                if (this.MaximumResponseFieldsValueSpecified)
                {
                    return this.MaximumResponseFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumResponseFieldsValue = value.GetValueOrDefault();
                this.MaximumResponseFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumSpecfileLines", Order=84, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumSpecfileLinesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumSpecfileLines property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumSpecfileLinesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumSpecfileLines
        {
            get
            {
                if (this.MaximumSpecfileLinesValueSpecified)
                {
                    return this.MaximumSpecfileLinesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumSpecfileLinesValue = value.GetValueOrDefault();
                this.MaximumSpecfileLinesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumWdBelowAvailable", Order=85, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumWdBelowAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumWdBelowAvailable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumWdBelowAvailableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumWdBelowAvailable
        {
            get
            {
                if (this.MaximumWdBelowAvailableValueSpecified)
                {
                    return this.MaximumWdBelowAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumWdBelowAvailableValue = value.GetValueOrDefault();
                this.MaximumWdBelowAvailableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MerchantVerHoldDays", Order=86, Form=XmlSchemaForm.Unqualified)]
        public bool MerchantVerHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MerchantVerHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MerchantVerHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MerchantVerHoldDays
        {
            get
            {
                if (this.MerchantVerHoldDaysValueSpecified)
                {
                    return this.MerchantVerHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MerchantVerHoldDaysValue = value.GetValueOrDefault();
                this.MerchantVerHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MicroGlCode", Order=87, Form=XmlSchemaForm.Unqualified)]
        public bool MicroGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MicroGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MicroGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MicroGlCode
        {
            get
            {
                if (this.MicroGlCodeValueSpecified)
                {
                    return this.MicroGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MicroGlCodeValue = value.GetValueOrDefault();
                this.MicroGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MicroIdType", Order=88, Form=XmlSchemaForm.Unqualified)]
        public bool MicroIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MicroIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MicroIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MicroIdType
        {
            get
            {
                if (this.MicroIdTypeValueSpecified)
                {
                    return this.MicroIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MicroIdTypeValue = value.GetValueOrDefault();
                this.MicroIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumCheckAmount", Order=89, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumCheckAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumCheckAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumCheckAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumCheckAmount
        {
            get
            {
                if (this.MinimumCheckAmountValueSpecified)
                {
                    return this.MinimumCheckAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumCheckAmountValue = value.GetValueOrDefault();
                this.MinimumCheckAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumLineOfCreditAddon", Order=90, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumLineOfCreditAddonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumLineOfCreditAddon property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumLineOfCreditAddonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumLineOfCreditAddon
        {
            get
            {
                if (this.MinimumLineOfCreditAddonValueSpecified)
                {
                    return this.MinimumLineOfCreditAddonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumLineOfCreditAddonValue = value.GetValueOrDefault();
                this.MinimumLineOfCreditAddonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumMicroAmount", Order=91, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumMicroAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumMicroAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumMicroAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumMicroAmount
        {
            get
            {
                if (this.MinimumMicroAmountValueSpecified)
                {
                    return this.MinimumMicroAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumMicroAmountValue = value.GetValueOrDefault();
                this.MinimumMicroAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NumberinCollectList", Order=92, Form=XmlSchemaForm.Unqualified)]
        public bool NumberinCollectListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberinCollectList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberinCollectListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NumberinCollectList
        {
            get
            {
                if (this.NumberinCollectListValueSpecified)
                {
                    return this.NumberinCollectListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberinCollectListValue = value.GetValueOrDefault();
                this.NumberinCollectListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NumbertoAuthenticate", Order=93, Form=XmlSchemaForm.Unqualified)]
        public bool NumbertoAuthenticateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumbertoAuthenticate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumbertoAuthenticateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NumbertoAuthenticate
        {
            get
            {
                if (this.NumbertoAuthenticateValueSpecified)
                {
                    return this.NumbertoAuthenticateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumbertoAuthenticateValue = value.GetValueOrDefault();
                this.NumbertoAuthenticateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NumbertoCollect", Order=94, Form=XmlSchemaForm.Unqualified)]
        public bool NumbertoCollectValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumbertoCollect property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumbertoCollectValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NumbertoCollect
        {
            get
            {
                if (this.NumbertoCollectValueSpecified)
                {
                    return this.NumbertoCollectValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumbertoCollectValue = value.GetValueOrDefault();
                this.NumbertoCollectValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdtAuthFeeOvrSrcCodes", Order=95, Form=XmlSchemaForm.Unqualified)]
        public bool OdtAuthFeeOvrSrcCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdtAuthFeeOvrSrcCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdtAuthFeeOvrSrcCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OdtAuthFeeOvrSrcCodes
        {
            get
            {
                if (this.OdtAuthFeeOvrSrcCodesValueSpecified)
                {
                    return this.OdtAuthFeeOvrSrcCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdtAuthFeeOvrSrcCodesValue = value.GetValueOrDefault();
                this.OdtAuthFeeOvrSrcCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdtAuthFeeRecurSrcCodes", Order=96, Form=XmlSchemaForm.Unqualified)]
        public bool OdtAuthFeeRecurSrcCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdtAuthFeeRecurSrcCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdtAuthFeeRecurSrcCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OdtAuthFeeRecurSrcCodes
        {
            get
            {
                if (this.OdtAuthFeeRecurSrcCodesValueSpecified)
                {
                    return this.OdtAuthFeeRecurSrcCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdtAuthFeeRecurSrcCodesValue = value.GetValueOrDefault();
                this.OdtAuthFeeRecurSrcCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnDemandGroup", Order=97, Form=XmlSchemaForm.Unqualified)]
        public bool OnDemandGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnDemandGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnDemandGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OnDemandGroup
        {
            get
            {
                if (this.OnDemandGroupValueSpecified)
                {
                    return this.OnDemandGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnDemandGroupValue = value.GetValueOrDefault();
                this.OnDemandGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonDqGraceDays", Order=98, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonDqGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonDqGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonDqGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonDqGraceDays
        {
            get
            {
                if (this.OverdrawAddonDqGraceDaysValueSpecified)
                {
                    return this.OverdrawAddonDqGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonDqGraceDaysValue = value.GetValueOrDefault();
                this.OverdrawAddonDqGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonIncrement", Order=99, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonIncrement
        {
            get
            {
                if (this.OverdrawAddonIncrementValueSpecified)
                {
                    return this.OverdrawAddonIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonIncrementValue = value.GetValueOrDefault();
                this.OverdrawAddonIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonMaxOverLoc", Order=100, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonMaxOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonMaxOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonMaxOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonMaxOverLoc
        {
            get
            {
                if (this.OverdrawAddonMaxOverLocValueSpecified)
                {
                    return this.OverdrawAddonMaxOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonMaxOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonMaxOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonPctOverLoc", Order=101, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonPctOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonPctOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonPctOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonPctOverLoc
        {
            get
            {
                if (this.OverdrawAddonPctOverLocValueSpecified)
                {
                    return this.OverdrawAddonPctOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonPctOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonPctOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawFeeOption", Order=102, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawFeeOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawFeeOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawFeeOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawFeeOption
        {
            get
            {
                if (this.OverdrawFeeOptionValueSpecified)
                {
                    return this.OverdrawFeeOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawFeeOptionValue = value.GetValueOrDefault();
                this.OverdrawFeeOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawIncrementOverride", Order=103, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawIncrementOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawIncrementOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawIncrementOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawIncrementOverride
        {
            get
            {
                if (this.OverdrawIncrementOverrideValueSpecified)
                {
                    return this.OverdrawIncrementOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawIncrementOverrideValue = value.GetValueOrDefault();
                this.OverdrawIncrementOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawRegDLimiting", Order=104, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawRegDLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawRegDLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawRegDLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawRegDLimiting
        {
            get
            {
                if (this.OverdrawRegDLimitingValueSpecified)
                {
                    return this.OverdrawRegDLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawRegDLimitingValue = value.GetValueOrDefault();
                this.OverdrawRegDLimitingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTierOption", Order=105, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawTierOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTierOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTierOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawTierOption
        {
            get
            {
                if (this.OverdrawTierOptionValueSpecified)
                {
                    return this.OverdrawTierOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTierOptionValue = value.GetValueOrDefault();
                this.OverdrawTierOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferNotices", Order=106, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawTransferNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawTransferNotices
        {
            get
            {
                if (this.OverdrawTransferNoticesValueSpecified)
                {
                    return this.OverdrawTransferNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferNoticesValue = value.GetValueOrDefault();
                this.OverdrawTransferNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawWithdrawalIncrement", Order=107, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawWithdrawalIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawWithdrawalIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawWithdrawalIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawWithdrawalIncrement
        {
            get
            {
                if (this.OverdrawWithdrawalIncrementValueSpecified)
                {
                    return this.OverdrawWithdrawalIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawWithdrawalIncrementValue = value.GetValueOrDefault();
                this.OverdrawWithdrawalIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawXfrFeeGlCode", Order=108, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawXfrFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawXfrFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawXfrFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawXfrFeeGlCode
        {
            get
            {
                if (this.OverdrawXfrFeeGlCodeValueSpecified)
                {
                    return this.OverdrawXfrFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawXfrFeeGlCodeValue = value.GetValueOrDefault();
                this.OverdrawXfrFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverpaymentLoanTypesList", Order=109, Form=XmlSchemaForm.Unqualified)]
        public bool OverpaymentLoanTypesListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverpaymentLoanTypesList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverpaymentLoanTypesListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverpaymentLoanTypesList
        {
            get
            {
                if (this.OverpaymentLoanTypesListValueSpecified)
                {
                    return this.OverpaymentLoanTypesListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverpaymentLoanTypesListValue = value.GetValueOrDefault();
                this.OverpaymentLoanTypesListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentPastDueDays", Order=110, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentPastDueDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentPastDueDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentPastDueDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentPastDueDays
        {
            get
            {
                if (this.PaymentPastDueDaysValueSpecified)
                {
                    return this.PaymentPastDueDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentPastDueDaysValue = value.GetValueOrDefault();
                this.PaymentPastDueDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PmtFeeDescription", Order=111, Form=XmlSchemaForm.Unqualified)]
        public bool PmtFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PmtFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PmtFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PmtFeeDescription
        {
            get
            {
                if (this.PmtFeeDescriptionValueSpecified)
                {
                    return this.PmtFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PmtFeeDescriptionValue = value.GetValueOrDefault();
                this.PmtFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PmtFeeGlCode", Order=112, Form=XmlSchemaForm.Unqualified)]
        public bool PmtFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PmtFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PmtFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PmtFeeGlCode
        {
            get
            {
                if (this.PmtFeeGlCodeValueSpecified)
                {
                    return this.PmtFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PmtFeeGlCodeValue = value.GetValueOrDefault();
                this.PmtFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDLimiting", Order=113, Form=XmlSchemaForm.Unqualified)]
        public bool RegDLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RegDLimiting
        {
            get
            {
                if (this.RegDLimitingValueSpecified)
                {
                    return this.RegDLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDLimitingValue = value.GetValueOrDefault();
                this.RegDLimitingValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAdvFee;
        
        [XmlElementAttribute("RelAdvFee", Order=114, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAdvFee
        {
            get
            {
                return _relAdvFee;
            }
            set
            {
                _relAdvFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAdvFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAdvFeeSpecified
        {
            get
            {
                return ((this.RelAdvFee != null) 
                            && (this.RelAdvFee.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SymXClientFields" /> class.</para>
        /// </summary>
        public SymXClientFields()
        {
            this._relAdvFee = new Collection<short>();
            this._relAltCourtesyPayFee1 = new Collection<short>();
            this._relAltCourtesyPayFee2 = new Collection<short>();
            this._relAltCourtesyPayFee3 = new Collection<short>();
            this._relAltCourtesyPayFee4 = new Collection<short>();
            this._relAltCourtesyPayFee5 = new Collection<short>();
            this._relAltCourtesyPayFee6 = new Collection<short>();
            this._relAltCourtesyPayTier1 = new Collection<short>();
            this._relAltCourtesyPayTier2 = new Collection<short>();
            this._relAltCourtesyPayTier3 = new Collection<short>();
            this._relAltCourtesyPayTier4 = new Collection<short>();
            this._relAltCourtesyPayTier5 = new Collection<short>();
            this._relAltCourtesyPayTier6 = new Collection<short>();
            this._relCodeList = new Collection<short>();
            this._relCourtesyPayFee1 = new Collection<short>();
            this._relCourtesyPayFee2 = new Collection<short>();
            this._relCourtesyPayFee3 = new Collection<short>();
            this._relCourtesyPayFee4 = new Collection<short>();
            this._relCourtesyPayFee5 = new Collection<short>();
            this._relCourtesyPayFee6 = new Collection<short>();
            this._relCourtesyPayTier1 = new Collection<short>();
            this._relCourtesyPayTier2 = new Collection<short>();
            this._relCourtesyPayTier3 = new Collection<short>();
            this._relCourtesyPayTier4 = new Collection<short>();
            this._relCourtesyPayTier5 = new Collection<short>();
            this._relCourtesyPayTier6 = new Collection<short>();
            this._relDepFee = new Collection<short>();
            this._relOverdrawAddonXfrFee = new Collection<short>();
            this._relOverdrawComboXfrFee = new Collection<short>();
            this._relOverdrawWdXfrFee = new Collection<short>();
            this._relPmtFee = new Collection<short>();
            this._relWdFee = new Collection<short>();
            this._relXfrFee = new Collection<short>();
            this._totalDescription = new Collection<short>();
            this._totalsTimeFrameHigh = new Collection<short>();
            this._totalsTimeFrameLow = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee1;
        
        [XmlElementAttribute("RelAltCourtesyPayFee1", Order=115, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee1
        {
            get
            {
                return _relAltCourtesyPayFee1;
            }
            set
            {
                _relAltCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee1 != null) 
                            && (this.RelAltCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee2;
        
        [XmlElementAttribute("RelAltCourtesyPayFee2", Order=116, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee2
        {
            get
            {
                return _relAltCourtesyPayFee2;
            }
            set
            {
                _relAltCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee2 != null) 
                            && (this.RelAltCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee3;
        
        [XmlElementAttribute("RelAltCourtesyPayFee3", Order=117, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee3
        {
            get
            {
                return _relAltCourtesyPayFee3;
            }
            set
            {
                _relAltCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee3 != null) 
                            && (this.RelAltCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee4;
        
        [XmlElementAttribute("RelAltCourtesyPayFee4", Order=118, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee4
        {
            get
            {
                return _relAltCourtesyPayFee4;
            }
            set
            {
                _relAltCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee4 != null) 
                            && (this.RelAltCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee5;
        
        [XmlElementAttribute("RelAltCourtesyPayFee5", Order=119, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee5
        {
            get
            {
                return _relAltCourtesyPayFee5;
            }
            set
            {
                _relAltCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee5 != null) 
                            && (this.RelAltCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee6;
        
        [XmlElementAttribute("RelAltCourtesyPayFee6", Order=120, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee6
        {
            get
            {
                return _relAltCourtesyPayFee6;
            }
            set
            {
                _relAltCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee6 != null) 
                            && (this.RelAltCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier1;
        
        [XmlElementAttribute("RelAltCourtesyPayTier1", Order=121, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier1
        {
            get
            {
                return _relAltCourtesyPayTier1;
            }
            set
            {
                _relAltCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier1 != null) 
                            && (this.RelAltCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier2;
        
        [XmlElementAttribute("RelAltCourtesyPayTier2", Order=122, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier2
        {
            get
            {
                return _relAltCourtesyPayTier2;
            }
            set
            {
                _relAltCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier2 != null) 
                            && (this.RelAltCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier3;
        
        [XmlElementAttribute("RelAltCourtesyPayTier3", Order=123, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier3
        {
            get
            {
                return _relAltCourtesyPayTier3;
            }
            set
            {
                _relAltCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier3 != null) 
                            && (this.RelAltCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier4;
        
        [XmlElementAttribute("RelAltCourtesyPayTier4", Order=124, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier4
        {
            get
            {
                return _relAltCourtesyPayTier4;
            }
            set
            {
                _relAltCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier4 != null) 
                            && (this.RelAltCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier5;
        
        [XmlElementAttribute("RelAltCourtesyPayTier5", Order=125, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier5
        {
            get
            {
                return _relAltCourtesyPayTier5;
            }
            set
            {
                _relAltCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier5 != null) 
                            && (this.RelAltCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier6;
        
        [XmlElementAttribute("RelAltCourtesyPayTier6", Order=126, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier6
        {
            get
            {
                return _relAltCourtesyPayTier6;
            }
            set
            {
                _relAltCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier6 != null) 
                            && (this.RelAltCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCodeList;
        
        [XmlElementAttribute("RelCodeList", Order=127, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCodeList
        {
            get
            {
                return _relCodeList;
            }
            set
            {
                _relCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCodeListSpecified
        {
            get
            {
                return ((this.RelCodeList != null) 
                            && (this.RelCodeList.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee1;
        
        [XmlElementAttribute("RelCourtesyPayFee1", Order=128, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee1
        {
            get
            {
                return _relCourtesyPayFee1;
            }
            set
            {
                _relCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee1 != null) 
                            && (this.RelCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee2;
        
        [XmlElementAttribute("RelCourtesyPayFee2", Order=129, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee2
        {
            get
            {
                return _relCourtesyPayFee2;
            }
            set
            {
                _relCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee2 != null) 
                            && (this.RelCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee3;
        
        [XmlElementAttribute("RelCourtesyPayFee3", Order=130, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee3
        {
            get
            {
                return _relCourtesyPayFee3;
            }
            set
            {
                _relCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee3 != null) 
                            && (this.RelCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee4;
        
        [XmlElementAttribute("RelCourtesyPayFee4", Order=131, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee4
        {
            get
            {
                return _relCourtesyPayFee4;
            }
            set
            {
                _relCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee4 != null) 
                            && (this.RelCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee5;
        
        [XmlElementAttribute("RelCourtesyPayFee5", Order=132, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee5
        {
            get
            {
                return _relCourtesyPayFee5;
            }
            set
            {
                _relCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee5 != null) 
                            && (this.RelCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee6;
        
        [XmlElementAttribute("RelCourtesyPayFee6", Order=133, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee6
        {
            get
            {
                return _relCourtesyPayFee6;
            }
            set
            {
                _relCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee6 != null) 
                            && (this.RelCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier1;
        
        [XmlElementAttribute("RelCourtesyPayTier1", Order=134, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier1
        {
            get
            {
                return _relCourtesyPayTier1;
            }
            set
            {
                _relCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier1 != null) 
                            && (this.RelCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier2;
        
        [XmlElementAttribute("RelCourtesyPayTier2", Order=135, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier2
        {
            get
            {
                return _relCourtesyPayTier2;
            }
            set
            {
                _relCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier2 != null) 
                            && (this.RelCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier3;
        
        [XmlElementAttribute("RelCourtesyPayTier3", Order=136, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier3
        {
            get
            {
                return _relCourtesyPayTier3;
            }
            set
            {
                _relCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier3 != null) 
                            && (this.RelCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier4;
        
        [XmlElementAttribute("RelCourtesyPayTier4", Order=137, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier4
        {
            get
            {
                return _relCourtesyPayTier4;
            }
            set
            {
                _relCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier4 != null) 
                            && (this.RelCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier5;
        
        [XmlElementAttribute("RelCourtesyPayTier5", Order=138, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier5
        {
            get
            {
                return _relCourtesyPayTier5;
            }
            set
            {
                _relCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier5 != null) 
                            && (this.RelCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier6;
        
        [XmlElementAttribute("RelCourtesyPayTier6", Order=139, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier6
        {
            get
            {
                return _relCourtesyPayTier6;
            }
            set
            {
                _relCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier6 != null) 
                            && (this.RelCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relDepFee;
        
        [XmlElementAttribute("RelDepFee", Order=140, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelDepFee
        {
            get
            {
                return _relDepFee;
            }
            set
            {
                _relDepFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelDepFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelDepFeeSpecified
        {
            get
            {
                return ((this.RelDepFee != null) 
                            && (this.RelDepFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOverdrawAddonXfrFee;
        
        [XmlElementAttribute("RelOverdrawAddonXfrFee", Order=141, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOverdrawAddonXfrFee
        {
            get
            {
                return _relOverdrawAddonXfrFee;
            }
            set
            {
                _relOverdrawAddonXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawAddonXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawAddonXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawAddonXfrFee != null) 
                            && (this.RelOverdrawAddonXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOverdrawComboXfrFee;
        
        [XmlElementAttribute("RelOverdrawComboXfrFee", Order=142, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOverdrawComboXfrFee
        {
            get
            {
                return _relOverdrawComboXfrFee;
            }
            set
            {
                _relOverdrawComboXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawComboXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawComboXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawComboXfrFee != null) 
                            && (this.RelOverdrawComboXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOverdrawWdXfrFee;
        
        [XmlElementAttribute("RelOverdrawWdXfrFee", Order=143, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOverdrawWdXfrFee
        {
            get
            {
                return _relOverdrawWdXfrFee;
            }
            set
            {
                _relOverdrawWdXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawWdXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawWdXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawWdXfrFee != null) 
                            && (this.RelOverdrawWdXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relPmtFee;
        
        [XmlElementAttribute("RelPmtFee", Order=144, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelPmtFee
        {
            get
            {
                return _relPmtFee;
            }
            set
            {
                _relPmtFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelPmtFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelPmtFeeSpecified
        {
            get
            {
                return ((this.RelPmtFee != null) 
                            && (this.RelPmtFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relWdFee;
        
        [XmlElementAttribute("RelWdFee", Order=145, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelWdFee
        {
            get
            {
                return _relWdFee;
            }
            set
            {
                _relWdFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelWdFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelWdFeeSpecified
        {
            get
            {
                return ((this.RelWdFee != null) 
                            && (this.RelWdFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relXfrFee;
        
        [XmlElementAttribute("RelXfrFee", Order=146, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelXfrFee
        {
            get
            {
                return _relXfrFee;
            }
            set
            {
                _relXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelXfrFeeSpecified
        {
            get
            {
                return ((this.RelXfrFee != null) 
                            && (this.RelXfrFee.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReportTitle", Order=147, Form=XmlSchemaForm.Unqualified)]
        public bool ReportTitleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReportTitle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReportTitleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReportTitle
        {
            get
            {
                if (this.ReportTitleValueSpecified)
                {
                    return this.ReportTitleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReportTitleValue = value.GetValueOrDefault();
                this.ReportTitleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReturnHashedPasswords", Order=148, Form=XmlSchemaForm.Unqualified)]
        public bool ReturnHashedPasswordsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReturnHashedPasswords property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReturnHashedPasswordsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReturnHashedPasswords
        {
            get
            {
                if (this.ReturnHashedPasswordsValueSpecified)
                {
                    return this.ReturnHashedPasswordsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReturnHashedPasswordsValue = value.GetValueOrDefault();
                this.ReturnHashedPasswordsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsaProxyUrl", Order=149, Form=XmlSchemaForm.Unqualified)]
        public bool RsaProxyUrlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsaProxyUrl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsaProxyUrlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsaProxyUrl
        {
            get
            {
                if (this.RsaProxyUrlValueSpecified)
                {
                    return this.RsaProxyUrlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsaProxyUrlValue = value.GetValueOrDefault();
                this.RsaProxyUrlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsaProxyUrl2", Order=150, Form=XmlSchemaForm.Unqualified)]
        public bool RsaProxyUrl2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsaProxyUrl2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsaProxyUrl2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsaProxyUrl2
        {
            get
            {
                if (this.RsaProxyUrl2ValueSpecified)
                {
                    return this.RsaProxyUrl2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsaProxyUrl2Value = value.GetValueOrDefault();
                this.RsaProxyUrl2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsaTimeOut", Order=151, Form=XmlSchemaForm.Unqualified)]
        public bool RsaTimeOutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsaTimeOut property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsaTimeOutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsaTimeOut
        {
            get
            {
                if (this.RsaTimeOutValueSpecified)
                {
                    return this.RsaTimeOutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsaTimeOutValue = value.GetValueOrDefault();
                this.RsaTimeOutValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SavingsTypeList", Order=152, Form=XmlSchemaForm.Unqualified)]
        public bool SavingsTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SavingsTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SavingsTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SavingsTypeList
        {
            get
            {
                if (this.SavingsTypeListValueSpecified)
                {
                    return this.SavingsTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SavingsTypeListValue = value.GetValueOrDefault();
                this.SavingsTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecondPasswordEffDate", Order=153, Form=XmlSchemaForm.Unqualified)]
        public bool SecondPasswordEffDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondPasswordEffDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecondPasswordEffDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SecondPasswordEffDate
        {
            get
            {
                if (this.SecondPasswordEffDateValueSpecified)
                {
                    return this.SecondPasswordEffDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecondPasswordEffDateValue = value.GetValueOrDefault();
                this.SecondPasswordEffDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecondPasswordVerification", Order=154, Form=XmlSchemaForm.Unqualified)]
        public bool SecondPasswordVerificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondPasswordVerification property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecondPasswordVerificationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SecondPasswordVerification
        {
            get
            {
                if (this.SecondPasswordVerificationValueSpecified)
                {
                    return this.SecondPasswordVerificationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecondPasswordVerificationValue = value.GetValueOrDefault();
                this.SecondPasswordVerificationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServicesforDeposit", Order=155, Form=XmlSchemaForm.Unqualified)]
        public bool ServicesforDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServicesforDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServicesforDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServicesforDeposit
        {
            get
            {
                if (this.ServicesforDepositValueSpecified)
                {
                    return this.ServicesforDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServicesforDepositValue = value.GetValueOrDefault();
                this.ServicesforDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServicesforTransferIn", Order=156, Form=XmlSchemaForm.Unqualified)]
        public bool ServicesforTransferInValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServicesforTransferIn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServicesforTransferInValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServicesforTransferIn
        {
            get
            {
                if (this.ServicesforTransferInValueSpecified)
                {
                    return this.ServicesforTransferInValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServicesforTransferInValue = value.GetValueOrDefault();
                this.ServicesforTransferInValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServicesforTransferOut", Order=157, Form=XmlSchemaForm.Unqualified)]
        public bool ServicesforTransferOutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServicesforTransferOut property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServicesforTransferOutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServicesforTransferOut
        {
            get
            {
                if (this.ServicesforTransferOutValueSpecified)
                {
                    return this.ServicesforTransferOutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServicesforTransferOutValue = value.GetValueOrDefault();
                this.ServicesforTransferOutValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServicesforWithdrawal", Order=158, Form=XmlSchemaForm.Unqualified)]
        public bool ServicesforWithdrawalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServicesforWithdrawal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServicesforWithdrawalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServicesforWithdrawal
        {
            get
            {
                if (this.ServicesforWithdrawalValueSpecified)
                {
                    return this.ServicesforWithdrawalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServicesforWithdrawalValue = value.GetValueOrDefault();
                this.ServicesforWithdrawalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareExclusionWarnCodeList", Order=159, Form=XmlSchemaForm.Unqualified)]
        public bool ShareExclusionWarnCodeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareExclusionWarnCodeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareExclusionWarnCodeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShareExclusionWarnCodeList
        {
            get
            {
                if (this.ShareExclusionWarnCodeListValueSpecified)
                {
                    return this.ShareExclusionWarnCodeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareExclusionWarnCodeListValue = value.GetValueOrDefault();
                this.ShareExclusionWarnCodeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareFeeGlCode", Order=160, Form=XmlSchemaForm.Unqualified)]
        public bool ShareFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShareFeeGlCode
        {
            get
            {
                if (this.ShareFeeGlCodeValueSpecified)
                {
                    return this.ShareFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareFeeGlCodeValue = value.GetValueOrDefault();
                this.ShareFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsnAccountNameTypeList", Order=161, Form=XmlSchemaForm.Unqualified)]
        public bool SsnAccountNameTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsnAccountNameTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsnAccountNameTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsnAccountNameTypeList
        {
            get
            {
                if (this.SsnAccountNameTypeListValueSpecified)
                {
                    return this.SsnAccountNameTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsnAccountNameTypeListValue = value.GetValueOrDefault();
                this.SsnAccountNameTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsnLoanNameTypeList", Order=162, Form=XmlSchemaForm.Unqualified)]
        public bool SsnLoanNameTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsnLoanNameTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsnLoanNameTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsnLoanNameTypeList
        {
            get
            {
                if (this.SsnLoanNameTypeListValueSpecified)
                {
                    return this.SsnLoanNameTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsnLoanNameTypeListValue = value.GetValueOrDefault();
                this.SsnLoanNameTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsnShareNameTypeList", Order=163, Form=XmlSchemaForm.Unqualified)]
        public bool SsnShareNameTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsnShareNameTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsnShareNameTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsnShareNameTypeList
        {
            get
            {
                if (this.SsnShareNameTypeListValueSpecified)
                {
                    return this.SsnShareNameTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsnShareNameTypeListValue = value.GetValueOrDefault();
                this.SsnShareNameTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SymXClientNumber", Order=164, Form=XmlSchemaForm.Unqualified)]
        public bool SymXClientNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SymXClientNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SymXClientNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SymXClientNumber
        {
            get
            {
                if (this.SymXClientNumberValueSpecified)
                {
                    return this.SymXClientNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SymXClientNumberValue = value.GetValueOrDefault();
                this.SymXClientNumberValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _totalDescription;
        
        [XmlElementAttribute("TotalDescription", Order=165, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TotalDescription
        {
            get
            {
                return _totalDescription;
            }
            set
            {
                _totalDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TotalDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TotalDescriptionSpecified
        {
            get
            {
                return ((this.TotalDescription != null) 
                            && (this.TotalDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _totalsTimeFrameHigh;
        
        [XmlElementAttribute("TotalsTimeFrameHigh", Order=166, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TotalsTimeFrameHigh
        {
            get
            {
                return _totalsTimeFrameHigh;
            }
            set
            {
                _totalsTimeFrameHigh = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TotalsTimeFrameHigh collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TotalsTimeFrameHighSpecified
        {
            get
            {
                return ((this.TotalsTimeFrameHigh != null) 
                            && (this.TotalsTimeFrameHigh.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _totalsTimeFrameLow;
        
        [XmlElementAttribute("TotalsTimeFrameLow", Order=167, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TotalsTimeFrameLow
        {
            get
            {
                return _totalsTimeFrameLow;
            }
            set
            {
                _totalsTimeFrameLow = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TotalsTimeFrameLow collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TotalsTimeFrameLowSpecified
        {
            get
            {
                return ((this.TotalsTimeFrameLow != null) 
                            && (this.TotalsTimeFrameLow.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransAcctTypeList", Order=168, Form=XmlSchemaForm.Unqualified)]
        public bool TransAcctTypeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransAcctTypeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransAcctTypeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransAcctTypeList
        {
            get
            {
                if (this.TransAcctTypeListValueSpecified)
                {
                    return this.TransAcctTypeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransAcctTypeListValue = value.GetValueOrDefault();
                this.TransAcctTypeListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransactionSourceCode", Order=169, Form=XmlSchemaForm.Unqualified)]
        public bool TransactionSourceCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransactionSourceCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransactionSourceCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransactionSourceCode
        {
            get
            {
                if (this.TransactionSourceCodeValueSpecified)
                {
                    return this.TransactionSourceCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransactionSourceCodeValue = value.GetValueOrDefault();
                this.TransactionSourceCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransferOverdrawOption", Order=170, Form=XmlSchemaForm.Unqualified)]
        public bool TransferOverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferOverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransferOverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransferOverdrawOption
        {
            get
            {
                if (this.TransferOverdrawOptionValueSpecified)
                {
                    return this.TransferOverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransferOverdrawOptionValue = value.GetValueOrDefault();
                this.TransferOverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseBillPmtLimits", Order=171, Form=XmlSchemaForm.Unqualified)]
        public bool UseBillPmtLimitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseBillPmtLimits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseBillPmtLimitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseBillPmtLimits
        {
            get
            {
                if (this.UseBillPmtLimitsValueSpecified)
                {
                    return this.UseBillPmtLimitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseBillPmtLimitsValue = value.GetValueOrDefault();
                this.UseBillPmtLimitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseCashWithdrawalLimits", Order=172, Form=XmlSchemaForm.Unqualified)]
        public bool UseCashWithdrawalLimitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseCashWithdrawalLimits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseCashWithdrawalLimitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseCashWithdrawalLimits
        {
            get
            {
                if (this.UseCashWithdrawalLimitsValueSpecified)
                {
                    return this.UseCashWithdrawalLimitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseCashWithdrawalLimitsValue = value.GetValueOrDefault();
                this.UseCashWithdrawalLimitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseCheckWithdrawalLimits", Order=173, Form=XmlSchemaForm.Unqualified)]
        public bool UseCheckWithdrawalLimitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseCheckWithdrawalLimits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseCheckWithdrawalLimitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseCheckWithdrawalLimits
        {
            get
            {
                if (this.UseCheckWithdrawalLimitsValueSpecified)
                {
                    return this.UseCheckWithdrawalLimitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseCheckWithdrawalLimitsValue = value.GetValueOrDefault();
                this.UseCheckWithdrawalLimitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseDepositLimits", Order=174, Form=XmlSchemaForm.Unqualified)]
        public bool UseDepositLimitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseDepositLimits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseDepositLimitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseDepositLimits
        {
            get
            {
                if (this.UseDepositLimitsValueSpecified)
                {
                    return this.UseDepositLimitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseDepositLimitsValue = value.GetValueOrDefault();
                this.UseDepositLimitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseHbPassword", Order=175, Form=XmlSchemaForm.Unqualified)]
        public bool UseHbPasswordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseHbPassword property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseHbPasswordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseHbPassword
        {
            get
            {
                if (this.UseHbPasswordValueSpecified)
                {
                    return this.UseHbPasswordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseHbPasswordValue = value.GetValueOrDefault();
                this.UseHbPasswordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseStandardCardLookup", Order=176, Form=XmlSchemaForm.Unqualified)]
        public bool UseStandardCardLookupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseStandardCardLookup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseStandardCardLookupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseStandardCardLookup
        {
            get
            {
                if (this.UseStandardCardLookupValueSpecified)
                {
                    return this.UseStandardCardLookupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseStandardCardLookupValue = value.GetValueOrDefault();
                this.UseStandardCardLookupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseTransferLimits", Order=177, Form=XmlSchemaForm.Unqualified)]
        public bool UseTransferLimitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseTransferLimits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseTransferLimitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseTransferLimits
        {
            get
            {
                if (this.UseTransferLimitsValueSpecified)
                {
                    return this.UseTransferLimitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseTransferLimitsValue = value.GetValueOrDefault();
                this.UseTransferLimitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerificationCount", Order=178, Form=XmlSchemaForm.Unqualified)]
        public bool VerificationCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerificationCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerificationCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerificationCount
        {
            get
            {
                if (this.VerificationCountValueSpecified)
                {
                    return this.VerificationCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerificationCountValue = value.GetValueOrDefault();
                this.VerificationCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerificationExpirationDays", Order=179, Form=XmlSchemaForm.Unqualified)]
        public bool VerificationExpirationDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerificationExpirationDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerificationExpirationDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerificationExpirationDays
        {
            get
            {
                if (this.VerificationExpirationDaysValueSpecified)
                {
                    return this.VerificationExpirationDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerificationExpirationDaysValue = value.GetValueOrDefault();
                this.VerificationExpirationDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerificationMethod", Order=180, Form=XmlSchemaForm.Unqualified)]
        public bool VerificationMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerificationMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerificationMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerificationMethod
        {
            get
            {
                if (this.VerificationMethodValueSpecified)
                {
                    return this.VerificationMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerificationMethodValue = value.GetValueOrDefault();
                this.VerificationMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdAvailableAmtCalculation", Order=181, Form=XmlSchemaForm.Unqualified)]
        public bool WdAvailableAmtCalculationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdAvailableAmtCalculation property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdAvailableAmtCalculationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdAvailableAmtCalculation
        {
            get
            {
                if (this.WdAvailableAmtCalculationValueSpecified)
                {
                    return this.WdAvailableAmtCalculationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdAvailableAmtCalculationValue = value.GetValueOrDefault();
                this.WdAvailableAmtCalculationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdBelowAvailableOption", Order=182, Form=XmlSchemaForm.Unqualified)]
        public bool WdBelowAvailableOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdBelowAvailableOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdBelowAvailableOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdBelowAvailableOption
        {
            get
            {
                if (this.WdBelowAvailableOptionValueSpecified)
                {
                    return this.WdBelowAvailableOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdBelowAvailableOptionValue = value.GetValueOrDefault();
                this.WdBelowAvailableOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdFeeDescription", Order=183, Form=XmlSchemaForm.Unqualified)]
        public bool WdFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdFeeDescription
        {
            get
            {
                if (this.WdFeeDescriptionValueSpecified)
                {
                    return this.WdFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdFeeDescriptionValue = value.GetValueOrDefault();
                this.WdFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdFeeGlCode", Order=184, Form=XmlSchemaForm.Unqualified)]
        public bool WdFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdFeeGlCode
        {
            get
            {
                if (this.WdFeeGlCodeValueSpecified)
                {
                    return this.WdFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdFeeGlCodeValue = value.GetValueOrDefault();
                this.WdFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalOverdrawOption", Order=185, Form=XmlSchemaForm.Unqualified)]
        public bool WithdrawalOverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalOverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalOverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WithdrawalOverdrawOption
        {
            get
            {
                if (this.WithdrawalOverdrawOptionValueSpecified)
                {
                    return this.WithdrawalOverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalOverdrawOptionValue = value.GetValueOrDefault();
                this.WithdrawalOverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalPastDueDays", Order=186, Form=XmlSchemaForm.Unqualified)]
        public bool WithdrawalPastDueDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalPastDueDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalPastDueDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WithdrawalPastDueDays
        {
            get
            {
                if (this.WithdrawalPastDueDaysValueSpecified)
                {
                    return this.WithdrawalPastDueDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalPastDueDaysValue = value.GetValueOrDefault();
                this.WithdrawalPastDueDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrFeeDescription", Order=187, Form=XmlSchemaForm.Unqualified)]
        public bool XfrFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XfrFeeDescription
        {
            get
            {
                if (this.XfrFeeDescriptionValueSpecified)
                {
                    return this.XfrFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrFeeDescriptionValue = value.GetValueOrDefault();
                this.XfrFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrFeeGlCode", Order=188, Form=XmlSchemaForm.Unqualified)]
        public bool XfrFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XfrFeeGlCode
        {
            get
            {
                if (this.XfrFeeGlCodeValueSpecified)
                {
                    return this.XfrFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrFeeGlCodeValue = value.GetValueOrDefault();
                this.XfrFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=189, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=190)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
