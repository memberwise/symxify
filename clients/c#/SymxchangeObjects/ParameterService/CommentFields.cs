//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CommentFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CommentFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class CommentFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Comment", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool CommentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Comment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Comment
        {
            get
            {
                if (this.CommentValueSpecified)
                {
                    return this.CommentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentValue = value.GetValueOrDefault();
                this.CommentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentType", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool CommentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CommentType
        {
            get
            {
                if (this.CommentTypeValueSpecified)
                {
                    return this.CommentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentTypeValue = value.GetValueOrDefault();
                this.CommentTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dataType;
        
        [XmlElementAttribute("DataType", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DataType
        {
            get
            {
                return _dataType;
            }
            set
            {
                _dataType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DataType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DataTypeSpecified
        {
            get
            {
                return ((this.DataType != null) 
                            && (this.DataType.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CommentFields" /> class.</para>
        /// </summary>
        public CommentFields()
        {
            this._dataType = new Collection<short>();
            this._defaultChar = new Collection<short>();
            this._defaultNum = new Collection<short>();
            this._line = new Collection<short>();
            this._line1 = new Collection<short>();
            this._line2 = new Collection<short>();
            this._maxCode = new Collection<short>();
            this._maxLength = new Collection<short>();
            this._prompt = new Collection<short>();
            this._userHelp = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _defaultChar;
        
        [XmlElementAttribute("DefaultChar", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DefaultChar
        {
            get
            {
                return _defaultChar;
            }
            set
            {
                _defaultChar = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DefaultChar collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DefaultCharSpecified
        {
            get
            {
                return ((this.DefaultChar != null) 
                            && (this.DefaultChar.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _defaultNum;
        
        [XmlElementAttribute("DefaultNum", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DefaultNum
        {
            get
            {
                return _defaultNum;
            }
            set
            {
                _defaultNum = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DefaultNum collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DefaultNumSpecified
        {
            get
            {
                return ((this.DefaultNum != null) 
                            && (this.DefaultNum.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Description", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool DescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Description property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Description
        {
            get
            {
                if (this.DescriptionValueSpecified)
                {
                    return this.DescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DescriptionValue = value.GetValueOrDefault();
                this.DescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Format", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool FormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Format property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Format
        {
            get
            {
                if (this.FormatValueSpecified)
                {
                    return this.FormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FormatValue = value.GetValueOrDefault();
                this.FormatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KeyCodePurpose", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool KeyCodePurposeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KeyCodePurpose property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KeyCodePurposeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> KeyCodePurpose
        {
            get
            {
                if (this.KeyCodePurposeValueSpecified)
                {
                    return this.KeyCodePurposeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KeyCodePurposeValue = value.GetValueOrDefault();
                this.KeyCodePurposeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _line;
        
        [XmlElementAttribute("Line", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LineSpecified
        {
            get
            {
                return ((this.Line != null) 
                            && (this.Line.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _line1;
        
        [XmlElementAttribute("Line1", Order=9, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Line1
        {
            get
            {
                return _line1;
            }
            set
            {
                _line1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Line1Specified
        {
            get
            {
                return ((this.Line1 != null) 
                            && (this.Line1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _line2;
        
        [XmlElementAttribute("Line2", Order=10, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Line2
        {
            get
            {
                return _line2;
            }
            set
            {
                _line2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Line2Specified
        {
            get
            {
                return ((this.Line2 != null) 
                            && (this.Line2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _maxCode;
        
        [XmlElementAttribute("MaxCode", Order=11, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> MaxCode
        {
            get
            {
                return _maxCode;
            }
            set
            {
                _maxCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MaxCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MaxCodeSpecified
        {
            get
            {
                return ((this.MaxCode != null) 
                            && (this.MaxCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _maxLength;
        
        [XmlElementAttribute("MaxLength", Order=12, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> MaxLength
        {
            get
            {
                return _maxLength;
            }
            set
            {
                _maxLength = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MaxLength collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MaxLengthSpecified
        {
            get
            {
                return ((this.MaxLength != null) 
                            && (this.MaxLength.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberBillingCode", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool MemberBillingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberBillingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberBillingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MemberBillingCode
        {
            get
            {
                if (this.MemberBillingCodeValueSpecified)
                {
                    return this.MemberBillingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberBillingCodeValue = value.GetValueOrDefault();
                this.MemberBillingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonMemberBillingCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool NonMemberBillingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonMemberBillingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonMemberBillingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NonMemberBillingCode
        {
            get
            {
                if (this.NonMemberBillingCodeValueSpecified)
                {
                    return this.NonMemberBillingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonMemberBillingCodeValue = value.GetValueOrDefault();
                this.NonMemberBillingCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _prompt;
        
        [XmlElementAttribute("Prompt", Order=15, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Prompt
        {
            get
            {
                return _prompt;
            }
            set
            {
                _prompt = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Prompt collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromptSpecified
        {
            get
            {
                return ((this.Prompt != null) 
                            && (this.Prompt.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReportingCode", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool ReportingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReportingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReportingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReportingCode
        {
            get
            {
                if (this.ReportingCodeValueSpecified)
                {
                    return this.ReportingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReportingCodeValue = value.GetValueOrDefault();
                this.ReportingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReportingDescription", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool ReportingDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReportingDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReportingDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReportingDescription
        {
            get
            {
                if (this.ReportingDescriptionValueSpecified)
                {
                    return this.ReportingDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReportingDescriptionValue = value.GetValueOrDefault();
                this.ReportingDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _userHelp;
        
        [XmlElementAttribute("UserHelp", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> UserHelp
        {
            get
            {
                return _userHelp;
            }
            set
            {
                _userHelp = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UserHelp collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UserHelpSpecified
        {
            get
            {
                return ((this.UserHelp != null) 
                            && (this.UserHelp.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=20, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=21)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
