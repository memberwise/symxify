//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ShareDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("ShareDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class ShareDefault
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationSchd", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationSchd
        {
            get
            {
                if (this.AmortizationSchdValueSpecified)
                {
                    return this.AmortizationSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationSchdValue = value.GetValueOrDefault();
                this.AmortizationSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationSchdType", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationSchdType
        {
            get
            {
                if (this.AmortizationSchdTypeValueSpecified)
                {
                    return this.AmortizationSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationSchdTypeValue = value.GetValueOrDefault();
                this.AmortizationSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareDefaultAuthFeeOption> _authFeeOption;
        
        [XmlElementAttribute("AuthFeeOption", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareDefaultAuthFeeOption> AuthFeeOption
        {
            get
            {
                return _authFeeOption;
            }
            set
            {
                _authFeeOption = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AuthFeeOption collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AuthFeeOptionSpecified
        {
            get
            {
                return ((this.AuthFeeOption != null) 
                            && (this.AuthFeeOption.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ShareDefault" /> class.</para>
        /// </summary>
        public ShareDefault()
        {
            this._authFeeOption = new Collection<ShareDefaultAuthFeeOption>();
            this._odtAuthFeeSrcCodeList = new Collection<ShareDefaultOdtAuthFeeSrcCodeList>();
            this._service = new Collection<ShareDefaultService>();
            this._warningCode = new Collection<ShareDefaultWarningCode>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BumpEffectiveDate", Order=3, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime BumpEffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BumpEffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BumpEffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BumpEffectiveDate
        {
            get
            {
                if (this.BumpEffectiveDateValueSpecified)
                {
                    return this.BumpEffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BumpEffectiveDateValue = value.GetValueOrDefault();
                this.BumpEffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BumpExpirationDate", Order=4, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime BumpExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BumpExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BumpExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BumpExpirationDate
        {
            get
            {
                if (this.BumpExpirationDateValueSpecified)
                {
                    return this.BumpExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BumpExpirationDateValue = value.GetValueOrDefault();
                this.BumpExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BumpRate", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal BumpRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BumpRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BumpRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BumpRate
        {
            get
            {
                if (this.BumpRateValueSpecified)
                {
                    return this.BumpRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BumpRateValue = value.GetValueOrDefault();
                this.BumpRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CallItemSchd", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short CallItemSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CallItemSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CallItemSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CallItemSchd
        {
            get
            {
                if (this.CallItemSchdValueSpecified)
                {
                    return this.CallItemSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CallItemSchdValue = value.GetValueOrDefault();
                this.CallItemSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CallItemSchdType", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short CallItemSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CallItemSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CallItemSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CallItemSchdType
        {
            get
            {
                if (this.CallItemSchdTypeValueSpecified)
                {
                    return this.CallItemSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CallItemSchdTypeValue = value.GetValueOrDefault();
                this.CallItemSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmountCap", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal CappedFeesAmountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CappedFeesAmountCap
        {
            get
            {
                if (this.CappedFeesAmountCapValueSpecified)
                {
                    return this.CappedFeesAmountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmountCapValue = value.GetValueOrDefault();
                this.CappedFeesAmountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCountCap", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short CappedFeesCountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CappedFeesCountCap
        {
            get
            {
                if (this.CappedFeesCountCapValueSpecified)
                {
                    return this.CappedFeesCountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCountCapValue = value.GetValueOrDefault();
                this.CappedFeesCountCapValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CertificateNumber", Order=10, Form=XmlSchemaForm.Unqualified)]
        public string CertificateNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Chapter4WithholdingCode", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short Chapter4WithholdingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Chapter4WithholdingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Chapter4WithholdingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Chapter4WithholdingCode
        {
            get
            {
                if (this.Chapter4WithholdingCodeValueSpecified)
                {
                    return this.Chapter4WithholdingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Chapter4WithholdingCodeValue = value.GetValueOrDefault();
                this.Chapter4WithholdingCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckDigits", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string CheckDigits { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=13, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CorporateUserTransferCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short CorporateUserTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CorporateUserTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CorporateUserTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CorporateUserTransferCode
        {
            get
            {
                if (this.CorporateUserTransferCodeValueSpecified)
                {
                    return this.CorporateUserTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CorporateUserTransferCodeValue = value.GetValueOrDefault();
                this.CorporateUserTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportingCode", Order=15, Form=XmlSchemaForm.Unqualified)]
        public short CreditReportingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditReportingCode
        {
            get
            {
                if (this.CreditReportingCodeValueSpecified)
                {
                    return this.CreditReportingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportingCodeValue = value.GetValueOrDefault();
                this.CreditReportingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuTotalsUseCode", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short CuTotalsUseCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuTotalsUseCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuTotalsUseCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CuTotalsUseCode
        {
            get
            {
                if (this.CuTotalsUseCodeValueSpecified)
                {
                    return this.CuTotalsUseCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuTotalsUseCodeValue = value.GetValueOrDefault();
                this.CuTotalsUseCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivDisbUpdtActvtyD", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short DivDisbUpdtActvtyDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivDisbUpdtActvtyD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivDisbUpdtActvtyDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivDisbUpdtActvtyD
        {
            get
            {
                if (this.DivDisbUpdtActvtyDValueSpecified)
                {
                    return this.DivDisbUpdtActvtyDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivDisbUpdtActvtyDValue = value.GetValueOrDefault();
                this.DivDisbUpdtActvtyDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivPostCode", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short DivPostCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivPostCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivPostCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivPostCode
        {
            get
            {
                if (this.DivPostCodeValueSpecified)
                {
                    return this.DivPostCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivPostCodeValue = value.GetValueOrDefault();
                this.DivPostCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivRate", Order=20, Form=XmlSchemaForm.Unqualified)]
        public decimal DivRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivRate
        {
            get
            {
                if (this.DivRateValueSpecified)
                {
                    return this.DivRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivRateValue = value.GetValueOrDefault();
                this.DivRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivType", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short DivTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivType
        {
            get
            {
                if (this.DivTypeValueSpecified)
                {
                    return this.DivTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivTypeValue = value.GetValueOrDefault();
                this.DivTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMargin", Order=22, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendRateMarginValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMargin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMarginValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendRateMargin
        {
            get
            {
                if (this.DividendRateMarginValueSpecified)
                {
                    return this.DividendRateMarginValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMarginValue = value.GetValueOrDefault();
                this.DividendRateMarginValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMarginSign", Order=23, Form=XmlSchemaForm.Unqualified)]
        public short DividendRateMarginSignValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMarginSign property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMarginSignValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DividendRateMarginSign
        {
            get
            {
                if (this.DividendRateMarginSignValueSpecified)
                {
                    return this.DividendRateMarginSignValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMarginSignValue = value.GetValueOrDefault();
                this.DividendRateMarginSignValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMax", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendRateMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendRateMax
        {
            get
            {
                if (this.DividendRateMaxValueSpecified)
                {
                    return this.DividendRateMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMaxValue = value.GetValueOrDefault();
                this.DividendRateMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMin", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendRateMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendRateMin
        {
            get
            {
                if (this.DividendRateMinValueSpecified)
                {
                    return this.DividendRateMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMinValue = value.GetValueOrDefault();
                this.DividendRateMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRatePeriodDate", Order=26, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DividendRatePeriodDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRatePeriodDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRatePeriodDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DividendRatePeriodDate
        {
            get
            {
                if (this.DividendRatePeriodDateValueSpecified)
                {
                    return this.DividendRatePeriodDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRatePeriodDateValue = value.GetValueOrDefault();
                this.DividendRatePeriodDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRatePeriodFreq", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short DividendRatePeriodFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRatePeriodFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRatePeriodFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DividendRatePeriodFreq
        {
            get
            {
                if (this.DividendRatePeriodFreqValueSpecified)
                {
                    return this.DividendRatePeriodFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRatePeriodFreqValue = value.GetValueOrDefault();
                this.DividendRatePeriodFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExtAchXfrDailyLimitIn", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal ExtAchXfrDailyLimitInValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExtAchXfrDailyLimitIn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExtAchXfrDailyLimitInValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ExtAchXfrDailyLimitIn
        {
            get
            {
                if (this.ExtAchXfrDailyLimitInValueSpecified)
                {
                    return this.ExtAchXfrDailyLimitInValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExtAchXfrDailyLimitInValue = value.GetValueOrDefault();
                this.ExtAchXfrDailyLimitInValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExtAchXfrDailyLimitOut", Order=29, Form=XmlSchemaForm.Unqualified)]
        public decimal ExtAchXfrDailyLimitOutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExtAchXfrDailyLimitOut property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExtAchXfrDailyLimitOutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ExtAchXfrDailyLimitOut
        {
            get
            {
                if (this.ExtAchXfrDailyLimitOutValueSpecified)
                {
                    return this.ExtAchXfrDailyLimitOutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExtAchXfrDailyLimitOutValue = value.GetValueOrDefault();
                this.ExtAchXfrDailyLimitOutValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceMaximum", Order=30, Form=XmlSchemaForm.Unqualified)]
        public decimal InsuranceMaximumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceMaximum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceMaximumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InsuranceMaximum
        {
            get
            {
                if (this.InsuranceMaximumValueSpecified)
                {
                    return this.InsuranceMaximumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceMaximumValue = value.GetValueOrDefault();
                this.InsuranceMaximumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceType", Order=31, Form=XmlSchemaForm.Unqualified)]
        public short InsuranceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InsuranceType
        {
            get
            {
                if (this.InsuranceTypeValueSpecified)
                {
                    return this.InsuranceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceTypeValue = value.GetValueOrDefault();
                this.InsuranceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsCode", Order=32, Form=XmlSchemaForm.Unqualified)]
        public short IrsCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IrsCode
        {
            get
            {
                if (this.IrsCodeValueSpecified)
                {
                    return this.IrsCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsCodeValue = value.GetValueOrDefault();
                this.IrsCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsPlan", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short IrsPlanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsPlan property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsPlanValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IrsPlan
        {
            get
            {
                if (this.IrsPlanValueSpecified)
                {
                    return this.IrsPlanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsPlanValue = value.GetValueOrDefault();
                this.IrsPlanValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaturityDate", Order=34, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MaturityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaturityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MaturityDate
        {
            get
            {
                if (this.MaturityDateValueSpecified)
                {
                    return this.MaturityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityDateValue = value.GetValueOrDefault();
                this.MaturityDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaturityPostCode", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short MaturityPostCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityPostCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaturityPostCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaturityPostCode
        {
            get
            {
                if (this.MaturityPostCodeValueSpecified)
                {
                    return this.MaturityPostCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityPostCodeValue = value.GetValueOrDefault();
                this.MaturityPostCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberBranchSupport", Order=36, Form=XmlSchemaForm.Unqualified)]
        public short MemberBranchSupportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberBranchSupport property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberBranchSupportValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberBranchSupport
        {
            get
            {
                if (this.MemberBranchSupportValueSpecified)
                {
                    return this.MemberBranchSupportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberBranchSupportValue = value.GetValueOrDefault();
                this.MemberBranchSupportValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberUserTransferCode", Order=37, Form=XmlSchemaForm.Unqualified)]
        public short MemberUserTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberUserTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberUserTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberUserTransferCode
        {
            get
            {
                if (this.MemberUserTransferCodeValueSpecified)
                {
                    return this.MemberUserTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberUserTransferCodeValue = value.GetValueOrDefault();
                this.MemberUserTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumBalance", Order=38, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumBalance
        {
            get
            {
                if (this.MinimumBalanceValueSpecified)
                {
                    return this.MinimumBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumBalanceValue = value.GetValueOrDefault();
                this.MinimumBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumDeposit", Order=39, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumDeposit
        {
            get
            {
                if (this.MinimumDepositValueSpecified)
                {
                    return this.MinimumDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumDepositValue = value.GetValueOrDefault();
                this.MinimumDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumWithdrawal", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumWithdrawalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumWithdrawal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumWithdrawalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumWithdrawal
        {
            get
            {
                if (this.MinimumWithdrawalValueSpecified)
                {
                    return this.MinimumWithdrawalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumWithdrawalValue = value.GetValueOrDefault();
                this.MinimumWithdrawalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeBalanceNoticeNumber", Order=41, Form=XmlSchemaForm.Unqualified)]
        public short NegativeBalanceNoticeNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeBalanceNoticeNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeBalanceNoticeNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NegativeBalanceNoticeNumber
        {
            get
            {
                if (this.NegativeBalanceNoticeNumberValueSpecified)
                {
                    return this.NegativeBalanceNoticeNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeBalanceNoticeNumberValue = value.GetValueOrDefault();
                this.NegativeBalanceNoticeNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeBalanceNoticeType", Order=42, Form=XmlSchemaForm.Unqualified)]
        public short NegativeBalanceNoticeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeBalanceNoticeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeBalanceNoticeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NegativeBalanceNoticeType
        {
            get
            {
                if (this.NegativeBalanceNoticeTypeValueSpecified)
                {
                    return this.NegativeBalanceNoticeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeBalanceNoticeTypeValue = value.GetValueOrDefault();
                this.NegativeBalanceNoticeTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Nickname", Order=43, Form=XmlSchemaForm.Unqualified)]
        public string Nickname { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareDefaultOdtAuthFeeSrcCodeList> _odtAuthFeeSrcCodeList;
        
        [XmlElementAttribute("OdtAuthFeeSrcCodeList", Order=44, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareDefaultOdtAuthFeeSrcCodeList> OdtAuthFeeSrcCodeList
        {
            get
            {
                return _odtAuthFeeSrcCodeList;
            }
            set
            {
                _odtAuthFeeSrcCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OdtAuthFeeSrcCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OdtAuthFeeSrcCodeListSpecified
        {
            get
            {
                return ((this.OdtAuthFeeSrcCodeList != null) 
                            && (this.OdtAuthFeeSrcCodeList.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdraftTolerance", Order=45, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdraftToleranceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdraftTolerance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdraftToleranceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdraftTolerance
        {
            get
            {
                if (this.OverdraftToleranceValueSpecified)
                {
                    return this.OverdraftToleranceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdraftToleranceValue = value.GetValueOrDefault();
                this.OverdraftToleranceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PenaltyType", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short PenaltyTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PenaltyType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PenaltyTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PenaltyType
        {
            get
            {
                if (this.PenaltyTypeValueSpecified)
                {
                    return this.PenaltyTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PenaltyTypeValue = value.GetValueOrDefault();
                this.PenaltyTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicCap", Order=47, Form=XmlSchemaForm.Unqualified)]
        public decimal PeriodicCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PeriodicCap
        {
            get
            {
                if (this.PeriodicCapValueSpecified)
                {
                    return this.PeriodicCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicCapValue = value.GetValueOrDefault();
                this.PeriodicCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicStartRate", Order=48, Form=XmlSchemaForm.Unqualified)]
        public decimal PeriodicStartRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicStartRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicStartRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PeriodicStartRate
        {
            get
            {
                if (this.PeriodicStartRateValueSpecified)
                {
                    return this.PeriodicStartRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicStartRateValue = value.GetValueOrDefault();
                this.PeriodicStartRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PutItemSchd", Order=49, Form=XmlSchemaForm.Unqualified)]
        public short PutItemSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PutItemSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PutItemSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PutItemSchd
        {
            get
            {
                if (this.PutItemSchdValueSpecified)
                {
                    return this.PutItemSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PutItemSchdValue = value.GetValueOrDefault();
                this.PutItemSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PutItemSchdType", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short PutItemSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PutItemSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PutItemSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PutItemSchdType
        {
            get
            {
                if (this.PutItemSchdTypeValueSpecified)
                {
                    return this.PutItemSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PutItemSchdTypeValue = value.GetValueOrDefault();
                this.PutItemSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=51, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDCtrStartDay", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short RegDCtrStartDayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDCtrStartDay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDCtrStartDayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDCtrStartDay
        {
            get
            {
                if (this.RegDCtrStartDayValueSpecified)
                {
                    return this.RegDCtrStartDayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDCtrStartDayValue = value.GetValueOrDefault();
                this.RegDCtrStartDayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RenewShareType", Order=53, Form=XmlSchemaForm.Unqualified)]
        public short RenewShareTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RenewShareType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RenewShareTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RenewShareType
        {
            get
            {
                if (this.RenewShareTypeValueSpecified)
                {
                    return this.RenewShareTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RenewShareTypeValue = value.GetValueOrDefault();
                this.RenewShareTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RenewTermFreq", Order=54, Form=XmlSchemaForm.Unqualified)]
        public short RenewTermFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RenewTermFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RenewTermFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RenewTermFreq
        {
            get
            {
                if (this.RenewTermFreqValueSpecified)
                {
                    return this.RenewTermFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RenewTermFreqValue = value.GetValueOrDefault();
                this.RenewTermFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RenewTermPeriod", Order=55, Form=XmlSchemaForm.Unqualified)]
        public short RenewTermPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RenewTermPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RenewTermPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RenewTermPeriod
        {
            get
            {
                if (this.RenewTermPeriodValueSpecified)
                {
                    return this.RenewTermPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RenewTermPeriodValue = value.GetValueOrDefault();
                this.RenewTermPeriodValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareDefaultService> _service;
        
        [XmlElementAttribute("Service", Order=56, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareDefaultService> Service
        {
            get
            {
                return _service;
            }
            set
            {
                _service = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Service collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ServiceSpecified
        {
            get
            {
                return ((this.Service != null) 
                            && (this.Service.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareCode", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short ShareCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ShareCode
        {
            get
            {
                if (this.ShareCodeValueSpecified)
                {
                    return this.ShareCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareCodeValue = value.GetValueOrDefault();
                this.ShareCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareType", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short ShareTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ShareType
        {
            get
            {
                if (this.ShareTypeValueSpecified)
                {
                    return this.ShareTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareTypeValue = value.GetValueOrDefault();
                this.ShareTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholdingCode", Order=59, Form=XmlSchemaForm.Unqualified)]
        public short StateWithholdingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholdingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StateWithholdingCode
        {
            get
            {
                if (this.StateWithholdingCodeValueSpecified)
                {
                    return this.StateWithholdingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingCodeValue = value.GetValueOrDefault();
                this.StateWithholdingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementGroup", Order=60, Form=XmlSchemaForm.Unqualified)]
        public short StatementGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementGroup
        {
            get
            {
                if (this.StatementGroupValueSpecified)
                {
                    return this.StatementGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementGroupValue = value.GetValueOrDefault();
                this.StatementGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementMailCode", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short StatementMailCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementMailCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementMailCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementMailCode
        {
            get
            {
                if (this.StatementMailCodeValueSpecified)
                {
                    return this.StatementMailCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementMailCodeValue = value.GetValueOrDefault();
                this.StatementMailCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepBalanceType", Order=62, Form=XmlSchemaForm.Unqualified)]
        public short SweepBalanceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepBalanceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepBalanceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SweepBalanceType
        {
            get
            {
                if (this.SweepBalanceTypeValueSpecified)
                {
                    return this.SweepBalanceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepBalanceTypeValue = value.GetValueOrDefault();
                this.SweepBalanceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepPriority", Order=63, Form=XmlSchemaForm.Unqualified)]
        public short SweepPriorityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepPriority property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepPriorityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SweepPriority
        {
            get
            {
                if (this.SweepPriorityValueSpecified)
                {
                    return this.SweepPriorityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepPriorityValue = value.GetValueOrDefault();
                this.SweepPriorityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepTargetMaximum", Order=64, Form=XmlSchemaForm.Unqualified)]
        public decimal SweepTargetMaximumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepTargetMaximum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepTargetMaximumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SweepTargetMaximum
        {
            get
            {
                if (this.SweepTargetMaximumValueSpecified)
                {
                    return this.SweepTargetMaximumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepTargetMaximumValue = value.GetValueOrDefault();
                this.SweepTargetMaximumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepTargetMinimum", Order=65, Form=XmlSchemaForm.Unqualified)]
        public decimal SweepTargetMinimumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepTargetMinimum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepTargetMinimumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SweepTargetMinimum
        {
            get
            {
                if (this.SweepTargetMinimumValueSpecified)
                {
                    return this.SweepTargetMinimumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepTargetMinimumValue = value.GetValueOrDefault();
                this.SweepTargetMinimumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermFrequency", Order=66, Form=XmlSchemaForm.Unqualified)]
        public short TermFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermFrequency
        {
            get
            {
                if (this.TermFrequencyValueSpecified)
                {
                    return this.TermFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermFrequencyValue = value.GetValueOrDefault();
                this.TermFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermPeriod", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short TermPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermPeriod
        {
            get
            {
                if (this.TermPeriodValueSpecified)
                {
                    return this.TermPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermPeriodValue = value.GetValueOrDefault();
                this.TermPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=68, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=69, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=70, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=71, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=72, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=73, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=74, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=75, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=76, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareDefaultWarningCode> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=77, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareDefaultWarningCode> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalFeeType", Order=78, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalFeeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalFeeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalFeeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalFeeType
        {
            get
            {
                if (this.WithdrawalFeeTypeValueSpecified)
                {
                    return this.WithdrawalFeeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalFeeTypeValue = value.GetValueOrDefault();
                this.WithdrawalFeeTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalLimit", Order=79, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalLimit
        {
            get
            {
                if (this.WithdrawalLimitValueSpecified)
                {
                    return this.WithdrawalLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalLimitValue = value.GetValueOrDefault();
                this.WithdrawalLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithholdingCode", Order=80, Form=XmlSchemaForm.Unqualified)]
        public short WithholdingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithholdingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithholdingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithholdingCode
        {
            get
            {
                if (this.WithholdingCodeValueSpecified)
                {
                    return this.WithholdingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithholdingCodeValue = value.GetValueOrDefault();
                this.WithholdingCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=81, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=82)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
