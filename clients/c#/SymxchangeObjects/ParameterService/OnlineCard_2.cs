//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("OnlineCard", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("OnlineCard", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(OnlineCardFields_2))]
    public partial class OnlineCard_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivateOnFirstPinTran", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool ActivateOnFirstPinTranValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivateOnFirstPinTran property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivateOnFirstPinTranValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ActivateOnFirstPinTran
        {
            get
            {
                if (this.ActivateOnFirstPinTranValueSpecified)
                {
                    return this.ActivateOnFirstPinTranValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivateOnFirstPinTranValue = value.GetValueOrDefault();
                this.ActivateOnFirstPinTranValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AggregateLimitingCardTypes", Order=1, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap AggregateLimitingCardTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateDraftAccount", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short AlternateDraftAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateDraftAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateDraftAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AlternateDraftAccount
        {
            get
            {
                if (this.AlternateDraftAccountValueSpecified)
                {
                    return this.AlternateDraftAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateDraftAccountValue = value.GetValueOrDefault();
                this.AlternateDraftAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateFundingAccount", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short AlternateFundingAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateFundingAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateFundingAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AlternateFundingAccount
        {
            get
            {
                if (this.AlternateFundingAccountValueSpecified)
                {
                    return this.AlternateFundingAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateFundingAccountValue = value.GetValueOrDefault();
                this.AlternateFundingAccountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AlwaysPosttoFundingList", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string AlwaysPosttoFundingList { get; set; }
        
        [XmlElementAttribute("AtmAmountLimitFields", Order=5, Form=XmlSchemaForm.Unqualified)]
        public string AtmAmountLimitFields { get; set; }
        
        [XmlElementAttribute("AtmAmountUsedFields", Order=6, Form=XmlSchemaForm.Unqualified)]
        public string AtmAmountUsedFields { get; set; }
        
        [XmlElementAttribute("AtmCountLimitFields", Order=7, Form=XmlSchemaForm.Unqualified)]
        public string AtmCountLimitFields { get; set; }
        
        [XmlElementAttribute("AtmCountUsedFields", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string AtmCountUsedFields { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmDepAmtLimitPerCard", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool AtmDepAmtLimitPerCardValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmDepAmtLimitPerCard property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmDepAmtLimitPerCardValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmDepAmtLimitPerCard
        {
            get
            {
                if (this.AtmDepAmtLimitPerCardValueSpecified)
                {
                    return this.AtmDepAmtLimitPerCardValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmDepAmtLimitPerCardValue = value.GetValueOrDefault();
                this.AtmDepAmtLimitPerCardValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmDepositCountLimiting", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool AtmDepositCountLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmDepositCountLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmDepositCountLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmDepositCountLimiting
        {
            get
            {
                if (this.AtmDepositCountLimitingValueSpecified)
                {
                    return this.AtmDepositCountLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmDepositCountLimitingValue = value.GetValueOrDefault();
                this.AtmDepositCountLimitingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPaymentCategorization", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short BillPaymentCategorizationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPaymentCategorization property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPaymentCategorizationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillPaymentCategorization
        {
            get
            {
                if (this.BillPaymentCategorizationValueSpecified)
                {
                    return this.BillPaymentCategorizationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPaymentCategorizationValue = value.GetValueOrDefault();
                this.BillPaymentCategorizationValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Bin", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string Bin { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BinType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short BinTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BinType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BinTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BinType
        {
            get
            {
                if (this.BinTypeValueSpecified)
                {
                    return this.BinTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BinTypeValue = value.GetValueOrDefault();
                this.BinTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BpAmountLimitFields", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string BpAmountLimitFields { get; set; }
        
        [XmlElementAttribute("BpAmountUsedFields", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string BpAmountUsedFields { get; set; }
        
        [XmlElementAttribute("BpCountLimitFields", Order=16, Form=XmlSchemaForm.Unqualified)]
        public string BpCountLimitFields { get; set; }
        
        [XmlElementAttribute("BpCountUsedFields", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string BpCountUsedFields { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardLimitingOption", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short CardLimitingOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardLimitingOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardLimitingOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardLimitingOption
        {
            get
            {
                if (this.CardLimitingOptionValueSpecified)
                {
                    return this.CardLimitingOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardLimitingOptionValue = value.GetValueOrDefault();
                this.CardLimitingOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardNumberLength", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short CardNumberLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardNumberLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardNumberLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardNumberLength
        {
            get
            {
                if (this.CardNumberLengthValueSpecified)
                {
                    return this.CardNumberLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardNumberLengthValue = value.GetValueOrDefault();
                this.CardNumberLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardNumberinTranHistory", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool CardNumberinTranHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardNumberinTranHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardNumberinTranHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardNumberinTranHistory
        {
            get
            {
                if (this.CardNumberinTranHistoryValueSpecified)
                {
                    return this.CardNumberinTranHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardNumberinTranHistoryValue = value.GetValueOrDefault();
                this.CardNumberinTranHistoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardType", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short CardTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardType
        {
            get
            {
                if (this.CardTypeValueSpecified)
                {
                    return this.CardTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardTypeValue = value.GetValueOrDefault();
                this.CardTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeMasterCardCcaFee", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool ChargeMasterCardCcaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeMasterCardCcaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeMasterCardCcaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargeMasterCardCcaFee
        {
            get
            {
                if (this.ChargeMasterCardCcaFeeValueSpecified)
                {
                    return this.ChargeMasterCardCcaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeMasterCardCcaFeeValue = value.GetValueOrDefault();
                this.ChargeMasterCardCcaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeMasterCardIcaFee", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool ChargeMasterCardIcaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeMasterCardIcaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeMasterCardIcaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargeMasterCardIcaFee
        {
            get
            {
                if (this.ChargeMasterCardIcaFeeValueSpecified)
                {
                    return this.ChargeMasterCardIcaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeMasterCardIcaFeeValue = value.GetValueOrDefault();
                this.ChargeMasterCardIcaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckActivationDate", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool CheckActivationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckActivationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckActivationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckActivationDate
        {
            get
            {
                if (this.CheckActivationDateValueSpecified)
                {
                    return this.CheckActivationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckActivationDateValue = value.GetValueOrDefault();
                this.CheckActivationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckOnlineMsgExpDate", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool CheckOnlineMsgExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckOnlineMsgExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckOnlineMsgExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckOnlineMsgExpDate
        {
            get
            {
                if (this.CheckOnlineMsgExpDateValueSpecified)
                {
                    return this.CheckOnlineMsgExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckOnlineMsgExpDateValue = value.GetValueOrDefault();
                this.CheckOnlineMsgExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChgVisaMultiCrrncyIsaFee", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool ChgVisaMultiCrrncyIsaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChgVisaMultiCrrncyIsaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChgVisaMultiCrrncyIsaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChgVisaMultiCrrncyIsaFee
        {
            get
            {
                if (this.ChgVisaMultiCrrncyIsaFeeValueSpecified)
                {
                    return this.ChgVisaMultiCrrncyIsaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChgVisaMultiCrrncyIsaFeeValue = value.GetValueOrDefault();
                this.ChgVisaMultiCrrncyIsaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChgVisasGlCrrncyIsaFee", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool ChgVisasGlCrrncyIsaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChgVisasGlCrrncyIsaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChgVisasGlCrrncyIsaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChgVisasGlCrrncyIsaFee
        {
            get
            {
                if (this.ChgVisasGlCrrncyIsaFeeValueSpecified)
                {
                    return this.ChgVisasGlCrrncyIsaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChgVisasGlCrrncyIsaFeeValue = value.GetValueOrDefault();
                this.ChgVisasGlCrrncyIsaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditFacility", Order=28, Form=XmlSchemaForm.Unqualified)]
        public short CreditFacilityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditFacility property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditFacilityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditFacility
        {
            get
            {
                if (this.CreditFacilityValueSpecified)
                {
                    return this.CreditFacilityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditFacilityValue = value.GetValueOrDefault();
                this.CreditFacilityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeactivatePreviousCard", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool DeactivatePreviousCardValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeactivatePreviousCard property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeactivatePreviousCardValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeactivatePreviousCard
        {
            get
            {
                if (this.DeactivatePreviousCardValueSpecified)
                {
                    return this.DeactivatePreviousCardValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeactivatePreviousCardValue = value.GetValueOrDefault();
                this.DeactivatePreviousCardValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeactvPrevCardExclWarnCd", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short DeactvPrevCardExclWarnCdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeactvPrevCardExclWarnCd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeactvPrevCardExclWarnCdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DeactvPrevCardExclWarnCd
        {
            get
            {
                if (this.DeactvPrevCardExclWarnCdValueSpecified)
                {
                    return this.DeactvPrevCardExclWarnCdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeactvPrevCardExclWarnCdValue = value.GetValueOrDefault();
                this.DeactvPrevCardExclWarnCdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FundingAccount", Order=31, Form=XmlSchemaForm.Unqualified)]
        public short FundingAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FundingAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FundingAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FundingAccount
        {
            get
            {
                if (this.FundingAccountValueSpecified)
                {
                    return this.FundingAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FundingAccountValue = value.GetValueOrDefault();
                this.FundingAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdLogicOption", Order=32, Form=XmlSchemaForm.Unqualified)]
        public short IdLogicOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdLogicOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdLogicOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdLogicOption
        {
            get
            {
                if (this.IdLogicOptionValueSpecified)
                {
                    return this.IdLogicOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdLogicOptionValue = value.GetValueOrDefault();
                this.IdLogicOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineCardLimitCustomCondition_2> _limitCustomCondition;
        
        [XmlElementAttribute("LimitCustomCondition", Order=33, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineCardLimitCustomCondition_2> LimitCustomCondition
        {
            get
            {
                return _limitCustomCondition;
            }
            set
            {
                _limitCustomCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitCustomCondition collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitCustomConditionSpecified
        {
            get
            {
                return ((this.LimitCustomCondition != null) 
                            && (this.LimitCustomCondition.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OnlineCard_2" /> class.</para>
        /// </summary>
        public OnlineCard_2()
        {
            this._limitCustomCondition = new Collection<OnlineCardLimitCustomCondition_2>();
            this._limitDescription = new Collection<OnlineCardLimitDescription_2>();
            this._limitMcc = new Collection<OnlineCardLimitMcc_2>();
            this._limitSourceCodes = new Collection<OnlineCardLimitSourceCodes_2>();
            this._limitTransactionCodes = new Collection<OnlineCardLimitTransactionCodes_2>();
            this._limitTransactionSubTypes = new Collection<OnlineCardLimitTransactionSubTypes_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineCardLimitDescription_2> _limitDescription;
        
        [XmlElementAttribute("LimitDescription", Order=34, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineCardLimitDescription_2> LimitDescription
        {
            get
            {
                return _limitDescription;
            }
            set
            {
                _limitDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitDescriptionSpecified
        {
            get
            {
                return ((this.LimitDescription != null) 
                            && (this.LimitDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineCardLimitMcc_2> _limitMcc;
        
        [XmlElementAttribute("LimitMcc", Order=35, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineCardLimitMcc_2> LimitMcc
        {
            get
            {
                return _limitMcc;
            }
            set
            {
                _limitMcc = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitMcc collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitMccSpecified
        {
            get
            {
                return ((this.LimitMcc != null) 
                            && (this.LimitMcc.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineCardLimitSourceCodes_2> _limitSourceCodes;
        
        [XmlElementAttribute("LimitSourceCodes", Order=36, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineCardLimitSourceCodes_2> LimitSourceCodes
        {
            get
            {
                return _limitSourceCodes;
            }
            set
            {
                _limitSourceCodes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitSourceCodes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitSourceCodesSpecified
        {
            get
            {
                return ((this.LimitSourceCodes != null) 
                            && (this.LimitSourceCodes.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineCardLimitTransactionCodes_2> _limitTransactionCodes;
        
        [XmlElementAttribute("LimitTransactionCodes", Order=37, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineCardLimitTransactionCodes_2> LimitTransactionCodes
        {
            get
            {
                return _limitTransactionCodes;
            }
            set
            {
                _limitTransactionCodes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitTransactionCodes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitTransactionCodesSpecified
        {
            get
            {
                return ((this.LimitTransactionCodes != null) 
                            && (this.LimitTransactionCodes.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<OnlineCardLimitTransactionSubTypes_2> _limitTransactionSubTypes;
        
        [XmlElementAttribute("LimitTransactionSubTypes", Order=38, Form=XmlSchemaForm.Unqualified)]
        public Collection<OnlineCardLimitTransactionSubTypes_2> LimitTransactionSubTypes
        {
            get
            {
                return _limitTransactionSubTypes;
            }
            set
            {
                _limitTransactionSubTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitTransactionSubTypes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitTransactionSubTypesSpecified
        {
            get
            {
                return ((this.LimitTransactionSubTypes != null) 
                            && (this.LimitTransactionSubTypes.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardCcaRate", Order=39, Form=XmlSchemaForm.Unqualified)]
        public decimal MasterCardCcaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardCcaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardCcaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MasterCardCcaRate
        {
            get
            {
                if (this.MasterCardCcaRateValueSpecified)
                {
                    return this.MasterCardCcaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardCcaRateValue = value.GetValueOrDefault();
                this.MasterCardCcaRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardIcaRate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal MasterCardIcaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardIcaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardIcaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MasterCardIcaRate
        {
            get
            {
                if (this.MasterCardIcaRateValueSpecified)
                {
                    return this.MasterCardIcaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardIcaRateValue = value.GetValueOrDefault();
                this.MasterCardIcaRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchOnlineMsgExpDate", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool MatchOnlineMsgExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchOnlineMsgExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchOnlineMsgExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MatchOnlineMsgExpDate
        {
            get
            {
                if (this.MatchOnlineMsgExpDateValueSpecified)
                {
                    return this.MatchOnlineMsgExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchOnlineMsgExpDateValue = value.GetValueOrDefault();
                this.MatchOnlineMsgExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAfdApprForGreaterAmt", Order=42, Form=XmlSchemaForm.Unqualified)]
        public decimal MaxAfdApprForGreaterAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAfdApprForGreaterAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAfdApprForGreaterAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MaxAfdApprForGreaterAmt
        {
            get
            {
                if (this.MaxAfdApprForGreaterAmtValueSpecified)
                {
                    return this.MaxAfdApprForGreaterAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAfdApprForGreaterAmtValue = value.GetValueOrDefault();
                this.MaxAfdApprForGreaterAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MccInTranHistory", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool MccInTranHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MccInTranHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MccInTranHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MccInTranHistory
        {
            get
            {
                if (this.MccInTranHistoryValueSpecified)
                {
                    return this.MccInTranHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MccInTranHistoryValue = value.GetValueOrDefault();
                this.MccInTranHistoryValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OdToleranceAvailBalList", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string OdToleranceAvailBalList { get; set; }
        
        [XmlElementAttribute("OdTransferAvailBalList", Order=45, Form=XmlSchemaForm.Unqualified)]
        public string OdTransferAvailBalList { get; set; }
        
        [XmlElementAttribute("OverdrawToleranceApprList", Order=46, Form=XmlSchemaForm.Unqualified)]
        public string OverdrawToleranceApprList { get; set; }
        
        [XmlElementAttribute("OverdrawTransferApprList", Order=47, Form=XmlSchemaForm.Unqualified)]
        public string OverdrawTransferApprList { get; set; }
        
        [XmlElementAttribute("PctOverLocAvailBalList", Order=48, Form=XmlSchemaForm.Unqualified)]
        public string PctOverLocAvailBalList { get; set; }
        
        [XmlElementAttribute("PosAmountLimitFields", Order=49, Form=XmlSchemaForm.Unqualified)]
        public string PosAmountLimitFields { get; set; }
        
        [XmlElementAttribute("PosAmountUsedFields", Order=50, Form=XmlSchemaForm.Unqualified)]
        public string PosAmountUsedFields { get; set; }
        
        [XmlElementAttribute("PosCountLimitFields", Order=51, Form=XmlSchemaForm.Unqualified)]
        public string PosCountLimitFields { get; set; }
        
        [XmlElementAttribute("PosCountUsedFields", Order=52, Form=XmlSchemaForm.Unqualified)]
        public string PosCountUsedFields { get; set; }
        
        [XmlElementAttribute("PosttoAltDraftList", Order=53, Form=XmlSchemaForm.Unqualified)]
        public string PosttoAltDraftList { get; set; }
        
        [XmlElementAttribute("PosttoAltFundingList", Order=54, Form=XmlSchemaForm.Unqualified)]
        public string PosttoAltFundingList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServiceAccessCode", Order=55, Form=XmlSchemaForm.Unqualified)]
        public short ServiceAccessCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceAccessCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServiceAccessCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ServiceAccessCode
        {
            get
            {
                if (this.ServiceAccessCodeValueSpecified)
                {
                    return this.ServiceAccessCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceAccessCodeValue = value.GetValueOrDefault();
                this.ServiceAccessCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SigAmountLimitFields", Order=56, Form=XmlSchemaForm.Unqualified)]
        public string SigAmountLimitFields { get; set; }
        
        [XmlElementAttribute("SigAmountUsedFields", Order=57, Form=XmlSchemaForm.Unqualified)]
        public string SigAmountUsedFields { get; set; }
        
        [XmlElementAttribute("SigCountLimitFields", Order=58, Form=XmlSchemaForm.Unqualified)]
        public string SigCountLimitFields { get; set; }
        
        [XmlElementAttribute("SigCountUsedFields", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string SigCountUsedFields { get; set; }
        
        [XmlElementAttribute("SignatureDescription", Order=60, Form=XmlSchemaForm.Unqualified)]
        public string SignatureDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SuffixPosition", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short SuffixPositionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SuffixPosition property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SuffixPositionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SuffixPosition
        {
            get
            {
                if (this.SuffixPositionValueSpecified)
                {
                    return this.SuffixPositionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SuffixPositionValue = value.GetValueOrDefault();
                this.SuffixPositionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UniqueCardNumber", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool UniqueCardNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UniqueCardNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UniqueCardNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UniqueCardNumber
        {
            get
            {
                if (this.UniqueCardNumberValueSpecified)
                {
                    return this.UniqueCardNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UniqueCardNumberValue = value.GetValueOrDefault();
                this.UniqueCardNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseAccessEnableFlags", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool UseAccessEnableFlagsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseAccessEnableFlags property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseAccessEnableFlagsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseAccessEnableFlags
        {
            get
            {
                if (this.UseAccessEnableFlagsValueSpecified)
                {
                    return this.UseAccessEnableFlagsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseAccessEnableFlagsValue = value.GetValueOrDefault();
                this.UseAccessEnableFlagsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ValidateCheckDigit", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool ValidateCheckDigitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidateCheckDigit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValidateCheckDigitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ValidateCheckDigit
        {
            get
            {
                if (this.ValidateCheckDigitValueSpecified)
                {
                    return this.ValidateCheckDigitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValidateCheckDigitValue = value.GetValueOrDefault();
                this.ValidateCheckDigitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaMultiCurrencyIsaRate", Order=65, Form=XmlSchemaForm.Unqualified)]
        public decimal VisaMultiCurrencyIsaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaMultiCurrencyIsaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaMultiCurrencyIsaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> VisaMultiCurrencyIsaRate
        {
            get
            {
                if (this.VisaMultiCurrencyIsaRateValueSpecified)
                {
                    return this.VisaMultiCurrencyIsaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaMultiCurrencyIsaRateValue = value.GetValueOrDefault();
                this.VisaMultiCurrencyIsaRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaSingleCurrencyIsaRate", Order=66, Form=XmlSchemaForm.Unqualified)]
        public decimal VisaSingleCurrencyIsaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaSingleCurrencyIsaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaSingleCurrencyIsaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> VisaSingleCurrencyIsaRate
        {
            get
            {
                if (this.VisaSingleCurrencyIsaRateValueSpecified)
                {
                    return this.VisaSingleCurrencyIsaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaSingleCurrencyIsaRateValue = value.GetValueOrDefault();
                this.VisaSingleCurrencyIsaRateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=67, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MerchantReturnAuths", Order=68, Form=XmlSchemaForm.Unqualified)]
        public short MerchantReturnAuthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MerchantReturnAuths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MerchantReturnAuthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MerchantReturnAuths
        {
            get
            {
                if (this.MerchantReturnAuthsValueSpecified)
                {
                    return this.MerchantReturnAuthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MerchantReturnAuthsValue = value.GetValueOrDefault();
                this.MerchantReturnAuthsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_2", Order=69, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version2 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=70)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
