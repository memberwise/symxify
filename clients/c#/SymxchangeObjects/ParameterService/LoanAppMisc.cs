//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanAppMisc", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LoanAppMisc", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class LoanAppMisc
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Account", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Account property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Account
        {
            get
            {
                if (this.AccountValueSpecified)
                {
                    return this.AccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AccountValue = value.GetValueOrDefault();
                this.AccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AccountType", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AccountTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccountType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AccountTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AccountType
        {
            get
            {
                if (this.AccountTypeValueSpecified)
                {
                    return this.AccountTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AccountTypeValue = value.GetValueOrDefault();
                this.AccountTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppMiscAdditionalInfoHeader> _additionalInfoHeader;
        
        [XmlElementAttribute("AdditionalInfoHeader", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppMiscAdditionalInfoHeader> AdditionalInfoHeader
        {
            get
            {
                return _additionalInfoHeader;
            }
            set
            {
                _additionalInfoHeader = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AdditionalInfoHeader collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AdditionalInfoHeaderSpecified
        {
            get
            {
                return ((this.AdditionalInfoHeader != null) 
                            && (this.AdditionalInfoHeader.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanAppMisc" /> class.</para>
        /// </summary>
        public LoanAppMisc()
        {
            this._additionalInfoHeader = new Collection<LoanAppMiscAdditionalInfoHeader>();
            this._additionalInfoJustify = new Collection<LoanAppMiscAdditionalInfoJustify>();
            this._appTypeMaritalStatus = new Collection<LoanAppMiscAppTypeMaritalStatus>();
            this._creditUnionNameTransunion = new Collection<LoanAppMiscCreditUnionNameTransunion>();
            this._excludeTrdItemsTransunion = new Collection<LoanAppMiscExcludeTrdItemsTransunion>();
            this._nonMemberAccount = new Collection<LoanAppMiscNonMemberAccount>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppMiscAdditionalInfoJustify> _additionalInfoJustify;
        
        [XmlElementAttribute("AdditionalInfoJustify", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppMiscAdditionalInfoJustify> AdditionalInfoJustify
        {
            get
            {
                return _additionalInfoJustify;
            }
            set
            {
                _additionalInfoJustify = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AdditionalInfoJustify collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AdditionalInfoJustifySpecified
        {
            get
            {
                return ((this.AdditionalInfoJustify != null) 
                            && (this.AdditionalInfoJustify.Count != 0));
            }
        }
        
        [XmlElementAttribute("AdditionalInfoSpecfileName", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string AdditionalInfoSpecfileName { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppMiscAppTypeMaritalStatus> _appTypeMaritalStatus;
        
        [XmlElementAttribute("AppTypeMaritalStatus", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppMiscAppTypeMaritalStatus> AppTypeMaritalStatus
        {
            get
            {
                return _appTypeMaritalStatus;
            }
            set
            {
                _appTypeMaritalStatus = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AppTypeMaritalStatus collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AppTypeMaritalStatusSpecified
        {
            get
            {
                return ((this.AppTypeMaritalStatus != null) 
                            && (this.AppTypeMaritalStatus.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoCalcDebtRatios", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AutoCalcDebtRatiosValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoCalcDebtRatios property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoCalcDebtRatiosValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutoCalcDebtRatios
        {
            get
            {
                if (this.AutoCalcDebtRatiosValueSpecified)
                {
                    return this.AutoCalcDebtRatiosValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoCalcDebtRatiosValue = value.GetValueOrDefault();
                this.AutoCalcDebtRatiosValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoCalcTotals", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool AutoCalcTotalsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoCalcTotals property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoCalcTotalsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutoCalcTotals
        {
            get
            {
                if (this.AutoCalcTotalsValueSpecified)
                {
                    return this.AutoCalcTotalsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoCalcTotalsValue = value.GetValueOrDefault();
                this.AutoCalcTotalsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoCreateFinanceRecords", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool AutoCreateFinanceRecordsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoCreateFinanceRecords property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoCreateFinanceRecordsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutoCreateFinanceRecords
        {
            get
            {
                if (this.AutoCreateFinanceRecordsValueSpecified)
                {
                    return this.AutoCreateFinanceRecordsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoCreateFinanceRecordsValue = value.GetValueOrDefault();
                this.AutoCreateFinanceRecordsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoCreatePersonRecords", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool AutoCreatePersonRecordsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoCreatePersonRecords property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoCreatePersonRecordsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutoCreatePersonRecords
        {
            get
            {
                if (this.AutoCreatePersonRecordsValueSpecified)
                {
                    return this.AutoCreatePersonRecordsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoCreatePersonRecordsValue = value.GetValueOrDefault();
                this.AutoCreatePersonRecordsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutomateRetrievalofCredRpt", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool AutomateRetrievalofCredRptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutomateRetrievalofCredRpt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutomateRetrievalofCredRptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutomateRetrievalofCredRpt
        {
            get
            {
                if (this.AutomateRetrievalofCredRptValueSpecified)
                {
                    return this.AutomateRetrievalofCredRptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutomateRetrievalofCredRptValue = value.GetValueOrDefault();
                this.AutomateRetrievalofCredRptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutomateWorkflowSteps", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool AutomateWorkflowStepsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutomateWorkflowSteps property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutomateWorkflowStepsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutomateWorkflowSteps
        {
            get
            {
                if (this.AutomateWorkflowStepsValueSpecified)
                {
                    return this.AutomateWorkflowStepsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutomateWorkflowStepsValue = value.GetValueOrDefault();
                this.AutomateWorkflowStepsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClearReusedAppNotes", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short ClearReusedAppNotesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClearReusedAppNotes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClearReusedAppNotesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ClearReusedAppNotes
        {
            get
            {
                if (this.ClearReusedAppNotesValueSpecified)
                {
                    return this.ClearReusedAppNotesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClearReusedAppNotesValue = value.GetValueOrDefault();
                this.ClearReusedAppNotesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConsolidateFinanceRecList", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool ConsolidateFinanceRecListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsolidateFinanceRecList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConsolidateFinanceRecListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ConsolidateFinanceRecList
        {
            get
            {
                if (this.ConsolidateFinanceRecListValueSpecified)
                {
                    return this.ConsolidateFinanceRecListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConsolidateFinanceRecListValue = value.GetValueOrDefault();
                this.ConsolidateFinanceRecListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CopyIncometoMemberRecord", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool CopyIncometoMemberRecordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CopyIncometoMemberRecord property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CopyIncometoMemberRecordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CopyIncometoMemberRecord
        {
            get
            {
                if (this.CopyIncometoMemberRecordValueSpecified)
                {
                    return this.CopyIncometoMemberRecordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CopyIncometoMemberRecordValue = value.GetValueOrDefault();
                this.CopyIncometoMemberRecordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CopyMovetoNewExistingAcct", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool CopyMovetoNewExistingAcctValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CopyMovetoNewExistingAcct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CopyMovetoNewExistingAcctValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CopyMovetoNewExistingAcct
        {
            get
            {
                if (this.CopyMovetoNewExistingAcctValueSpecified)
                {
                    return this.CopyMovetoNewExistingAcctValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CopyMovetoNewExistingAcctValue = value.GetValueOrDefault();
                this.CopyMovetoNewExistingAcctValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateNoteWhenForwarded", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool CreateNoteWhenForwardedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateNoteWhenForwarded property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateNoteWhenForwardedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateNoteWhenForwarded
        {
            get
            {
                if (this.CreateNoteWhenForwardedValueSpecified)
                {
                    return this.CreateNoteWhenForwardedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateNoteWhenForwardedValue = value.GetValueOrDefault();
                this.CreateNoteWhenForwardedValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppMiscCreditUnionNameTransunion> _creditUnionNameTransunion;
        
        [XmlElementAttribute("CreditUnionNameTransunion", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppMiscCreditUnionNameTransunion> CreditUnionNameTransunion
        {
            get
            {
                return _creditUnionNameTransunion;
            }
            set
            {
                _creditUnionNameTransunion = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CreditUnionNameTransunion collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CreditUnionNameTransunionSpecified
        {
            get
            {
                return ((this.CreditUnionNameTransunion != null) 
                            && (this.CreditUnionNameTransunion.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DebtRatioExcludeCurrApp", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool DebtRatioExcludeCurrAppValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DebtRatioExcludeCurrApp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DebtRatioExcludeCurrAppValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DebtRatioExcludeCurrApp
        {
            get
            {
                if (this.DebtRatioExcludeCurrAppValueSpecified)
                {
                    return this.DebtRatioExcludeCurrAppValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DebtRatioExcludeCurrAppValue = value.GetValueOrDefault();
                this.DebtRatioExcludeCurrAppValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DebtRatioIncludeOtherApp", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool DebtRatioIncludeOtherAppValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DebtRatioIncludeOtherApp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DebtRatioIncludeOtherAppValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DebtRatioIncludeOtherApp
        {
            get
            {
                if (this.DebtRatioIncludeOtherAppValueSpecified)
                {
                    return this.DebtRatioIncludeOtherAppValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DebtRatioIncludeOtherAppValue = value.GetValueOrDefault();
                this.DebtRatioIncludeOtherAppValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DefaultBranch", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool DefaultBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DefaultBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DefaultBranch
        {
            get
            {
                if (this.DefaultBranchValueSpecified)
                {
                    return this.DefaultBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DefaultBranchValue = value.GetValueOrDefault();
                this.DefaultBranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DisclosureSpecfileName", Order=21, Form=XmlSchemaForm.Unqualified)]
        public string DisclosureSpecfileName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DlrRsrvAcctgTrackingType", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short DlrRsrvAcctgTrackingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DlrRsrvAcctgTrackingType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DlrRsrvAcctgTrackingTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DlrRsrvAcctgTrackingType
        {
            get
            {
                if (this.DlrRsrvAcctgTrackingTypeValueSpecified)
                {
                    return this.DlrRsrvAcctgTrackingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DlrRsrvAcctgTrackingTypeValue = value.GetValueOrDefault();
                this.DlrRsrvAcctgTrackingTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppMiscExcludeTrdItemsTransunion> _excludeTrdItemsTransunion;
        
        [XmlElementAttribute("ExcludeTrdItemsTransunion", Order=23, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppMiscExcludeTrdItemsTransunion> ExcludeTrdItemsTransunion
        {
            get
            {
                return _excludeTrdItemsTransunion;
            }
            set
            {
                _excludeTrdItemsTransunion = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ExcludeTrdItemsTransunion collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ExcludeTrdItemsTransunionSpecified
        {
            get
            {
                return ((this.ExcludeTrdItemsTransunion != null) 
                            && (this.ExcludeTrdItemsTransunion.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FieldCtrlProjectionScreen", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool FieldCtrlProjectionScreenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FieldCtrlProjectionScreen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FieldCtrlProjectionScreenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FieldCtrlProjectionScreen
        {
            get
            {
                if (this.FieldCtrlProjectionScreenValueSpecified)
                {
                    return this.FieldCtrlProjectionScreenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FieldCtrlProjectionScreenValue = value.GetValueOrDefault();
                this.FieldCtrlProjectionScreenValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("FundingSpecfileName", Order=25, Form=XmlSchemaForm.Unqualified)]
        public string FundingSpecfileName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FundingTrackingType", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short FundingTrackingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FundingTrackingType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FundingTrackingTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FundingTrackingType
        {
            get
            {
                if (this.FundingTrackingTypeValueSpecified)
                {
                    return this.FundingTrackingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FundingTrackingTypeValue = value.GetValueOrDefault();
                this.FundingTrackingTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanApplicationId", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool LoanApplicationIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanApplicationId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanApplicationIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanApplicationId
        {
            get
            {
                if (this.LoanApplicationIdValueSpecified)
                {
                    return this.LoanApplicationIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanApplicationIdValue = value.GetValueOrDefault();
                this.LoanApplicationIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCreationOption", Order=28, Form=XmlSchemaForm.Unqualified)]
        public short LoanCreationOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCreationOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCreationOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LoanCreationOption
        {
            get
            {
                if (this.LoanCreationOptionValueSpecified)
                {
                    return this.LoanCreationOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCreationOptionValue = value.GetValueOrDefault();
                this.LoanCreationOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MasterApp", Order=29, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MasterApp { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MembershipApplicationType", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short MembershipApplicationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MembershipApplicationType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MembershipApplicationTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MembershipApplicationType
        {
            get
            {
                if (this.MembershipApplicationTypeValueSpecified)
                {
                    return this.MembershipApplicationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MembershipApplicationTypeValue = value.GetValueOrDefault();
                this.MembershipApplicationTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MsgUserIds", Order=31, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MsgUserIds { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppMiscNonMemberAccount> _nonMemberAccount;
        
        [XmlElementAttribute("NonMemberAccount", Order=32, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppMiscNonMemberAccount> NonMemberAccount
        {
            get
            {
                return _nonMemberAccount;
            }
            set
            {
                _nonMemberAccount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NonMemberAccount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NonMemberAccountSpecified
        {
            get
            {
                return ((this.NonMemberAccount != null) 
                            && (this.NonMemberAccount.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictApplicationDate", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictApplicationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictApplicationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictApplicationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictApplicationDate
        {
            get
            {
                if (this.RestrictApplicationDateValueSpecified)
                {
                    return this.RestrictApplicationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictApplicationDateValue = value.GetValueOrDefault();
                this.RestrictApplicationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictApplicationType", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictApplicationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictApplicationType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictApplicationTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictApplicationType
        {
            get
            {
                if (this.RestrictApplicationTypeValueSpecified)
                {
                    return this.RestrictApplicationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictApplicationTypeValue = value.GetValueOrDefault();
                this.RestrictApplicationTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictApprovalAmount", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictApprovalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictApprovalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictApprovalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictApprovalAmount
        {
            get
            {
                if (this.RestrictApprovalAmountValueSpecified)
                {
                    return this.RestrictApprovalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictApprovalAmountValue = value.GetValueOrDefault();
                this.RestrictApprovalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictApprovalCode", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictApprovalCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictApprovalCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictApprovalCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictApprovalCode
        {
            get
            {
                if (this.RestrictApprovalCodeValueSpecified)
                {
                    return this.RestrictApprovalCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictApprovalCodeValue = value.GetValueOrDefault();
                this.RestrictApprovalCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictApprovalDate", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictApprovalDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictApprovalDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictApprovalDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictApprovalDate
        {
            get
            {
                if (this.RestrictApprovalDateValueSpecified)
                {
                    return this.RestrictApprovalDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictApprovalDateValue = value.GetValueOrDefault();
                this.RestrictApprovalDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictBalloonAmount", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictBalloonAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictBalloonAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictBalloonAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictBalloonAmount
        {
            get
            {
                if (this.RestrictBalloonAmountValueSpecified)
                {
                    return this.RestrictBalloonAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictBalloonAmountValue = value.GetValueOrDefault();
                this.RestrictBalloonAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictBalloonDate", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictBalloonDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictBalloonDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictBalloonDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictBalloonDate
        {
            get
            {
                if (this.RestrictBalloonDateValueSpecified)
                {
                    return this.RestrictBalloonDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictBalloonDateValue = value.GetValueOrDefault();
                this.RestrictBalloonDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCounterOffExpDate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCounterOffExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCounterOffExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCounterOffExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCounterOffExpDate
        {
            get
            {
                if (this.RestrictCounterOffExpDateValueSpecified)
                {
                    return this.RestrictCounterOffExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCounterOffExpDateValue = value.GetValueOrDefault();
                this.RestrictCounterOffExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCounterOrigAmt", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCounterOrigAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCounterOrigAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCounterOrigAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCounterOrigAmt
        {
            get
            {
                if (this.RestrictCounterOrigAmtValueSpecified)
                {
                    return this.RestrictCounterOrigAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCounterOrigAmtValue = value.GetValueOrDefault();
                this.RestrictCounterOrigAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCreationDate", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCreationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCreationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCreationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCreationDate
        {
            get
            {
                if (this.RestrictCreationDateValueSpecified)
                {
                    return this.RestrictCreationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCreationDateValue = value.GetValueOrDefault();
                this.RestrictCreationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuDraftBal", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuDraftBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuDraftBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuDraftBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuDraftBal
        {
            get
            {
                if (this.RestrictCuDraftBalValueSpecified)
                {
                    return this.RestrictCuDraftBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuDraftBalValue = value.GetValueOrDefault();
                this.RestrictCuDraftBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuLocLoanBal", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuLocLoanBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuLocLoanBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuLocLoanBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuLocLoanBal
        {
            get
            {
                if (this.RestrictCuLocLoanBalValueSpecified)
                {
                    return this.RestrictCuLocLoanBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuLocLoanBalValue = value.GetValueOrDefault();
                this.RestrictCuLocLoanBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuLocPmts", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuLocPmtsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuLocPmts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuLocPmtsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuLocPmts
        {
            get
            {
                if (this.RestrictCuLocPmtsValueSpecified)
                {
                    return this.RestrictCuLocPmtsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuLocPmtsValue = value.GetValueOrDefault();
                this.RestrictCuLocPmtsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuOeLoanBal", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuOeLoanBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuOeLoanBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuOeLoanBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuOeLoanBal
        {
            get
            {
                if (this.RestrictCuOeLoanBalValueSpecified)
                {
                    return this.RestrictCuOeLoanBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuOeLoanBalValue = value.GetValueOrDefault();
                this.RestrictCuOeLoanBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuOePmts", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuOePmtsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuOePmts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuOePmtsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuOePmts
        {
            get
            {
                if (this.RestrictCuOePmtsValueSpecified)
                {
                    return this.RestrictCuOePmtsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuOePmtsValue = value.GetValueOrDefault();
                this.RestrictCuOePmtsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuShareBal", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuShareBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuShareBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuShareBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuShareBal
        {
            get
            {
                if (this.RestrictCuShareBalValueSpecified)
                {
                    return this.RestrictCuShareBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuShareBalValue = value.GetValueOrDefault();
                this.RestrictCuShareBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictCuTotalCreditLim", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictCuTotalCreditLimValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictCuTotalCreditLim property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictCuTotalCreditLimValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictCuTotalCreditLim
        {
            get
            {
                if (this.RestrictCuTotalCreditLimValueSpecified)
                {
                    return this.RestrictCuTotalCreditLimValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictCuTotalCreditLimValue = value.GetValueOrDefault();
                this.RestrictCuTotalCreditLimValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDebtRatio1", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDebtRatio1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDebtRatio1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDebtRatio1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDebtRatio1
        {
            get
            {
                if (this.RestrictDebtRatio1ValueSpecified)
                {
                    return this.RestrictDebtRatio1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDebtRatio1Value = value.GetValueOrDefault();
                this.RestrictDebtRatio1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDebtRatio2", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDebtRatio2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDebtRatio2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDebtRatio2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDebtRatio2
        {
            get
            {
                if (this.RestrictDebtRatio2ValueSpecified)
                {
                    return this.RestrictDebtRatio2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDebtRatio2Value = value.GetValueOrDefault();
                this.RestrictDebtRatio2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDebtRatio3", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDebtRatio3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDebtRatio3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDebtRatio3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDebtRatio3
        {
            get
            {
                if (this.RestrictDebtRatio3ValueSpecified)
                {
                    return this.RestrictDebtRatio3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDebtRatio3Value = value.GetValueOrDefault();
                this.RestrictDebtRatio3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDebtRatio4", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDebtRatio4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDebtRatio4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDebtRatio4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDebtRatio4
        {
            get
            {
                if (this.RestrictDebtRatio4ValueSpecified)
                {
                    return this.RestrictDebtRatio4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDebtRatio4Value = value.GetValueOrDefault();
                this.RestrictDebtRatio4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDebtRatio5", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDebtRatio5Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDebtRatio5 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDebtRatio5ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDebtRatio5
        {
            get
            {
                if (this.RestrictDebtRatio5ValueSpecified)
                {
                    return this.RestrictDebtRatio5Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDebtRatio5Value = value.GetValueOrDefault();
                this.RestrictDebtRatio5ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDecisionCode", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDecisionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDecisionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDecisionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDecisionCode
        {
            get
            {
                if (this.RestrictDecisionCodeValueSpecified)
                {
                    return this.RestrictDecisionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDecisionCodeValue = value.GetValueOrDefault();
                this.RestrictDecisionCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictDecisionDate", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictDecisionDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictDecisionDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictDecisionDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictDecisionDate
        {
            get
            {
                if (this.RestrictDecisionDateValueSpecified)
                {
                    return this.RestrictDecisionDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictDecisionDateValue = value.GetValueOrDefault();
                this.RestrictDecisionDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictInsuranceType", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictInsuranceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictInsuranceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictInsuranceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictInsuranceType
        {
            get
            {
                if (this.RestrictInsuranceTypeValueSpecified)
                {
                    return this.RestrictInsuranceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictInsuranceTypeValue = value.GetValueOrDefault();
                this.RestrictInsuranceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictInterestRate", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictInterestRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictInterestRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictInterestRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictInterestRate
        {
            get
            {
                if (this.RestrictInterestRateValueSpecified)
                {
                    return this.RestrictInterestRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictInterestRateValue = value.GetValueOrDefault();
                this.RestrictInterestRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictLoanAmount", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictLoanAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictLoanAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictLoanAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictLoanAmount
        {
            get
            {
                if (this.RestrictLoanAmountValueSpecified)
                {
                    return this.RestrictLoanAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictLoanAmountValue = value.GetValueOrDefault();
                this.RestrictLoanAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictLoanCreditLimit", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictLoanCreditLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictLoanCreditLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictLoanCreditLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictLoanCreditLimit
        {
            get
            {
                if (this.RestrictLoanCreditLimitValueSpecified)
                {
                    return this.RestrictLoanCreditLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictLoanCreditLimitValue = value.GetValueOrDefault();
                this.RestrictLoanCreditLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictLoanMaturityDate", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictLoanMaturityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictLoanMaturityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictLoanMaturityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictLoanMaturityDate
        {
            get
            {
                if (this.RestrictLoanMaturityDateValueSpecified)
                {
                    return this.RestrictLoanMaturityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictLoanMaturityDateValue = value.GetValueOrDefault();
                this.RestrictLoanMaturityDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictLoanTerminMo", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictLoanTerminMoValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictLoanTerminMo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictLoanTerminMoValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictLoanTerminMo
        {
            get
            {
                if (this.RestrictLoanTerminMoValueSpecified)
                {
                    return this.RestrictLoanTerminMoValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictLoanTerminMoValue = value.GetValueOrDefault();
                this.RestrictLoanTerminMoValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictLoanType", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictLoanTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictLoanType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictLoanTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictLoanType
        {
            get
            {
                if (this.RestrictLoanTypeValueSpecified)
                {
                    return this.RestrictLoanTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictLoanTypeValue = value.GetValueOrDefault();
                this.RestrictLoanTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictPaymentAmount", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictPaymentAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictPaymentAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictPaymentAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictPaymentAmount
        {
            get
            {
                if (this.RestrictPaymentAmountValueSpecified)
                {
                    return this.RestrictPaymentAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictPaymentAmountValue = value.GetValueOrDefault();
                this.RestrictPaymentAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictPaymentFreq", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictPaymentFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictPaymentFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictPaymentFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictPaymentFreq
        {
            get
            {
                if (this.RestrictPaymentFreqValueSpecified)
                {
                    return this.RestrictPaymentFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictPaymentFreqValue = value.GetValueOrDefault();
                this.RestrictPaymentFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictSglPremDis", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictSglPremDisValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictSglPremDis property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictSglPremDisValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictSglPremDis
        {
            get
            {
                if (this.RestrictSglPremDisValueSpecified)
                {
                    return this.RestrictSglPremDisValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictSglPremDisValue = value.GetValueOrDefault();
                this.RestrictSglPremDisValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictSglPremLife", Order=67, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictSglPremLifeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictSglPremLife property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictSglPremLifeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictSglPremLife
        {
            get
            {
                if (this.RestrictSglPremLifeValueSpecified)
                {
                    return this.RestrictSglPremLifeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictSglPremLifeValue = value.GetValueOrDefault();
                this.RestrictSglPremLifeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScriptedLoanFunding", Order=68, Form=XmlSchemaForm.Unqualified)]
        public bool ScriptedLoanFundingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScriptedLoanFunding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScriptedLoanFundingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ScriptedLoanFunding
        {
            get
            {
                if (this.ScriptedLoanFundingValueSpecified)
                {
                    return this.ScriptedLoanFundingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScriptedLoanFundingValue = value.GetValueOrDefault();
                this.ScriptedLoanFundingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SearchExistingCredRptsDays", Order=69, Form=XmlSchemaForm.Unqualified)]
        public short SearchExistingCredRptsDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SearchExistingCredRptsDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SearchExistingCredRptsDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SearchExistingCredRptsDays
        {
            get
            {
                if (this.SearchExistingCredRptsDaysValueSpecified)
                {
                    return this.SearchExistingCredRptsDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SearchExistingCredRptsDaysValue = value.GetValueOrDefault();
                this.SearchExistingCredRptsDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TrdItemFinSkpBlankDesc", Order=70, Form=XmlSchemaForm.Unqualified)]
        public bool TrdItemFinSkpBlankDescValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrdItemFinSkpBlankDesc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TrdItemFinSkpBlankDescValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TrdItemFinSkpBlankDesc
        {
            get
            {
                if (this.TrdItemFinSkpBlankDescValueSpecified)
                {
                    return this.TrdItemFinSkpBlankDescValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TrdItemFinSkpBlankDescValue = value.GetValueOrDefault();
                this.TrdItemFinSkpBlankDescValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TrdItemFinSkpZero", Order=71, Form=XmlSchemaForm.Unqualified)]
        public short TrdItemFinSkpZeroValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrdItemFinSkpZero property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TrdItemFinSkpZeroValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TrdItemFinSkpZero
        {
            get
            {
                if (this.TrdItemFinSkpZeroValueSpecified)
                {
                    return this.TrdItemFinSkpZeroValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TrdItemFinSkpZeroValue = value.GetValueOrDefault();
                this.TrdItemFinSkpZeroValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TrdItemMinPmtCutoff", Order=72, Form=XmlSchemaForm.Unqualified)]
        public decimal TrdItemMinPmtCutoffValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrdItemMinPmtCutoff property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TrdItemMinPmtCutoffValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TrdItemMinPmtCutoff
        {
            get
            {
                if (this.TrdItemMinPmtCutoffValueSpecified)
                {
                    return this.TrdItemMinPmtCutoffValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TrdItemMinPmtCutoffValue = value.GetValueOrDefault();
                this.TrdItemMinPmtCutoffValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TrdItemMnthlyPmtRate", Order=73, Form=XmlSchemaForm.Unqualified)]
        public decimal TrdItemMnthlyPmtRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrdItemMnthlyPmtRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TrdItemMnthlyPmtRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TrdItemMnthlyPmtRate
        {
            get
            {
                if (this.TrdItemMnthlyPmtRateValueSpecified)
                {
                    return this.TrdItemMnthlyPmtRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TrdItemMnthlyPmtRateValue = value.GetValueOrDefault();
                this.TrdItemMnthlyPmtRateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserIds", Order=74, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap UserIds { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ValidateLnInterestAmount", Order=75, Form=XmlSchemaForm.Unqualified)]
        public bool ValidateLnInterestAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidateLnInterestAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValidateLnInterestAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ValidateLnInterestAmount
        {
            get
            {
                if (this.ValidateLnInterestAmountValueSpecified)
                {
                    return this.ValidateLnInterestAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValidateLnInterestAmountValue = value.GetValueOrDefault();
                this.ValidateLnInterestAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=76, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=77)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
