//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("PeriodicMtgFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("PeriodicMtgFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class PeriodicMtgFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmountDueNoteList", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AmountDueNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmountDueNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmountDueNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AmountDueNoteList
        {
            get
            {
                if (this.AmountDueNoteListValueSpecified)
                {
                    return this.AmountDueNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmountDueNoteListValue = value.GetValueOrDefault();
                this.AmountDueNoteListValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _collateralCodeList;
        
        [XmlElementAttribute("CollateralCodeList", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> CollateralCodeList
        {
            get
            {
                return _collateralCodeList;
            }
            set
            {
                _collateralCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CollateralCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CollateralCodeListSpecified
        {
            get
            {
                return ((this.CollateralCodeList != null) 
                            && (this.CollateralCodeList.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PeriodicMtgFields" /> class.</para>
        /// </summary>
        public PeriodicMtgFields()
        {
            this._collateralCodeList = new Collection<short>();
            this._loanPurposeList = new Collection<short>();
            this._loanTypeList = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqNoticeNoteList", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool DqNoticeNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqNoticeNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqNoticeNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DqNoticeNoteList
        {
            get
            {
                if (this.DqNoticeNoteListValueSpecified)
                {
                    return this.DqNoticeNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqNoticeNoteListValue = value.GetValueOrDefault();
                this.DqNoticeNoteListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExplAmtDueNoteList", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool ExplAmtDueNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExplAmtDueNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExplAmtDueNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExplAmtDueNoteList
        {
            get
            {
                if (this.ExplAmtDueNoteListValueSpecified)
                {
                    return this.ExplAmtDueNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExplAmtDueNoteListValue = value.GetValueOrDefault();
                this.ExplAmtDueNoteListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForeclosureNoteList", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool ForeclosureNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForeclosureNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForeclosureNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ForeclosureNoteList
        {
            get
            {
                if (this.ForeclosureNoteListValueSpecified)
                {
                    return this.ForeclosureNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForeclosureNoteListValue = value.GetValueOrDefault();
                this.ForeclosureNoteListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LateChargeWarningCode", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool LateChargeWarningCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LateChargeWarningCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LateChargeWarningCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LateChargeWarningCode
        {
            get
            {
                if (this.LateChargeWarningCodeValueSpecified)
                {
                    return this.LateChargeWarningCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LateChargeWarningCodeValue = value.GetValueOrDefault();
                this.LateChargeWarningCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanInfoNoteList", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool LoanInfoNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanInfoNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanInfoNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanInfoNoteList
        {
            get
            {
                if (this.LoanInfoNoteListValueSpecified)
                {
                    return this.LoanInfoNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanInfoNoteListValue = value.GetValueOrDefault();
                this.LoanInfoNoteListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanMsgsNoteList", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool LoanMsgsNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanMsgsNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanMsgsNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanMsgsNoteList
        {
            get
            {
                if (this.LoanMsgsNoteListValueSpecified)
                {
                    return this.LoanMsgsNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanMsgsNoteListValue = value.GetValueOrDefault();
                this.LoanMsgsNoteListValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _loanPurposeList;
        
        [XmlElementAttribute("LoanPurposeList", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LoanPurposeList
        {
            get
            {
                return _loanPurposeList;
            }
            set
            {
                _loanPurposeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LoanPurposeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LoanPurposeListSpecified
        {
            get
            {
                return ((this.LoanPurposeList != null) 
                            && (this.LoanPurposeList.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _loanTypeList;
        
        [XmlElementAttribute("LoanTypeList", Order=9, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LoanTypeList
        {
            get
            {
                return _loanTypeList;
            }
            set
            {
                _loanTypeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LoanTypeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LoanTypeListSpecified
        {
            get
            {
                return ((this.LoanTypeList != null) 
                            && (this.LoanTypeList.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LossMitNoteList", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool LossMitNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LossMitNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LossMitNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LossMitNoteList
        {
            get
            {
                if (this.LossMitNoteListValueSpecified)
                {
                    return this.LossMitNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LossMitNoteListValue = value.GetValueOrDefault();
                this.LossMitNoteListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PastPmtsNoteList", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool PastPmtsNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PastPmtsNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PastPmtsNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PastPmtsNoteList
        {
            get
            {
                if (this.PastPmtsNoteListValueSpecified)
                {
                    return this.PastPmtsNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PastPmtsNoteListValue = value.GetValueOrDefault();
                this.PastPmtsNoteListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransActNoteList", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool TransActNoteListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransActNoteList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransActNoteListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransActNoteList
        {
            get
            {
                if (this.TransActNoteListValueSpecified)
                {
                    return this.TransActNoteListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransActNoteListValue = value.GetValueOrDefault();
                this.TransActNoteListValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=13, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=14)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
