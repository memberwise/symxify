//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("IrsContriLimit", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("IrsContriLimit", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class IrsContriLimit
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cty401K", Order=0, Form=XmlSchemaForm.Unqualified)]
        public decimal Cty401KValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cty401K property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Cty401KValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cty401K
        {
            get
            {
                if (this.Cty401KValueSpecified)
                {
                    return this.Cty401KValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Cty401KValue = value.GetValueOrDefault();
                this.Cty401KValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cty401KCatchUp", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal Cty401KCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cty401KCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Cty401KCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cty401KCatchUp
        {
            get
            {
                if (this.Cty401KCatchUpValueSpecified)
                {
                    return this.Cty401KCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Cty401KCatchUpValue = value.GetValueOrDefault();
                this.Cty401KCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyCoverdellEsa", Order=2, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyCoverdellEsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyCoverdellEsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyCoverdellEsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyCoverdellEsa
        {
            get
            {
                if (this.CtyCoverdellEsaValueSpecified)
                {
                    return this.CtyCoverdellEsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyCoverdellEsaValue = value.GetValueOrDefault();
                this.CtyCoverdellEsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyDeferredComp", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyDeferredCompValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyDeferredComp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyDeferredCompValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyDeferredComp
        {
            get
            {
                if (this.CtyDeferredCompValueSpecified)
                {
                    return this.CtyDeferredCompValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyDeferredCompValue = value.GetValueOrDefault();
                this.CtyDeferredCompValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyDeferredCompCatchUp", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyDeferredCompCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyDeferredCompCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyDeferredCompCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyDeferredCompCatchUp
        {
            get
            {
                if (this.CtyDeferredCompCatchUpValueSpecified)
                {
                    return this.CtyDeferredCompCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyDeferredCompCatchUpValue = value.GetValueOrDefault();
                this.CtyDeferredCompCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyFamilyHsa", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyFamilyHsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyFamilyHsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyFamilyHsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyFamilyHsa
        {
            get
            {
                if (this.CtyFamilyHsaValueSpecified)
                {
                    return this.CtyFamilyHsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyFamilyHsaValue = value.GetValueOrDefault();
                this.CtyFamilyHsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyFamilyHsaCatchUp", Order=6, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyFamilyHsaCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyFamilyHsaCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyFamilyHsaCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyFamilyHsaCatchUp
        {
            get
            {
                if (this.CtyFamilyHsaCatchUpValueSpecified)
                {
                    return this.CtyFamilyHsaCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyFamilyHsaCatchUpValue = value.GetValueOrDefault();
                this.CtyFamilyHsaCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyGovernmental457", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyGovernmental457Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyGovernmental457 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyGovernmental457ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyGovernmental457
        {
            get
            {
                if (this.CtyGovernmental457ValueSpecified)
                {
                    return this.CtyGovernmental457Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyGovernmental457Value = value.GetValueOrDefault();
                this.CtyGovernmental457ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyGovernmental457CatchUp", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyGovernmental457CatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyGovernmental457CatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyGovernmental457CatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyGovernmental457CatchUp
        {
            get
            {
                if (this.CtyGovernmental457CatchUpValueSpecified)
                {
                    return this.CtyGovernmental457CatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyGovernmental457CatchUpValue = value.GetValueOrDefault();
                this.CtyGovernmental457CatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyIra", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyIra
        {
            get
            {
                if (this.CtyIraValueSpecified)
                {
                    return this.CtyIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyIraValue = value.GetValueOrDefault();
                this.CtyIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyIraCatchUp", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyIraCatchUp
        {
            get
            {
                if (this.CtyIraCatchUpValueSpecified)
                {
                    return this.CtyIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyIraCatchUpValue = value.GetValueOrDefault();
                this.CtyIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyRothConversion", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyRothConversionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyRothConversion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyRothConversionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyRothConversion
        {
            get
            {
                if (this.CtyRothConversionValueSpecified)
                {
                    return this.CtyRothConversionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyRothConversionValue = value.GetValueOrDefault();
                this.CtyRothConversionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyRothConversionCatchUp", Order=12, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyRothConversionCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyRothConversionCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyRothConversionCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyRothConversionCatchUp
        {
            get
            {
                if (this.CtyRothConversionCatchUpValueSpecified)
                {
                    return this.CtyRothConversionCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyRothConversionCatchUpValue = value.GetValueOrDefault();
                this.CtyRothConversionCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyRothIra", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyRothIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyRothIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyRothIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyRothIra
        {
            get
            {
                if (this.CtyRothIraValueSpecified)
                {
                    return this.CtyRothIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyRothIraValue = value.GetValueOrDefault();
                this.CtyRothIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyRothIraCatchUp", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyRothIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyRothIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyRothIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyRothIraCatchUp
        {
            get
            {
                if (this.CtyRothIraCatchUpValueSpecified)
                {
                    return this.CtyRothIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyRothIraCatchUpValue = value.GetValueOrDefault();
                this.CtyRothIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtySep", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal CtySepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtySep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtySepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtySep
        {
            get
            {
                if (this.CtySepValueSpecified)
                {
                    return this.CtySepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtySepValue = value.GetValueOrDefault();
                this.CtySepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtySimpleIra", Order=16, Form=XmlSchemaForm.Unqualified)]
        public decimal CtySimpleIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtySimpleIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtySimpleIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtySimpleIra
        {
            get
            {
                if (this.CtySimpleIraValueSpecified)
                {
                    return this.CtySimpleIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtySimpleIraValue = value.GetValueOrDefault();
                this.CtySimpleIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtySimpleIraCatchUp", Order=17, Form=XmlSchemaForm.Unqualified)]
        public decimal CtySimpleIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtySimpleIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtySimpleIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtySimpleIraCatchUp
        {
            get
            {
                if (this.CtySimpleIraCatchUpValueSpecified)
                {
                    return this.CtySimpleIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtySimpleIraCatchUpValue = value.GetValueOrDefault();
                this.CtySimpleIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtySingleHsa", Order=18, Form=XmlSchemaForm.Unqualified)]
        public decimal CtySingleHsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtySingleHsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtySingleHsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtySingleHsa
        {
            get
            {
                if (this.CtySingleHsaValueSpecified)
                {
                    return this.CtySingleHsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtySingleHsaValue = value.GetValueOrDefault();
                this.CtySingleHsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtySingleHsaCatchUp", Order=19, Form=XmlSchemaForm.Unqualified)]
        public decimal CtySingleHsaCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtySingleHsaCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtySingleHsaCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtySingleHsaCatchUp
        {
            get
            {
                if (this.CtySingleHsaCatchUpValueSpecified)
                {
                    return this.CtySingleHsaCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtySingleHsaCatchUpValue = value.GetValueOrDefault();
                this.CtySingleHsaCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsPrevYrContribCutoff", Order=20, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime IrsPrevYrContribCutoffValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsPrevYrContribCutoff property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsPrevYrContribCutoffValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> IrsPrevYrContribCutoff
        {
            get
            {
                if (this.IrsPrevYrContribCutoffValueSpecified)
                {
                    return this.IrsPrevYrContribCutoffValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsPrevYrContribCutoffValue = value.GetValueOrDefault();
                this.IrsPrevYrContribCutoffValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Nty401K", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal Nty401KValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Nty401K property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Nty401KValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Nty401K
        {
            get
            {
                if (this.Nty401KValueSpecified)
                {
                    return this.Nty401KValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Nty401KValue = value.GetValueOrDefault();
                this.Nty401KValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Nty401KCatchUp", Order=22, Form=XmlSchemaForm.Unqualified)]
        public decimal Nty401KCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Nty401KCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Nty401KCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Nty401KCatchUp
        {
            get
            {
                if (this.Nty401KCatchUpValueSpecified)
                {
                    return this.Nty401KCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Nty401KCatchUpValue = value.GetValueOrDefault();
                this.Nty401KCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyCoverdellEsa", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyCoverdellEsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyCoverdellEsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyCoverdellEsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyCoverdellEsa
        {
            get
            {
                if (this.NtyCoverdellEsaValueSpecified)
                {
                    return this.NtyCoverdellEsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyCoverdellEsaValue = value.GetValueOrDefault();
                this.NtyCoverdellEsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyDeferredComp", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyDeferredCompValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyDeferredComp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyDeferredCompValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyDeferredComp
        {
            get
            {
                if (this.NtyDeferredCompValueSpecified)
                {
                    return this.NtyDeferredCompValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyDeferredCompValue = value.GetValueOrDefault();
                this.NtyDeferredCompValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyDeferredCompCatchUp", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyDeferredCompCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyDeferredCompCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyDeferredCompCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyDeferredCompCatchUp
        {
            get
            {
                if (this.NtyDeferredCompCatchUpValueSpecified)
                {
                    return this.NtyDeferredCompCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyDeferredCompCatchUpValue = value.GetValueOrDefault();
                this.NtyDeferredCompCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyFamilyHsa", Order=26, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyFamilyHsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyFamilyHsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyFamilyHsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyFamilyHsa
        {
            get
            {
                if (this.NtyFamilyHsaValueSpecified)
                {
                    return this.NtyFamilyHsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyFamilyHsaValue = value.GetValueOrDefault();
                this.NtyFamilyHsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyFamilyHsaCatchUp", Order=27, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyFamilyHsaCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyFamilyHsaCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyFamilyHsaCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyFamilyHsaCatchUp
        {
            get
            {
                if (this.NtyFamilyHsaCatchUpValueSpecified)
                {
                    return this.NtyFamilyHsaCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyFamilyHsaCatchUpValue = value.GetValueOrDefault();
                this.NtyFamilyHsaCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyGovernmental457", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyGovernmental457Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyGovernmental457 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyGovernmental457ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyGovernmental457
        {
            get
            {
                if (this.NtyGovernmental457ValueSpecified)
                {
                    return this.NtyGovernmental457Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyGovernmental457Value = value.GetValueOrDefault();
                this.NtyGovernmental457ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyGovernmental457CatchUp", Order=29, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyGovernmental457CatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyGovernmental457CatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyGovernmental457CatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyGovernmental457CatchUp
        {
            get
            {
                if (this.NtyGovernmental457CatchUpValueSpecified)
                {
                    return this.NtyGovernmental457CatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyGovernmental457CatchUpValue = value.GetValueOrDefault();
                this.NtyGovernmental457CatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyIra", Order=30, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyIra
        {
            get
            {
                if (this.NtyIraValueSpecified)
                {
                    return this.NtyIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyIraValue = value.GetValueOrDefault();
                this.NtyIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyIraCatchUp", Order=31, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyIraCatchUp
        {
            get
            {
                if (this.NtyIraCatchUpValueSpecified)
                {
                    return this.NtyIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyIraCatchUpValue = value.GetValueOrDefault();
                this.NtyIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyRothConversion", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyRothConversionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyRothConversion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyRothConversionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyRothConversion
        {
            get
            {
                if (this.NtyRothConversionValueSpecified)
                {
                    return this.NtyRothConversionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyRothConversionValue = value.GetValueOrDefault();
                this.NtyRothConversionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyRothConversionCatchUp", Order=33, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyRothConversionCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyRothConversionCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyRothConversionCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyRothConversionCatchUp
        {
            get
            {
                if (this.NtyRothConversionCatchUpValueSpecified)
                {
                    return this.NtyRothConversionCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyRothConversionCatchUpValue = value.GetValueOrDefault();
                this.NtyRothConversionCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyRothIra", Order=34, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyRothIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyRothIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyRothIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyRothIra
        {
            get
            {
                if (this.NtyRothIraValueSpecified)
                {
                    return this.NtyRothIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyRothIraValue = value.GetValueOrDefault();
                this.NtyRothIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyRothIraCatchUp", Order=35, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyRothIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyRothIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyRothIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyRothIraCatchUp
        {
            get
            {
                if (this.NtyRothIraCatchUpValueSpecified)
                {
                    return this.NtyRothIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyRothIraCatchUpValue = value.GetValueOrDefault();
                this.NtyRothIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtySep", Order=36, Form=XmlSchemaForm.Unqualified)]
        public decimal NtySepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtySep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtySepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtySep
        {
            get
            {
                if (this.NtySepValueSpecified)
                {
                    return this.NtySepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtySepValue = value.GetValueOrDefault();
                this.NtySepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtySimpleIra", Order=37, Form=XmlSchemaForm.Unqualified)]
        public decimal NtySimpleIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtySimpleIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtySimpleIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtySimpleIra
        {
            get
            {
                if (this.NtySimpleIraValueSpecified)
                {
                    return this.NtySimpleIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtySimpleIraValue = value.GetValueOrDefault();
                this.NtySimpleIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtySimpleIraCatchUp", Order=38, Form=XmlSchemaForm.Unqualified)]
        public decimal NtySimpleIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtySimpleIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtySimpleIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtySimpleIraCatchUp
        {
            get
            {
                if (this.NtySimpleIraCatchUpValueSpecified)
                {
                    return this.NtySimpleIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtySimpleIraCatchUpValue = value.GetValueOrDefault();
                this.NtySimpleIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtySingleHsa", Order=39, Form=XmlSchemaForm.Unqualified)]
        public decimal NtySingleHsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtySingleHsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtySingleHsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtySingleHsa
        {
            get
            {
                if (this.NtySingleHsaValueSpecified)
                {
                    return this.NtySingleHsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtySingleHsaValue = value.GetValueOrDefault();
                this.NtySingleHsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtySingleHsaCatchUp", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal NtySingleHsaCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtySingleHsaCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtySingleHsaCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtySingleHsaCatchUp
        {
            get
            {
                if (this.NtySingleHsaCatchUpValueSpecified)
                {
                    return this.NtySingleHsaCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtySingleHsaCatchUpValue = value.GetValueOrDefault();
                this.NtySingleHsaCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Pty401K", Order=41, Form=XmlSchemaForm.Unqualified)]
        public decimal Pty401KValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pty401K property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Pty401KValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Pty401K
        {
            get
            {
                if (this.Pty401KValueSpecified)
                {
                    return this.Pty401KValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Pty401KValue = value.GetValueOrDefault();
                this.Pty401KValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Pty401KCatchUp", Order=42, Form=XmlSchemaForm.Unqualified)]
        public decimal Pty401KCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pty401KCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Pty401KCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Pty401KCatchUp
        {
            get
            {
                if (this.Pty401KCatchUpValueSpecified)
                {
                    return this.Pty401KCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Pty401KCatchUpValue = value.GetValueOrDefault();
                this.Pty401KCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyCoverdellEsa", Order=43, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyCoverdellEsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyCoverdellEsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyCoverdellEsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyCoverdellEsa
        {
            get
            {
                if (this.PtyCoverdellEsaValueSpecified)
                {
                    return this.PtyCoverdellEsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyCoverdellEsaValue = value.GetValueOrDefault();
                this.PtyCoverdellEsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyDeferredComp", Order=44, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyDeferredCompValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyDeferredComp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyDeferredCompValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyDeferredComp
        {
            get
            {
                if (this.PtyDeferredCompValueSpecified)
                {
                    return this.PtyDeferredCompValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyDeferredCompValue = value.GetValueOrDefault();
                this.PtyDeferredCompValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyDeferredCompCatchUp", Order=45, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyDeferredCompCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyDeferredCompCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyDeferredCompCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyDeferredCompCatchUp
        {
            get
            {
                if (this.PtyDeferredCompCatchUpValueSpecified)
                {
                    return this.PtyDeferredCompCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyDeferredCompCatchUpValue = value.GetValueOrDefault();
                this.PtyDeferredCompCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyFamilyHsa", Order=46, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyFamilyHsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyFamilyHsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyFamilyHsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyFamilyHsa
        {
            get
            {
                if (this.PtyFamilyHsaValueSpecified)
                {
                    return this.PtyFamilyHsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyFamilyHsaValue = value.GetValueOrDefault();
                this.PtyFamilyHsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyFamilyHsaCatchUp", Order=47, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyFamilyHsaCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyFamilyHsaCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyFamilyHsaCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyFamilyHsaCatchUp
        {
            get
            {
                if (this.PtyFamilyHsaCatchUpValueSpecified)
                {
                    return this.PtyFamilyHsaCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyFamilyHsaCatchUpValue = value.GetValueOrDefault();
                this.PtyFamilyHsaCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyGovernmental457", Order=48, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyGovernmental457Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyGovernmental457 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyGovernmental457ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyGovernmental457
        {
            get
            {
                if (this.PtyGovernmental457ValueSpecified)
                {
                    return this.PtyGovernmental457Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyGovernmental457Value = value.GetValueOrDefault();
                this.PtyGovernmental457ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyGovernmental457CatchUp", Order=49, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyGovernmental457CatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyGovernmental457CatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyGovernmental457CatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyGovernmental457CatchUp
        {
            get
            {
                if (this.PtyGovernmental457CatchUpValueSpecified)
                {
                    return this.PtyGovernmental457CatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyGovernmental457CatchUpValue = value.GetValueOrDefault();
                this.PtyGovernmental457CatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyIra", Order=50, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyIra
        {
            get
            {
                if (this.PtyIraValueSpecified)
                {
                    return this.PtyIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyIraValue = value.GetValueOrDefault();
                this.PtyIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyIraCatchUp", Order=51, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyIraCatchUp
        {
            get
            {
                if (this.PtyIraCatchUpValueSpecified)
                {
                    return this.PtyIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyIraCatchUpValue = value.GetValueOrDefault();
                this.PtyIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyRothConversion", Order=52, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyRothConversionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyRothConversion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyRothConversionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyRothConversion
        {
            get
            {
                if (this.PtyRothConversionValueSpecified)
                {
                    return this.PtyRothConversionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyRothConversionValue = value.GetValueOrDefault();
                this.PtyRothConversionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyRothConversionCatchUp", Order=53, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyRothConversionCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyRothConversionCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyRothConversionCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyRothConversionCatchUp
        {
            get
            {
                if (this.PtyRothConversionCatchUpValueSpecified)
                {
                    return this.PtyRothConversionCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyRothConversionCatchUpValue = value.GetValueOrDefault();
                this.PtyRothConversionCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyRothIra", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyRothIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyRothIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyRothIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyRothIra
        {
            get
            {
                if (this.PtyRothIraValueSpecified)
                {
                    return this.PtyRothIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyRothIraValue = value.GetValueOrDefault();
                this.PtyRothIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyRothIraCatchUp", Order=55, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyRothIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyRothIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyRothIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyRothIraCatchUp
        {
            get
            {
                if (this.PtyRothIraCatchUpValueSpecified)
                {
                    return this.PtyRothIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyRothIraCatchUpValue = value.GetValueOrDefault();
                this.PtyRothIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtySep", Order=56, Form=XmlSchemaForm.Unqualified)]
        public decimal PtySepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtySep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtySepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtySep
        {
            get
            {
                if (this.PtySepValueSpecified)
                {
                    return this.PtySepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtySepValue = value.GetValueOrDefault();
                this.PtySepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtySimpleIra", Order=57, Form=XmlSchemaForm.Unqualified)]
        public decimal PtySimpleIraValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtySimpleIra property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtySimpleIraValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtySimpleIra
        {
            get
            {
                if (this.PtySimpleIraValueSpecified)
                {
                    return this.PtySimpleIraValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtySimpleIraValue = value.GetValueOrDefault();
                this.PtySimpleIraValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtySimpleIraCatchUp", Order=58, Form=XmlSchemaForm.Unqualified)]
        public decimal PtySimpleIraCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtySimpleIraCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtySimpleIraCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtySimpleIraCatchUp
        {
            get
            {
                if (this.PtySimpleIraCatchUpValueSpecified)
                {
                    return this.PtySimpleIraCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtySimpleIraCatchUpValue = value.GetValueOrDefault();
                this.PtySimpleIraCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtySingleHsa", Order=59, Form=XmlSchemaForm.Unqualified)]
        public decimal PtySingleHsaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtySingleHsa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtySingleHsaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtySingleHsa
        {
            get
            {
                if (this.PtySingleHsaValueSpecified)
                {
                    return this.PtySingleHsaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtySingleHsaValue = value.GetValueOrDefault();
                this.PtySingleHsaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtySingleHsaCatchUp", Order=60, Form=XmlSchemaForm.Unqualified)]
        public decimal PtySingleHsaCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtySingleHsaCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtySingleHsaCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtySingleHsaCatchUp
        {
            get
            {
                if (this.PtySingleHsaCatchUpValueSpecified)
                {
                    return this.PtySingleHsaCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtySingleHsaCatchUpValue = value.GetValueOrDefault();
                this.PtySingleHsaCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=61, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cty401KAddlCatchUp", Order=62, Form=XmlSchemaForm.Unqualified)]
        public decimal Cty401KAddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cty401KAddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Cty401KAddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cty401KAddlCatchUp
        {
            get
            {
                if (this.Cty401KAddlCatchUpValueSpecified)
                {
                    return this.Cty401KAddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Cty401KAddlCatchUpValue = value.GetValueOrDefault();
                this.Cty401KAddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtyGovt457AddlCatchUp", Order=63, Form=XmlSchemaForm.Unqualified)]
        public decimal CtyGovt457AddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtyGovt457AddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtyGovt457AddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtyGovt457AddlCatchUp
        {
            get
            {
                if (this.CtyGovt457AddlCatchUpValueSpecified)
                {
                    return this.CtyGovt457AddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtyGovt457AddlCatchUpValue = value.GetValueOrDefault();
                this.CtyGovt457AddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtySimpleIraAddlCatchUp", Order=64, Form=XmlSchemaForm.Unqualified)]
        public decimal CtySimpleIraAddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtySimpleIraAddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtySimpleIraAddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CtySimpleIraAddlCatchUp
        {
            get
            {
                if (this.CtySimpleIraAddlCatchUpValueSpecified)
                {
                    return this.CtySimpleIraAddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtySimpleIraAddlCatchUpValue = value.GetValueOrDefault();
                this.CtySimpleIraAddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Nty401KAddlCatchUp", Order=65, Form=XmlSchemaForm.Unqualified)]
        public decimal Nty401KAddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Nty401KAddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Nty401KAddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Nty401KAddlCatchUp
        {
            get
            {
                if (this.Nty401KAddlCatchUpValueSpecified)
                {
                    return this.Nty401KAddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Nty401KAddlCatchUpValue = value.GetValueOrDefault();
                this.Nty401KAddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtyGovt457AddlCatchUp", Order=66, Form=XmlSchemaForm.Unqualified)]
        public decimal NtyGovt457AddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtyGovt457AddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtyGovt457AddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtyGovt457AddlCatchUp
        {
            get
            {
                if (this.NtyGovt457AddlCatchUpValueSpecified)
                {
                    return this.NtyGovt457AddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtyGovt457AddlCatchUpValue = value.GetValueOrDefault();
                this.NtyGovt457AddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NtySimpleIraAddlCatchUp", Order=67, Form=XmlSchemaForm.Unqualified)]
        public decimal NtySimpleIraAddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NtySimpleIraAddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NtySimpleIraAddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NtySimpleIraAddlCatchUp
        {
            get
            {
                if (this.NtySimpleIraAddlCatchUpValueSpecified)
                {
                    return this.NtySimpleIraAddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NtySimpleIraAddlCatchUpValue = value.GetValueOrDefault();
                this.NtySimpleIraAddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Pty401KAddlCatchUp", Order=68, Form=XmlSchemaForm.Unqualified)]
        public decimal Pty401KAddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pty401KAddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Pty401KAddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Pty401KAddlCatchUp
        {
            get
            {
                if (this.Pty401KAddlCatchUpValueSpecified)
                {
                    return this.Pty401KAddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Pty401KAddlCatchUpValue = value.GetValueOrDefault();
                this.Pty401KAddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtyGovt457AddlCatchUp", Order=69, Form=XmlSchemaForm.Unqualified)]
        public decimal PtyGovt457AddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtyGovt457AddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtyGovt457AddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtyGovt457AddlCatchUp
        {
            get
            {
                if (this.PtyGovt457AddlCatchUpValueSpecified)
                {
                    return this.PtyGovt457AddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtyGovt457AddlCatchUpValue = value.GetValueOrDefault();
                this.PtyGovt457AddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PtySimpleIraAddlCatchUp", Order=70, Form=XmlSchemaForm.Unqualified)]
        public decimal PtySimpleIraAddlCatchUpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PtySimpleIraAddlCatchUp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PtySimpleIraAddlCatchUpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PtySimpleIraAddlCatchUp
        {
            get
            {
                if (this.PtySimpleIraAddlCatchUpValueSpecified)
                {
                    return this.PtySimpleIraAddlCatchUpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PtySimpleIraAddlCatchUpValue = value.GetValueOrDefault();
                this.PtySimpleIraAddlCatchUpValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_2", Order=71, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version2 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=72)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="IrsContriLimit" /> class.</para>
        /// </summary>
        public IrsContriLimit()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
