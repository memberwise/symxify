//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("EscrowAnalysisFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("EscrowAnalysisFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class EscrowAnalysisFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AnalysisPastDueExceptions", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AnalysisPastDueExceptionsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AnalysisPastDueExceptions property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AnalysisPastDueExceptionsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AnalysisPastDueExceptions
        {
            get
            {
                if (this.AnalysisPastDueExceptionsValueSpecified)
                {
                    return this.AnalysisPastDueExceptionsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AnalysisPastDueExceptionsValue = value.GetValueOrDefault();
                this.AnalysisPastDueExceptionsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeficiencyGe1EscrwPayMthd", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool DeficiencyGe1EscrwPayMthdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeficiencyGe1EscrwPayMthd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeficiencyGe1EscrwPayMthdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeficiencyGe1EscrwPayMthd
        {
            get
            {
                if (this.DeficiencyGe1EscrwPayMthdValueSpecified)
                {
                    return this.DeficiencyGe1EscrwPayMthdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeficiencyGe1EscrwPayMthdValue = value.GetValueOrDefault();
                this.DeficiencyGe1EscrwPayMthdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _deficiencyGeAmount;
        
        [XmlElementAttribute("DeficiencyGeAmount", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DeficiencyGeAmount
        {
            get
            {
                return _deficiencyGeAmount;
            }
            set
            {
                _deficiencyGeAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeficiencyGeAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeficiencyGeAmountSpecified
        {
            get
            {
                return ((this.DeficiencyGeAmount != null) 
                            && (this.DeficiencyGeAmount.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="EscrowAnalysisFields" /> class.</para>
        /// </summary>
        public EscrowAnalysisFields()
        {
            this._deficiencyGeAmount = new Collection<short>();
            this._deficiencyGeNbrOfMonths = new Collection<short>();
            this._deficiencyLtAmount = new Collection<short>();
            this._deficiencyLtNbrOfMonths = new Collection<short>();
            this._shortageGeAmount = new Collection<short>();
            this._shortageGeNbrOfMonths = new Collection<short>();
            this._shortageLtAmount = new Collection<short>();
            this._shortageLtNbrOfMonths = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _deficiencyGeNbrOfMonths;
        
        [XmlElementAttribute("DeficiencyGeNbrOfMonths", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DeficiencyGeNbrOfMonths
        {
            get
            {
                return _deficiencyGeNbrOfMonths;
            }
            set
            {
                _deficiencyGeNbrOfMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeficiencyGeNbrOfMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeficiencyGeNbrOfMonthsSpecified
        {
            get
            {
                return ((this.DeficiencyGeNbrOfMonths != null) 
                            && (this.DeficiencyGeNbrOfMonths.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeficiencyLt1EscrwPayMthd", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool DeficiencyLt1EscrwPayMthdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeficiencyLt1EscrwPayMthd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeficiencyLt1EscrwPayMthdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeficiencyLt1EscrwPayMthd
        {
            get
            {
                if (this.DeficiencyLt1EscrwPayMthdValueSpecified)
                {
                    return this.DeficiencyLt1EscrwPayMthdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeficiencyLt1EscrwPayMthdValue = value.GetValueOrDefault();
                this.DeficiencyLt1EscrwPayMthdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _deficiencyLtAmount;
        
        [XmlElementAttribute("DeficiencyLtAmount", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DeficiencyLtAmount
        {
            get
            {
                return _deficiencyLtAmount;
            }
            set
            {
                _deficiencyLtAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeficiencyLtAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeficiencyLtAmountSpecified
        {
            get
            {
                return ((this.DeficiencyLtAmount != null) 
                            && (this.DeficiencyLtAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _deficiencyLtNbrOfMonths;
        
        [XmlElementAttribute("DeficiencyLtNbrOfMonths", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DeficiencyLtNbrOfMonths
        {
            get
            {
                return _deficiencyLtNbrOfMonths;
            }
            set
            {
                _deficiencyLtNbrOfMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DeficiencyLtNbrOfMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeficiencyLtNbrOfMonthsSpecified
        {
            get
            {
                return ((this.DeficiencyLtNbrOfMonths != null) 
                            && (this.DeficiencyLtNbrOfMonths.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowOverageMinDollarAmt", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool EscrowOverageMinDollarAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowOverageMinDollarAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowOverageMinDollarAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EscrowOverageMinDollarAmt
        {
            get
            {
                if (this.EscrowOverageMinDollarAmtValueSpecified)
                {
                    return this.EscrowOverageMinDollarAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowOverageMinDollarAmtValue = value.GetValueOrDefault();
                this.EscrowOverageMinDollarAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowOverageMinPercentage", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool EscrowOverageMinPercentageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowOverageMinPercentage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowOverageMinPercentageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EscrowOverageMinPercentage
        {
            get
            {
                if (this.EscrowOverageMinPercentageValueSpecified)
                {
                    return this.EscrowOverageMinPercentageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowOverageMinPercentageValue = value.GetValueOrDefault();
                this.EscrowOverageMinPercentageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowOverageProcessingMthd", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool EscrowOverageProcessingMthdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowOverageProcessingMthd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowOverageProcessingMthdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EscrowOverageProcessingMthd
        {
            get
            {
                if (this.EscrowOverageProcessingMthdValueSpecified)
                {
                    return this.EscrowOverageProcessingMthdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowOverageProcessingMthdValue = value.GetValueOrDefault();
                this.EscrowOverageProcessingMthdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewPaymentRounding", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool NewPaymentRoundingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewPaymentRounding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewPaymentRoundingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NewPaymentRounding
        {
            get
            {
                if (this.NewPaymentRoundingValueSpecified)
                {
                    return this.NewPaymentRoundingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewPaymentRoundingValue = value.GetValueOrDefault();
                this.NewPaymentRoundingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentChangeThreshold", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentChangeThresholdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentChangeThreshold property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentChangeThresholdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentChangeThreshold
        {
            get
            {
                if (this.PaymentChangeThresholdValueSpecified)
                {
                    return this.PaymentChangeThresholdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentChangeThresholdValue = value.GetValueOrDefault();
                this.PaymentChangeThresholdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShortageGe1EscrowPayMethd", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool ShortageGe1EscrowPayMethdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShortageGe1EscrowPayMethd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShortageGe1EscrowPayMethdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShortageGe1EscrowPayMethd
        {
            get
            {
                if (this.ShortageGe1EscrowPayMethdValueSpecified)
                {
                    return this.ShortageGe1EscrowPayMethdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShortageGe1EscrowPayMethdValue = value.GetValueOrDefault();
                this.ShortageGe1EscrowPayMethdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _shortageGeAmount;
        
        [XmlElementAttribute("ShortageGeAmount", Order=13, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ShortageGeAmount
        {
            get
            {
                return _shortageGeAmount;
            }
            set
            {
                _shortageGeAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ShortageGeAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ShortageGeAmountSpecified
        {
            get
            {
                return ((this.ShortageGeAmount != null) 
                            && (this.ShortageGeAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _shortageGeNbrOfMonths;
        
        [XmlElementAttribute("ShortageGeNbrOfMonths", Order=14, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ShortageGeNbrOfMonths
        {
            get
            {
                return _shortageGeNbrOfMonths;
            }
            set
            {
                _shortageGeNbrOfMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ShortageGeNbrOfMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ShortageGeNbrOfMonthsSpecified
        {
            get
            {
                return ((this.ShortageGeNbrOfMonths != null) 
                            && (this.ShortageGeNbrOfMonths.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShortageLt1EscrowPayMethd", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool ShortageLt1EscrowPayMethdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShortageLt1EscrowPayMethd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShortageLt1EscrowPayMethdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShortageLt1EscrowPayMethd
        {
            get
            {
                if (this.ShortageLt1EscrowPayMethdValueSpecified)
                {
                    return this.ShortageLt1EscrowPayMethdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShortageLt1EscrowPayMethdValue = value.GetValueOrDefault();
                this.ShortageLt1EscrowPayMethdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _shortageLtAmount;
        
        [XmlElementAttribute("ShortageLtAmount", Order=16, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ShortageLtAmount
        {
            get
            {
                return _shortageLtAmount;
            }
            set
            {
                _shortageLtAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ShortageLtAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ShortageLtAmountSpecified
        {
            get
            {
                return ((this.ShortageLtAmount != null) 
                            && (this.ShortageLtAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _shortageLtNbrOfMonths;
        
        [XmlElementAttribute("ShortageLtNbrOfMonths", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ShortageLtNbrOfMonths
        {
            get
            {
                return _shortageLtNbrOfMonths;
            }
            set
            {
                _shortageLtNbrOfMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ShortageLtNbrOfMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ShortageLtNbrOfMonthsSpecified
        {
            get
            {
                return ((this.ShortageLtNbrOfMonths != null) 
                            && (this.ShortageLtNbrOfMonths.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WarningCodeList", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool WarningCodeListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WarningCodeList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WarningCodeListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WarningCodeList
        {
            get
            {
                if (this.WarningCodeListValueSpecified)
                {
                    return this.WarningCodeListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WarningCodeListValue = value.GetValueOrDefault();
                this.WarningCodeListValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=19, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=20)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
