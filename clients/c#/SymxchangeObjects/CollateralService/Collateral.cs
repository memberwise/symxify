//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\CollateralService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\CollateralService\generated-output -n CollateralService
namespace CollateralService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Collateral", Namespace="http://www.symxchange.generated.symitar.com/crud/collateral/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Collateral", Namespace="http://www.symxchange.generated.symitar.com/crud/collateral/dto/retrieve")]
    public partial class Collateral
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollateralAppStatus", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short CollateralAppStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollateralAppStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollateralAppStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CollateralAppStatus
        {
            get
            {
                if (this.CollateralAppStatusValueSpecified)
                {
                    return this.CollateralAppStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollateralAppStatusValue = value.GetValueOrDefault();
                this.CollateralAppStatusValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CollateralCollHoldList", Order=1, Form=XmlSchemaForm.Unqualified)]
        public CollateralCollHoldList CollateralCollHoldList { get; set; }
        
        [XmlElementAttribute("CollateralDocumentList", Order=2, Form=XmlSchemaForm.Unqualified)]
        public CollateralDocumentList CollateralDocumentList { get; set; }
        
        [XmlElementAttribute("CollateralFmHistoryList", Order=3, Form=XmlSchemaForm.Unqualified)]
        public CollateralFmHistoryList CollateralFmHistoryList { get; set; }
        
        [XmlElementAttribute("CollateralOwner", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string CollateralOwner { get; set; }
        
        [XmlElementAttribute("CollateralTrackingList", Order=5, Form=XmlSchemaForm.Unqualified)]
        public CollateralTrackingList CollateralTrackingList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateDate", Order=6, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CreateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CreateDate
        {
            get
            {
                if (this.CreateDateValueSpecified)
                {
                    return this.CreateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateDateValue = value.GetValueOrDefault();
                this.CreateDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=7, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpireDate", Order=8, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ExpireDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpireDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpireDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ExpireDate
        {
            get
            {
                if (this.ExpireDateValueSpecified)
                {
                    return this.ExpireDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpireDateValue = value.GetValueOrDefault();
                this.ExpireDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmLastPurgeDate", Order=9, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime FmLastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmLastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmLastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FmLastPurgeDate
        {
            get
            {
                if (this.FmLastPurgeDateValueSpecified)
                {
                    return this.FmLastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmLastPurgeDateValue = value.GetValueOrDefault();
                this.FmLastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=10, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Number", Order=11, Form=XmlSchemaForm.Unqualified)]
        public string Number { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=12, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("RequiredDocumentList", Order=13, Form=XmlSchemaForm.Unqualified)]
        public string RequiredDocumentList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=16, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=18, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [XmlElementAttribute("UserChar5", Order=19, Form=XmlSchemaForm.Unqualified)]
        public string UserChar5 { get; set; }
        
        [XmlElementAttribute("UserChar6", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string UserChar6 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Value", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal ValueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Value property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Value
        {
            get
            {
                if (this.ValueValueSpecified)
                {
                    return this.ValueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValueValue = value.GetValueOrDefault();
                this.ValueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ValueDate", Order=22, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ValueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ValueDate
        {
            get
            {
                if (this.ValueDateValueSpecified)
                {
                    return this.ValueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValueDateValue = value.GetValueOrDefault();
                this.ValueDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ValueSource", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string ValueSource { get; set; }
        
        [XmlElementAttribute("Version_1", Order=24, Form=XmlSchemaForm.Unqualified)]
        public CollateralService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=25)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Collateral" /> class.</para>
        /// </summary>
        public Collateral()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
