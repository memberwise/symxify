//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ExceptionItemService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ExceptionItemService\generated-output -n ExceptionItemService
namespace ExceptionItemService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ExcpItem", Namespace="http://www.symxchange.generated.symitar.com/crud/exceptionitem/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class ExcpItem
    {
        
        [XmlElementAttribute("AchExcpReason", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AchExcpReason { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustmentCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short AdjustmentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustmentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustmentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AdjustmentCode
        {
            get
            {
                if (this.AdjustmentCodeValueSpecified)
                {
                    return this.AdjustmentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustmentCodeValue = value.GetValueOrDefault();
                this.AdjustmentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemAmount> _amount;
        
        [XmlElementAttribute("Amount", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemAmount> Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Amount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AmountSpecified
        {
            get
            {
                return ((this.Amount != null) 
                            && (this.Amount.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ExcpItem" /> class.</para>
        /// </summary>
        public ExcpItem()
        {
            this._amount = new Collection<ExcpItemAmount>();
            this._ch1 = new Collection<ExcpItemCh1>();
            this._ch10 = new Collection<ExcpItemCh10>();
            this._ch15 = new Collection<ExcpItemCh15>();
            this._ch2 = new Collection<ExcpItemCh2>();
            this._ch20 = new Collection<ExcpItemCh20>();
            this._ch3 = new Collection<ExcpItemCh3>();
            this._ch35 = new Collection<ExcpItemCh35>();
            this._ch6 = new Collection<ExcpItemCh6>();
            this._ch8 = new Collection<ExcpItemCh8>();
            this._code = new Collection<ExcpItemCode>();
            this._date = new Collection<ExcpItemDate>();
            this._editRecord = new Collection<ExcpItemEditRecord>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchAchOrigNum", Order=3, Form=XmlSchemaForm.Unqualified)]
        public int BatchAchOrigNumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchAchOrigNum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchAchOrigNumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> BatchAchOrigNum
        {
            get
            {
                if (this.BatchAchOrigNumValueSpecified)
                {
                    return this.BatchAchOrigNumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchAchOrigNumValue = value.GetValueOrDefault();
                this.BatchAchOrigNumValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BatchId", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string BatchId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh1> _ch1;
        
        [XmlElementAttribute("Ch1", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh1> Ch1
        {
            get
            {
                return _ch1;
            }
            set
            {
                _ch1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch1Specified
        {
            get
            {
                return ((this.Ch1 != null) 
                            && (this.Ch1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh10> _ch10;
        
        [XmlElementAttribute("Ch10", Order=7, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh10> Ch10
        {
            get
            {
                return _ch10;
            }
            set
            {
                _ch10 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch10 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch10Specified
        {
            get
            {
                return ((this.Ch10 != null) 
                            && (this.Ch10.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh15> _ch15;
        
        [XmlElementAttribute("Ch15", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh15> Ch15
        {
            get
            {
                return _ch15;
            }
            set
            {
                _ch15 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch15 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch15Specified
        {
            get
            {
                return ((this.Ch15 != null) 
                            && (this.Ch15.Count != 0));
            }
        }
        
        [XmlElementAttribute("Ch16", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string Ch16 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh2> _ch2;
        
        [XmlElementAttribute("Ch2", Order=10, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh2> Ch2
        {
            get
            {
                return _ch2;
            }
            set
            {
                _ch2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch2Specified
        {
            get
            {
                return ((this.Ch2 != null) 
                            && (this.Ch2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh20> _ch20;
        
        [XmlElementAttribute("Ch20", Order=11, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh20> Ch20
        {
            get
            {
                return _ch20;
            }
            set
            {
                _ch20 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch20 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch20Specified
        {
            get
            {
                return ((this.Ch20 != null) 
                            && (this.Ch20.Count != 0));
            }
        }
        
        [XmlElementAttribute("Ch22", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string Ch22 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh3> _ch3;
        
        [XmlElementAttribute("Ch3", Order=13, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh3> Ch3
        {
            get
            {
                return _ch3;
            }
            set
            {
                _ch3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch3Specified
        {
            get
            {
                return ((this.Ch3 != null) 
                            && (this.Ch3.Count != 0));
            }
        }
        
        [XmlElementAttribute("Ch30", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string Ch30 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh35> _ch35;
        
        [XmlElementAttribute("Ch35", Order=15, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh35> Ch35
        {
            get
            {
                return _ch35;
            }
            set
            {
                _ch35 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch35 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch35Specified
        {
            get
            {
                return ((this.Ch35 != null) 
                            && (this.Ch35.Count != 0));
            }
        }
        
        [XmlElementAttribute("Ch40", Order=16, Form=XmlSchemaForm.Unqualified)]
        public string Ch40 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh6> _ch6;
        
        [XmlElementAttribute("Ch6", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh6> Ch6
        {
            get
            {
                return _ch6;
            }
            set
            {
                _ch6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch6Specified
        {
            get
            {
                return ((this.Ch6 != null) 
                            && (this.Ch6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCh8> _ch8;
        
        [XmlElementAttribute("Ch8", Order=18, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCh8> Ch8
        {
            get
            {
                return _ch8;
            }
            set
            {
                _ch8 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch8 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch8Specified
        {
            get
            {
                return ((this.Ch8 != null) 
                            && (this.Ch8.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemCode> _code;
        
        [XmlElementAttribute("Code", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemCode> Code
        {
            get
            {
                return _code;
            }
            set
            {
                _code = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Code collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CodeSpecified
        {
            get
            {
                return ((this.Code != null) 
                            && (this.Code.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=20, Form=XmlSchemaForm.Unqualified)]
        public short CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemDate> _date;
        
        [XmlElementAttribute("Date", Order=21, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemDate> Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Date collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DateSpecified
        {
            get
            {
                return ((this.Date != null) 
                            && (this.Date.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeathDate", Order=22, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DeathDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeathDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeathDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DeathDate
        {
            get
            {
                if (this.DeathDateValueSpecified)
                {
                    return this.DeathDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeathDateValue = value.GetValueOrDefault();
                this.DeathDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DraftNumber", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string DraftNumber { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ExcpItemEditRecord> _editRecord;
        
        [XmlElementAttribute("EditRecord", Order=24, Form=XmlSchemaForm.Unqualified)]
        public Collection<ExcpItemEditRecord> EditRecord
        {
            get
            {
                return _editRecord;
            }
            set
            {
                _editRecord = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EditRecord collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool EditRecordSpecified
        {
            get
            {
                return ((this.EditRecord != null) 
                            && (this.EditRecord.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExceptionCode", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short ExceptionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExceptionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExceptionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExceptionCode
        {
            get
            {
                if (this.ExceptionCodeValueSpecified)
                {
                    return this.ExceptionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExceptionCodeValue = value.GetValueOrDefault();
                this.ExceptionCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ExcpAddInfoList", Order=26, Form=XmlSchemaForm.Unqualified)]
        public ExcpAddInfoList ExcpAddInfoList { get; set; }
        
        [XmlElementAttribute("ExcpAddendaList", Order=27, Form=XmlSchemaForm.Unqualified)]
        public ExcpAddendaList ExcpAddendaList { get; set; }
        
        [XmlElementAttribute("ExcpItemAccount", Order=28, Form=XmlSchemaForm.Unqualified)]
        public string ExcpItemAccount { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExcpType", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short ExcpTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExcpType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExcpTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExcpType
        {
            get
            {
                if (this.ExcpTypeValueSpecified)
                {
                    return this.ExcpTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExcpTypeValue = value.GetValueOrDefault();
                this.ExcpTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ExtLoanAccount", Order=30, Form=XmlSchemaForm.Unqualified)]
        public string ExtLoanAccount { get; set; }
        
        [XmlElementAttribute("ForeignExcgInd", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string ForeignExcgInd { get; set; }
        
        [XmlElementAttribute("ForeignExcgRef", Order=32, Form=XmlSchemaForm.Unqualified)]
        public string ForeignExcgRef { get; set; }
        
        [XmlElementAttribute("ForeignExcgRefInd", Order=33, Form=XmlSchemaForm.Unqualified)]
        public string ForeignExcgRefInd { get; set; }
        
        [XmlElementAttribute("GlAccount", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string GlAccount { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCategory", Order=35, Form=XmlSchemaForm.Unqualified)]
        public int GlCategoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCategory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCategoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlCategory
        {
            get
            {
                if (this.GlCategoryValueSpecified)
                {
                    return this.GlCategoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCategoryValue = value.GetValueOrDefault();
                this.GlCategoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCode", Order=36, Form=XmlSchemaForm.Unqualified)]
        public short GlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlCode
        {
            get
            {
                if (this.GlCodeValueSpecified)
                {
                    return this.GlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCodeValue = value.GetValueOrDefault();
                this.GlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCode1", Order=37, Form=XmlSchemaForm.Unqualified)]
        public int GlCode1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCode1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCode1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlCode1
        {
            get
            {
                if (this.GlCode1ValueSpecified)
                {
                    return this.GlCode1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCode1Value = value.GetValueOrDefault();
                this.GlCode1ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("GlComment", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string GlComment { get; set; }
        
        [XmlElementAttribute("GlReference", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string GlReference { get; set; }
        
        [XmlElementAttribute("GlReference1", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string GlReference1 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequence", Order=41, Form=XmlSchemaForm.Unqualified)]
        public int GlobalSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlobalSequence
        {
            get
            {
                if (this.GlobalSequenceValueSpecified)
                {
                    return this.GlobalSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceValue = value.GetValueOrDefault();
                this.GlobalSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequenceDate", Order=42, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime GlobalSequenceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequenceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> GlobalSequenceDate
        {
            get
            {
                if (this.GlobalSequenceDateValueSpecified)
                {
                    return this.GlobalSequenceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceDateValue = value.GetValueOrDefault();
                this.GlobalSequenceDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Id", Order=43, Form=XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdType", Order=44, Form=XmlSchemaForm.Unqualified)]
        public short IdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdType
        {
            get
            {
                if (this.IdTypeValueSpecified)
                {
                    return this.IdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdTypeValue = value.GetValueOrDefault();
                this.IdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("IsoDestCountry", Order=45, Form=XmlSchemaForm.Unqualified)]
        public string IsoDestCountry { get; set; }
        
        [XmlElementAttribute("IsoDestCurrency", Order=46, Form=XmlSchemaForm.Unqualified)]
        public string IsoDestCurrency { get; set; }
        
        [XmlElementAttribute("IsoOrigCurrency", Order=47, Form=XmlSchemaForm.Unqualified)]
        public string IsoOrigCurrency { get; set; }
        
        [XmlElementAttribute("MemberBranch", Order=48, Form=XmlSchemaForm.Unqualified)]
        public string MemberBranch { get; set; }
        
        [XmlElementAttribute("OriginatorStatus", Order=49, Form=XmlSchemaForm.Unqualified)]
        public string OriginatorStatus { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OtherAction", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short OtherActionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OtherAction property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OtherActionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OtherAction
        {
            get
            {
                if (this.OtherActionValueSpecified)
                {
                    return this.OtherActionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OtherActionValue = value.GetValueOrDefault();
                this.OtherActionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OtherId", Order=51, Form=XmlSchemaForm.Unqualified)]
        public string OtherId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OtherIdType", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short OtherIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OtherIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OtherIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OtherIdType
        {
            get
            {
                if (this.OtherIdTypeValueSpecified)
                {
                    return this.OtherIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OtherIdTypeValue = value.GetValueOrDefault();
                this.OtherIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PostExcpDescr", Order=53, Form=XmlSchemaForm.Unqualified)]
        public string PostExcpDescr { get; set; }
        
        [XmlElementAttribute("ProcessorAccount", Order=54, Form=XmlSchemaForm.Unqualified)]
        public string ProcessorAccount { get; set; }
        
        [XmlElementAttribute("RangeNumber", Order=55, Form=XmlSchemaForm.Unqualified)]
        public string RangeNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReasonCode", Order=56, Form=XmlSchemaForm.Unqualified)]
        public short ReasonCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReasonCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReasonCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReasonCode
        {
            get
            {
                if (this.ReasonCodeValueSpecified)
                {
                    return this.ReasonCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReasonCodeValue = value.GetValueOrDefault();
                this.ReasonCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegCode", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short RegCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegCode
        {
            get
            {
                if (this.RegCodeValueSpecified)
                {
                    return this.RegCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegCodeValue = value.GetValueOrDefault();
                this.RegCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReviewStatus", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short ReviewStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReviewStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReviewStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReviewStatus
        {
            get
            {
                if (this.ReviewStatusValueSpecified)
                {
                    return this.ReviewStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReviewStatusValue = value.GetValueOrDefault();
                this.ReviewStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubTranCode", Order=59, Form=XmlSchemaForm.Unqualified)]
        public short SubTranCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubTranCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubTranCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SubTranCode
        {
            get
            {
                if (this.SubTranCodeValueSpecified)
                {
                    return this.SubTranCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubTranCodeValue = value.GetValueOrDefault();
                this.SubTranCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SubTranDescr", Order=60, Form=XmlSchemaForm.Unqualified)]
        public string SubTranDescr { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransactionCode", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short TransactionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransactionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransactionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TransactionCode
        {
            get
            {
                if (this.TransactionCodeValueSpecified)
                {
                    return this.TransactionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransactionCodeValue = value.GetValueOrDefault();
                this.TransactionCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("TransferAccount", Order=62, Form=XmlSchemaForm.Unqualified)]
        public string TransferAccount { get; set; }
        
        [XmlElementAttribute("TransferId", Order=63, Form=XmlSchemaForm.Unqualified)]
        public string TransferId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransferIdType", Order=64, Form=XmlSchemaForm.Unqualified)]
        public short TransferIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransferIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TransferIdType
        {
            get
            {
                if (this.TransferIdTypeValueSpecified)
                {
                    return this.TransferIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransferIdTypeValue = value.GetValueOrDefault();
                this.TransferIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=65, Form=XmlSchemaForm.Unqualified)]
        public ExceptionItemService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=66)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
