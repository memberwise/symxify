//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ExceptionItemService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ExceptionItemService\generated-output -n ExceptionItemService
namespace ExceptionItemService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ExcpItemFields", Namespace="http://www.symxchange.generated.symitar.com/crud/exceptionitem/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class ExcpItemFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AchExcpReason", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AchExcpReasonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AchExcpReason property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AchExcpReasonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AchExcpReason
        {
            get
            {
                if (this.AchExcpReasonValueSpecified)
                {
                    return this.AchExcpReasonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AchExcpReasonValue = value.GetValueOrDefault();
                this.AchExcpReasonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustmentCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AdjustmentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustmentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustmentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdjustmentCode
        {
            get
            {
                if (this.AdjustmentCodeValueSpecified)
                {
                    return this.AdjustmentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustmentCodeValue = value.GetValueOrDefault();
                this.AdjustmentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _amount;
        
        [XmlElementAttribute("Amount", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Amount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AmountSpecified
        {
            get
            {
                return ((this.Amount != null) 
                            && (this.Amount.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ExcpItemFields" /> class.</para>
        /// </summary>
        public ExcpItemFields()
        {
            this._amount = new Collection<short>();
            this._ch1 = new Collection<short>();
            this._ch10 = new Collection<short>();
            this._ch15 = new Collection<short>();
            this._ch2 = new Collection<short>();
            this._ch20 = new Collection<short>();
            this._ch3 = new Collection<short>();
            this._ch35 = new Collection<short>();
            this._ch6 = new Collection<short>();
            this._ch8 = new Collection<short>();
            this._code = new Collection<short>();
            this._date = new Collection<short>();
            this._editRecord = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchAchOrigNum", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BatchAchOrigNumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchAchOrigNum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchAchOrigNumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BatchAchOrigNum
        {
            get
            {
                if (this.BatchAchOrigNumValueSpecified)
                {
                    return this.BatchAchOrigNumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchAchOrigNumValue = value.GetValueOrDefault();
                this.BatchAchOrigNumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchId", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool BatchIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BatchId
        {
            get
            {
                if (this.BatchIdValueSpecified)
                {
                    return this.BatchIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchIdValue = value.GetValueOrDefault();
                this.BatchIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch1;
        
        [XmlElementAttribute("Ch1", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch1
        {
            get
            {
                return _ch1;
            }
            set
            {
                _ch1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch1Specified
        {
            get
            {
                return ((this.Ch1 != null) 
                            && (this.Ch1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch10;
        
        [XmlElementAttribute("Ch10", Order=7, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch10
        {
            get
            {
                return _ch10;
            }
            set
            {
                _ch10 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch10 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch10Specified
        {
            get
            {
                return ((this.Ch10 != null) 
                            && (this.Ch10.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch15;
        
        [XmlElementAttribute("Ch15", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch15
        {
            get
            {
                return _ch15;
            }
            set
            {
                _ch15 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch15 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch15Specified
        {
            get
            {
                return ((this.Ch15 != null) 
                            && (this.Ch15.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ch16", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool Ch16Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ch16 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ch16ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Ch16
        {
            get
            {
                if (this.Ch16ValueSpecified)
                {
                    return this.Ch16Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ch16Value = value.GetValueOrDefault();
                this.Ch16ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch2;
        
        [XmlElementAttribute("Ch2", Order=10, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch2
        {
            get
            {
                return _ch2;
            }
            set
            {
                _ch2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch2Specified
        {
            get
            {
                return ((this.Ch2 != null) 
                            && (this.Ch2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch20;
        
        [XmlElementAttribute("Ch20", Order=11, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch20
        {
            get
            {
                return _ch20;
            }
            set
            {
                _ch20 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch20 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch20Specified
        {
            get
            {
                return ((this.Ch20 != null) 
                            && (this.Ch20.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ch22", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool Ch22Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ch22 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ch22ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Ch22
        {
            get
            {
                if (this.Ch22ValueSpecified)
                {
                    return this.Ch22Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ch22Value = value.GetValueOrDefault();
                this.Ch22ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch3;
        
        [XmlElementAttribute("Ch3", Order=13, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch3
        {
            get
            {
                return _ch3;
            }
            set
            {
                _ch3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch3Specified
        {
            get
            {
                return ((this.Ch3 != null) 
                            && (this.Ch3.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ch30", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool Ch30Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ch30 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ch30ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Ch30
        {
            get
            {
                if (this.Ch30ValueSpecified)
                {
                    return this.Ch30Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ch30Value = value.GetValueOrDefault();
                this.Ch30ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch35;
        
        [XmlElementAttribute("Ch35", Order=15, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch35
        {
            get
            {
                return _ch35;
            }
            set
            {
                _ch35 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch35 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch35Specified
        {
            get
            {
                return ((this.Ch35 != null) 
                            && (this.Ch35.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ch40", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool Ch40Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ch40 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ch40ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Ch40
        {
            get
            {
                if (this.Ch40ValueSpecified)
                {
                    return this.Ch40Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ch40Value = value.GetValueOrDefault();
                this.Ch40ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch6;
        
        [XmlElementAttribute("Ch6", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch6
        {
            get
            {
                return _ch6;
            }
            set
            {
                _ch6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch6Specified
        {
            get
            {
                return ((this.Ch6 != null) 
                            && (this.Ch6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ch8;
        
        [XmlElementAttribute("Ch8", Order=18, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ch8
        {
            get
            {
                return _ch8;
            }
            set
            {
                _ch8 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ch8 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Ch8Specified
        {
            get
            {
                return ((this.Ch8 != null) 
                            && (this.Ch8.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _code;
        
        [XmlElementAttribute("Code", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Code
        {
            get
            {
                return _code;
            }
            set
            {
                _code = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Code collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CodeSpecified
        {
            get
            {
                return ((this.Code != null) 
                            && (this.Code.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _date;
        
        [XmlElementAttribute("Date", Order=21, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Date collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DateSpecified
        {
            get
            {
                return ((this.Date != null) 
                            && (this.Date.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeathDate", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool DeathDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeathDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeathDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeathDate
        {
            get
            {
                if (this.DeathDateValueSpecified)
                {
                    return this.DeathDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeathDateValue = value.GetValueOrDefault();
                this.DeathDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DraftNumber", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool DraftNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DraftNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DraftNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DraftNumber
        {
            get
            {
                if (this.DraftNumberValueSpecified)
                {
                    return this.DraftNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DraftNumberValue = value.GetValueOrDefault();
                this.DraftNumberValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _editRecord;
        
        [XmlElementAttribute("EditRecord", Order=24, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> EditRecord
        {
            get
            {
                return _editRecord;
            }
            set
            {
                _editRecord = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EditRecord collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool EditRecordSpecified
        {
            get
            {
                return ((this.EditRecord != null) 
                            && (this.EditRecord.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExceptionCode", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool ExceptionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExceptionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExceptionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExceptionCode
        {
            get
            {
                if (this.ExceptionCodeValueSpecified)
                {
                    return this.ExceptionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExceptionCodeValue = value.GetValueOrDefault();
                this.ExceptionCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExcpItemAccount", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool ExcpItemAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExcpItemAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExcpItemAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExcpItemAccount
        {
            get
            {
                if (this.ExcpItemAccountValueSpecified)
                {
                    return this.ExcpItemAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExcpItemAccountValue = value.GetValueOrDefault();
                this.ExcpItemAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExcpType", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool ExcpTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExcpType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExcpTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExcpType
        {
            get
            {
                if (this.ExcpTypeValueSpecified)
                {
                    return this.ExcpTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExcpTypeValue = value.GetValueOrDefault();
                this.ExcpTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExtLoanAccount", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool ExtLoanAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExtLoanAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExtLoanAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExtLoanAccount
        {
            get
            {
                if (this.ExtLoanAccountValueSpecified)
                {
                    return this.ExtLoanAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExtLoanAccountValue = value.GetValueOrDefault();
                this.ExtLoanAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForeignExcgInd", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool ForeignExcgIndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForeignExcgInd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForeignExcgIndValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ForeignExcgInd
        {
            get
            {
                if (this.ForeignExcgIndValueSpecified)
                {
                    return this.ForeignExcgIndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForeignExcgIndValue = value.GetValueOrDefault();
                this.ForeignExcgIndValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForeignExcgRef", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool ForeignExcgRefValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForeignExcgRef property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForeignExcgRefValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ForeignExcgRef
        {
            get
            {
                if (this.ForeignExcgRefValueSpecified)
                {
                    return this.ForeignExcgRefValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForeignExcgRefValue = value.GetValueOrDefault();
                this.ForeignExcgRefValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForeignExcgRefInd", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool ForeignExcgRefIndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForeignExcgRefInd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForeignExcgRefIndValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ForeignExcgRefInd
        {
            get
            {
                if (this.ForeignExcgRefIndValueSpecified)
                {
                    return this.ForeignExcgRefIndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForeignExcgRefIndValue = value.GetValueOrDefault();
                this.ForeignExcgRefIndValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlAccount", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool GlAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlAccount
        {
            get
            {
                if (this.GlAccountValueSpecified)
                {
                    return this.GlAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlAccountValue = value.GetValueOrDefault();
                this.GlAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCategory", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool GlCategoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCategory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCategoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCategory
        {
            get
            {
                if (this.GlCategoryValueSpecified)
                {
                    return this.GlCategoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCategoryValue = value.GetValueOrDefault();
                this.GlCategoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCode", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool GlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCode
        {
            get
            {
                if (this.GlCodeValueSpecified)
                {
                    return this.GlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCodeValue = value.GetValueOrDefault();
                this.GlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCode1", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool GlCode1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCode1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCode1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCode1
        {
            get
            {
                if (this.GlCode1ValueSpecified)
                {
                    return this.GlCode1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCode1Value = value.GetValueOrDefault();
                this.GlCode1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlComment", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool GlCommentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlComment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCommentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlComment
        {
            get
            {
                if (this.GlCommentValueSpecified)
                {
                    return this.GlCommentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCommentValue = value.GetValueOrDefault();
                this.GlCommentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlReference", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool GlReferenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlReference property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlReferenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlReference
        {
            get
            {
                if (this.GlReferenceValueSpecified)
                {
                    return this.GlReferenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlReferenceValue = value.GetValueOrDefault();
                this.GlReferenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlReference1", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool GlReference1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlReference1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlReference1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlReference1
        {
            get
            {
                if (this.GlReference1ValueSpecified)
                {
                    return this.GlReference1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlReference1Value = value.GetValueOrDefault();
                this.GlReference1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequence", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool GlobalSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlobalSequence
        {
            get
            {
                if (this.GlobalSequenceValueSpecified)
                {
                    return this.GlobalSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceValue = value.GetValueOrDefault();
                this.GlobalSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequenceDate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool GlobalSequenceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequenceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlobalSequenceDate
        {
            get
            {
                if (this.GlobalSequenceDateValueSpecified)
                {
                    return this.GlobalSequenceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceDateValue = value.GetValueOrDefault();
                this.GlobalSequenceDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Id", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool IdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Id property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Id
        {
            get
            {
                if (this.IdValueSpecified)
                {
                    return this.IdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdValue = value.GetValueOrDefault();
                this.IdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdType", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool IdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IdType
        {
            get
            {
                if (this.IdTypeValueSpecified)
                {
                    return this.IdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdTypeValue = value.GetValueOrDefault();
                this.IdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IsoDestCountry", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool IsoDestCountryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsoDestCountry property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IsoDestCountryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IsoDestCountry
        {
            get
            {
                if (this.IsoDestCountryValueSpecified)
                {
                    return this.IsoDestCountryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IsoDestCountryValue = value.GetValueOrDefault();
                this.IsoDestCountryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IsoDestCurrency", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool IsoDestCurrencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsoDestCurrency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IsoDestCurrencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IsoDestCurrency
        {
            get
            {
                if (this.IsoDestCurrencyValueSpecified)
                {
                    return this.IsoDestCurrencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IsoDestCurrencyValue = value.GetValueOrDefault();
                this.IsoDestCurrencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IsoOrigCurrency", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool IsoOrigCurrencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IsoOrigCurrency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IsoOrigCurrencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IsoOrigCurrency
        {
            get
            {
                if (this.IsoOrigCurrencyValueSpecified)
                {
                    return this.IsoOrigCurrencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IsoOrigCurrencyValue = value.GetValueOrDefault();
                this.IsoOrigCurrencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberBranch", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool MemberBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MemberBranch
        {
            get
            {
                if (this.MemberBranchValueSpecified)
                {
                    return this.MemberBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberBranchValue = value.GetValueOrDefault();
                this.MemberBranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginatorStatus", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool OriginatorStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginatorStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginatorStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OriginatorStatus
        {
            get
            {
                if (this.OriginatorStatusValueSpecified)
                {
                    return this.OriginatorStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginatorStatusValue = value.GetValueOrDefault();
                this.OriginatorStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OtherAction", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool OtherActionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OtherAction property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OtherActionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OtherAction
        {
            get
            {
                if (this.OtherActionValueSpecified)
                {
                    return this.OtherActionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OtherActionValue = value.GetValueOrDefault();
                this.OtherActionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OtherId", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool OtherIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OtherId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OtherIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OtherId
        {
            get
            {
                if (this.OtherIdValueSpecified)
                {
                    return this.OtherIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OtherIdValue = value.GetValueOrDefault();
                this.OtherIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OtherIdType", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool OtherIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OtherIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OtherIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OtherIdType
        {
            get
            {
                if (this.OtherIdTypeValueSpecified)
                {
                    return this.OtherIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OtherIdTypeValue = value.GetValueOrDefault();
                this.OtherIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostExcpDescr", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool PostExcpDescrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostExcpDescr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostExcpDescrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PostExcpDescr
        {
            get
            {
                if (this.PostExcpDescrValueSpecified)
                {
                    return this.PostExcpDescrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostExcpDescrValue = value.GetValueOrDefault();
                this.PostExcpDescrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ProcessorAccount", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool ProcessorAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProcessorAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProcessorAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ProcessorAccount
        {
            get
            {
                if (this.ProcessorAccountValueSpecified)
                {
                    return this.ProcessorAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProcessorAccountValue = value.GetValueOrDefault();
                this.ProcessorAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RangeNumber", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool RangeNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RangeNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RangeNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RangeNumber
        {
            get
            {
                if (this.RangeNumberValueSpecified)
                {
                    return this.RangeNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RangeNumberValue = value.GetValueOrDefault();
                this.RangeNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReasonCode", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool ReasonCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReasonCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReasonCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReasonCode
        {
            get
            {
                if (this.ReasonCodeValueSpecified)
                {
                    return this.ReasonCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReasonCodeValue = value.GetValueOrDefault();
                this.ReasonCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegCode", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool RegCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RegCode
        {
            get
            {
                if (this.RegCodeValueSpecified)
                {
                    return this.RegCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegCodeValue = value.GetValueOrDefault();
                this.RegCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReviewStatus", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool ReviewStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReviewStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReviewStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReviewStatus
        {
            get
            {
                if (this.ReviewStatusValueSpecified)
                {
                    return this.ReviewStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReviewStatusValue = value.GetValueOrDefault();
                this.ReviewStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubTranCode", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool SubTranCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubTranCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubTranCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SubTranCode
        {
            get
            {
                if (this.SubTranCodeValueSpecified)
                {
                    return this.SubTranCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubTranCodeValue = value.GetValueOrDefault();
                this.SubTranCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubTranDescr", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool SubTranDescrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubTranDescr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubTranDescrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SubTranDescr
        {
            get
            {
                if (this.SubTranDescrValueSpecified)
                {
                    return this.SubTranDescrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubTranDescrValue = value.GetValueOrDefault();
                this.SubTranDescrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransactionCode", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool TransactionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransactionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransactionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransactionCode
        {
            get
            {
                if (this.TransactionCodeValueSpecified)
                {
                    return this.TransactionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransactionCodeValue = value.GetValueOrDefault();
                this.TransactionCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransferAccount", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool TransferAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransferAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransferAccount
        {
            get
            {
                if (this.TransferAccountValueSpecified)
                {
                    return this.TransferAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransferAccountValue = value.GetValueOrDefault();
                this.TransferAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransferId", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool TransferIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransferIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransferId
        {
            get
            {
                if (this.TransferIdValueSpecified)
                {
                    return this.TransferIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransferIdValue = value.GetValueOrDefault();
                this.TransferIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransferIdType", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool TransferIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransferIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TransferIdType
        {
            get
            {
                if (this.TransferIdTypeValueSpecified)
                {
                    return this.TransferIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransferIdTypeValue = value.GetValueOrDefault();
                this.TransferIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=63, Form=XmlSchemaForm.Unqualified)]
        public ExceptionItemService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=64)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
