//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\PoweronService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\PoweronService\generated-output -n PowerOnService
namespace PowerOnService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("MCWUserDefinedParameters", Namespace="http://www.symxchange.generated.symitar.com/noncrud/poweron/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class McwUserDefinedParameters
    {
        
        [XmlIgnoreAttribute()]
        private Collection<UserNum> _mcwUserNumber;
        
        [XmlElementAttribute("MCWUserNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserNum> McwUserNumber
        {
            get
            {
                return _mcwUserNumber;
            }
            set
            {
                _mcwUserNumber = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserNumber collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserNumberSpecified
        {
            get
            {
                return ((this.McwUserNumber != null) 
                            && (this.McwUserNumber.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="McwUserDefinedParameters" /> class.</para>
        /// </summary>
        public McwUserDefinedParameters()
        {
            this._mcwUserNumber = new Collection<UserNum>();
            this._mcwUserChr = new Collection<UserChr>();
            this._mcwUserDate = new Collection<UserDate>();
            this._mcwUserRate = new Collection<UserRate>();
            this._mcwUserCode = new Collection<UserCode>();
            this._mcwUserAmount = new Collection<UserAmount>();
            this._mcwUserFloat = new Collection<UserFloat>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<UserChr> _mcwUserChr;
        
        [XmlElementAttribute("MCWUserChr", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserChr> McwUserChr
        {
            get
            {
                return _mcwUserChr;
            }
            set
            {
                _mcwUserChr = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserChr collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserChrSpecified
        {
            get
            {
                return ((this.McwUserChr != null) 
                            && (this.McwUserChr.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<UserDate> _mcwUserDate;
        
        [XmlElementAttribute("MCWUserDate", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserDate> McwUserDate
        {
            get
            {
                return _mcwUserDate;
            }
            set
            {
                _mcwUserDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserDateSpecified
        {
            get
            {
                return ((this.McwUserDate != null) 
                            && (this.McwUserDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<UserRate> _mcwUserRate;
        
        [XmlElementAttribute("MCWUserRate", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserRate> McwUserRate
        {
            get
            {
                return _mcwUserRate;
            }
            set
            {
                _mcwUserRate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserRate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserRateSpecified
        {
            get
            {
                return ((this.McwUserRate != null) 
                            && (this.McwUserRate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<UserCode> _mcwUserCode;
        
        [XmlElementAttribute("MCWUserCode", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserCode> McwUserCode
        {
            get
            {
                return _mcwUserCode;
            }
            set
            {
                _mcwUserCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserCodeSpecified
        {
            get
            {
                return ((this.McwUserCode != null) 
                            && (this.McwUserCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<UserAmount> _mcwUserAmount;
        
        [XmlElementAttribute("MCWUserAmount", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserAmount> McwUserAmount
        {
            get
            {
                return _mcwUserAmount;
            }
            set
            {
                _mcwUserAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserAmountSpecified
        {
            get
            {
                return ((this.McwUserAmount != null) 
                            && (this.McwUserAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<UserFloat> _mcwUserFloat;
        
        [XmlElementAttribute("MCWUserFloat", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<UserFloat> McwUserFloat
        {
            get
            {
                return _mcwUserFloat;
            }
            set
            {
                _mcwUserFloat = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the McwUserFloat collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool McwUserFloatSpecified
        {
            get
            {
                return ((this.McwUserFloat != null) 
                            && (this.McwUserFloat.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=7, Form=XmlSchemaForm.Unqualified)]
        public PowerOnService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=8)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
