//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\GeneralLedgerService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\GeneralLedgerService\generated-output -n GeneralLedgerService
namespace GeneralLedgerService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("GlAccountFields", Namespace="http://www.symxchange.generated.symitar.com/crud/generalledger/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("GlAccountFields", Namespace="http://www.symxchange.generated.symitar.com/crud/generalledger/dto/retrieve")]
    public partial class GlAccountFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalNextGlMonth", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool BalNextGlMonthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalNextGlMonth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalNextGlMonthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalNextGlMonth
        {
            get
            {
                if (this.BalNextGlMonthValueSpecified)
                {
                    return this.BalNextGlMonthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalNextGlMonthValue = value.GetValueOrDefault();
                this.BalNextGlMonthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Balance", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Balance
        {
            get
            {
                if (this.BalanceValueSpecified)
                {
                    return this.BalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceValue = value.GetValueOrDefault();
                this.BalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceLastYear", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalanceLastYear
        {
            get
            {
                if (this.BalanceLastYearValueSpecified)
                {
                    return this.BalanceLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceLastYearValue = value.GetValueOrDefault();
                this.BalanceLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceNextPeriod", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceNextPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceNextPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceNextPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalanceNextPeriod
        {
            get
            {
                if (this.BalanceNextPeriodValueSpecified)
                {
                    return this.BalanceNextPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceNextPeriodValue = value.GetValueOrDefault();
                this.BalanceNextPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceSheetColumn", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceSheetColumnValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceSheetColumn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceSheetColumnValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalanceSheetColumn
        {
            get
            {
                if (this.BalanceSheetColumnValueSpecified)
                {
                    return this.BalanceSheetColumnValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceSheetColumnValue = value.GetValueOrDefault();
                this.BalanceSheetColumnValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceYtd", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalanceYtd
        {
            get
            {
                if (this.BalanceYtdValueSpecified)
                {
                    return this.BalanceYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceYtdValue = value.GetValueOrDefault();
                this.BalanceYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BlankLineCode", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool BlankLineCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BlankLineCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BlankLineCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BlankLineCode
        {
            get
            {
                if (this.BlankLineCodeValueSpecified)
                {
                    return this.BlankLineCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BlankLineCodeValue = value.GetValueOrDefault();
                this.BlankLineCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _budget;
        
        [XmlElementAttribute("Budget", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Budget
        {
            get
            {
                return _budget;
            }
            set
            {
                _budget = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Budget collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BudgetSpecified
        {
            get
            {
                return ((this.Budget != null) 
                            && (this.Budget.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GlAccountFields" /> class.</para>
        /// </summary>
        public GlAccountFields()
        {
            this._budget = new Collection<short>();
            this._historicalBalance = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DcRestrictionLevel", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool DcRestrictionLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DcRestrictionLevel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DcRestrictionLevelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DcRestrictionLevel
        {
            get
            {
                if (this.DcRestrictionLevelValueSpecified)
                {
                    return this.DcRestrictionLevelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DcRestrictionLevelValue = value.GetValueOrDefault();
                this.DcRestrictionLevelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionCode", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool DistributionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DistributionCode
        {
            get
            {
                if (this.DistributionCodeValueSpecified)
                {
                    return this.DistributionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionCodeValue = value.GetValueOrDefault();
                this.DistributionCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmLastPurgeDate", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool FmLastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmLastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmLastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FmLastPurgeDate
        {
            get
            {
                if (this.FmLastPurgeDateValueSpecified)
                {
                    return this.FmLastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmLastPurgeDateValue = value.GetValueOrDefault();
                this.FmLastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmLevel", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool FmLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmLevel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmLevelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FmLevel
        {
            get
            {
                if (this.FmLevelValueSpecified)
                {
                    return this.FmLevelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmLevelValue = value.GetValueOrDefault();
                this.FmLevelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FormatType", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool FormatTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FormatType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FormatTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FormatType
        {
            get
            {
                if (this.FormatTypeValueSpecified)
                {
                    return this.FormatTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FormatTypeValue = value.GetValueOrDefault();
                this.FormatTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _historicalBalance;
        
        [XmlElementAttribute("HistoricalBalance", Order=15, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> HistoricalBalance
        {
            get
            {
                return _historicalBalance;
            }
            set
            {
                _historicalBalance = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HistoricalBalance collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HistoricalBalanceSpecified
        {
            get
            {
                return ((this.HistoricalBalance != null) 
                            && (this.HistoricalBalance.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IndentationCode", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool IndentationCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IndentationCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IndentationCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IndentationCode
        {
            get
            {
                if (this.IndentationCodeValueSpecified)
                {
                    return this.IndentationCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IndentationCodeValue = value.GetValueOrDefault();
                this.IndentationCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IqLevel", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool IqLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IqLevel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IqLevelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IqLevel
        {
            get
            {
                if (this.IqLevelValueSpecified)
                {
                    return this.IqLevelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IqLevelValue = value.GetValueOrDefault();
                this.IqLevelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastPurgeDate", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool LastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastPurgeDate
        {
            get
            {
                if (this.LastPurgeDateValueSpecified)
                {
                    return this.LastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastPurgeDateValue = value.GetValueOrDefault();
                this.LastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastTranDate", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool LastTranDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastTranDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastTranDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastTranDate
        {
            get
            {
                if (this.LastTranDateValueSpecified)
                {
                    return this.LastTranDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastTranDateValue = value.GetValueOrDefault();
                this.LastTranDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Lookup", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool LookupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lookup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LookupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Lookup
        {
            get
            {
                if (this.LookupValueSpecified)
                {
                    return this.LookupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LookupValue = value.GetValueOrDefault();
                this.LookupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Name", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool NameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Name property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Name
        {
            get
            {
                if (this.NameValueSpecified)
                {
                    return this.NameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameValue = value.GetValueOrDefault();
                this.NameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Number", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool NumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Number
        {
            get
            {
                if (this.NumberValueSpecified)
                {
                    return this.NumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberValue = value.GetValueOrDefault();
                this.NumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenCode", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool OpenCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OpenCode
        {
            get
            {
                if (this.OpenCodeValueSpecified)
                {
                    return this.OpenCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenCodeValue = value.GetValueOrDefault();
                this.OpenCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrintingCode", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool PrintingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrintingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PrintingCode
        {
            get
            {
                if (this.PrintingCodeValueSpecified)
                {
                    return this.PrintingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrintingCodeValue = value.GetValueOrDefault();
                this.PrintingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestrictionLevel", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictionLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestrictionLevel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictionLevelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RestrictionLevel
        {
            get
            {
                if (this.RestrictionLevelValueSpecified)
                {
                    return this.RestrictionLevelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictionLevelValue = value.GetValueOrDefault();
                this.RestrictionLevelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubType", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool SubTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SubType
        {
            get
            {
                if (this.SubTypeValueSpecified)
                {
                    return this.SubTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubTypeValue = value.GetValueOrDefault();
                this.SubTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Suffix", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool SuffixValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Suffix property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SuffixValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Suffix
        {
            get
            {
                if (this.SuffixValueSpecified)
                {
                    return this.SuffixValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SuffixValue = value.GetValueOrDefault();
                this.SuffixValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalGlBudget", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool TotalGlBudgetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalGlBudget property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalGlBudgetValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TotalGlBudget
        {
            get
            {
                if (this.TotalGlBudgetValueSpecified)
                {
                    return this.TotalGlBudgetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalGlBudgetValue = value.GetValueOrDefault();
                this.TotalGlBudgetValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalLevel", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool TotalLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalLevel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalLevelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TotalLevel
        {
            get
            {
                if (this.TotalLevelValueSpecified)
                {
                    return this.TotalLevelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalLevelValue = value.GetValueOrDefault();
                this.TotalLevelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnderscoreCode", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool UnderscoreCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnderscoreCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnderscoreCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UnderscoreCode
        {
            get
            {
                if (this.UnderscoreCodeValueSpecified)
                {
                    return this.UnderscoreCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnderscoreCodeValue = value.GetValueOrDefault();
                this.UnderscoreCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsageType", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool UsageTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsageType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsageTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UsageType
        {
            get
            {
                if (this.UsageTypeValueSpecified)
                {
                    return this.UsageTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsageTypeValue = value.GetValueOrDefault();
                this.UsageTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=35, Form=XmlSchemaForm.Unqualified)]
        public GeneralLedgerService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=36)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
