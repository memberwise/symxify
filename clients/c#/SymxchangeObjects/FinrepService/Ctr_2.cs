//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\FinrepService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\FinrepService\generated-output -n FinrepService
namespace FinrepService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Ctr", Namespace="http://www.symxchange.generated.symitar.com/crud/finrep/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Ctr", Namespace="http://www.symxchange.generated.symitar.com/crud/finrep/dto/update")]
    [XmlIncludeAttribute(typeof(CtrFields_2))]
    public partial class Ctr_2
    {
        
        [XmlElementAttribute("AckByUser", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AckByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AckDate", Order=1, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> AckDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AckDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AckDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> AckDate
        {
            get
            {
                if (this.AckDateValueSpecified)
                {
                    return this.AckDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AckDateValue = value.GetValueOrDefault();
                this.AckDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AckErrorByUser", Order=2, Form=XmlSchemaForm.Unqualified)]
        public string AckErrorByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AckErrorDate", Order=3, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> AckErrorDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AckErrorDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AckErrorDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> AckErrorDate
        {
            get
            {
                if (this.AckErrorDateValueSpecified)
                {
                    return this.AckErrorDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AckErrorDateValue = value.GetValueOrDefault();
                this.AckErrorDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ApproveAmendByUser", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string ApproveAmendByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproveAmendDate", Order=5, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ApproveAmendDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproveAmendDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproveAmendDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ApproveAmendDate
        {
            get
            {
                if (this.ApproveAmendDateValueSpecified)
                {
                    return this.ApproveAmendDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproveAmendDateValue = value.GetValueOrDefault();
                this.ApproveAmendDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ApproveByUser", Order=6, Form=XmlSchemaForm.Unqualified)]
        public string ApproveByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproveDate", Order=7, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ApproveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ApproveDate
        {
            get
            {
                if (this.ApproveDateValueSpecified)
                {
                    return this.ApproveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproveDateValue = value.GetValueOrDefault();
                this.ApproveDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Approver", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string Approver { get; set; }
        
        [XmlElementAttribute("ApproverTitle", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string ApproverTitle { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BackFileFlag", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short BackFileFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BackFileFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BackFileFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BackFileFlag
        {
            get
            {
                if (this.BackFileFlagValueSpecified)
                {
                    return this.BackFileFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BackFileFlagValue = value.GetValueOrDefault();
                this.BackFileFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchSequence", Order=11, Form=XmlSchemaForm.Unqualified)]
        public int BatchSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> BatchSequence
        {
            get
            {
                if (this.BatchSequenceValueSpecified)
                {
                    return this.BatchSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchSequenceValue = value.GetValueOrDefault();
                this.BatchSequenceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BranchRouting", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string BranchRouting { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinBillsInsert", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinBillsInsertValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinBillsInsert property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinBillsInsertValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinBillsInsert
        {
            get
            {
                if (this.CashinBillsInsertValueSpecified)
                {
                    return this.CashinBillsInsertValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinBillsInsertValue = value.GetValueOrDefault();
                this.CashinBillsInsertValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinCurrWager", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinCurrWagerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinCurrWager property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinCurrWagerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinCurrWager
        {
            get
            {
                if (this.CashinCurrWagerValueSpecified)
                {
                    return this.CashinCurrWagerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinCurrWagerValue = value.GetValueOrDefault();
                this.CashinCurrWagerValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinCurrXchng", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinCurrXchngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinCurrXchng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinCurrXchngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinCurrXchng
        {
            get
            {
                if (this.CashinCurrXchngValueSpecified)
                {
                    return this.CashinCurrXchngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinCurrXchngValue = value.GetValueOrDefault();
                this.CashinCurrXchngValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinDeposit", Order=16, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinDeposit
        {
            get
            {
                if (this.CashinDepositValueSpecified)
                {
                    return this.CashinDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinDepositValue = value.GetValueOrDefault();
                this.CashinDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinFundsXfer", Order=17, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinFundsXferValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinFundsXfer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinFundsXferValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinFundsXfer
        {
            get
            {
                if (this.CashinFundsXferValueSpecified)
                {
                    return this.CashinFundsXferValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinFundsXferValue = value.GetValueOrDefault();
                this.CashinFundsXferValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinGamingIns", Order=18, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinGamingInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinGamingIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinGamingInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinGamingIns
        {
            get
            {
                if (this.CashinGamingInsValueSpecified)
                {
                    return this.CashinGamingInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinGamingInsValue = value.GetValueOrDefault();
                this.CashinGamingInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinNegIns", Order=19, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinNegInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinNegIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinNegInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinNegIns
        {
            get
            {
                if (this.CashinNegInsValueSpecified)
                {
                    return this.CashinNegInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinNegInsValue = value.GetValueOrDefault();
                this.CashinNegInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinOther", Order=20, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinOtherValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinOther property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinOtherValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinOther
        {
            get
            {
                if (this.CashinOtherValueSpecified)
                {
                    return this.CashinOtherValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinOtherValue = value.GetValueOrDefault();
                this.CashinOtherValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CashinOtherDesc", Order=21, Form=XmlSchemaForm.Unqualified)]
        public string CashinOtherDesc { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinPayment", Order=22, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinPayment
        {
            get
            {
                if (this.CashinPaymentValueSpecified)
                {
                    return this.CashinPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinPaymentValue = value.GetValueOrDefault();
                this.CashinPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinPrepaid", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinPrepaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinPrepaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinPrepaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinPrepaid
        {
            get
            {
                if (this.CashinPrepaidValueSpecified)
                {
                    return this.CashinPrepaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinPrepaidValue = value.GetValueOrDefault();
                this.CashinPrepaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinTotal", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinTotalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinTotal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinTotalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashinTotal
        {
            get
            {
                if (this.CashinTotalValueSpecified)
                {
                    return this.CashinTotalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinTotalValue = value.GetValueOrDefault();
                this.CashinTotalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutAdvOnCred", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutAdvOnCredValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutAdvOnCred property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutAdvOnCredValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutAdvOnCred
        {
            get
            {
                if (this.CashoutAdvOnCredValueSpecified)
                {
                    return this.CashoutAdvOnCredValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutAdvOnCredValue = value.GetValueOrDefault();
                this.CashoutAdvOnCredValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutCurrXchng", Order=26, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutCurrXchngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutCurrXchng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutCurrXchngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutCurrXchng
        {
            get
            {
                if (this.CashoutCurrXchngValueSpecified)
                {
                    return this.CashoutCurrXchngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutCurrXchngValue = value.GetValueOrDefault();
                this.CashoutCurrXchngValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutFundsXfer", Order=27, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutFundsXferValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutFundsXfer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutFundsXferValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutFundsXfer
        {
            get
            {
                if (this.CashoutFundsXferValueSpecified)
                {
                    return this.CashoutFundsXferValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutFundsXferValue = value.GetValueOrDefault();
                this.CashoutFundsXferValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutGamingIns", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutGamingInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutGamingIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutGamingInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutGamingIns
        {
            get
            {
                if (this.CashoutGamingInsValueSpecified)
                {
                    return this.CashoutGamingInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutGamingInsValue = value.GetValueOrDefault();
                this.CashoutGamingInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutNegIns", Order=29, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutNegInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutNegIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutNegInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutNegIns
        {
            get
            {
                if (this.CashoutNegInsValueSpecified)
                {
                    return this.CashoutNegInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutNegInsValue = value.GetValueOrDefault();
                this.CashoutNegInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutOther", Order=30, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutOtherValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutOther property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutOtherValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutOther
        {
            get
            {
                if (this.CashoutOtherValueSpecified)
                {
                    return this.CashoutOtherValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutOtherValue = value.GetValueOrDefault();
                this.CashoutOtherValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CashoutOtherDesc", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string CashoutOtherDesc { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutPayOnWagers", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutPayOnWagersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutPayOnWagers property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutPayOnWagersValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutPayOnWagers
        {
            get
            {
                if (this.CashoutPayOnWagersValueSpecified)
                {
                    return this.CashoutPayOnWagersValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutPayOnWagersValue = value.GetValueOrDefault();
                this.CashoutPayOnWagersValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutPrepaid", Order=33, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutPrepaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutPrepaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutPrepaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutPrepaid
        {
            get
            {
                if (this.CashoutPrepaidValueSpecified)
                {
                    return this.CashoutPrepaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutPrepaidValue = value.GetValueOrDefault();
                this.CashoutPrepaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutPromo", Order=34, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutPromoValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutPromo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutPromoValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutPromo
        {
            get
            {
                if (this.CashoutPromoValueSpecified)
                {
                    return this.CashoutPromoValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutPromoValue = value.GetValueOrDefault();
                this.CashoutPromoValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutTotal", Order=35, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutTotalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutTotal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutTotalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutTotal
        {
            get
            {
                if (this.CashoutTotalValueSpecified)
                {
                    return this.CashoutTotalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutTotalValue = value.GetValueOrDefault();
                this.CashoutTotalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutTravel", Order=36, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutTravelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutTravel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutTravelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutTravel
        {
            get
            {
                if (this.CashoutTravelValueSpecified)
                {
                    return this.CashoutTravelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutTravelValue = value.GetValueOrDefault();
                this.CashoutTravelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutWithdraw", Order=37, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutWithdrawValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutWithdraw property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutWithdrawValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashoutWithdraw
        {
            get
            {
                if (this.CashoutWithdrawValueSpecified)
                {
                    return this.CashoutWithdrawValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutWithdrawValue = value.GetValueOrDefault();
                this.CashoutWithdrawValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ContactOffice", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string ContactOffice { get; set; }
        
        [XmlElementAttribute("ContactPhone", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string ContactPhone { get; set; }
        
        [XmlElementAttribute("ContactPhoneExt", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string ContactPhoneExt { get; set; }
        
        [XmlElementAttribute("CreateByUser", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string CreateByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateDate", Order=42, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> CreateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CreateDate
        {
            get
            {
                if (this.CreateDateValueSpecified)
                {
                    return this.CreateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateDateValue = value.GetValueOrDefault();
                this.CreateDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DcNumber", Order=43, Form=XmlSchemaForm.Unqualified)]
        public string DcNumber { get; set; }
        
        [XmlElementAttribute("ExemptByUser", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string ExemptByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExemptDate", Order=45, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ExemptDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExemptDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExemptDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ExemptDate
        {
            get
            {
                if (this.ExemptDateValueSpecified)
                {
                    return this.ExemptDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExemptDateValue = value.GetValueOrDefault();
                this.ExemptDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FederalRegulator", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short FederalRegulatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FederalRegulator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FederalRegulatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FederalRegulator
        {
            get
            {
                if (this.FederalRegulatorValueSpecified)
                {
                    return this.FederalRegulatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FederalRegulatorValue = value.GetValueOrDefault();
                this.FederalRegulatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("FiIdNumber", Order=47, Form=XmlSchemaForm.Unqualified)]
        public string FiIdNumber { get; set; }
        
        [XmlElementAttribute("FiIdNumberType", Order=48, Form=XmlSchemaForm.Unqualified)]
        public string FiIdNumberType { get; set; }
        
        [XmlElementAttribute("FiOtherType", Order=49, Form=XmlSchemaForm.Unqualified)]
        public string FiOtherType { get; set; }
        
        [XmlElementAttribute("FiType", Order=50, Form=XmlSchemaForm.Unqualified)]
        public string FiType { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FilingDate", Order=51, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> FilingDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FilingDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FilingDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FilingDate
        {
            get
            {
                if (this.FilingDateValueSpecified)
                {
                    return this.FilingDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FilingDateValue = value.GetValueOrDefault();
                this.FilingDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("FilingType", Order=52, Form=XmlSchemaForm.Unqualified)]
        public string FilingType { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmPurgeDate", Order=53, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> FmPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FmPurgeDate
        {
            get
            {
                if (this.FmPurgeDateValueSpecified)
                {
                    return this.FmPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmPurgeDateValue = value.GetValueOrDefault();
                this.FmPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("IncompleteByUser", Order=54, Form=XmlSchemaForm.Unqualified)]
        public string IncompleteByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncompleteDate", Order=55, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> IncompleteDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncompleteDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncompleteDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> IncompleteDate
        {
            get
            {
                if (this.IncompleteDateValueSpecified)
                {
                    return this.IncompleteDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncompleteDateValue = value.GetValueOrDefault();
                this.IncompleteDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=56, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastSubmitDate", Order=57, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastSubmitDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastSubmitDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastSubmitDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastSubmitDate
        {
            get
            {
                if (this.LastSubmitDateValueSpecified)
                {
                    return this.LastSubmitDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastSubmitDateValue = value.GetValueOrDefault();
                this.LastSubmitDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NonReportByUser", Order=58, Form=XmlSchemaForm.Unqualified)]
        public string NonReportByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonReportDate", Order=59, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NonReportDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonReportDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonReportDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NonReportDate
        {
            get
            {
                if (this.NonReportDateValueSpecified)
                {
                    return this.NonReportDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonReportDateValue = value.GetValueOrDefault();
                this.NonReportDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Number", Order=60, Form=XmlSchemaForm.Unqualified)]
        public string Number { get; set; }
        
        [XmlElementAttribute("Preparer", Order=61, Form=XmlSchemaForm.Unqualified)]
        public string Preparer { get; set; }
        
        [XmlElementAttribute("ReSubAmendByUser", Order=62, Form=XmlSchemaForm.Unqualified)]
        public string ReSubAmendByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReSubAmendDate", Order=63, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ReSubAmendDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReSubAmendDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReSubAmendDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ReSubAmendDate
        {
            get
            {
                if (this.ReSubAmendDateValueSpecified)
                {
                    return this.ReSubAmendDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReSubAmendDateValue = value.GetValueOrDefault();
                this.ReSubAmendDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=64, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnAggregateFlag", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short RsnAggregateFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnAggregateFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnAggregateFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RsnAggregateFlag
        {
            get
            {
                if (this.RsnAggregateFlagValueSpecified)
                {
                    return this.RsnAggregateFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnAggregateFlagValue = value.GetValueOrDefault();
                this.RsnAggregateFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnArmCarFlag", Order=66, Form=XmlSchemaForm.Unqualified)]
        public short RsnArmCarFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnArmCarFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnArmCarFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RsnArmCarFlag
        {
            get
            {
                if (this.RsnArmCarFlagValueSpecified)
                {
                    return this.RsnArmCarFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnArmCarFlagValue = value.GetValueOrDefault();
                this.RsnArmCarFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnAtmFlag", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short RsnAtmFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnAtmFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnAtmFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RsnAtmFlag
        {
            get
            {
                if (this.RsnAtmFlagValueSpecified)
                {
                    return this.RsnAtmFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnAtmFlagValue = value.GetValueOrDefault();
                this.RsnAtmFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnMailShipFlag", Order=68, Form=XmlSchemaForm.Unqualified)]
        public short RsnMailShipFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnMailShipFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnMailShipFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RsnMailShipFlag
        {
            get
            {
                if (this.RsnMailShipFlagValueSpecified)
                {
                    return this.RsnMailShipFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnMailShipFlagValue = value.GetValueOrDefault();
                this.RsnMailShipFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnNgtDepFlag", Order=69, Form=XmlSchemaForm.Unqualified)]
        public short RsnNgtDepFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnNgtDepFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnNgtDepFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RsnNgtDepFlag
        {
            get
            {
                if (this.RsnNgtDepFlagValueSpecified)
                {
                    return this.RsnNgtDepFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnNgtDepFlagValue = value.GetValueOrDefault();
                this.RsnNgtDepFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnShBRFlag", Order=70, Form=XmlSchemaForm.Unqualified)]
        public short RsnShBrFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnShBrFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnShBrFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RsnShBrFlag
        {
            get
            {
                if (this.RsnShBrFlagValueSpecified)
                {
                    return this.RsnShBrFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnShBrFlagValue = value.GetValueOrDefault();
                this.RsnShBrFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=71, Form=XmlSchemaForm.Unqualified)]
        public short StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatusDate", Order=72, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> StatusDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatusDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> StatusDate
        {
            get
            {
                if (this.StatusDateValueSpecified)
                {
                    return this.StatusDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusDateValue = value.GetValueOrDefault();
                this.StatusDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SubmitByUser", Order=73, Form=XmlSchemaForm.Unqualified)]
        public string SubmitByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubmitDate", Order=74, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> SubmitDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubmitDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubmitDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SubmitDate
        {
            get
            {
                if (this.SubmitDateValueSpecified)
                {
                    return this.SubmitDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubmitDateValue = value.GetValueOrDefault();
                this.SubmitDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Tcc", Order=75, Form=XmlSchemaForm.Unqualified)]
        public string Tcc { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranDate", Order=76, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> TranDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> TranDate
        {
            get
            {
                if (this.TranDateValueSpecified)
                {
                    return this.TranDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranDateValue = value.GetValueOrDefault();
                this.TranDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("TranSeq", Order=77, Form=XmlSchemaForm.Unqualified)]
        public string TranSeq { get; set; }
        
        [XmlElementAttribute("VerifyAmendByUser", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string VerifyAmendByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerifyAmendDate", Order=79, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> VerifyAmendDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerifyAmendDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerifyAmendDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> VerifyAmendDate
        {
            get
            {
                if (this.VerifyAmendDateValueSpecified)
                {
                    return this.VerifyAmendDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerifyAmendDateValue = value.GetValueOrDefault();
                this.VerifyAmendDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("VerifyByUser", Order=80, Form=XmlSchemaForm.Unqualified)]
        public string VerifyByUser { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerifyDate", Order=81, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> VerifyDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerifyDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerifyDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> VerifyDate
        {
            get
            {
                if (this.VerifyDateValueSpecified)
                {
                    return this.VerifyDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerifyDateValue = value.GetValueOrDefault();
                this.VerifyDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=82, Form=XmlSchemaForm.Unqualified)]
        public FinrepService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=83)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Ctr_2" /> class.</para>
        /// </summary>
        public Ctr_2()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
