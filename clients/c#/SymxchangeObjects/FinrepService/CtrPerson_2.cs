//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\FinrepService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\FinrepService\generated-output -n FinrepService
namespace FinrepService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CtrPerson", Namespace="http://www.symxchange.generated.symitar.com/crud/finrep/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CtrPerson", Namespace="http://www.symxchange.generated.symitar.com/crud/finrep/dto/update")]
    [XmlIncludeAttribute(typeof(CtrPersonFields_2))]
    public partial class CtrPerson_2
    {
        
        [XmlElementAttribute("Address", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string Address { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BirthDate", Order=1, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> BirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BirthDate
        {
            get
            {
                if (this.BirthDateValueSpecified)
                {
                    return this.BirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BirthDateValue = value.GetValueOrDefault();
                this.BirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cashin", Order=2, Form=XmlSchemaForm.Unqualified)]
        public decimal CashinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cashin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cashin
        {
            get
            {
                if (this.CashinValueSpecified)
                {
                    return this.CashinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinValue = value.GetValueOrDefault();
                this.CashinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cashout", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal CashoutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cashout property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cashout
        {
            get
            {
                if (this.CashoutValueSpecified)
                {
                    return this.CashoutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutValue = value.GetValueOrDefault();
                this.CashoutValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("City", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string City { get; set; }
        
        [XmlElementAttribute("CountryCode", Order=5, Form=XmlSchemaForm.Unqualified)]
        public string CountryCode { get; set; }
        
        [XmlElementAttribute("DbaFirst", Order=6, Form=XmlSchemaForm.Unqualified)]
        public string DbaFirst { get; set; }
        
        [XmlElementAttribute("DbaLast", Order=7, Form=XmlSchemaForm.Unqualified)]
        public string DbaLast { get; set; }
        
        [XmlElementAttribute("DbaLongName", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string DbaLongName { get; set; }
        
        [XmlElementAttribute("DbaMiddle", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string DbaMiddle { get; set; }
        
        [XmlElementAttribute("DbaShortName", Order=10, Form=XmlSchemaForm.Unqualified)]
        public string DbaShortName { get; set; }
        
        [XmlElementAttribute("DbaSuffix", Order=11, Form=XmlSchemaForm.Unqualified)]
        public string DbaSuffix { get; set; }
        
        [XmlElementAttribute("Email", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string Email { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EntityFlag", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short EntityFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EntityFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EntityFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EntityFlag
        {
            get
            {
                if (this.EntityFlagValueSpecified)
                {
                    return this.EntityFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EntityFlagValue = value.GetValueOrDefault();
                this.EntityFlagValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("First", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string First { get; set; }
        
        [XmlElementAttribute("Gender", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string Gender { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Headquarters", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short HeadquartersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Headquarters property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HeadquartersValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Headquarters
        {
            get
            {
                if (this.HeadquartersValueSpecified)
                {
                    return this.HeadquartersValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeadquartersValue = value.GetValueOrDefault();
                this.HeadquartersValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("IdIssueByCountry", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string IdIssueByCountry { get; set; }
        
        [XmlElementAttribute("IdIssueByState", Order=18, Form=XmlSchemaForm.Unqualified)]
        public string IdIssueByState { get; set; }
        
        [XmlElementAttribute("IdNumber", Order=19, Form=XmlSchemaForm.Unqualified)]
        public string IdNumber { get; set; }
        
        [XmlElementAttribute("IdTypeOtherDesc", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string IdTypeOtherDesc { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdVerifyMethod", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short IdVerifyMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdVerifyMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdVerifyMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdVerifyMethod
        {
            get
            {
                if (this.IdVerifyMethodValueSpecified)
                {
                    return this.IdVerifyMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdVerifyMethodValue = value.GetValueOrDefault();
                this.IdVerifyMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Last", Order=22, Form=XmlSchemaForm.Unqualified)]
        public string Last { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=23, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=24, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LongName", Order=25, Form=XmlSchemaForm.Unqualified)]
        public string LongName { get; set; }
        
        [XmlElementAttribute("Middle", Order=26, Form=XmlSchemaForm.Unqualified)]
        public string Middle { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MultiTransFlag", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short MultiTransFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MultiTransFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MultiTransFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MultiTransFlag
        {
            get
            {
                if (this.MultiTransFlagValueSpecified)
                {
                    return this.MultiTransFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MultiTransFlagValue = value.GetValueOrDefault();
                this.MultiTransFlagValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NaicsCode", Order=28, Form=XmlSchemaForm.Unqualified)]
        public string NaicsCode { get; set; }
        
        [XmlElementAttribute("Occupation", Order=29, Form=XmlSchemaForm.Unqualified)]
        public string Occupation { get; set; }
        
        [XmlElementAttribute("Phone", Order=30, Form=XmlSchemaForm.Unqualified)]
        public string Phone { get; set; }
        
        [XmlElementAttribute("PhoneExt", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string PhoneExt { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=32, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ShortName", Order=33, Form=XmlSchemaForm.Unqualified)]
        public string ShortName { get; set; }
        
        [XmlElementAttribute("Ssn", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string Ssn { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsnTintype", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short SsnTintypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsnTintype property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsnTintypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SsnTintype
        {
            get
            {
                if (this.SsnTintypeValueSpecified)
                {
                    return this.SsnTintypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsnTintypeValue = value.GetValueOrDefault();
                this.SsnTintypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("State", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string State { get; set; }
        
        [XmlElementAttribute("Suffix", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string Suffix { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=38, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ZipCode", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string ZipCode { get; set; }
        
        [XmlElementAttribute("Version_1", Order=40, Form=XmlSchemaForm.Unqualified)]
        public FinrepService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=41)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CtrPerson_2" /> class.</para>
        /// </summary>
        public CtrPerson_2()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
