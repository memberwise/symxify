//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\MemberService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\MemberService\generated-output -n MemberService
namespace MemberService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("MemberRec", Namespace="http://www.symxchange.generated.symitar.com/crud/member/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("MemberRec", Namespace="http://www.symxchange.generated.symitar.com/crud/member/dto/retrieve")]
    public partial class MemberRec
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDuty", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short ActiveDutyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDuty property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ActiveDuty
        {
            get
            {
                if (this.ActiveDutyValueSpecified)
                {
                    return this.ActiveDutyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutyValue = value.GetValueOrDefault();
                this.ActiveDutyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDutySeparationDate", Order=1, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDutySeparationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDutySeparationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutySeparationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDutySeparationDate
        {
            get
            {
                if (this.ActiveDutySeparationDateValueSpecified)
                {
                    return this.ActiveDutySeparationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutySeparationDateValue = value.GetValueOrDefault();
                this.ActiveDutySeparationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDutyStartDate", Order=2, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDutyStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDutyStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutyStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDutyStartDate
        {
            get
            {
                if (this.ActiveDutyStartDateValueSpecified)
                {
                    return this.ActiveDutyStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutyStartDateValue = value.GetValueOrDefault();
                this.ActiveDutyStartDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDutyVerificationDate", Order=3, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDutyVerificationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDutyVerificationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutyVerificationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDutyVerificationDate
        {
            get
            {
                if (this.ActiveDutyVerificationDateValueSpecified)
                {
                    return this.ActiveDutyVerificationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutyVerificationDateValue = value.GetValueOrDefault();
                this.ActiveDutyVerificationDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AltEmail", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string AltEmail { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BirthDate", Order=5, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime BirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BirthDate
        {
            get
            {
                if (this.BirthDateValueSpecified)
                {
                    return this.BirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BirthDateValue = value.GetValueOrDefault();
                this.BirthDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Chapter4StatusCode", Order=6, Form=XmlSchemaForm.Unqualified)]
        public string Chapter4StatusCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CtrExempt", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short CtrExemptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CtrExempt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtrExemptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CtrExempt
        {
            get
            {
                if (this.CtrExemptValueSpecified)
                {
                    return this.CtrExemptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtrExemptValue = value.GetValueOrDefault();
                this.CtrExemptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrGrossMonthPay", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrGrossMonthPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrGrossMonthPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrGrossMonthPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrGrossMonthPay
        {
            get
            {
                if (this.CurrGrossMonthPayValueSpecified)
                {
                    return this.CurrGrossMonthPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrGrossMonthPayValue = value.GetValueOrDefault();
                this.CurrGrossMonthPayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrNetMonthPay", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrNetMonthPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrNetMonthPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrNetMonthPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrNetMonthPay
        {
            get
            {
                if (this.CurrNetMonthPayValueSpecified)
                {
                    return this.CurrNetMonthPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrNetMonthPayValue = value.GetValueOrDefault();
                this.CurrNetMonthPayValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DbaExtendedName", Order=10, Form=XmlSchemaForm.Unqualified)]
        public string DbaExtendedName { get; set; }
        
        [XmlElementAttribute("DbaFirst", Order=11, Form=XmlSchemaForm.Unqualified)]
        public string DbaFirst { get; set; }
        
        [XmlElementAttribute("DbaLast", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string DbaLast { get; set; }
        
        [XmlElementAttribute("DbaLongName", Order=13, Form=XmlSchemaForm.Unqualified)]
        public string DbaLongName { get; set; }
        
        [XmlElementAttribute("DbaMiddle", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string DbaMiddle { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DbaNameFormat", Order=15, Form=XmlSchemaForm.Unqualified)]
        public short DbaNameFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DbaNameFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DbaNameFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DbaNameFormat
        {
            get
            {
                if (this.DbaNameFormatValueSpecified)
                {
                    return this.DbaNameFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DbaNameFormatValue = value.GetValueOrDefault();
                this.DbaNameFormatValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DbaShortName", Order=16, Form=XmlSchemaForm.Unqualified)]
        public string DbaShortName { get; set; }
        
        [XmlElementAttribute("DbaSuffix", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string DbaSuffix { get; set; }
        
        [XmlElementAttribute("DbaTitle", Order=18, Form=XmlSchemaForm.Unqualified)]
        public string DbaTitle { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeathDate", Order=19, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DeathDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeathDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeathDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DeathDate
        {
            get
            {
                if (this.DeathDateValueSpecified)
                {
                    return this.DeathDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeathDateValue = value.GetValueOrDefault();
                this.DeathDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Email", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string Email { get; set; }
        
        [XmlElementAttribute("EmployerName", Order=21, Form=XmlSchemaForm.Unqualified)]
        public string EmployerName { get; set; }
        
        [XmlElementAttribute("ExtendedName", Order=22, Form=XmlSchemaForm.Unqualified)]
        public string ExtendedName { get; set; }
        
        [XmlElementAttribute("First", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string First { get; set; }
        
        [XmlElementAttribute("ForeignTin", Order=24, Form=XmlSchemaForm.Unqualified)]
        public string ForeignTin { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FormW8OnFile", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short FormW8OnFileValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FormW8OnFile property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FormW8OnFileValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FormW8OnFile
        {
            get
            {
                if (this.FormW8OnFileValueSpecified)
                {
                    return this.FormW8OnFileValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FormW8OnFileValue = value.GetValueOrDefault();
                this.FormW8OnFileValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("GIin", Order=26, Form=XmlSchemaForm.Unqualified)]
        public string GIin { get; set; }
        
        [XmlElementAttribute("HomePhone", Order=27, Form=XmlSchemaForm.Unqualified)]
        public string HomePhone { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentDocFlag> _identDocFlag;
        
        [XmlElementAttribute("IdentDocFlag", Order=28, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentDocFlag> IdentDocFlag
        {
            get
            {
                return _identDocFlag;
            }
            set
            {
                _identDocFlag = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentDocFlag collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentDocFlagSpecified
        {
            get
            {
                return ((this.IdentDocFlag != null) 
                            && (this.IdentDocFlag.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MemberRec" /> class.</para>
        /// </summary>
        public MemberRec()
        {
            this._identDocFlag = new Collection<MemberRecIdentDocFlag>();
            this._identIdDescription = new Collection<MemberRecIdentIdDescription>();
            this._identIdExpireDate = new Collection<MemberRecIdentIdExpireDate>();
            this._identIdIssueDate = new Collection<MemberRecIdentIdIssueDate>();
            this._identIdNumber = new Collection<MemberRecIdentIdNumber>();
            this._identIdType = new Collection<MemberRecIdentIdType>();
            this._identIdVerifyDate = new Collection<MemberRecIdentIdVerifyDate>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentIdDescription> _identIdDescription;
        
        [XmlElementAttribute("IdentIdDescription", Order=29, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentIdDescription> IdentIdDescription
        {
            get
            {
                return _identIdDescription;
            }
            set
            {
                _identIdDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdDescriptionSpecified
        {
            get
            {
                return ((this.IdentIdDescription != null) 
                            && (this.IdentIdDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentIdExpireDate> _identIdExpireDate;
        
        [XmlElementAttribute("IdentIdExpireDate", Order=30, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentIdExpireDate> IdentIdExpireDate
        {
            get
            {
                return _identIdExpireDate;
            }
            set
            {
                _identIdExpireDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdExpireDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdExpireDateSpecified
        {
            get
            {
                return ((this.IdentIdExpireDate != null) 
                            && (this.IdentIdExpireDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentIdIssueDate> _identIdIssueDate;
        
        [XmlElementAttribute("IdentIdIssueDate", Order=31, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentIdIssueDate> IdentIdIssueDate
        {
            get
            {
                return _identIdIssueDate;
            }
            set
            {
                _identIdIssueDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdIssueDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdIssueDateSpecified
        {
            get
            {
                return ((this.IdentIdIssueDate != null) 
                            && (this.IdentIdIssueDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentIdNumber> _identIdNumber;
        
        [XmlElementAttribute("IdentIdNumber", Order=32, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentIdNumber> IdentIdNumber
        {
            get
            {
                return _identIdNumber;
            }
            set
            {
                _identIdNumber = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdNumber collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdNumberSpecified
        {
            get
            {
                return ((this.IdentIdNumber != null) 
                            && (this.IdentIdNumber.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentIdType> _identIdType;
        
        [XmlElementAttribute("IdentIdType", Order=33, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentIdType> IdentIdType
        {
            get
            {
                return _identIdType;
            }
            set
            {
                _identIdType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdTypeSpecified
        {
            get
            {
                return ((this.IdentIdType != null) 
                            && (this.IdentIdType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MemberRecIdentIdVerifyDate> _identIdVerifyDate;
        
        [XmlElementAttribute("IdentIdVerifyDate", Order=34, Form=XmlSchemaForm.Unqualified)]
        public Collection<MemberRecIdentIdVerifyDate> IdentIdVerifyDate
        {
            get
            {
                return _identIdVerifyDate;
            }
            set
            {
                _identIdVerifyDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdVerifyDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdVerifyDateSpecified
        {
            get
            {
                return ((this.IdentIdVerifyDate != null) 
                            && (this.IdentIdVerifyDate.Count != 0));
            }
        }
        
        [XmlElementAttribute("IrsCountryCode", Order=35, Form=XmlSchemaForm.Unqualified)]
        public string IrsCountryCode { get; set; }
        
        [XmlElementAttribute("Last", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string Last { get; set; }
        
        [XmlElementAttribute("Lei", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string Lei { get; set; }
        
        [XmlElementAttribute("License", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string License { get; set; }
        
        [XmlElementAttribute("Lob", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string Lob { get; set; }
        
        [XmlElementAttribute("LongName", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string LongName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrActivityDate", Order=41, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrActivityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrActivityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrActivityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrActivityDate
        {
            get
            {
                if (this.MbrActivityDateValueSpecified)
                {
                    return this.MbrActivityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrActivityDateValue = value.GetValueOrDefault();
                this.MbrActivityDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrCreateDate", Order=42, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrCreateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrCreateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrCreateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrCreateDate
        {
            get
            {
                if (this.MbrCreateDateValueSpecified)
                {
                    return this.MbrCreateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrCreateDateValue = value.GetValueOrDefault();
                this.MbrCreateDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrCurrMthPayChgDate", Order=43, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrCurrMthPayChgDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrCurrMthPayChgDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrCurrMthPayChgDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrCurrMthPayChgDate
        {
            get
            {
                if (this.MbrCurrMthPayChgDateValueSpecified)
                {
                    return this.MbrCurrMthPayChgDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrCurrMthPayChgDateValue = value.GetValueOrDefault();
                this.MbrCurrMthPayChgDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrDisconnectDate", Order=44, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrDisconnectDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrDisconnectDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrDisconnectDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrDisconnectDate
        {
            get
            {
                if (this.MbrDisconnectDateValueSpecified)
                {
                    return this.MbrDisconnectDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrDisconnectDateValue = value.GetValueOrDefault();
                this.MbrDisconnectDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrExpDate", Order=45, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrExpDate
        {
            get
            {
                if (this.MbrExpDateValueSpecified)
                {
                    return this.MbrExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrExpDateValue = value.GetValueOrDefault();
                this.MbrExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrFileType", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short MbrFileTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrFileType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrFileTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MbrFileType
        {
            get
            {
                if (this.MbrFileTypeValueSpecified)
                {
                    return this.MbrFileTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrFileTypeValue = value.GetValueOrDefault();
                this.MbrFileTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrFmLastDate", Order=47, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrFmLastDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrFmLastDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrFmLastDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrFmLastDate
        {
            get
            {
                if (this.MbrFmLastDateValueSpecified)
                {
                    return this.MbrFmLastDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrFmLastDateValue = value.GetValueOrDefault();
                this.MbrFmLastDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrFmLastPurgeDate", Order=48, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrFmLastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrFmLastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrFmLastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrFmLastPurgeDate
        {
            get
            {
                if (this.MbrFmLastPurgeDateValueSpecified)
                {
                    return this.MbrFmLastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrFmLastPurgeDateValue = value.GetValueOrDefault();
                this.MbrFmLastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrRecordChangeDate", Order=49, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrRecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrRecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrRecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrRecordChangeDate
        {
            get
            {
                if (this.MbrRecordChangeDateValueSpecified)
                {
                    return this.MbrRecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrRecordChangeDateValue = value.GetValueOrDefault();
                this.MbrRecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrStatus", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short MbrStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MbrStatus
        {
            get
            {
                if (this.MbrStatusValueSpecified)
                {
                    return this.MbrStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrStatusValue = value.GetValueOrDefault();
                this.MbrStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrStatusFmDate", Order=51, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MbrStatusFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrStatusFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrStatusFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MbrStatusFmDate
        {
            get
            {
                if (this.MbrStatusFmDateValueSpecified)
                {
                    return this.MbrStatusFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrStatusFmDateValue = value.GetValueOrDefault();
                this.MbrStatusFmDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MemberNumber", Order=52, Form=XmlSchemaForm.Unqualified)]
        public string MemberNumber { get; set; }
        
        [XmlElementAttribute("MemberRecFmHistoryList", Order=53, Form=XmlSchemaForm.Unqualified)]
        public MemberRecFmHistoryList MemberRecFmHistoryList { get; set; }
        
        [XmlElementAttribute("Middle", Order=54, Form=XmlSchemaForm.Unqualified)]
        public string Middle { get; set; }
        
        [XmlElementAttribute("MobilePhone", Order=55, Form=XmlSchemaForm.Unqualified)]
        public string MobilePhone { get; set; }
        
        [XmlElementAttribute("MothersMaidenName", Order=56, Form=XmlSchemaForm.Unqualified)]
        public string MothersMaidenName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameFormat", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short NameFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NameFormat
        {
            get
            {
                if (this.NameFormatValueSpecified)
                {
                    return this.NameFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameFormatValue = value.GetValueOrDefault();
                this.NameFormatValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NraExemptionCode", Order=58, Form=XmlSchemaForm.Unqualified)]
        public string NraExemptionCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NraTaxRate", Order=59, Form=XmlSchemaForm.Unqualified)]
        public decimal NraTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NraTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NraTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NraTaxRate
        {
            get
            {
                if (this.NraTaxRateValueSpecified)
                {
                    return this.NraTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NraTaxRateValue = value.GetValueOrDefault();
                this.NraTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Occupation", Order=60, Form=XmlSchemaForm.Unqualified)]
        public string Occupation { get; set; }
        
        [XmlElementAttribute("PagerNumber", Order=61, Form=XmlSchemaForm.Unqualified)]
        public string PagerNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PhoneType", Order=62, Form=XmlSchemaForm.Unqualified)]
        public short PhoneTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PhoneType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PhoneTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PhoneType
        {
            get
            {
                if (this.PhoneTypeValueSpecified)
                {
                    return this.PhoneTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhoneTypeValue = value.GetValueOrDefault();
                this.PhoneTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PreferredContact", Order=63, Form=XmlSchemaForm.Unqualified)]
        public string PreferredContact { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreferredContactMethod", Order=64, Form=XmlSchemaForm.Unqualified)]
        public short PreferredContactMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreferredContactMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreferredContactMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreferredContactMethod
        {
            get
            {
                if (this.PreferredContactMethodValueSpecified)
                {
                    return this.PreferredContactMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreferredContactMethodValue = value.GetValueOrDefault();
                this.PreferredContactMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Restrict", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short RestrictValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Restrict property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Restrict
        {
            get
            {
                if (this.RestrictValueSpecified)
                {
                    return this.RestrictValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictValue = value.GetValueOrDefault();
                this.RestrictValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Sex", Order=66, Form=XmlSchemaForm.Unqualified)]
        public string Sex { get; set; }
        
        [XmlElementAttribute("ShortName", Order=67, Form=XmlSchemaForm.Unqualified)]
        public string ShortName { get; set; }
        
        [XmlElementAttribute("Ssn", Order=68, Form=XmlSchemaForm.Unqualified)]
        public string Ssn { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsnType", Order=69, Form=XmlSchemaForm.Unqualified)]
        public short SsnTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsnType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsnTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SsnType
        {
            get
            {
                if (this.SsnTypeValueSpecified)
                {
                    return this.SsnTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsnTypeValue = value.GetValueOrDefault();
                this.SsnTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubstantialOwner", Order=70, Form=XmlSchemaForm.Unqualified)]
        public short SubstantialOwnerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubstantialOwner property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubstantialOwnerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SubstantialOwner
        {
            get
            {
                if (this.SubstantialOwnerValueSpecified)
                {
                    return this.SubstantialOwnerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubstantialOwnerValue = value.GetValueOrDefault();
                this.SubstantialOwnerValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Suffix", Order=71, Form=XmlSchemaForm.Unqualified)]
        public string Suffix { get; set; }
        
        [XmlElementAttribute("Title", Order=72, Form=XmlSchemaForm.Unqualified)]
        public string Title { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsPersonFlag", Order=73, Form=XmlSchemaForm.Unqualified)]
        public short UsPersonFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsPersonFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsPersonFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UsPersonFlag
        {
            get
            {
                if (this.UsPersonFlagValueSpecified)
                {
                    return this.UsPersonFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsPersonFlagValue = value.GetValueOrDefault();
                this.UsPersonFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=74, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=75, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=76, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=77, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=79, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=80, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=81, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("W8ExpirationDate", Order=82, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime W8ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the W8ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool W8ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> W8ExpirationDate
        {
            get
            {
                if (this.W8ExpirationDateValueSpecified)
                {
                    return this.W8ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.W8ExpirationDateValue = value.GetValueOrDefault();
                this.W8ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("WorkPhone", Order=83, Form=XmlSchemaForm.Unqualified)]
        public string WorkPhone { get; set; }
        
        [XmlElementAttribute("WorkPhoneExtension", Order=84, Form=XmlSchemaForm.Unqualified)]
        public string WorkPhoneExtension { get; set; }
        
        [XmlElementAttribute("Version_1", Order=85, Form=XmlSchemaForm.Unqualified)]
        public MemberService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=86)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
