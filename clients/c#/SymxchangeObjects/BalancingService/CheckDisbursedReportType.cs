//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\BalancingService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\BalancingService\generated-output -n BalancingService
namespace BalancingService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CheckDisbursedReportType", Namespace="http://www.symxchange.generated.symitar.com/noncrud/balancing/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class CheckDisbursedReportType
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FirstPartyCount", Order=0, Form=XmlSchemaForm.Unqualified)]
        public int FirstPartyCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstPartyCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FirstPartyCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> FirstPartyCount
        {
            get
            {
                if (this.FirstPartyCountValueSpecified)
                {
                    return this.FirstPartyCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstPartyCountValue = value.GetValueOrDefault();
                this.FirstPartyCountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FirstPartyAmount", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal FirstPartyAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstPartyAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FirstPartyAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FirstPartyAmount
        {
            get
            {
                if (this.FirstPartyAmountValueSpecified)
                {
                    return this.FirstPartyAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstPartyAmountValue = value.GetValueOrDefault();
                this.FirstPartyAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<BalancePrinterType> _balancePrinter;
        
        [XmlElementAttribute("BalancePrinter", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<BalancePrinterType> BalancePrinter
        {
            get
            {
                return _balancePrinter;
            }
            set
            {
                _balancePrinter = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BalancePrinter collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BalancePrinterSpecified
        {
            get
            {
                return ((this.BalancePrinter != null) 
                            && (this.BalancePrinter.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CheckDisbursedReportType" /> class.</para>
        /// </summary>
        public CheckDisbursedReportType()
        {
            this._balancePrinter = new Collection<BalancePrinterType>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ThirdPartyCount", Order=3, Form=XmlSchemaForm.Unqualified)]
        public int ThirdPartyCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThirdPartyCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ThirdPartyCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ThirdPartyCount
        {
            get
            {
                if (this.ThirdPartyCountValueSpecified)
                {
                    return this.ThirdPartyCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThirdPartyCountValue = value.GetValueOrDefault();
                this.ThirdPartyCountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ThirdPartyAmount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal ThirdPartyAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThirdPartyAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ThirdPartyAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ThirdPartyAmount
        {
            get
            {
                if (this.ThirdPartyAmountValueSpecified)
                {
                    return this.ThirdPartyAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThirdPartyAmountValue = value.GetValueOrDefault();
                this.ThirdPartyAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=5, Form=XmlSchemaForm.Unqualified)]
        public BalancingService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=6)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
