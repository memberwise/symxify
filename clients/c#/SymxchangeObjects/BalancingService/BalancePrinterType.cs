//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\BalancingService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\BalancingService\generated-output -n BalancingService
namespace BalancingService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("BalancePrinterType", Namespace="http://www.symxchange.generated.symitar.com/noncrud/balancing/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class BalancePrinterType
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrinterId", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short PrinterIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrinterId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrinterIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrinterId
        {
            get
            {
                if (this.PrinterIdValueSpecified)
                {
                    return this.PrinterIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrinterIdValue = value.GetValueOrDefault();
                this.PrinterIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranGlCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short TranGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TranGlCode
        {
            get
            {
                if (this.TranGlCodeValueSpecified)
                {
                    return this.TranGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranGlCodeValue = value.GetValueOrDefault();
                this.TranGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckAcctNumber", Order=2, Form=XmlSchemaForm.Unqualified)]
        public string CheckAcctNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BeginCount", Order=3, Form=XmlSchemaForm.Unqualified)]
        public int BeginCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeginCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BeginCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> BeginCount
        {
            get
            {
                if (this.BeginCountValueSpecified)
                {
                    return this.BeginCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BeginCountValue = value.GetValueOrDefault();
                this.BeginCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DispenseCount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short DispenseCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DispenseCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DispenseCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DispenseCount
        {
            get
            {
                if (this.DispenseCountValueSpecified)
                {
                    return this.DispenseCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DispenseCountValue = value.GetValueOrDefault();
                this.DispenseCountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90000000000000.00.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "0.01", "90000000000000.00")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DispenseAmount", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal DispenseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DispenseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DispenseAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90000000000000.00.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DispenseAmount
        {
            get
            {
                if (this.DispenseAmountValueSpecified)
                {
                    return this.DispenseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DispenseAmountValue = value.GetValueOrDefault();
                this.DispenseAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReverseCount", Order=6, Form=XmlSchemaForm.Unqualified)]
        public int ReverseCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReverseCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReverseCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ReverseCount
        {
            get
            {
                if (this.ReverseCountValueSpecified)
                {
                    return this.ReverseCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReverseCountValue = value.GetValueOrDefault();
                this.ReverseCountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90000000000000.00.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "0.01", "90000000000000.00")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReverseAmount", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal ReverseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReverseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReverseAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90000000000000.00.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ReverseAmount
        {
            get
            {
                if (this.ReverseAmountValueSpecified)
                {
                    return this.ReverseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReverseAmountValue = value.GetValueOrDefault();
                this.ReverseAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustCount", Order=8, Form=XmlSchemaForm.Unqualified)]
        public int AdjustCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> AdjustCount
        {
            get
            {
                if (this.AdjustCountValueSpecified)
                {
                    return this.AdjustCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustCountValue = value.GetValueOrDefault();
                this.AdjustCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReplenishCount", Order=9, Form=XmlSchemaForm.Unqualified)]
        public int ReplenishCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReplenishCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReplenishCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ReplenishCount
        {
            get
            {
                if (this.ReplenishCountValueSpecified)
                {
                    return this.ReplenishCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReplenishCountValue = value.GetValueOrDefault();
                this.ReplenishCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentCount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public int CurrentCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> CurrentCount
        {
            get
            {
                if (this.CurrentCountValueSpecified)
                {
                    return this.CurrentCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentCountValue = value.GetValueOrDefault();
                this.CurrentCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RevTotalCount", Order=11, Form=XmlSchemaForm.Unqualified)]
        public int RevTotalCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RevTotalCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RevTotalCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> RevTotalCount
        {
            get
            {
                if (this.RevTotalCountValueSpecified)
                {
                    return this.RevTotalCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RevTotalCountValue = value.GetValueOrDefault();
                this.RevTotalCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WarnCount", Order=12, Form=XmlSchemaForm.Unqualified)]
        public int WarnCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WarnCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WarnCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> WarnCount
        {
            get
            {
                if (this.WarnCountValueSpecified)
                {
                    return this.WarnCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WarnCountValue = value.GetValueOrDefault();
                this.WarnCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=13, Form=XmlSchemaForm.Unqualified)]
        public BalancingService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=14)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BalancePrinterType" /> class.</para>
        /// </summary>
        public BalancePrinterType()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
