//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\BalancingService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\BalancingService\generated-output -n BalancingService
namespace BalancingService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("DepositReportType", Namespace="http://www.symxchange.generated.symitar.com/noncrud/balancing/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class DepositReportType
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Count", Order=0, Form=XmlSchemaForm.Unqualified)]
        public int CountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Count property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Count
        {
            get
            {
                if (this.CountValueSpecified)
                {
                    return this.CountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CountValue = value.GetValueOrDefault();
                this.CountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Amount", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal AmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Amount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Amount
        {
            get
            {
                if (this.AmountValueSpecified)
                {
                    return this.AmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmountValue = value.GetValueOrDefault();
                this.AmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCode", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short GlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlCode
        {
            get
            {
                if (this.GlCodeValueSpecified)
                {
                    return this.GlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCodeValue = value.GetValueOrDefault();
                this.GlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlTranCount", Order=3, Form=XmlSchemaForm.Unqualified)]
        public int GlTranCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlTranCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlTranCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlTranCount
        {
            get
            {
                if (this.GlTranCountValueSpecified)
                {
                    return this.GlTranCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlTranCountValue = value.GetValueOrDefault();
                this.GlTranCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=4, Form=XmlSchemaForm.Unqualified)]
        public BalancingService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=5)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DepositReportType" /> class.</para>
        /// </summary>
        public DepositReportType()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
