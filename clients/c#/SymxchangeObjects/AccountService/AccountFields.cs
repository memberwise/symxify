//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("AccountFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("AccountFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class AccountFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivityDate", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool ActivityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ActivityDate
        {
            get
            {
                if (this.ActivityDateValueSpecified)
                {
                    return this.ActivityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivityDateValue = value.GetValueOrDefault();
                this.ActivityDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _alternateAddress;
        
        [XmlElementAttribute("AlternateAddress", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> AlternateAddress
        {
            get
            {
                return _alternateAddress;
            }
            set
            {
                _alternateAddress = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AlternateAddress collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AlternateAddressSpecified
        {
            get
            {
                return ((this.AlternateAddress != null) 
                            && (this.AlternateAddress.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AccountFields" /> class.</para>
        /// </summary>
        public AccountFields()
        {
            this._alternateAddress = new Collection<short>();
            this._alternatePhone = new Collection<short>();
            this._countLimit = new Collection<short>();
            this._limit = new Collection<short>();
            this._limitAmount = new Collection<short>();
            this._limitCount = new Collection<short>();
            this._limitDescription = new Collection<short>();
            this._nsfMonthlyCount = new Collection<short>();
            this._payeeLine = new Collection<short>();
            this._payeePhone = new Collection<short>();
            this._paymentHistory = new Collection<short>();
            this._perItemLimit = new Collection<short>();
            this._warningCode = new Collection<short>();
            this._warningExpiration = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateNameLocator", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AlternateNameLocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateNameLocator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateNameLocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AlternateNameLocator
        {
            get
            {
                if (this.AlternateNameLocatorValueSpecified)
                {
                    return this.AlternateNameLocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateNameLocatorValue = value.GetValueOrDefault();
                this.AlternateNameLocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateNameType", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AlternateNameTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateNameType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateNameTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AlternateNameType
        {
            get
            {
                if (this.AlternateNameTypeValueSpecified)
                {
                    return this.AlternateNameTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateNameTypeValue = value.GetValueOrDefault();
                this.AlternateNameTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _alternatePhone;
        
        [XmlElementAttribute("AlternatePhone", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> AlternatePhone
        {
            get
            {
                return _alternatePhone;
            }
            set
            {
                _alternatePhone = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AlternatePhone collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AlternatePhoneSpecified
        {
            get
            {
                return ((this.AlternatePhone != null) 
                            && (this.AlternatePhone.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondIntLastYear", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool BondIntLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondIntLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondIntLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BondIntLastYear
        {
            get
            {
                if (this.BondIntLastYearValueSpecified)
                {
                    return this.BondIntLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondIntLastYearValue = value.GetValueOrDefault();
                this.BondIntLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondIntYtd", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool BondIntYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondIntYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondIntYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BondIntYtd
        {
            get
            {
                if (this.BondIntYtdValueSpecified)
                {
                    return this.BondIntYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondIntYtdValue = value.GetValueOrDefault();
                this.BondIntYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmountCap", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool CappedFeesAmountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CappedFeesAmountCap
        {
            get
            {
                if (this.CappedFeesAmountCapValueSpecified)
                {
                    return this.CappedFeesAmountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmountCapValue = value.GetValueOrDefault();
                this.CappedFeesAmountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmtPeriod", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool CappedFeesAmtPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmtPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmtPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CappedFeesAmtPeriod
        {
            get
            {
                if (this.CappedFeesAmtPeriodValueSpecified)
                {
                    return this.CappedFeesAmtPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmtPeriodValue = value.GetValueOrDefault();
                this.CappedFeesAmtPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCntPeriod", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool CappedFeesCntPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCntPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCntPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CappedFeesCntPeriod
        {
            get
            {
                if (this.CappedFeesCntPeriodValueSpecified)
                {
                    return this.CappedFeesCntPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCntPeriodValue = value.GetValueOrDefault();
                this.CappedFeesCntPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCountCap", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool CappedFeesCountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CappedFeesCountCap
        {
            get
            {
                if (this.CappedFeesCountCapValueSpecified)
                {
                    return this.CappedFeesCountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCountCapValue = value.GetValueOrDefault();
                this.CappedFeesCountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CdTotalAmount", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool CdTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CdTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CdTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CdTotalAmount
        {
            get
            {
                if (this.CdTotalAmountValueSpecified)
                {
                    return this.CdTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CdTotalAmountValue = value.GetValueOrDefault();
                this.CdTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommercialCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool CommercialCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommercialCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommercialCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CommercialCode
        {
            get
            {
                if (this.CommercialCodeValueSpecified)
                {
                    return this.CommercialCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommercialCodeValue = value.GetValueOrDefault();
                this.CommercialCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CorrespondDate", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool CorrespondDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CorrespondDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CorrespondDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CorrespondDate
        {
            get
            {
                if (this.CorrespondDateValueSpecified)
                {
                    return this.CorrespondDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CorrespondDateValue = value.GetValueOrDefault();
                this.CorrespondDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _countLimit;
        
        [XmlElementAttribute("CountLimit", Order=16, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> CountLimit
        {
            get
            {
                return _countLimit;
            }
            set
            {
                _countLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CountLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CountLimitSpecified
        {
            get
            {
                return ((this.CountLimit != null) 
                            && (this.CountLimit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CrTotalAmount", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool CrTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CrTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CrTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CrTotalAmount
        {
            get
            {
                if (this.CrTotalAmountValueSpecified)
                {
                    return this.CrTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CrTotalAmountValue = value.GetValueOrDefault();
                this.CrTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreatedAtBranch", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool CreatedAtBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedAtBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreatedAtBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreatedAtBranch
        {
            get
            {
                if (this.CreatedAtBranchValueSpecified)
                {
                    return this.CreatedAtBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreatedAtBranchValue = value.GetValueOrDefault();
                this.CreatedAtBranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreatedByUser", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool CreatedByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreatedByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreatedByUser
        {
            get
            {
                if (this.CreatedByUserValueSpecified)
                {
                    return this.CreatedByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreatedByUserValue = value.GetValueOrDefault();
                this.CreatedByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentRelationshipCode", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool CurrentRelationshipCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentRelationshipCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentRelationshipCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CurrentRelationshipCode
        {
            get
            {
                if (this.CurrentRelationshipCodeValueSpecified)
                {
                    return this.CurrentRelationshipCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentRelationshipCodeValue = value.GetValueOrDefault();
                this.CurrentRelationshipCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivLastYearNonTax", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool DivLastYearNonTaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivLastYearNonTax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivLastYearNonTaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DivLastYearNonTax
        {
            get
            {
                if (this.DivLastYearNonTaxValueSpecified)
                {
                    return this.DivLastYearNonTaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivLastYearNonTaxValue = value.GetValueOrDefault();
                this.DivLastYearNonTaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivLastYearTax", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool DivLastYearTaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivLastYearTax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivLastYearTaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DivLastYearTax
        {
            get
            {
                if (this.DivLastYearTaxValueSpecified)
                {
                    return this.DivLastYearTaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivLastYearTaxValue = value.GetValueOrDefault();
                this.DivLastYearTaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivYtdNontax", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool DivYtdNontaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivYtdNontax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivYtdNontaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DivYtdNontax
        {
            get
            {
                if (this.DivYtdNontaxValueSpecified)
                {
                    return this.DivYtdNontaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivYtdNontaxValue = value.GetValueOrDefault();
                this.DivYtdNontaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivYtdTax", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool DivYtdTaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivYtdTax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivYtdTaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DivYtdTax
        {
            get
            {
                if (this.DivYtdTaxValueSpecified)
                {
                    return this.DivYtdTaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivYtdTaxValue = value.GetValueOrDefault();
                this.DivYtdTaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EStmtEnable", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool EStmtEnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EStmtEnable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EStmtEnableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EStmtEnable
        {
            get
            {
                if (this.EStmtEnableValueSpecified)
                {
                    return this.EStmtEnableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EStmtEnableValue = value.GetValueOrDefault();
                this.EStmtEnableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EStmtNotify", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool EStmtNotifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EStmtNotify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EStmtNotifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EStmtNotify
        {
            get
            {
                if (this.EStmtNotifyValueSpecified)
                {
                    return this.EStmtNotifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EStmtNotifyValue = value.GetValueOrDefault();
                this.EStmtNotifyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EnableFloat", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool EnableFloatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnableFloat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EnableFloatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EnableFloat
        {
            get
            {
                if (this.EnableFloatValueSpecified)
                {
                    return this.EnableFloatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnableFloatValue = value.GetValueOrDefault();
                this.EnableFloatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmLastPurgeDate", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool FmLastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmLastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmLastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FmLastPurgeDate
        {
            get
            {
                if (this.FmLastPurgeDateValueSpecified)
                {
                    return this.FmLastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmLastPurgeDateValue = value.GetValueOrDefault();
                this.FmLastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrCdTotalAmount", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool FrCdTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrCdTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrCdTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FrCdTotalAmount
        {
            get
            {
                if (this.FrCdTotalAmountValueSpecified)
                {
                    return this.FrCdTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrCdTotalAmountValue = value.GetValueOrDefault();
                this.FrCdTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrCdUnits", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool FrCdUnitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrCdUnits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrCdUnitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FrCdUnits
        {
            get
            {
                if (this.FrCdUnitsValueSpecified)
                {
                    return this.FrCdUnitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrCdUnitsValue = value.GetValueOrDefault();
                this.FrCdUnitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrCrTotalAmount", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool FrCrTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrCrTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrCrTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FrCrTotalAmount
        {
            get
            {
                if (this.FrCrTotalAmountValueSpecified)
                {
                    return this.FrCrTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrCrTotalAmountValue = value.GetValueOrDefault();
                this.FrCrTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrCrUnits", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool FrCrUnitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrCrUnits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrCrUnitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FrCrUnits
        {
            get
            {
                if (this.FrCrUnitsValueSpecified)
                {
                    return this.FrCrUnitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrCrUnitsValue = value.GetValueOrDefault();
                this.FrCrUnitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FrozenMode", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool FrozenModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrozenMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrozenModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FrozenMode
        {
            get
            {
                if (this.FrozenModeValueSpecified)
                {
                    return this.FrozenModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrozenModeValue = value.GetValueOrDefault();
                this.FrozenModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HeadOfHousehold", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool HeadOfHouseholdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeadOfHousehold property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HeadOfHouseholdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HeadOfHousehold
        {
            get
            {
                if (this.HeadOfHouseholdValueSpecified)
                {
                    return this.HeadOfHouseholdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeadOfHouseholdValue = value.GetValueOrDefault();
                this.HeadOfHouseholdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HouseholdAccount", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool HouseholdAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HouseholdAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HouseholdAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HouseholdAccount
        {
            get
            {
                if (this.HouseholdAccountValueSpecified)
                {
                    return this.HouseholdAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HouseholdAccountValue = value.GetValueOrDefault();
                this.HouseholdAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HouseholdStatement", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool HouseholdStatementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HouseholdStatement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HouseholdStatementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HouseholdStatement
        {
            get
            {
                if (this.HouseholdStatementValueSpecified)
                {
                    return this.HouseholdStatementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HouseholdStatementValue = value.GetValueOrDefault();
                this.HouseholdStatementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestLastYear", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool InterestLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestLastYear
        {
            get
            {
                if (this.InterestLastYearValueSpecified)
                {
                    return this.InterestLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestLastYearValue = value.GetValueOrDefault();
                this.InterestLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestYtd", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool InterestYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestYtd
        {
            get
            {
                if (this.InterestYtdValueSpecified)
                {
                    return this.InterestYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestYtdValue = value.GetValueOrDefault();
                this.InterestYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvalidAttemptCount", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool InvalidAttemptCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvalidAttemptCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvalidAttemptCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvalidAttemptCount
        {
            get
            {
                if (this.InvalidAttemptCountValueSpecified)
                {
                    return this.InvalidAttemptCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvalidAttemptCountValue = value.GetValueOrDefault();
                this.InvalidAttemptCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvalidAttemptDate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool InvalidAttemptDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvalidAttemptDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvalidAttemptDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvalidAttemptDate
        {
            get
            {
                if (this.InvalidAttemptDateValueSpecified)
                {
                    return this.InvalidAttemptDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvalidAttemptDateValue = value.GetValueOrDefault();
                this.InvalidAttemptDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvalidAttemptTime", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool InvalidAttemptTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvalidAttemptTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvalidAttemptTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvalidAttemptTime
        {
            get
            {
                if (this.InvalidAttemptTimeValueSpecified)
                {
                    return this.InvalidAttemptTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvalidAttemptTimeValue = value.GetValueOrDefault();
                this.InvalidAttemptTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KrHoldBaseAmount", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool KrHoldBaseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KrHoldBaseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KrHoldBaseAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> KrHoldBaseAmount
        {
            get
            {
                if (this.KrHoldBaseAmountValueSpecified)
                {
                    return this.KrHoldBaseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KrHoldBaseAmountValue = value.GetValueOrDefault();
                this.KrHoldBaseAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KrTotalAmount", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool KrTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KrTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KrTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> KrTotalAmount
        {
            get
            {
                if (this.KrTotalAmountValueSpecified)
                {
                    return this.KrTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KrTotalAmountValue = value.GetValueOrDefault();
                this.KrTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KrTotalDate", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool KrTotalDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KrTotalDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KrTotalDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> KrTotalDate
        {
            get
            {
                if (this.KrTotalDateValueSpecified)
                {
                    return this.KrTotalDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KrTotalDateValue = value.GetValueOrDefault();
                this.KrTotalDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limit;
        
        [XmlElementAttribute("Limit", Order=46, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _limit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Limit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitSpecified
        {
            get
            {
                return ((this.Limit != null) 
                            && (this.Limit.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitAmount;
        
        [XmlElementAttribute("LimitAmount", Order=47, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitAmount
        {
            get
            {
                return _limitAmount;
            }
            set
            {
                _limitAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitAmountSpecified
        {
            get
            {
                return ((this.LimitAmount != null) 
                            && (this.LimitAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitCount;
        
        [XmlElementAttribute("LimitCount", Order=48, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitCount
        {
            get
            {
                return _limitCount;
            }
            set
            {
                _limitCount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitCount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitCountSpecified
        {
            get
            {
                return ((this.LimitCount != null) 
                            && (this.LimitCount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitDescription;
        
        [XmlElementAttribute("LimitDescription", Order=49, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitDescription
        {
            get
            {
                return _limitDescription;
            }
            set
            {
                _limitDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitDescriptionSpecified
        {
            get
            {
                return ((this.LimitDescription != null) 
                            && (this.LimitDescription.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitUsageDate", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool LimitUsageDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitUsageDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitUsageDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LimitUsageDate
        {
            get
            {
                if (this.LimitUsageDateValueSpecified)
                {
                    return this.LimitUsageDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitUsageDateValue = value.GetValueOrDefault();
                this.LimitUsageDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberGroup", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool MemberGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MemberGroup
        {
            get
            {
                if (this.MemberGroupValueSpecified)
                {
                    return this.MemberGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberGroupValue = value.GetValueOrDefault();
                this.MemberGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberStatus", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool MemberStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MemberStatus
        {
            get
            {
                if (this.MemberStatusValueSpecified)
                {
                    return this.MemberStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberStatusValue = value.GetValueOrDefault();
                this.MemberStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonRegCcCheckHoldBaseAmt", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool NonRegCcCheckHoldBaseAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonRegCcCheckHoldBaseAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonRegCcCheckHoldBaseAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NonRegCcCheckHoldBaseAmt
        {
            get
            {
                if (this.NonRegCcCheckHoldBaseAmtValueSpecified)
                {
                    return this.NonRegCcCheckHoldBaseAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonRegCcCheckHoldBaseAmtValue = value.GetValueOrDefault();
                this.NonRegCcCheckHoldBaseAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonRegCcCheckTotalAmt", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool NonRegCcCheckTotalAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonRegCcCheckTotalAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonRegCcCheckTotalAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NonRegCcCheckTotalAmt
        {
            get
            {
                if (this.NonRegCcCheckTotalAmtValueSpecified)
                {
                    return this.NonRegCcCheckTotalAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonRegCcCheckTotalAmtValue = value.GetValueOrDefault();
                this.NonRegCcCheckTotalAmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _nsfMonthlyCount;
        
        [XmlElementAttribute("NsfMonthlyCount", Order=55, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> NsfMonthlyCount
        {
            get
            {
                return _nsfMonthlyCount;
            }
            set
            {
                _nsfMonthlyCount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NsfMonthlyCount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NsfMonthlyCountSpecified
        {
            get
            {
                return ((this.NsfMonthlyCount != null) 
                            && (this.NsfMonthlyCount.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfToday", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool NsfTodayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfToday property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfTodayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfToday
        {
            get
            {
                if (this.NsfTodayValueSpecified)
                {
                    return this.NsfTodayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfTodayValue = value.GetValueOrDefault();
                this.NsfTodayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Number", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool NumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Number
        {
            get
            {
                if (this.NumberValueSpecified)
                {
                    return this.NumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberValue = value.GetValueOrDefault();
                this.NumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenDate", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool OpenDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OpenDate
        {
            get
            {
                if (this.OpenDateValueSpecified)
                {
                    return this.OpenDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenDateValue = value.GetValueOrDefault();
                this.OpenDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _payeeLine;
        
        [XmlElementAttribute("PayeeLine", Order=59, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PayeeLine
        {
            get
            {
                return _payeeLine;
            }
            set
            {
                _payeeLine = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PayeeLine collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PayeeLineSpecified
        {
            get
            {
                return ((this.PayeeLine != null) 
                            && (this.PayeeLine.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PayeeNameLocator", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool PayeeNameLocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PayeeNameLocator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PayeeNameLocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PayeeNameLocator
        {
            get
            {
                if (this.PayeeNameLocatorValueSpecified)
                {
                    return this.PayeeNameLocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PayeeNameLocatorValue = value.GetValueOrDefault();
                this.PayeeNameLocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PayeeNameType", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool PayeeNameTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PayeeNameType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PayeeNameTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PayeeNameType
        {
            get
            {
                if (this.PayeeNameTypeValueSpecified)
                {
                    return this.PayeeNameTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PayeeNameTypeValue = value.GetValueOrDefault();
                this.PayeeNameTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _payeePhone;
        
        [XmlElementAttribute("PayeePhone", Order=62, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PayeePhone
        {
            get
            {
                return _payeePhone;
            }
            set
            {
                _payeePhone = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PayeePhone collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PayeePhoneSpecified
        {
            get
            {
                return ((this.PayeePhone != null) 
                            && (this.PayeePhone.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _paymentHistory;
        
        [XmlElementAttribute("PaymentHistory", Order=63, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PaymentHistory
        {
            get
            {
                return _paymentHistory;
            }
            set
            {
                _paymentHistory = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PaymentHistory collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PaymentHistorySpecified
        {
            get
            {
                return ((this.PaymentHistory != null) 
                            && (this.PaymentHistory.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _perItemLimit;
        
        [XmlElementAttribute("PerItemLimit", Order=64, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PerItemLimit
        {
            get
            {
                return _perItemLimit;
            }
            set
            {
                _perItemLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PerItemLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PerItemLimitSpecified
        {
            get
            {
                return ((this.PerItemLimit != null) 
                            && (this.PerItemLimit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrgdRecActivityDt", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool PrgdRecActivityDtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrgdRecActivityDt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrgdRecActivityDtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PrgdRecActivityDt
        {
            get
            {
                if (this.PrgdRecActivityDtValueSpecified)
                {
                    return this.PrgdRecActivityDtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrgdRecActivityDtValue = value.GetValueOrDefault();
                this.PrgdRecActivityDtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ProxyDate", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool ProxyDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProxyDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProxyDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ProxyDate
        {
            get
            {
                if (this.ProxyDateValueSpecified)
                {
                    return this.ProxyDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProxyDateValue = value.GetValueOrDefault();
                this.ProxyDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=67, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Reference", Order=68, Form=XmlSchemaForm.Unqualified)]
        public bool ReferenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Reference property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReferenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Reference
        {
            get
            {
                if (this.ReferenceValueSpecified)
                {
                    return this.ReferenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReferenceValue = value.GetValueOrDefault();
                this.ReferenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipCode", Order=69, Form=XmlSchemaForm.Unqualified)]
        public bool RelationshipCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RelationshipCode
        {
            get
            {
                if (this.RelationshipCodeValueSpecified)
                {
                    return this.RelationshipCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipCodeValue = value.GetValueOrDefault();
                this.RelationshipCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipOverride", Order=70, Form=XmlSchemaForm.Unqualified)]
        public bool RelationshipOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RelationshipOverride
        {
            get
            {
                if (this.RelationshipOverrideValueSpecified)
                {
                    return this.RelationshipOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipOverrideValue = value.GetValueOrDefault();
                this.RelationshipOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipOverrideEffDate", Order=71, Form=XmlSchemaForm.Unqualified)]
        public bool RelationshipOverrideEffDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipOverrideEffDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipOverrideEffDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RelationshipOverrideEffDate
        {
            get
            {
                if (this.RelationshipOverrideEffDateValueSpecified)
                {
                    return this.RelationshipOverrideEffDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipOverrideEffDateValue = value.GetValueOrDefault();
                this.RelationshipOverrideEffDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipOverrideExpDate", Order=72, Form=XmlSchemaForm.Unqualified)]
        public bool RelationshipOverrideExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipOverrideExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipOverrideExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RelationshipOverrideExpDate
        {
            get
            {
                if (this.RelationshipOverrideExpDateValueSpecified)
                {
                    return this.RelationshipOverrideExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipOverrideExpDateValue = value.GetValueOrDefault();
                this.RelationshipOverrideExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Restrict", Order=73, Form=XmlSchemaForm.Unqualified)]
        public bool RestrictValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Restrict property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Restrict
        {
            get
            {
                if (this.RestrictValueSpecified)
                {
                    return this.RestrictValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictValue = value.GetValueOrDefault();
                this.RestrictValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateReporting", Order=74, Form=XmlSchemaForm.Unqualified)]
        public bool StateReportingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateReporting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateReportingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StateReporting
        {
            get
            {
                if (this.StateReportingValueSpecified)
                {
                    return this.StateReportingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateReportingValue = value.GetValueOrDefault();
                this.StateReportingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementMailCode", Order=75, Form=XmlSchemaForm.Unqualified)]
        public bool StatementMailCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementMailCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementMailCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StatementMailCode
        {
            get
            {
                if (this.StatementMailCodeValueSpecified)
                {
                    return this.StatementMailCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementMailCodeValue = value.GetValueOrDefault();
                this.StatementMailCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=76, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=77, Form=XmlSchemaForm.Unqualified)]
        public bool UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=78, Form=XmlSchemaForm.Unqualified)]
        public bool UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserChar1", Order=79, Form=XmlSchemaForm.Unqualified)]
        public bool UserChar1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserChar1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserChar1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserChar1
        {
            get
            {
                if (this.UserChar1ValueSpecified)
                {
                    return this.UserChar1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserChar1Value = value.GetValueOrDefault();
                this.UserChar1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserChar2", Order=80, Form=XmlSchemaForm.Unqualified)]
        public bool UserChar2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserChar2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserChar2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserChar2
        {
            get
            {
                if (this.UserChar2ValueSpecified)
                {
                    return this.UserChar2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserChar2Value = value.GetValueOrDefault();
                this.UserChar2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserChar3", Order=81, Form=XmlSchemaForm.Unqualified)]
        public bool UserChar3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserChar3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserChar3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserChar3
        {
            get
            {
                if (this.UserChar3ValueSpecified)
                {
                    return this.UserChar3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserChar3Value = value.GetValueOrDefault();
                this.UserChar3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserChar4", Order=82, Form=XmlSchemaForm.Unqualified)]
        public bool UserChar4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserChar4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserChar4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserChar4
        {
            get
            {
                if (this.UserChar4ValueSpecified)
                {
                    return this.UserChar4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserChar4Value = value.GetValueOrDefault();
                this.UserChar4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=83, Form=XmlSchemaForm.Unqualified)]
        public bool UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=84, Form=XmlSchemaForm.Unqualified)]
        public bool UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=85, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _warningExpiration;
        
        [XmlElementAttribute("WarningExpiration", Order=86, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> WarningExpiration
        {
            get
            {
                return _warningExpiration;
            }
            set
            {
                _warningExpiration = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningExpiration collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningExpirationSpecified
        {
            get
            {
                return ((this.WarningExpiration != null) 
                            && (this.WarningExpiration.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdTotalAmount", Order=87, Form=XmlSchemaForm.Unqualified)]
        public bool WdTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdTotalAmount
        {
            get
            {
                if (this.WdTotalAmountValueSpecified)
                {
                    return this.WdTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdTotalAmountValue = value.GetValueOrDefault();
                this.WdTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WrTotalAmount", Order=88, Form=XmlSchemaForm.Unqualified)]
        public bool WrTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WrTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WrTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WrTotalAmount
        {
            get
            {
                if (this.WrTotalAmountValueSpecified)
                {
                    return this.WrTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WrTotalAmountValue = value.GetValueOrDefault();
                this.WrTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=89, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=90)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
