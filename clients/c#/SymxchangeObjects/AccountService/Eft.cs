//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Eft", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Eft", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class Eft
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmountCode", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short AmountCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmountCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmountCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmountCode
        {
            get
            {
                if (this.AmountCodeValueSpecified)
                {
                    return this.AmountCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmountCodeValue = value.GetValueOrDefault();
                this.AmountCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmountYtd", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal AmountYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmountYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmountYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AmountYtd
        {
            get
            {
                if (this.AmountYtdValueSpecified)
                {
                    return this.AmountYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmountYtdValue = value.GetValueOrDefault();
                this.AmountYtdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AudioId", Order=2, Form=XmlSchemaForm.Unqualified)]
        public string AudioId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Balance", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal BalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Balance
        {
            get
            {
                if (this.BalanceValueSpecified)
                {
                    return this.BalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceValue = value.GetValueOrDefault();
                this.BalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchAchOrigNum", Order=4, Form=XmlSchemaForm.Unqualified)]
        public int BatchAchOrigNumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchAchOrigNum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchAchOrigNumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> BatchAchOrigNum
        {
            get
            {
                if (this.BatchAchOrigNumValueSpecified)
                {
                    return this.BatchAchOrigNumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchAchOrigNumValue = value.GetValueOrDefault();
                this.BatchAchOrigNumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CountYtd", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short CountYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CountYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CountYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CountYtd
        {
            get
            {
                if (this.CountYtdValueSpecified)
                {
                    return this.CountYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CountYtdValue = value.GetValueOrDefault();
                this.CountYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditLimit", Order=6, Form=XmlSchemaForm.Unqualified)]
        public decimal CreditLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CreditLimit
        {
            get
            {
                if (this.CreditLimitValueSpecified)
                {
                    return this.CreditLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditLimitValue = value.GetValueOrDefault();
                this.CreditLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Day1", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short Day1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Day1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Day1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Day1
        {
            get
            {
                if (this.Day1ValueSpecified)
                {
                    return this.Day1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Day1Value = value.GetValueOrDefault();
                this.Day1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Day2", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short Day2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Day2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Day2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Day2
        {
            get
            {
                if (this.Day2ValueSpecified)
                {
                    return this.Day2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Day2Value = value.GetValueOrDefault();
                this.Day2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeferDate", Order=9, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DeferDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeferDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeferDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DeferDate
        {
            get
            {
                if (this.DeferDateValueSpecified)
                {
                    return this.DeferDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeferDateValue = value.GetValueOrDefault();
                this.DeferDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionRatio", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short DistributionRatioValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionRatio property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionRatioValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DistributionRatio
        {
            get
            {
                if (this.DistributionRatioValueSpecified)
                {
                    return this.DistributionRatioValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionRatioValue = value.GetValueOrDefault();
                this.DistributionRatioValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqCount", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short DqCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqCount
        {
            get
            {
                if (this.DqCountValueSpecified)
                {
                    return this.DqCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqCountValue = value.GetValueOrDefault();
                this.DqCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=12, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("EftAddendaInfoList", Order=13, Form=XmlSchemaForm.Unqualified)]
        public EftAddendaInfoList EftAddendaInfoList { get; set; }
        
        [XmlElementAttribute("EftNameList", Order=14, Form=XmlSchemaForm.Unqualified)]
        public EftNameList EftNameList { get; set; }
        
        [XmlElementAttribute("EftTransferList", Order=15, Form=XmlSchemaForm.Unqualified)]
        public EftTransferList EftTransferList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=16, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FederalWithholding", Order=17, Form=XmlSchemaForm.Unqualified)]
        public decimal FederalWithholdingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FederalWithholding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FederalWithholdingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FederalWithholding
        {
            get
            {
                if (this.FederalWithholdingValueSpecified)
                {
                    return this.FederalWithholdingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FederalWithholdingValue = value.GetValueOrDefault();
                this.FederalWithholdingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Frequency", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short FrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Frequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Frequency
        {
            get
            {
                if (this.FrequencyValueSpecified)
                {
                    return this.FrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrequencyValue = value.GetValueOrDefault();
                this.FrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCode", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short GlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlCode
        {
            get
            {
                if (this.GlCodeValueSpecified)
                {
                    return this.GlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCodeValue = value.GetValueOrDefault();
                this.GlCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("GroupNumber", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string GroupNumber { get; set; }
        
        [XmlElementAttribute("Id", Order=21, Form=XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdType", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short IdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdType
        {
            get
            {
                if (this.IdTypeValueSpecified)
                {
                    return this.IdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdTypeValue = value.GetValueOrDefault();
                this.IdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastTranAmount", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal LastTranAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastTranAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastTranAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LastTranAmount
        {
            get
            {
                if (this.LastTranAmountValueSpecified)
                {
                    return this.LastTranAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastTranAmountValue = value.GetValueOrDefault();
                this.LastTranAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastTranDate", Order=24, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastTranDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastTranDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastTranDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastTranDate
        {
            get
            {
                if (this.LastTranDateValueSpecified)
                {
                    return this.LastTranDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastTranDateValue = value.GetValueOrDefault();
                this.LastTranDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=25, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchCode1", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short MatchCode1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchCode1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchCode1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MatchCode1
        {
            get
            {
                if (this.MatchCode1ValueSpecified)
                {
                    return this.MatchCode1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchCode1Value = value.GetValueOrDefault();
                this.MatchCode1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchCode2", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short MatchCode2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchCode2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchCode2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MatchCode2
        {
            get
            {
                if (this.MatchCode2ValueSpecified)
                {
                    return this.MatchCode2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchCode2Value = value.GetValueOrDefault();
                this.MatchCode2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchCode3", Order=28, Form=XmlSchemaForm.Unqualified)]
        public short MatchCode3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchCode3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchCode3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MatchCode3
        {
            get
            {
                if (this.MatchCode3ValueSpecified)
                {
                    return this.MatchCode3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchCode3Value = value.GetValueOrDefault();
                this.MatchCode3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchCode4", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short MatchCode4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchCode4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchCode4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MatchCode4
        {
            get
            {
                if (this.MatchCode4ValueSpecified)
                {
                    return this.MatchCode4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchCode4Value = value.GetValueOrDefault();
                this.MatchCode4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchCode5", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short MatchCode5Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchCode5 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchCode5ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MatchCode5
        {
            get
            {
                if (this.MatchCode5ValueSpecified)
                {
                    return this.MatchCode5Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchCode5Value = value.GetValueOrDefault();
                this.MatchCode5ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchCode6", Order=31, Form=XmlSchemaForm.Unqualified)]
        public short MatchCode6Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchCode6 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchCode6ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MatchCode6
        {
            get
            {
                if (this.MatchCode6ValueSpecified)
                {
                    return this.MatchCode6Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchCode6Value = value.GetValueOrDefault();
                this.MatchCode6ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MatchId1", Order=32, Form=XmlSchemaForm.Unqualified)]
        public string MatchId1 { get; set; }
        
        [XmlElementAttribute("MatchId2", Order=33, Form=XmlSchemaForm.Unqualified)]
        public string MatchId2 { get; set; }
        
        [XmlElementAttribute("MatchId3", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string MatchId3 { get; set; }
        
        [XmlElementAttribute("MatchId4", Order=35, Form=XmlSchemaForm.Unqualified)]
        public string MatchId4 { get; set; }
        
        [XmlElementAttribute("MatchId5", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string MatchId5 { get; set; }
        
        [XmlElementAttribute("MatchId6", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string MatchId6 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextDate", Order=38, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime NextDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NextDate
        {
            get
            {
                if (this.NextDateValueSpecified)
                {
                    return this.NextDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextDateValue = value.GetValueOrDefault();
                this.NextDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Payee", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string Payee { get; set; }
        
        [XmlElementAttribute("PayeeCity", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string PayeeCity { get; set; }
        
        [XmlElementAttribute("PayeeExtraAddress", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string PayeeExtraAddress { get; set; }
        
        [XmlElementAttribute("PayeeName", Order=42, Form=XmlSchemaForm.Unqualified)]
        public string PayeeName { get; set; }
        
        [XmlElementAttribute("PayeeState", Order=43, Form=XmlSchemaForm.Unqualified)]
        public string PayeeState { get; set; }
        
        [XmlElementAttribute("PayeeStreet", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string PayeeStreet { get; set; }
        
        [XmlElementAttribute("PayeeZipCode", Order=45, Form=XmlSchemaForm.Unqualified)]
        public string PayeeZipCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostAmount", Order=46, Form=XmlSchemaForm.Unqualified)]
        public decimal PostAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PostAmount
        {
            get
            {
                if (this.PostAmountValueSpecified)
                {
                    return this.PostAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostAmountValue = value.GetValueOrDefault();
                this.PostAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostFreq", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short PostFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PostFreq
        {
            get
            {
                if (this.PostFreqValueSpecified)
                {
                    return this.PostFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostFreqValue = value.GetValueOrDefault();
                this.PostFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreNoteSentDate", Order=48, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PreNoteSentDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreNoteSentDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreNoteSentDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PreNoteSentDate
        {
            get
            {
                if (this.PreNoteSentDateValueSpecified)
                {
                    return this.PreNoteSentDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreNoteSentDateValue = value.GetValueOrDefault();
                this.PreNoteSentDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=49, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=50, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [XmlElementAttribute("Reference2", Order=51, Form=XmlSchemaForm.Unqualified)]
        public string Reference2 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDCode", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short RegDCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDCode
        {
            get
            {
                if (this.RegDCodeValueSpecified)
                {
                    return this.RegDCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDCodeValue = value.GetValueOrDefault();
                this.RegDCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SpecificAmount", Order=53, Form=XmlSchemaForm.Unqualified)]
        public decimal SpecificAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpecificAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SpecificAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SpecificAmount
        {
            get
            {
                if (this.SpecificAmountValueSpecified)
                {
                    return this.SpecificAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpecificAmountValue = value.GetValueOrDefault();
                this.SpecificAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StandardAmount", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal StandardAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StandardAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StandardAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StandardAmount
        {
            get
            {
                if (this.StandardAmountValueSpecified)
                {
                    return this.StandardAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StandardAmountValue = value.GetValueOrDefault();
                this.StandardAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholding", Order=55, Form=XmlSchemaForm.Unqualified)]
        public decimal StateWithholdingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StateWithholding
        {
            get
            {
                if (this.StateWithholdingValueSpecified)
                {
                    return this.StateWithholdingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingValue = value.GetValueOrDefault();
                this.StateWithholdingValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Status", Order=56, Form=XmlSchemaForm.Unqualified)]
        public string Status { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=58, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=59)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Eft" /> class.</para>
        /// </summary>
        public Eft()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
