//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Share", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Share", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/update")]
    [XmlIncludeAttribute(typeof(ShareFields_2))]
    public partial class Share_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivityDate", Order=0, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ActivityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActivityDate
        {
            get
            {
                if (this.ActivityDateValueSpecified)
                {
                    return this.ActivityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivityDateValue = value.GetValueOrDefault();
                this.ActivityDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareAlternateAddress_2> _alternateAddress;
        
        [XmlElementAttribute("AlternateAddress", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareAlternateAddress_2> AlternateAddress
        {
            get
            {
                return _alternateAddress;
            }
            set
            {
                _alternateAddress = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AlternateAddress collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AlternateAddressSpecified
        {
            get
            {
                return ((this.AlternateAddress != null) 
                            && (this.AlternateAddress.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Share_2" /> class.</para>
        /// </summary>
        public Share_2()
        {
            this._alternateAddress = new Collection<ShareAlternateAddress_2>();
            this._alternatePhone = new Collection<ShareAlternatePhone_2>();
            this._authFeeOption = new Collection<ShareAuthFeeOption_2>();
            this._feeCount = new Collection<ShareFeeCount_2>();
            this._insuranceBalanceAge = new Collection<ShareInsuranceBalanceAge_2>();
            this._odtAuthFeeSrcCodeList = new Collection<ShareOdtAuthFeeSrcCodeList_2>();
            this._payeeLine = new Collection<SharePayeeLine_2>();
            this._payeePhone = new Collection<SharePayeePhone_2>();
            this._preMthDivAccrued = new Collection<SharePreMthDivAccrued_2>();
            this._preMthDivEarned = new Collection<SharePreMthDivEarned_2>();
            this._preMthDivPaid = new Collection<SharePreMthDivPaid_2>();
            this._service = new Collection<ShareService_2>();
            this._warningCode = new Collection<ShareWarningCode_2>();
            this._warningExpiration = new Collection<ShareWarningExpiration_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateNameLocator", Order=2, Form=XmlSchemaForm.Unqualified)]
        public int AlternateNameLocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateNameLocator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateNameLocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> AlternateNameLocator
        {
            get
            {
                if (this.AlternateNameLocatorValueSpecified)
                {
                    return this.AlternateNameLocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateNameLocatorValue = value.GetValueOrDefault();
                this.AlternateNameLocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateNameType", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short AlternateNameTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateNameType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateNameTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AlternateNameType
        {
            get
            {
                if (this.AlternateNameTypeValueSpecified)
                {
                    return this.AlternateNameTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateNameTypeValue = value.GetValueOrDefault();
                this.AlternateNameTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareAlternatePhone_2> _alternatePhone;
        
        [XmlElementAttribute("AlternatePhone", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareAlternatePhone_2> AlternatePhone
        {
            get
            {
                return _alternatePhone;
            }
            set
            {
                _alternatePhone = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AlternatePhone collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AlternatePhoneSpecified
        {
            get
            {
                return ((this.AlternatePhone != null) 
                            && (this.AlternatePhone.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationSchd", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationSchd
        {
            get
            {
                if (this.AmortizationSchdValueSpecified)
                {
                    return this.AmortizationSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationSchdValue = value.GetValueOrDefault();
                this.AmortizationSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationSchdType", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationSchdType
        {
            get
            {
                if (this.AmortizationSchdTypeValueSpecified)
                {
                    return this.AmortizationSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationSchdTypeValue = value.GetValueOrDefault();
                this.AmortizationSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AnalysisGroupPrimaryAcct", Order=7, Form=XmlSchemaForm.Unqualified)]
        public string AnalysisGroupPrimaryAcct { get; set; }
        
        [XmlElementAttribute("AnalysisGroupPrimaryId", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string AnalysisGroupPrimaryId { get; set; }
        
        [XmlElementAttribute("AnalysisPmtAcct", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string AnalysisPmtAcct { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AnalysisPmtIdType", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short AnalysisPmtIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AnalysisPmtIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AnalysisPmtIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AnalysisPmtIdType
        {
            get
            {
                if (this.AnalysisPmtIdTypeValueSpecified)
                {
                    return this.AnalysisPmtIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AnalysisPmtIdTypeValue = value.GetValueOrDefault();
                this.AnalysisPmtIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AnalysisPmtSlId", Order=11, Form=XmlSchemaForm.Unqualified)]
        public string AnalysisPmtSlId { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareAuthFeeOption_2> _authFeeOption;
        
        [XmlElementAttribute("AuthFeeOption", Order=12, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareAuthFeeOption_2> AuthFeeOption
        {
            get
            {
                return _authFeeOption;
            }
            set
            {
                _authFeeOption = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AuthFeeOption collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AuthFeeOptionSpecified
        {
            get
            {
                return ((this.AuthFeeOption != null) 
                            && (this.AuthFeeOption.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AvailableBalance", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal AvailableBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AvailableBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AvailableBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AvailableBalance
        {
            get
            {
                if (this.AvailableBalanceValueSpecified)
                {
                    return this.AvailableBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AvailableBalanceValue = value.GetValueOrDefault();
                this.AvailableBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Balance", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal BalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Balance
        {
            get
            {
                if (this.BalanceValueSpecified)
                {
                    return this.BalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceValue = value.GetValueOrDefault();
                this.BalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondIntLastYear", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal BondIntLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondIntLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondIntLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BondIntLastYear
        {
            get
            {
                if (this.BondIntLastYearValueSpecified)
                {
                    return this.BondIntLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondIntLastYearValue = value.GetValueOrDefault();
                this.BondIntLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondIntYtd", Order=16, Form=XmlSchemaForm.Unqualified)]
        public decimal BondIntYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondIntYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondIntYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BondIntYtd
        {
            get
            {
                if (this.BondIntYtdValueSpecified)
                {
                    return this.BondIntYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondIntYtdValue = value.GetValueOrDefault();
                this.BondIntYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BumpEffectiveDate", Order=18, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> BumpEffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BumpEffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BumpEffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BumpEffectiveDate
        {
            get
            {
                if (this.BumpEffectiveDateValueSpecified)
                {
                    return this.BumpEffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BumpEffectiveDateValue = value.GetValueOrDefault();
                this.BumpEffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BumpExpirationDate", Order=19, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> BumpExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BumpExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BumpExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BumpExpirationDate
        {
            get
            {
                if (this.BumpExpirationDateValueSpecified)
                {
                    return this.BumpExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BumpExpirationDateValue = value.GetValueOrDefault();
                this.BumpExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BumpRate", Order=20, Form=XmlSchemaForm.Unqualified)]
        public decimal BumpRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BumpRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BumpRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BumpRate
        {
            get
            {
                if (this.BumpRateValueSpecified)
                {
                    return this.BumpRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BumpRateValue = value.GetValueOrDefault();
                this.BumpRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CallItemSchd", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short CallItemSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CallItemSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CallItemSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CallItemSchd
        {
            get
            {
                if (this.CallItemSchdValueSpecified)
                {
                    return this.CallItemSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CallItemSchdValue = value.GetValueOrDefault();
                this.CallItemSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CallItemSchdType", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short CallItemSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CallItemSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CallItemSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CallItemSchdType
        {
            get
            {
                if (this.CallItemSchdTypeValueSpecified)
                {
                    return this.CallItemSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CallItemSchdTypeValue = value.GetValueOrDefault();
                this.CallItemSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmountCap", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal CappedFeesAmountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CappedFeesAmountCap
        {
            get
            {
                if (this.CappedFeesAmountCapValueSpecified)
                {
                    return this.CappedFeesAmountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmountCapValue = value.GetValueOrDefault();
                this.CappedFeesAmountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmtPeriod", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal CappedFeesAmtPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmtPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmtPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CappedFeesAmtPeriod
        {
            get
            {
                if (this.CappedFeesAmtPeriodValueSpecified)
                {
                    return this.CappedFeesAmtPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmtPeriodValue = value.GetValueOrDefault();
                this.CappedFeesAmtPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCntPeriod", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short CappedFeesCntPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCntPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCntPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CappedFeesCntPeriod
        {
            get
            {
                if (this.CappedFeesCntPeriodValueSpecified)
                {
                    return this.CappedFeesCntPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCntPeriodValue = value.GetValueOrDefault();
                this.CappedFeesCntPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCountCap", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short CappedFeesCountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CappedFeesCountCap
        {
            get
            {
                if (this.CappedFeesCountCapValueSpecified)
                {
                    return this.CappedFeesCountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCountCapValue = value.GetValueOrDefault();
                this.CappedFeesCountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CddivAccrLastYr", Order=27, Form=XmlSchemaForm.Unqualified)]
        public decimal CddivAccrLastYrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CddivAccrLastYr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CddivAccrLastYrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CddivAccrLastYr
        {
            get
            {
                if (this.CddivAccrLastYrValueSpecified)
                {
                    return this.CddivAccrLastYrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CddivAccrLastYrValue = value.GetValueOrDefault();
                this.CddivAccrLastYrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CddivAccrYtd", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal CddivAccrYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CddivAccrYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CddivAccrYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CddivAccrYtd
        {
            get
            {
                if (this.CddivAccrYtdValueSpecified)
                {
                    return this.CddivAccrYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CddivAccrYtdValue = value.GetValueOrDefault();
                this.CddivAccrYtdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CertificateNumber", Order=29, Form=XmlSchemaForm.Unqualified)]
        public string CertificateNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Chapter4WithheldLstYr", Order=30, Form=XmlSchemaForm.Unqualified)]
        public decimal Chapter4WithheldLstYrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Chapter4WithheldLstYr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Chapter4WithheldLstYrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Chapter4WithheldLstYr
        {
            get
            {
                if (this.Chapter4WithheldLstYrValueSpecified)
                {
                    return this.Chapter4WithheldLstYrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Chapter4WithheldLstYrValue = value.GetValueOrDefault();
                this.Chapter4WithheldLstYrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Chapter4WithheldYtd", Order=31, Form=XmlSchemaForm.Unqualified)]
        public decimal Chapter4WithheldYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Chapter4WithheldYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Chapter4WithheldYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Chapter4WithheldYtd
        {
            get
            {
                if (this.Chapter4WithheldYtdValueSpecified)
                {
                    return this.Chapter4WithheldYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Chapter4WithheldYtdValue = value.GetValueOrDefault();
                this.Chapter4WithheldYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Chapter4WithholdingCode", Order=32, Form=XmlSchemaForm.Unqualified)]
        public short Chapter4WithholdingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Chapter4WithholdingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Chapter4WithholdingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Chapter4WithholdingCode
        {
            get
            {
                if (this.Chapter4WithholdingCodeValueSpecified)
                {
                    return this.Chapter4WithholdingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Chapter4WithholdingCodeValue = value.GetValueOrDefault();
                this.Chapter4WithholdingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffAmount", Order=33, Form=XmlSchemaForm.Unqualified)]
        public decimal ChargeOffAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChargeOffAmount
        {
            get
            {
                if (this.ChargeOffAmountValueSpecified)
                {
                    return this.ChargeOffAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffAmountValue = value.GetValueOrDefault();
                this.ChargeOffAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffDate", Order=34, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ChargeOffDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ChargeOffDate
        {
            get
            {
                if (this.ChargeOffDateValueSpecified)
                {
                    return this.ChargeOffDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffDateValue = value.GetValueOrDefault();
                this.ChargeOffDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffType", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short ChargeOffTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargeOffType
        {
            get
            {
                if (this.ChargeOffTypeValueSpecified)
                {
                    return this.ChargeOffTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffTypeValue = value.GetValueOrDefault();
                this.ChargeOffTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckDigits", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string CheckDigits { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=37, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CorporateUserTransferCode", Order=38, Form=XmlSchemaForm.Unqualified)]
        public short CorporateUserTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CorporateUserTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CorporateUserTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CorporateUserTransferCode
        {
            get
            {
                if (this.CorporateUserTransferCodeValueSpecified)
                {
                    return this.CorporateUserTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CorporateUserTransferCodeValue = value.GetValueOrDefault();
                this.CorporateUserTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyFeeLy", Order=39, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyFeeLyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyFeeLy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyFeeLyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyFeeLy
        {
            get
            {
                if (this.CourtesyFeeLyValueSpecified)
                {
                    return this.CourtesyFeeLyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyFeeLyValue = value.GetValueOrDefault();
                this.CourtesyFeeLyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyFeeMtd", Order=40, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyFeeMtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyFeeMtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyFeeMtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyFeeMtd
        {
            get
            {
                if (this.CourtesyFeeMtdValueSpecified)
                {
                    return this.CourtesyFeeMtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyFeeMtdValue = value.GetValueOrDefault();
                this.CourtesyFeeMtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyFeeYtd", Order=41, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyFeeYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyFeeYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyFeeYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyFeeYtd
        {
            get
            {
                if (this.CourtesyFeeYtdValueSpecified)
                {
                    return this.CourtesyFeeYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyFeeYtdValue = value.GetValueOrDefault();
                this.CourtesyFeeYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayLastYear", Order=42, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayLastYear
        {
            get
            {
                if (this.CourtesyPayLastYearValueSpecified)
                {
                    return this.CourtesyPayLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayLastYearValue = value.GetValueOrDefault();
                this.CourtesyPayLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayMonthToDate", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayMonthToDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayMonthToDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayMonthToDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayMonthToDate
        {
            get
            {
                if (this.CourtesyPayMonthToDateValueSpecified)
                {
                    return this.CourtesyPayMonthToDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayMonthToDateValue = value.GetValueOrDefault();
                this.CourtesyPayMonthToDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayYtd", Order=44, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayYtd
        {
            get
            {
                if (this.CourtesyPayYtdValueSpecified)
                {
                    return this.CourtesyPayYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayYtdValue = value.GetValueOrDefault();
                this.CourtesyPayYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreatedAtBranch", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short CreatedAtBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedAtBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreatedAtBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreatedAtBranch
        {
            get
            {
                if (this.CreatedAtBranchValueSpecified)
                {
                    return this.CreatedAtBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreatedAtBranchValue = value.GetValueOrDefault();
                this.CreatedAtBranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreatedByUser", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short CreatedByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreatedByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreatedByUser
        {
            get
            {
                if (this.CreatedByUserValueSpecified)
                {
                    return this.CreatedByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreatedByUserValue = value.GetValueOrDefault();
                this.CreatedByUserValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CreditReportComment", Order=47, Form=XmlSchemaForm.Unqualified)]
        public string CreditReportComment { get; set; }
        
        [XmlElementAttribute("CreditReportCompliance", Order=48, Form=XmlSchemaForm.Unqualified)]
        public string CreditReportCompliance { get; set; }
        
        [XmlElementAttribute("CreditReportConsumerInfo", Order=49, Form=XmlSchemaForm.Unqualified)]
        public string CreditReportConsumerInfo { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportConsumerInfoDate", Order=50, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> CreditReportConsumerInfoDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportConsumerInfoDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportConsumerInfoDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CreditReportConsumerInfoDate
        {
            get
            {
                if (this.CreditReportConsumerInfoDateValueSpecified)
                {
                    return this.CreditReportConsumerInfoDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportConsumerInfoDateValue = value.GetValueOrDefault();
                this.CreditReportConsumerInfoDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportLastStatus", Order=51, Form=XmlSchemaForm.Unqualified)]
        public short CreditReportLastStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportLastStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportLastStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditReportLastStatus
        {
            get
            {
                if (this.CreditReportLastStatusValueSpecified)
                {
                    return this.CreditReportLastStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportLastStatusValue = value.GetValueOrDefault();
                this.CreditReportLastStatusValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CreditReportNumber", Order=52, Form=XmlSchemaForm.Unqualified)]
        public string CreditReportNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportOccurDate", Order=53, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> CreditReportOccurDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportOccurDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportOccurDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CreditReportOccurDate
        {
            get
            {
                if (this.CreditReportOccurDateValueSpecified)
                {
                    return this.CreditReportOccurDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportOccurDateValue = value.GetValueOrDefault();
                this.CreditReportOccurDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportOriginalAmountRptd", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal CreditReportOriginalAmountRptdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportOriginalAmountRptd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportOriginalAmountRptdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CreditReportOriginalAmountRptd
        {
            get
            {
                if (this.CreditReportOriginalAmountRptdValueSpecified)
                {
                    return this.CreditReportOriginalAmountRptdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportOriginalAmountRptdValue = value.GetValueOrDefault();
                this.CreditReportOriginalAmountRptdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportingCode", Order=55, Form=XmlSchemaForm.Unqualified)]
        public short CreditReportingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditReportingCode
        {
            get
            {
                if (this.CreditReportingCodeValueSpecified)
                {
                    return this.CreditReportingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportingCodeValue = value.GetValueOrDefault();
                this.CreditReportingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuTotalsUseCode", Order=56, Form=XmlSchemaForm.Unqualified)]
        public short CuTotalsUseCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuTotalsUseCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuTotalsUseCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CuTotalsUseCode
        {
            get
            {
                if (this.CuTotalsUseCodeValueSpecified)
                {
                    return this.CuTotalsUseCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuTotalsUseCodeValue = value.GetValueOrDefault();
                this.CuTotalsUseCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrDivPayable", Order=57, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrDivPayableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrDivPayable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrDivPayableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrDivPayable
        {
            get
            {
                if (this.CurrDivPayableValueSpecified)
                {
                    return this.CurrDivPayableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrDivPayableValue = value.GetValueOrDefault();
                this.CurrDivPayableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrMonthPaidDiv", Order=58, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrMonthPaidDivValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrMonthPaidDiv property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrMonthPaidDivValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrMonthPaidDiv
        {
            get
            {
                if (this.CurrMonthPaidDivValueSpecified)
                {
                    return this.CurrMonthPaidDivValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrMonthPaidDivValue = value.GetValueOrDefault();
                this.CurrMonthPaidDivValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivAccrual", Order=60, Form=XmlSchemaForm.Unqualified)]
        public decimal DivAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivAccrual
        {
            get
            {
                if (this.DivAccrualValueSpecified)
                {
                    return this.DivAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivAccrualValue = value.GetValueOrDefault();
                this.DivAccrualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivAccrualDate", Order=61, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> DivAccrualDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivAccrualDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivAccrualDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DivAccrualDate
        {
            get
            {
                if (this.DivAccrualDateValueSpecified)
                {
                    return this.DivAccrualDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivAccrualDateValue = value.GetValueOrDefault();
                this.DivAccrualDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivDisbUpdtActvtyD", Order=62, Form=XmlSchemaForm.Unqualified)]
        public short DivDisbUpdtActvtyDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivDisbUpdtActvtyD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivDisbUpdtActvtyDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivDisbUpdtActvtyD
        {
            get
            {
                if (this.DivDisbUpdtActvtyDValueSpecified)
                {
                    return this.DivDisbUpdtActvtyDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivDisbUpdtActvtyDValue = value.GetValueOrDefault();
                this.DivDisbUpdtActvtyDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivFromOpen", Order=63, Form=XmlSchemaForm.Unqualified)]
        public decimal DivFromOpenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivFromOpen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivFromOpenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivFromOpen
        {
            get
            {
                if (this.DivFromOpenValueSpecified)
                {
                    return this.DivFromOpenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivFromOpenValue = value.GetValueOrDefault();
                this.DivFromOpenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivLastYear", Order=64, Form=XmlSchemaForm.Unqualified)]
        public decimal DivLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivLastYear
        {
            get
            {
                if (this.DivLastYearValueSpecified)
                {
                    return this.DivLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivLastYearValue = value.GetValueOrDefault();
                this.DivLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivPeriodBalDays", Order=65, Form=XmlSchemaForm.Unqualified)]
        public decimal DivPeriodBalDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivPeriodBalDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivPeriodBalDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivPeriodBalDays
        {
            get
            {
                if (this.DivPeriodBalDaysValueSpecified)
                {
                    return this.DivPeriodBalDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivPeriodBalDaysValue = value.GetValueOrDefault();
                this.DivPeriodBalDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivPeriodStart", Order=66, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> DivPeriodStartValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivPeriodStart property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivPeriodStartValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DivPeriodStart
        {
            get
            {
                if (this.DivPeriodStartValueSpecified)
                {
                    return this.DivPeriodStartValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivPeriodStartValue = value.GetValueOrDefault();
                this.DivPeriodStartValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivPostCode", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short DivPostCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivPostCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivPostCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivPostCode
        {
            get
            {
                if (this.DivPostCodeValueSpecified)
                {
                    return this.DivPostCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivPostCodeValue = value.GetValueOrDefault();
                this.DivPostCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivRate", Order=68, Form=XmlSchemaForm.Unqualified)]
        public decimal DivRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivRate
        {
            get
            {
                if (this.DivRateValueSpecified)
                {
                    return this.DivRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivRateValue = value.GetValueOrDefault();
                this.DivRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivType", Order=69, Form=XmlSchemaForm.Unqualified)]
        public short DivTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivType
        {
            get
            {
                if (this.DivTypeValueSpecified)
                {
                    return this.DivTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivTypeValue = value.GetValueOrDefault();
                this.DivTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivYtd", Order=70, Form=XmlSchemaForm.Unqualified)]
        public decimal DivYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DivYtd
        {
            get
            {
                if (this.DivYtdValueSpecified)
                {
                    return this.DivYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivYtdValue = value.GetValueOrDefault();
                this.DivYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendDue", Order=71, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendDueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendDue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendDueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendDue
        {
            get
            {
                if (this.DividendDueValueSpecified)
                {
                    return this.DividendDueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendDueValue = value.GetValueOrDefault();
                this.DividendDueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMargin", Order=72, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendRateMarginValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMargin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMarginValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendRateMargin
        {
            get
            {
                if (this.DividendRateMarginValueSpecified)
                {
                    return this.DividendRateMarginValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMarginValue = value.GetValueOrDefault();
                this.DividendRateMarginValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMarginSign", Order=73, Form=XmlSchemaForm.Unqualified)]
        public short DividendRateMarginSignValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMarginSign property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMarginSignValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DividendRateMarginSign
        {
            get
            {
                if (this.DividendRateMarginSignValueSpecified)
                {
                    return this.DividendRateMarginSignValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMarginSignValue = value.GetValueOrDefault();
                this.DividendRateMarginSignValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMax", Order=74, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendRateMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendRateMax
        {
            get
            {
                if (this.DividendRateMaxValueSpecified)
                {
                    return this.DividendRateMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMaxValue = value.GetValueOrDefault();
                this.DividendRateMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRateMin", Order=75, Form=XmlSchemaForm.Unqualified)]
        public decimal DividendRateMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRateMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRateMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DividendRateMin
        {
            get
            {
                if (this.DividendRateMinValueSpecified)
                {
                    return this.DividendRateMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRateMinValue = value.GetValueOrDefault();
                this.DividendRateMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRatePeriodDate", Order=76, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> DividendRatePeriodDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRatePeriodDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRatePeriodDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DividendRatePeriodDate
        {
            get
            {
                if (this.DividendRatePeriodDateValueSpecified)
                {
                    return this.DividendRatePeriodDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRatePeriodDateValue = value.GetValueOrDefault();
                this.DividendRatePeriodDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRatePeriodFreq", Order=77, Form=XmlSchemaForm.Unqualified)]
        public short DividendRatePeriodFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRatePeriodFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRatePeriodFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DividendRatePeriodFreq
        {
            get
            {
                if (this.DividendRatePeriodFreqValueSpecified)
                {
                    return this.DividendRatePeriodFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRatePeriodFreqValue = value.GetValueOrDefault();
                this.DividendRatePeriodFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowLastYear", Order=78, Form=XmlSchemaForm.Unqualified)]
        public decimal EscrowLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EscrowLastYear
        {
            get
            {
                if (this.EscrowLastYearValueSpecified)
                {
                    return this.EscrowLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowLastYearValue = value.GetValueOrDefault();
                this.EscrowLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowYtd", Order=79, Form=XmlSchemaForm.Unqualified)]
        public decimal EscrowYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EscrowYtd
        {
            get
            {
                if (this.EscrowYtdValueSpecified)
                {
                    return this.EscrowYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowYtdValue = value.GetValueOrDefault();
                this.EscrowYtdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("EscrowedLoanId", Order=80, Form=XmlSchemaForm.Unqualified)]
        public string EscrowedLoanId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExtAchXfrDailyLimitIn", Order=81, Form=XmlSchemaForm.Unqualified)]
        public decimal ExtAchXfrDailyLimitInValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExtAchXfrDailyLimitIn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExtAchXfrDailyLimitInValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ExtAchXfrDailyLimitIn
        {
            get
            {
                if (this.ExtAchXfrDailyLimitInValueSpecified)
                {
                    return this.ExtAchXfrDailyLimitInValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExtAchXfrDailyLimitInValue = value.GetValueOrDefault();
                this.ExtAchXfrDailyLimitInValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExtAchXfrDailyLimitOut", Order=82, Form=XmlSchemaForm.Unqualified)]
        public decimal ExtAchXfrDailyLimitOutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExtAchXfrDailyLimitOut property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExtAchXfrDailyLimitOutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ExtAchXfrDailyLimitOut
        {
            get
            {
                if (this.ExtAchXfrDailyLimitOutValueSpecified)
                {
                    return this.ExtAchXfrDailyLimitOutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExtAchXfrDailyLimitOutValue = value.GetValueOrDefault();
                this.ExtAchXfrDailyLimitOutValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareFeeCount_2> _feeCount;
        
        [XmlElementAttribute("FeeCount", Order=83, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareFeeCount_2> FeeCount
        {
            get
            {
                return _feeCount;
            }
            set
            {
                _feeCount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FeeCount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FeeCountSpecified
        {
            get
            {
                return ((this.FeeCount != null) 
                            && (this.FeeCount.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeExemptCrtsyBal", Order=84, Form=XmlSchemaForm.Unqualified)]
        public decimal FeeExemptCrtsyBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeExemptCrtsyBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeExemptCrtsyBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FeeExemptCrtsyBal
        {
            get
            {
                if (this.FeeExemptCrtsyBalValueSpecified)
                {
                    return this.FeeExemptCrtsyBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeExemptCrtsyBalValue = value.GetValueOrDefault();
                this.FeeExemptCrtsyBalValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Id", Order=85, Form=XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareInsuranceBalanceAge_2> _insuranceBalanceAge;
        
        [XmlElementAttribute("InsuranceBalanceAge", Order=86, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareInsuranceBalanceAge_2> InsuranceBalanceAge
        {
            get
            {
                return _insuranceBalanceAge;
            }
            set
            {
                _insuranceBalanceAge = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InsuranceBalanceAge collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool InsuranceBalanceAgeSpecified
        {
            get
            {
                return ((this.InsuranceBalanceAge != null) 
                            && (this.InsuranceBalanceAge.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceMaximum", Order=87, Form=XmlSchemaForm.Unqualified)]
        public decimal InsuranceMaximumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceMaximum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceMaximumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InsuranceMaximum
        {
            get
            {
                if (this.InsuranceMaximumValueSpecified)
                {
                    return this.InsuranceMaximumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceMaximumValue = value.GetValueOrDefault();
                this.InsuranceMaximumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceType", Order=88, Form=XmlSchemaForm.Unqualified)]
        public short InsuranceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InsuranceType
        {
            get
            {
                if (this.InsuranceTypeValueSpecified)
                {
                    return this.InsuranceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceTypeValue = value.GetValueOrDefault();
                this.InsuranceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Irs1042SUfid", Order=89, Form=XmlSchemaForm.Unqualified)]
        public int Irs1042SUfidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Irs1042SUfid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Irs1042SUfidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Irs1042SUfid
        {
            get
            {
                if (this.Irs1042SUfidValueSpecified)
                {
                    return this.Irs1042SUfidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Irs1042SUfidValue = value.GetValueOrDefault();
                this.Irs1042SUfidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsCode", Order=90, Form=XmlSchemaForm.Unqualified)]
        public short IrsCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IrsCode
        {
            get
            {
                if (this.IrsCodeValueSpecified)
                {
                    return this.IrsCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsCodeValue = value.GetValueOrDefault();
                this.IrsCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsPlan", Order=91, Form=XmlSchemaForm.Unqualified)]
        public short IrsPlanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsPlan property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsPlanValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IrsPlan
        {
            get
            {
                if (this.IrsPlanValueSpecified)
                {
                    return this.IrsPlanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsPlanValue = value.GetValueOrDefault();
                this.IrsPlanValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastAccrualUpdateDate", Order=92, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastAccrualUpdateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastAccrualUpdateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastAccrualUpdateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastAccrualUpdateDate
        {
            get
            {
                if (this.LastAccrualUpdateDateValueSpecified)
                {
                    return this.LastAccrualUpdateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastAccrualUpdateDateValue = value.GetValueOrDefault();
                this.LastAccrualUpdateDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastCrReportDate", Order=93, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastCrReportDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastCrReportDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastCrReportDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastCrReportDate
        {
            get
            {
                if (this.LastCrReportDateValueSpecified)
                {
                    return this.LastCrReportDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastCrReportDateValue = value.GetValueOrDefault();
                this.LastCrReportDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDirectDepAmt", Order=94, Form=XmlSchemaForm.Unqualified)]
        public decimal LastDirectDepAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDirectDepAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDirectDepAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LastDirectDepAmt
        {
            get
            {
                if (this.LastDirectDepAmtValueSpecified)
                {
                    return this.LastDirectDepAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDirectDepAmtValue = value.GetValueOrDefault();
                this.LastDirectDepAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDirectDepDate", Order=95, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastDirectDepDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDirectDepDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDirectDepDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastDirectDepDate
        {
            get
            {
                if (this.LastDirectDepDateValueSpecified)
                {
                    return this.LastDirectDepDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDirectDepDateValue = value.GetValueOrDefault();
                this.LastDirectDepDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDivAmount", Order=96, Form=XmlSchemaForm.Unqualified)]
        public decimal LastDivAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDivAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDivAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LastDivAmount
        {
            get
            {
                if (this.LastDivAmountValueSpecified)
                {
                    return this.LastDivAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDivAmountValue = value.GetValueOrDefault();
                this.LastDivAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDivDate", Order=97, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastDivDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDivDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDivDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastDivDate
        {
            get
            {
                if (this.LastDivDateValueSpecified)
                {
                    return this.LastDivDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDivDateValue = value.GetValueOrDefault();
                this.LastDivDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=98, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastPurgeDate", Order=99, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastPurgeDate
        {
            get
            {
                if (this.LastPurgeDateValueSpecified)
                {
                    return this.LastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastPurgeDateValue = value.GetValueOrDefault();
                this.LastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastTranDate", Order=100, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastTranDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastTranDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastTranDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastTranDate
        {
            get
            {
                if (this.LastTranDateValueSpecified)
                {
                    return this.LastTranDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastTranDateValue = value.GetValueOrDefault();
                this.LastTranDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LedgerAccrual", Order=101, Form=XmlSchemaForm.Unqualified)]
        public decimal LedgerAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LedgerAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LedgerAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LedgerAccrual
        {
            get
            {
                if (this.LedgerAccrualValueSpecified)
                {
                    return this.LedgerAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LedgerAccrualValue = value.GetValueOrDefault();
                this.LedgerAccrualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LedgerAccrualDate", Order=102, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LedgerAccrualDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LedgerAccrualDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LedgerAccrualDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LedgerAccrualDate
        {
            get
            {
                if (this.LedgerAccrualDateValueSpecified)
                {
                    return this.LedgerAccrualDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LedgerAccrualDateValue = value.GetValueOrDefault();
                this.LedgerAccrualDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanPaymentHold", Order=103, Form=XmlSchemaForm.Unqualified)]
        public decimal LoanPaymentHoldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanPaymentHold property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanPaymentHoldValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LoanPaymentHold
        {
            get
            {
                if (this.LoanPaymentHoldValueSpecified)
                {
                    return this.LoanPaymentHoldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanPaymentHoldValue = value.GetValueOrDefault();
                this.LoanPaymentHoldValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaturityDate", Order=104, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> MaturityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaturityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MaturityDate
        {
            get
            {
                if (this.MaturityDateValueSpecified)
                {
                    return this.MaturityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityDateValue = value.GetValueOrDefault();
                this.MaturityDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaturityPostCode", Order=105, Form=XmlSchemaForm.Unqualified)]
        public short MaturityPostCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityPostCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaturityPostCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaturityPostCode
        {
            get
            {
                if (this.MaturityPostCodeValueSpecified)
                {
                    return this.MaturityPostCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityPostCodeValue = value.GetValueOrDefault();
                this.MaturityPostCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("McDivLastYear", Order=106, Form=XmlSchemaForm.Unqualified)]
        public decimal McDivLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the McDivLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool McDivLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> McDivLastYear
        {
            get
            {
                if (this.McDivLastYearValueSpecified)
                {
                    return this.McDivLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.McDivLastYearValue = value.GetValueOrDefault();
                this.McDivLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("McDivYtd", Order=107, Form=XmlSchemaForm.Unqualified)]
        public decimal McDivYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the McDivYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool McDivYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> McDivYtd
        {
            get
            {
                if (this.McDivYtdValueSpecified)
                {
                    return this.McDivYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.McDivYtdValue = value.GetValueOrDefault();
                this.McDivYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberBranchSupport", Order=108, Form=XmlSchemaForm.Unqualified)]
        public short MemberBranchSupportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberBranchSupport property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberBranchSupportValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberBranchSupport
        {
            get
            {
                if (this.MemberBranchSupportValueSpecified)
                {
                    return this.MemberBranchSupportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberBranchSupportValue = value.GetValueOrDefault();
                this.MemberBranchSupportValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberUserTransferCode", Order=109, Form=XmlSchemaForm.Unqualified)]
        public short MemberUserTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberUserTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberUserTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberUserTransferCode
        {
            get
            {
                if (this.MemberUserTransferCodeValueSpecified)
                {
                    return this.MemberUserTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberUserTransferCodeValue = value.GetValueOrDefault();
                this.MemberUserTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MicrAcctNumber", Order=110, Form=XmlSchemaForm.Unqualified)]
        public string MicrAcctNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumBalance", Order=111, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumBalance
        {
            get
            {
                if (this.MinimumBalanceValueSpecified)
                {
                    return this.MinimumBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumBalanceValue = value.GetValueOrDefault();
                this.MinimumBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumDeposit", Order=112, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumDeposit
        {
            get
            {
                if (this.MinimumDepositValueSpecified)
                {
                    return this.MinimumDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumDepositValue = value.GetValueOrDefault();
                this.MinimumDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumWithdrawal", Order=113, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumWithdrawalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumWithdrawal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumWithdrawalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumWithdrawal
        {
            get
            {
                if (this.MinimumWithdrawalValueSpecified)
                {
                    return this.MinimumWithdrawalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumWithdrawalValue = value.GetValueOrDefault();
                this.MinimumWithdrawalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MtdAccruedDivs", Order=114, Form=XmlSchemaForm.Unqualified)]
        public decimal MtdAccruedDivsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MtdAccruedDivs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MtdAccruedDivsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MtdAccruedDivs
        {
            get
            {
                if (this.MtdAccruedDivsValueSpecified)
                {
                    return this.MtdAccruedDivsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MtdAccruedDivsValue = value.GetValueOrDefault();
                this.MtdAccruedDivsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MtdEarnedDivs", Order=115, Form=XmlSchemaForm.Unqualified)]
        public decimal MtdEarnedDivsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MtdEarnedDivs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MtdEarnedDivsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MtdEarnedDivs
        {
            get
            {
                if (this.MtdEarnedDivsValueSpecified)
                {
                    return this.MtdEarnedDivsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MtdEarnedDivsValue = value.GetValueOrDefault();
                this.MtdEarnedDivsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MtdPaidDivs", Order=116, Form=XmlSchemaForm.Unqualified)]
        public decimal MtdPaidDivsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MtdPaidDivs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MtdPaidDivsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MtdPaidDivs
        {
            get
            {
                if (this.MtdPaidDivsValueSpecified)
                {
                    return this.MtdPaidDivsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MtdPaidDivsValue = value.GetValueOrDefault();
                this.MtdPaidDivsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MtdPriorRateAccrual", Order=117, Form=XmlSchemaForm.Unqualified)]
        public decimal MtdPriorRateAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MtdPriorRateAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MtdPriorRateAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MtdPriorRateAccrual
        {
            get
            {
                if (this.MtdPriorRateAccrualValueSpecified)
                {
                    return this.MtdPriorRateAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MtdPriorRateAccrualValue = value.GetValueOrDefault();
                this.MtdPriorRateAccrualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeBalanceDate", Order=118, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NegativeBalanceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeBalanceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeBalanceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NegativeBalanceDate
        {
            get
            {
                if (this.NegativeBalanceDateValueSpecified)
                {
                    return this.NegativeBalanceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeBalanceDateValue = value.GetValueOrDefault();
                this.NegativeBalanceDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeBalanceNoticeDate", Order=119, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NegativeBalanceNoticeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeBalanceNoticeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeBalanceNoticeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NegativeBalanceNoticeDate
        {
            get
            {
                if (this.NegativeBalanceNoticeDateValueSpecified)
                {
                    return this.NegativeBalanceNoticeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeBalanceNoticeDateValue = value.GetValueOrDefault();
                this.NegativeBalanceNoticeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeBalanceNoticeNumber", Order=120, Form=XmlSchemaForm.Unqualified)]
        public short NegativeBalanceNoticeNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeBalanceNoticeNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeBalanceNoticeNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NegativeBalanceNoticeNumber
        {
            get
            {
                if (this.NegativeBalanceNoticeNumberValueSpecified)
                {
                    return this.NegativeBalanceNoticeNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeBalanceNoticeNumberValue = value.GetValueOrDefault();
                this.NegativeBalanceNoticeNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeBalanceNoticeType", Order=121, Form=XmlSchemaForm.Unqualified)]
        public short NegativeBalanceNoticeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeBalanceNoticeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeBalanceNoticeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NegativeBalanceNoticeType
        {
            get
            {
                if (this.NegativeBalanceNoticeTypeValueSpecified)
                {
                    return this.NegativeBalanceNoticeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeBalanceNoticeTypeValue = value.GetValueOrDefault();
                this.NegativeBalanceNoticeTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Nickname", Order=122, Form=XmlSchemaForm.Unqualified)]
        public string Nickname { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeLy", Order=123, Form=XmlSchemaForm.Unqualified)]
        public short NsfFeeLyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeLy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeLyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfFeeLy
        {
            get
            {
                if (this.NsfFeeLyValueSpecified)
                {
                    return this.NsfFeeLyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeLyValue = value.GetValueOrDefault();
                this.NsfFeeLyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeMtd", Order=124, Form=XmlSchemaForm.Unqualified)]
        public short NsfFeeMtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeMtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeMtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfFeeMtd
        {
            get
            {
                if (this.NsfFeeMtdValueSpecified)
                {
                    return this.NsfFeeMtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeMtdValue = value.GetValueOrDefault();
                this.NsfFeeMtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeYtd", Order=125, Form=XmlSchemaForm.Unqualified)]
        public short NsfFeeYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfFeeYtd
        {
            get
            {
                if (this.NsfFeeYtdValueSpecified)
                {
                    return this.NsfFeeYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeYtdValue = value.GetValueOrDefault();
                this.NsfFeeYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfLastYear", Order=126, Form=XmlSchemaForm.Unqualified)]
        public short NsfLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfLastYear
        {
            get
            {
                if (this.NsfLastYearValueSpecified)
                {
                    return this.NsfLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfLastYearValue = value.GetValueOrDefault();
                this.NsfLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfMonthToDate", Order=127, Form=XmlSchemaForm.Unqualified)]
        public short NsfMonthToDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfMonthToDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfMonthToDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfMonthToDate
        {
            get
            {
                if (this.NsfMonthToDateValueSpecified)
                {
                    return this.NsfMonthToDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfMonthToDateValue = value.GetValueOrDefault();
                this.NsfMonthToDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfYtd", Order=128, Form=XmlSchemaForm.Unqualified)]
        public short NsfYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NsfYtd
        {
            get
            {
                if (this.NsfYtdValueSpecified)
                {
                    return this.NsfYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfYtdValue = value.GetValueOrDefault();
                this.NsfYtdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareOdtAuthFeeSrcCodeList_2> _odtAuthFeeSrcCodeList;
        
        [XmlElementAttribute("OdtAuthFeeSrcCodeList", Order=129, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareOdtAuthFeeSrcCodeList_2> OdtAuthFeeSrcCodeList
        {
            get
            {
                return _odtAuthFeeSrcCodeList;
            }
            set
            {
                _odtAuthFeeSrcCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OdtAuthFeeSrcCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OdtAuthFeeSrcCodeListSpecified
        {
            get
            {
                return ((this.OdtAuthFeeSrcCodeList != null) 
                            && (this.OdtAuthFeeSrcCodeList.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenDate", Order=130, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> OpenDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> OpenDate
        {
            get
            {
                if (this.OpenDateValueSpecified)
                {
                    return this.OpenDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenDateValue = value.GetValueOrDefault();
                this.OpenDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalBalance", Order=131, Form=XmlSchemaForm.Unqualified)]
        public decimal OriginalBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OriginalBalance
        {
            get
            {
                if (this.OriginalBalanceValueSpecified)
                {
                    return this.OriginalBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalBalanceValue = value.GetValueOrDefault();
                this.OriginalBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalDeposit", Order=132, Form=XmlSchemaForm.Unqualified)]
        public decimal OriginalDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OriginalDeposit
        {
            get
            {
                if (this.OriginalDepositValueSpecified)
                {
                    return this.OriginalDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalDepositValue = value.GetValueOrDefault();
                this.OriginalDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalDepositDate", Order=133, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> OriginalDepositDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalDepositDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalDepositDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> OriginalDepositDate
        {
            get
            {
                if (this.OriginalDepositDateValueSpecified)
                {
                    return this.OriginalDepositDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalDepositDateValue = value.GetValueOrDefault();
                this.OriginalDepositDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdraftFeeLastYr", Order=134, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdraftFeeLastYrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdraftFeeLastYr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdraftFeeLastYrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdraftFeeLastYr
        {
            get
            {
                if (this.OverdraftFeeLastYrValueSpecified)
                {
                    return this.OverdraftFeeLastYrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdraftFeeLastYrValue = value.GetValueOrDefault();
                this.OverdraftFeeLastYrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdraftFeeYtd", Order=135, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdraftFeeYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdraftFeeYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdraftFeeYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdraftFeeYtd
        {
            get
            {
                if (this.OverdraftFeeYtdValueSpecified)
                {
                    return this.OverdraftFeeYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdraftFeeYtdValue = value.GetValueOrDefault();
                this.OverdraftFeeYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdraftTolerance", Order=136, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdraftToleranceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdraftTolerance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdraftToleranceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdraftTolerance
        {
            get
            {
                if (this.OverdraftToleranceValueSpecified)
                {
                    return this.OverdraftToleranceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdraftToleranceValue = value.GetValueOrDefault();
                this.OverdraftToleranceValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<SharePayeeLine_2> _payeeLine;
        
        [XmlElementAttribute("PayeeLine", Order=137, Form=XmlSchemaForm.Unqualified)]
        public Collection<SharePayeeLine_2> PayeeLine
        {
            get
            {
                return _payeeLine;
            }
            set
            {
                _payeeLine = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PayeeLine collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PayeeLineSpecified
        {
            get
            {
                return ((this.PayeeLine != null) 
                            && (this.PayeeLine.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PayeeNameLocator", Order=138, Form=XmlSchemaForm.Unqualified)]
        public int PayeeNameLocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PayeeNameLocator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PayeeNameLocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> PayeeNameLocator
        {
            get
            {
                if (this.PayeeNameLocatorValueSpecified)
                {
                    return this.PayeeNameLocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PayeeNameLocatorValue = value.GetValueOrDefault();
                this.PayeeNameLocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PayeeNameType", Order=139, Form=XmlSchemaForm.Unqualified)]
        public short PayeeNameTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PayeeNameType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PayeeNameTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PayeeNameType
        {
            get
            {
                if (this.PayeeNameTypeValueSpecified)
                {
                    return this.PayeeNameTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PayeeNameTypeValue = value.GetValueOrDefault();
                this.PayeeNameTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<SharePayeePhone_2> _payeePhone;
        
        [XmlElementAttribute("PayeePhone", Order=140, Form=XmlSchemaForm.Unqualified)]
        public Collection<SharePayeePhone_2> PayeePhone
        {
            get
            {
                return _payeePhone;
            }
            set
            {
                _payeePhone = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PayeePhone collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PayeePhoneSpecified
        {
            get
            {
                return ((this.PayeePhone != null) 
                            && (this.PayeePhone.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PenaltyLastYear", Order=141, Form=XmlSchemaForm.Unqualified)]
        public decimal PenaltyLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PenaltyLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PenaltyLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PenaltyLastYear
        {
            get
            {
                if (this.PenaltyLastYearValueSpecified)
                {
                    return this.PenaltyLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PenaltyLastYearValue = value.GetValueOrDefault();
                this.PenaltyLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PenaltyType", Order=142, Form=XmlSchemaForm.Unqualified)]
        public short PenaltyTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PenaltyType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PenaltyTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PenaltyType
        {
            get
            {
                if (this.PenaltyTypeValueSpecified)
                {
                    return this.PenaltyTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PenaltyTypeValue = value.GetValueOrDefault();
                this.PenaltyTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PenaltyYtd", Order=143, Form=XmlSchemaForm.Unqualified)]
        public decimal PenaltyYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PenaltyYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PenaltyYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PenaltyYtd
        {
            get
            {
                if (this.PenaltyYtdValueSpecified)
                {
                    return this.PenaltyYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PenaltyYtdValue = value.GetValueOrDefault();
                this.PenaltyYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicCap", Order=144, Form=XmlSchemaForm.Unqualified)]
        public decimal PeriodicCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PeriodicCap
        {
            get
            {
                if (this.PeriodicCapValueSpecified)
                {
                    return this.PeriodicCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicCapValue = value.GetValueOrDefault();
                this.PeriodicCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicStartRate", Order=145, Form=XmlSchemaForm.Unqualified)]
        public decimal PeriodicStartRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicStartRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicStartRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PeriodicStartRate
        {
            get
            {
                if (this.PeriodicStartRateValueSpecified)
                {
                    return this.PeriodicStartRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicStartRateValue = value.GetValueOrDefault();
                this.PeriodicStartRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PositivePayDraft", Order=146, Form=XmlSchemaForm.Unqualified)]
        public short PositivePayDraftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PositivePayDraft property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PositivePayDraftValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PositivePayDraft
        {
            get
            {
                if (this.PositivePayDraftValueSpecified)
                {
                    return this.PositivePayDraftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PositivePayDraftValue = value.GetValueOrDefault();
                this.PositivePayDraftValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<SharePreMthDivAccrued_2> _preMthDivAccrued;
        
        [XmlElementAttribute("PreMthDivAccrued", Order=147, Form=XmlSchemaForm.Unqualified)]
        public Collection<SharePreMthDivAccrued_2> PreMthDivAccrued
        {
            get
            {
                return _preMthDivAccrued;
            }
            set
            {
                _preMthDivAccrued = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreMthDivAccrued collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreMthDivAccruedSpecified
        {
            get
            {
                return ((this.PreMthDivAccrued != null) 
                            && (this.PreMthDivAccrued.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<SharePreMthDivEarned_2> _preMthDivEarned;
        
        [XmlElementAttribute("PreMthDivEarned", Order=148, Form=XmlSchemaForm.Unqualified)]
        public Collection<SharePreMthDivEarned_2> PreMthDivEarned
        {
            get
            {
                return _preMthDivEarned;
            }
            set
            {
                _preMthDivEarned = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreMthDivEarned collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreMthDivEarnedSpecified
        {
            get
            {
                return ((this.PreMthDivEarned != null) 
                            && (this.PreMthDivEarned.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<SharePreMthDivPaid_2> _preMthDivPaid;
        
        [XmlElementAttribute("PreMthDivPaid", Order=149, Form=XmlSchemaForm.Unqualified)]
        public Collection<SharePreMthDivPaid_2> PreMthDivPaid
        {
            get
            {
                return _preMthDivPaid;
            }
            set
            {
                _preMthDivPaid = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreMthDivPaid collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreMthDivPaidSpecified
        {
            get
            {
                return ((this.PreMthDivPaid != null) 
                            && (this.PreMthDivPaid.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PutItemSchd", Order=150, Form=XmlSchemaForm.Unqualified)]
        public short PutItemSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PutItemSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PutItemSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PutItemSchd
        {
            get
            {
                if (this.PutItemSchdValueSpecified)
                {
                    return this.PutItemSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PutItemSchdValue = value.GetValueOrDefault();
                this.PutItemSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PutItemSchdType", Order=151, Form=XmlSchemaForm.Unqualified)]
        public short PutItemSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PutItemSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PutItemSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PutItemSchdType
        {
            get
            {
                if (this.PutItemSchdTypeValueSpecified)
                {
                    return this.PutItemSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PutItemSchdTypeValue = value.GetValueOrDefault();
                this.PutItemSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=152, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=153, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDCheckCount", Order=154, Form=XmlSchemaForm.Unqualified)]
        public short RegDCheckCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDCheckCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDCheckCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDCheckCount
        {
            get
            {
                if (this.RegDCheckCountValueSpecified)
                {
                    return this.RegDCheckCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDCheckCountValue = value.GetValueOrDefault();
                this.RegDCheckCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDCtrStartDay", Order=155, Form=XmlSchemaForm.Unqualified)]
        public short RegDCtrStartDayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDCtrStartDay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDCtrStartDayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDCtrStartDay
        {
            get
            {
                if (this.RegDCtrStartDayValueSpecified)
                {
                    return this.RegDCtrStartDayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDCtrStartDayValue = value.GetValueOrDefault();
                this.RegDCtrStartDayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDTransferCount", Order=156, Form=XmlSchemaForm.Unqualified)]
        public short RegDTransferCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDTransferCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDTransferCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDTransferCount
        {
            get
            {
                if (this.RegDTransferCountValueSpecified)
                {
                    return this.RegDTransferCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDTransferCountValue = value.GetValueOrDefault();
                this.RegDTransferCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegECount", Order=157, Form=XmlSchemaForm.Unqualified)]
        public short RegECountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegECount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegECountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegECount
        {
            get
            {
                if (this.RegECountValueSpecified)
                {
                    return this.RegECountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegECountValue = value.GetValueOrDefault();
                this.RegECountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RenewShareType", Order=158, Form=XmlSchemaForm.Unqualified)]
        public short RenewShareTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RenewShareType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RenewShareTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RenewShareType
        {
            get
            {
                if (this.RenewShareTypeValueSpecified)
                {
                    return this.RenewShareTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RenewShareTypeValue = value.GetValueOrDefault();
                this.RenewShareTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RenewTermFreq", Order=159, Form=XmlSchemaForm.Unqualified)]
        public short RenewTermFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RenewTermFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RenewTermFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RenewTermFreq
        {
            get
            {
                if (this.RenewTermFreqValueSpecified)
                {
                    return this.RenewTermFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RenewTermFreqValue = value.GetValueOrDefault();
                this.RenewTermFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RenewTermPeriod", Order=160, Form=XmlSchemaForm.Unqualified)]
        public short RenewTermPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RenewTermPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RenewTermPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RenewTermPeriod
        {
            get
            {
                if (this.RenewTermPeriodValueSpecified)
                {
                    return this.RenewTermPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RenewTermPeriodValue = value.GetValueOrDefault();
                this.RenewTermPeriodValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareService_2> _service;
        
        [XmlElementAttribute("Service", Order=161, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareService_2> Service
        {
            get
            {
                return _service;
            }
            set
            {
                _service = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Service collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ServiceSpecified
        {
            get
            {
                return ((this.Service != null) 
                            && (this.Service.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareCode", Order=162, Form=XmlSchemaForm.Unqualified)]
        public short ShareCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ShareCode
        {
            get
            {
                if (this.ShareCodeValueSpecified)
                {
                    return this.ShareCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareCodeValue = value.GetValueOrDefault();
                this.ShareCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholdingCode", Order=163, Form=XmlSchemaForm.Unqualified)]
        public short StateWithholdingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholdingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StateWithholdingCode
        {
            get
            {
                if (this.StateWithholdingCodeValueSpecified)
                {
                    return this.StateWithholdingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingCodeValue = value.GetValueOrDefault();
                this.StateWithholdingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholdingLastQtr", Order=164, Form=XmlSchemaForm.Unqualified)]
        public decimal StateWithholdingLastQtrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholdingLastQtr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingLastQtrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StateWithholdingLastQtr
        {
            get
            {
                if (this.StateWithholdingLastQtrValueSpecified)
                {
                    return this.StateWithholdingLastQtrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingLastQtrValue = value.GetValueOrDefault();
                this.StateWithholdingLastQtrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholdingLastYear", Order=165, Form=XmlSchemaForm.Unqualified)]
        public decimal StateWithholdingLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholdingLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StateWithholdingLastYear
        {
            get
            {
                if (this.StateWithholdingLastYearValueSpecified)
                {
                    return this.StateWithholdingLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingLastYearValue = value.GetValueOrDefault();
                this.StateWithholdingLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholdingQtd", Order=166, Form=XmlSchemaForm.Unqualified)]
        public decimal StateWithholdingQtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholdingQtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingQtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StateWithholdingQtd
        {
            get
            {
                if (this.StateWithholdingQtdValueSpecified)
                {
                    return this.StateWithholdingQtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingQtdValue = value.GetValueOrDefault();
                this.StateWithholdingQtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWithholdingYtd", Order=167, Form=XmlSchemaForm.Unqualified)]
        public decimal StateWithholdingYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWithholdingYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWithholdingYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StateWithholdingYtd
        {
            get
            {
                if (this.StateWithholdingYtdValueSpecified)
                {
                    return this.StateWithholdingYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWithholdingYtdValue = value.GetValueOrDefault();
                this.StateWithholdingYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementDate", Order=168, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> StatementDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> StatementDate
        {
            get
            {
                if (this.StatementDateValueSpecified)
                {
                    return this.StatementDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementDateValue = value.GetValueOrDefault();
                this.StatementDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementGroup", Order=169, Form=XmlSchemaForm.Unqualified)]
        public short StatementGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementGroup
        {
            get
            {
                if (this.StatementGroupValueSpecified)
                {
                    return this.StatementGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementGroupValue = value.GetValueOrDefault();
                this.StatementGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementMailCode", Order=170, Form=XmlSchemaForm.Unqualified)]
        public short StatementMailCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementMailCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementMailCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementMailCode
        {
            get
            {
                if (this.StatementMailCodeValueSpecified)
                {
                    return this.StatementMailCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementMailCodeValue = value.GetValueOrDefault();
                this.StatementMailCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementPrevDate", Order=171, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> StatementPrevDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementPrevDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementPrevDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> StatementPrevDate
        {
            get
            {
                if (this.StatementPrevDateValueSpecified)
                {
                    return this.StatementPrevDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementPrevDateValue = value.GetValueOrDefault();
                this.StatementPrevDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepBalanceType", Order=172, Form=XmlSchemaForm.Unqualified)]
        public short SweepBalanceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepBalanceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepBalanceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SweepBalanceType
        {
            get
            {
                if (this.SweepBalanceTypeValueSpecified)
                {
                    return this.SweepBalanceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepBalanceTypeValue = value.GetValueOrDefault();
                this.SweepBalanceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepPriority", Order=173, Form=XmlSchemaForm.Unqualified)]
        public short SweepPriorityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepPriority property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepPriorityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SweepPriority
        {
            get
            {
                if (this.SweepPriorityValueSpecified)
                {
                    return this.SweepPriorityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepPriorityValue = value.GetValueOrDefault();
                this.SweepPriorityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepTargetMaximum", Order=174, Form=XmlSchemaForm.Unqualified)]
        public decimal SweepTargetMaximumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepTargetMaximum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepTargetMaximumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SweepTargetMaximum
        {
            get
            {
                if (this.SweepTargetMaximumValueSpecified)
                {
                    return this.SweepTargetMaximumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepTargetMaximumValue = value.GetValueOrDefault();
                this.SweepTargetMaximumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SweepTargetMinimum", Order=175, Form=XmlSchemaForm.Unqualified)]
        public decimal SweepTargetMinimumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SweepTargetMinimum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SweepTargetMinimumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SweepTargetMinimum
        {
            get
            {
                if (this.SweepTargetMinimumValueSpecified)
                {
                    return this.SweepTargetMinimumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SweepTargetMinimumValue = value.GetValueOrDefault();
                this.SweepTargetMinimumValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermFrequency", Order=176, Form=XmlSchemaForm.Unqualified)]
        public short TermFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermFrequency
        {
            get
            {
                if (this.TermFrequencyValueSpecified)
                {
                    return this.TermFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermFrequencyValue = value.GetValueOrDefault();
                this.TermFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermPeriod", Order=177, Form=XmlSchemaForm.Unqualified)]
        public short TermPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermPeriod
        {
            get
            {
                if (this.TermPeriodValueSpecified)
                {
                    return this.TermPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermPeriodValue = value.GetValueOrDefault();
                this.TermPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=178, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnpaidFeeLastYear", Order=179, Form=XmlSchemaForm.Unqualified)]
        public decimal UnpaidFeeLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnpaidFeeLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnpaidFeeLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnpaidFeeLastYear
        {
            get
            {
                if (this.UnpaidFeeLastYearValueSpecified)
                {
                    return this.UnpaidFeeLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnpaidFeeLastYearValue = value.GetValueOrDefault();
                this.UnpaidFeeLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnpaidFeeYtd", Order=180, Form=XmlSchemaForm.Unqualified)]
        public decimal UnpaidFeeYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnpaidFeeYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnpaidFeeYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnpaidFeeYtd
        {
            get
            {
                if (this.UnpaidFeeYtdValueSpecified)
                {
                    return this.UnpaidFeeYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnpaidFeeYtdValue = value.GetValueOrDefault();
                this.UnpaidFeeYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=181, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=182, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=183, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=184, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=185, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=186, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=187, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=188, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareWarningCode_2> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=189, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareWarningCode_2> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ShareWarningExpiration_2> _warningExpiration;
        
        [XmlElementAttribute("WarningExpiration", Order=190, Form=XmlSchemaForm.Unqualified)]
        public Collection<ShareWarningExpiration_2> WarningExpiration
        {
            get
            {
                return _warningExpiration;
            }
            set
            {
                _warningExpiration = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningExpiration collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningExpirationSpecified
        {
            get
            {
                return ((this.WarningExpiration != null) 
                            && (this.WarningExpiration.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalCount", Order=191, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalCount
        {
            get
            {
                if (this.WithdrawalCountValueSpecified)
                {
                    return this.WithdrawalCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalCountValue = value.GetValueOrDefault();
                this.WithdrawalCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalFeeCount", Order=192, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalFeeCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalFeeCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalFeeCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalFeeCount
        {
            get
            {
                if (this.WithdrawalFeeCountValueSpecified)
                {
                    return this.WithdrawalFeeCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalFeeCountValue = value.GetValueOrDefault();
                this.WithdrawalFeeCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalFeeType", Order=193, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalFeeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalFeeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalFeeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalFeeType
        {
            get
            {
                if (this.WithdrawalFeeTypeValueSpecified)
                {
                    return this.WithdrawalFeeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalFeeTypeValue = value.GetValueOrDefault();
                this.WithdrawalFeeTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalLimit", Order=194, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalLimit
        {
            get
            {
                if (this.WithdrawalLimitValueSpecified)
                {
                    return this.WithdrawalLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalLimitValue = value.GetValueOrDefault();
                this.WithdrawalLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawnFromOpen", Order=195, Form=XmlSchemaForm.Unqualified)]
        public decimal WithdrawnFromOpenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawnFromOpen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawnFromOpenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WithdrawnFromOpen
        {
            get
            {
                if (this.WithdrawnFromOpenValueSpecified)
                {
                    return this.WithdrawnFromOpenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawnFromOpenValue = value.GetValueOrDefault();
                this.WithdrawnFromOpenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithholdingCode", Order=196, Form=XmlSchemaForm.Unqualified)]
        public short WithholdingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithholdingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithholdingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithholdingCode
        {
            get
            {
                if (this.WithholdingCodeValueSpecified)
                {
                    return this.WithholdingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithholdingCodeValue = value.GetValueOrDefault();
                this.WithholdingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithholdingLastYear", Order=197, Form=XmlSchemaForm.Unqualified)]
        public decimal WithholdingLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithholdingLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithholdingLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WithholdingLastYear
        {
            get
            {
                if (this.WithholdingLastYearValueSpecified)
                {
                    return this.WithholdingLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithholdingLastYearValue = value.GetValueOrDefault();
                this.WithholdingLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithholdingYtd", Order=198, Form=XmlSchemaForm.Unqualified)]
        public decimal WithholdingYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithholdingYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithholdingYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WithholdingYtd
        {
            get
            {
                if (this.WithholdingYtdValueSpecified)
                {
                    return this.WithholdingYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithholdingYtdValue = value.GetValueOrDefault();
                this.WithholdingYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrLastYear", Order=199, Form=XmlSchemaForm.Unqualified)]
        public short XfrLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> XfrLastYear
        {
            get
            {
                if (this.XfrLastYearValueSpecified)
                {
                    return this.XfrLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrLastYearValue = value.GetValueOrDefault();
                this.XfrLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrMonthToDate", Order=200, Form=XmlSchemaForm.Unqualified)]
        public short XfrMonthToDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrMonthToDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrMonthToDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> XfrMonthToDate
        {
            get
            {
                if (this.XfrMonthToDateValueSpecified)
                {
                    return this.XfrMonthToDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrMonthToDateValue = value.GetValueOrDefault();
                this.XfrMonthToDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrYtd", Order=201, Form=XmlSchemaForm.Unqualified)]
        public short XfrYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> XfrYtd
        {
            get
            {
                if (this.XfrYtdValueSpecified)
                {
                    return this.XfrYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrYtdValue = value.GetValueOrDefault();
                this.XfrYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("YearEndBalance", Order=202, Form=XmlSchemaForm.Unqualified)]
        public decimal YearEndBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the YearEndBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool YearEndBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> YearEndBalance
        {
            get
            {
                if (this.YearEndBalanceValueSpecified)
                {
                    return this.YearEndBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.YearEndBalanceValue = value.GetValueOrDefault();
                this.YearEndBalanceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=203, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=204)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
