//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CredRep", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class CredRep
    {
        
        [XmlElementAttribute("AccessPin", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccessPin { get; set; }
        
        [XmlElementAttribute("ActionText", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string ActionText { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActualPaymentAmt", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool ActualPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActualPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActualPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ActualPaymentAmt
        {
            get
            {
                if (this.ActualPaymentAmtValueSpecified)
                {
                    return this.ActualPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActualPaymentAmtValue = value.GetValueOrDefault();
                this.ActualPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AddrAnalysisOid", Order=3, Form=XmlSchemaForm.Unqualified)]
        public string AddrAnalysisOid { get; set; }
        
        [XmlElementAttribute("AddrVerifyAcct", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string AddrVerifyAcct { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepAlias> _alias;
        
        [XmlElementAttribute("Alias", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepAlias> Alias
        {
            get
            {
                return _alias;
            }
            set
            {
                _alias = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Alias collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AliasSpecified
        {
            get
            {
                return ((this.Alias != null) 
                            && (this.Alias.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CredRep" /> class.</para>
        /// </summary>
        public CredRep()
        {
            this._alias = new Collection<CredRepAlias>();
            this._bre2Relation = new Collection<CredRepBre2Relation>();
            this._chexTransId = new Collection<CredRepChexTransId>();
            this._dPower = new Collection<CredRepDPower>();
            this._decode = new Collection<CredRepDecode>();
            this._dep2Dependants = new Collection<CredRepDep2Dependants>();
            this._eqDecode = new Collection<CredRepEqDecode>();
            this._exp2Amount = new Collection<CredRepExp2Amount>();
            this._exp2Freq = new Collection<CredRepExp2Freq>();
            this._exp2OtherAmount = new Collection<CredRepExp2OtherAmount>();
            this._exp2OtherFreq = new Collection<CredRepExp2OtherFreq>();
            this._exp2ResidenceAmount = new Collection<CredRepExp2ResidenceAmount>();
            this._exp2ResidenceFreq = new Collection<CredRepExp2ResidenceFreq>();
            this._exp2ResidenceType = new Collection<CredRepExp2ResidenceType>();
            this._idNumber = new Collection<CredRepIdNumber>();
            this._idState = new Collection<CredRepIdState>();
            this._inc2OtherAmount = new Collection<CredRepInc2OtherAmount>();
            this._inc2OtherFreq = new Collection<CredRepInc2OtherFreq>();
            this._inc2SalaryAmount = new Collection<CredRepInc2SalaryAmount>();
            this._inc2SalaryFreq = new Collection<CredRepInc2SalaryFreq>();
            this._inc2TotalAmount = new Collection<CredRepInc2TotalAmount>();
            this._inc2TotalFreq = new Collection<CredRepInc2TotalFreq>();
            this._job2EmpPrevType = new Collection<CredRepJob2EmpPrevType>();
            this._job2EmpType = new Collection<CredRepJob2EmpType>();
            this._job2Months = new Collection<CredRepJob2Months>();
            this._job2PrevMonths = new Collection<CredRepJob2PrevMonths>();
            this._job2PrevYears = new Collection<CredRepJob2PrevYears>();
            this._job2Years = new Collection<CredRepJob2Years>();
            this._prdDecType10 = new Collection<CredRepPrdDecType10>();
            this._prdProductCode10 = new Collection<CredRepPrdProductCode10>();
            this._redFlagComments = new Collection<CredRepRedFlagComments>();
            this._refNumber3 = new Collection<CredRepRefNumber3>();
            this._res2Months = new Collection<CredRepRes2Months>();
            this._res2PrevMonths = new Collection<CredRepRes2PrevMonths>();
            this._res2PrevType = new Collection<CredRepRes2PrevType>();
            this._res2PrevYears = new Collection<CredRepRes2PrevYears>();
            this._res2Type = new Collection<CredRepRes2Type>();
            this._res2Years = new Collection<CredRepRes2Years>();
            this._riskModel = new Collection<CredRepRiskModel>();
            this._scoreModel = new Collection<CredRepScoreModel>();
            this._ssnSearch = new Collection<CredRepSsnSearch>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AppAlteredForged", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AppAlteredForgedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AppAlteredForged property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AppAlteredForgedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AppAlteredForged
        {
            get
            {
                if (this.AppAlteredForgedValueSpecified)
                {
                    return this.AppAlteredForgedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AppAlteredForgedValue = value.GetValueOrDefault();
                this.AppAlteredForgedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AppearanceInconsistent", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool AppearanceInconsistentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AppearanceInconsistent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AppearanceInconsistentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AppearanceInconsistent
        {
            get
            {
                if (this.AppearanceInconsistentValueSpecified)
                {
                    return this.AppearanceInconsistentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AppearanceInconsistentValue = value.GetValueOrDefault();
                this.AppearanceInconsistentValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ArmAlert", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string ArmAlert { get; set; }
        
        [XmlElementAttribute("AssociationCode", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string AssociationCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoCapCost", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoCapCostValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoCapCost property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoCapCostValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoCapCost
        {
            get
            {
                if (this.AutoCapCostValueSpecified)
                {
                    return this.AutoCapCostValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoCapCostValue = value.GetValueOrDefault();
                this.AutoCapCostValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoDownPayment", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoDownPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoDownPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoDownPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoDownPayment
        {
            get
            {
                if (this.AutoDownPaymentValueSpecified)
                {
                    return this.AutoDownPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoDownPaymentValue = value.GetValueOrDefault();
                this.AutoDownPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoLeaseTerm", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short AutoLeaseTermValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoLeaseTerm property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoLeaseTermValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AutoLeaseTerm
        {
            get
            {
                if (this.AutoLeaseTermValueSpecified)
                {
                    return this.AutoLeaseTermValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoLeaseTermValue = value.GetValueOrDefault();
                this.AutoLeaseTermValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AutoLoanType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public string AutoLoanType { get; set; }
        
        [XmlElementAttribute("AutoMake", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string AutoMake { get; set; }
        
        [XmlElementAttribute("AutoModel", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string AutoModel { get; set; }
        
        [XmlElementAttribute("AutoMoneyFactor", Order=16, Form=XmlSchemaForm.Unqualified)]
        public string AutoMoneyFactor { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoMsrp", Order=17, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoMsrpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoMsrp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoMsrpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoMsrp
        {
            get
            {
                if (this.AutoMsrpValueSpecified)
                {
                    return this.AutoMsrpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoMsrpValue = value.GetValueOrDefault();
                this.AutoMsrpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoRebate", Order=18, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoRebateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoRebate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoRebateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoRebate
        {
            get
            {
                if (this.AutoRebateValueSpecified)
                {
                    return this.AutoRebateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoRebateValue = value.GetValueOrDefault();
                this.AutoRebateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AutoResidualFactor", Order=19, Form=XmlSchemaForm.Unqualified)]
        public string AutoResidualFactor { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoResidualValue", Order=20, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoResidualValueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoResidualValue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoResidualValueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoResidualValue
        {
            get
            {
                if (this.AutoResidualValueValueSpecified)
                {
                    return this.AutoResidualValueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoResidualValueValue = value.GetValueOrDefault();
                this.AutoResidualValueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoSalePrice", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoSalePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoSalePrice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoSalePriceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoSalePrice
        {
            get
            {
                if (this.AutoSalePriceValueSpecified)
                {
                    return this.AutoSalePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoSalePriceValue = value.GetValueOrDefault();
                this.AutoSalePriceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AutoStatus", Order=22, Form=XmlSchemaForm.Unqualified)]
        public string AutoStatus { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoTradeAllowance", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoTradeAllowanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoTradeAllowance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoTradeAllowanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoTradeAllowance
        {
            get
            {
                if (this.AutoTradeAllowanceValueSpecified)
                {
                    return this.AutoTradeAllowanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoTradeAllowanceValue = value.GetValueOrDefault();
                this.AutoTradeAllowanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoTradeBalance", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal AutoTradeBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoTradeBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoTradeBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AutoTradeBalance
        {
            get
            {
                if (this.AutoTradeBalanceValueSpecified)
                {
                    return this.AutoTradeBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoTradeBalanceValue = value.GetValueOrDefault();
                this.AutoTradeBalanceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AutoYear", Order=25, Form=XmlSchemaForm.Unqualified)]
        public string AutoYear { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BirthDate", Order=26, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime BirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BirthDate
        {
            get
            {
                if (this.BirthDateValueSpecified)
                {
                    return this.BirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BirthDateValue = value.GetValueOrDefault();
                this.BirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepBre2Relation> _bre2Relation;
        
        [XmlElementAttribute("Bre2Relation", Order=28, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepBre2Relation> Bre2Relation
        {
            get
            {
                return _bre2Relation;
            }
            set
            {
                _bre2Relation = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bre2Relation collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Bre2RelationSpecified
        {
            get
            {
                return ((this.Bre2Relation != null) 
                            && (this.Bre2Relation.Count != 0));
            }
        }
        
        [XmlElementAttribute("BullseyeAcct", Order=29, Form=XmlSchemaForm.Unqualified)]
        public string BullseyeAcct { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Bureau", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short BureauValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bureau property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BureauValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Bureau
        {
            get
            {
                if (this.BureauValueSpecified)
                {
                    return this.BureauValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BureauValue = value.GetValueOrDefault();
                this.BureauValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BureauInfo", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string BureauInfo { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusMonthsCurrAddress", Order=32, Form=XmlSchemaForm.Unqualified)]
        public short BusMonthsCurrAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusMonthsCurrAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusMonthsCurrAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BusMonthsCurrAddress
        {
            get
            {
                if (this.BusMonthsCurrAddressValueSpecified)
                {
                    return this.BusMonthsCurrAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusMonthsCurrAddressValue = value.GetValueOrDefault();
                this.BusMonthsCurrAddressValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusYearsCurrAddress", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short BusYearsCurrAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusYearsCurrAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusYearsCurrAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BusYearsCurrAddress
        {
            get
            {
                if (this.BusYearsCurrAddressValueSpecified)
                {
                    return this.BusYearsCurrAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusYearsCurrAddressValue = value.GetValueOrDefault();
                this.BusYearsCurrAddressValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BusinessCity", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string BusinessCity { get; set; }
        
        [XmlElementAttribute("BusinessName", Order=35, Form=XmlSchemaForm.Unqualified)]
        public string BusinessName { get; set; }
        
        [XmlElementAttribute("BusinessPhone", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string BusinessPhone { get; set; }
        
        [XmlElementAttribute("BusinessPrevCity", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string BusinessPrevCity { get; set; }
        
        [XmlElementAttribute("BusinessPrevState", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string BusinessPrevState { get; set; }
        
        [XmlElementAttribute("BusinessPrevStreet", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string BusinessPrevStreet { get; set; }
        
        [XmlElementAttribute("BusinessPrevZip", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string BusinessPrevZip { get; set; }
        
        [XmlElementAttribute("BusinessState", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string BusinessState { get; set; }
        
        [XmlElementAttribute("BusinessStreet", Order=42, Form=XmlSchemaForm.Unqualified)]
        public string BusinessStreet { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusinessTypeCode", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short BusinessTypeCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusinessTypeCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusinessTypeCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BusinessTypeCode
        {
            get
            {
                if (this.BusinessTypeCodeValueSpecified)
                {
                    return this.BusinessTypeCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusinessTypeCodeValue = value.GetValueOrDefault();
                this.BusinessTypeCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BusinessZip", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string BusinessZip { get; set; }
        
        [XmlElementAttribute("ChexAcctNumber", Order=45, Form=XmlSchemaForm.Unqualified)]
        public string ChexAcctNumber { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepChexTransId> _chexTransId;
        
        [XmlElementAttribute("ChexTransId", Order=46, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepChexTransId> ChexTransId
        {
            get
            {
                return _chexTransId;
            }
            set
            {
                _chexTransId = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ChexTransId collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ChexTransIdSpecified
        {
            get
            {
                return ((this.ChexTransId != null) 
                            && (this.ChexTransId.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommercialCode", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short CommercialCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommercialCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommercialCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommercialCode
        {
            get
            {
                if (this.CommercialCodeValueSpecified)
                {
                    return this.CommercialCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommercialCodeValue = value.GetValueOrDefault();
                this.CommercialCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CompletionCode", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short CompletionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompletionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CompletionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CompletionCode
        {
            get
            {
                if (this.CompletionCodeValueSpecified)
                {
                    return this.CompletionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CompletionCodeValue = value.GetValueOrDefault();
                this.CompletionCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CompletionDate", Order=49, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CompletionDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompletionDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CompletionDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CompletionDate
        {
            get
            {
                if (this.CompletionDateValueSpecified)
                {
                    return this.CompletionDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CompletionDateValue = value.GetValueOrDefault();
                this.CompletionDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CompletionTime", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short CompletionTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompletionTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CompletionTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CompletionTime
        {
            get
            {
                if (this.CompletionTimeValueSpecified)
                {
                    return this.CompletionTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CompletionTimeValue = value.GetValueOrDefault();
                this.CompletionTimeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CredRepItemList", Order=51, Form=XmlSchemaForm.Unqualified)]
        public CredRepItemList CredRepItemList { get; set; }
        
        [XmlElementAttribute("CurrAddrCity", Order=52, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrCity { get; set; }
        
        [XmlElementAttribute("CurrAddrDirectional", Order=53, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrDirectional { get; set; }
        
        [XmlElementAttribute("CurrAddrHomePhone", Order=54, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrHomePhone { get; set; }
        
        [XmlElementAttribute("CurrAddrHouseNumber", Order=55, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrHouseNumber { get; set; }
        
        [XmlElementAttribute("CurrAddrQuadrant", Order=56, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrQuadrant { get; set; }
        
        [XmlElementAttribute("CurrAddrState", Order=57, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrState { get; set; }
        
        [XmlElementAttribute("CurrAddrStreetName", Order=58, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrStreetName { get; set; }
        
        [XmlElementAttribute("CurrAddrStreetType", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrStreetType { get; set; }
        
        [XmlElementAttribute("CurrAddrUnitNumber", Order=60, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrUnitNumber { get; set; }
        
        [XmlElementAttribute("CurrAddrUnitType", Order=61, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrUnitType { get; set; }
        
        [XmlElementAttribute("CurrAddrZipCode", Order=62, Form=XmlSchemaForm.Unqualified)]
        public string CurrAddrZipCode { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepDPower> _dPower;
        
        [XmlElementAttribute("DPower", Order=63, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepDPower> DPower
        {
            get
            {
                return _dPower;
            }
            set
            {
                _dPower = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DPower collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DPowerSpecified
        {
            get
            {
                return ((this.DPower != null) 
                            && (this.DPower.Count != 0));
            }
        }
        
        [XmlElementAttribute("DateHired", Order=64, Form=XmlSchemaForm.Unqualified)]
        public string DateHired { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DateOccurrence", Order=65, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DateOccurrenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateOccurrence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DateOccurrenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DateOccurrence
        {
            get
            {
                if (this.DateOccurrenceValueSpecified)
                {
                    return this.DateOccurrenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DateOccurrenceValue = value.GetValueOrDefault();
                this.DateOccurrenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DateOpened", Order=66, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DateOpenedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateOpened property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DateOpenedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DateOpened
        {
            get
            {
                if (this.DateOpenedValueSpecified)
                {
                    return this.DateOpenedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DateOpenedValue = value.GetValueOrDefault();
                this.DateOpenedValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DateSeparated", Order=67, Form=XmlSchemaForm.Unqualified)]
        public string DateSeparated { get; set; }
        
        [XmlElementAttribute("DeAppId", Order=68, Form=XmlSchemaForm.Unqualified)]
        public string DeAppId { get; set; }
        
        [XmlElementAttribute("DeProductCode", Order=69, Form=XmlSchemaForm.Unqualified)]
        public string DeProductCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeRateRequested", Order=70, Form=XmlSchemaForm.Unqualified)]
        public decimal DeRateRequestedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeRateRequested property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeRateRequestedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DeRateRequested
        {
            get
            {
                if (this.DeRateRequestedValueSpecified)
                {
                    return this.DeRateRequestedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeRateRequestedValue = value.GetValueOrDefault();
                this.DeRateRequestedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeVehAge", Order=71, Form=XmlSchemaForm.Unqualified)]
        public short DeVehAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeVehAge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeVehAgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DeVehAge
        {
            get
            {
                if (this.DeVehAgeValueSpecified)
                {
                    return this.DeVehAgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeVehAgeValue = value.GetValueOrDefault();
                this.DeVehAgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeVehCashPrice", Order=72, Form=XmlSchemaForm.Unqualified)]
        public decimal DeVehCashPriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeVehCashPrice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeVehCashPriceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DeVehCashPrice
        {
            get
            {
                if (this.DeVehCashPriceValueSpecified)
                {
                    return this.DeVehCashPriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeVehCashPriceValue = value.GetValueOrDefault();
                this.DeVehCashPriceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeVehDownPmt", Order=73, Form=XmlSchemaForm.Unqualified)]
        public decimal DeVehDownPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeVehDownPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeVehDownPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DeVehDownPmt
        {
            get
            {
                if (this.DeVehDownPmtValueSpecified)
                {
                    return this.DeVehDownPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeVehDownPmtValue = value.GetValueOrDefault();
                this.DeVehDownPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeVehNewPaymentAmt", Order=74, Form=XmlSchemaForm.Unqualified)]
        public decimal DeVehNewPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeVehNewPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeVehNewPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DeVehNewPaymentAmt
        {
            get
            {
                if (this.DeVehNewPaymentAmtValueSpecified)
                {
                    return this.DeVehNewPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeVehNewPaymentAmtValue = value.GetValueOrDefault();
                this.DeVehNewPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeVehOldPaymentAmt", Order=75, Form=XmlSchemaForm.Unqualified)]
        public decimal DeVehOldPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeVehOldPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeVehOldPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DeVehOldPaymentAmt
        {
            get
            {
                if (this.DeVehOldPaymentAmtValueSpecified)
                {
                    return this.DeVehOldPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeVehOldPaymentAmtValue = value.GetValueOrDefault();
                this.DeVehOldPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DeVehStatus", Order=76, Form=XmlSchemaForm.Unqualified)]
        public string DeVehStatus { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeVehTradeIn", Order=77, Form=XmlSchemaForm.Unqualified)]
        public decimal DeVehTradeInValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeVehTradeIn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeVehTradeInValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DeVehTradeIn
        {
            get
            {
                if (this.DeVehTradeInValueSpecified)
                {
                    return this.DeVehTradeInValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeVehTradeInValue = value.GetValueOrDefault();
                this.DeVehTradeInValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DecisionOverride", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string DecisionOverride { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepDecode> _decode;
        
        [XmlElementAttribute("Decode", Order=79, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepDecode> Decode
        {
            get
            {
                return _decode;
            }
            set
            {
                _decode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Decode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DecodeSpecified
        {
            get
            {
                return ((this.Decode != null) 
                            && (this.Decode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepDep2Dependants> _dep2Dependants;
        
        [XmlElementAttribute("Dep2Dependants", Order=80, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepDep2Dependants> Dep2Dependants
        {
            get
            {
                return _dep2Dependants;
            }
            set
            {
                _dep2Dependants = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Dep2Dependants collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Dep2DependantsSpecified
        {
            get
            {
                return ((this.Dep2Dependants != null) 
                            && (this.Dep2Dependants.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepositAmt", Order=81, Form=XmlSchemaForm.Unqualified)]
        public decimal DepositAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepositAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepositAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DepositAmt
        {
            get
            {
                if (this.DepositAmtValueSpecified)
                {
                    return this.DepositAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepositAmtValue = value.GetValueOrDefault();
                this.DepositAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DocAlteredForged", Order=82, Form=XmlSchemaForm.Unqualified)]
        public bool DocAlteredForgedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DocAlteredForged property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DocAlteredForgedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DocAlteredForged
        {
            get
            {
                if (this.DocAlteredForgedValueSpecified)
                {
                    return this.DocAlteredForgedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DocAlteredForgedValue = value.GetValueOrDefault();
                this.DocAlteredForgedValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("EcoaInqType", Order=83, Form=XmlSchemaForm.Unqualified)]
        public string EcoaInqType { get; set; }
        
        [XmlElementAttribute("EmpCity", Order=84, Form=XmlSchemaForm.Unqualified)]
        public string EmpCity { get; set; }
        
        [XmlElementAttribute("EmpCopy", Order=85, Form=XmlSchemaForm.Unqualified)]
        public string EmpCopy { get; set; }
        
        [XmlElementAttribute("EmpHouseNumber", Order=86, Form=XmlSchemaForm.Unqualified)]
        public string EmpHouseNumber { get; set; }
        
        [XmlElementAttribute("EmpName", Order=87, Form=XmlSchemaForm.Unqualified)]
        public string EmpName { get; set; }
        
        [XmlElementAttribute("EmpState", Order=88, Form=XmlSchemaForm.Unqualified)]
        public string EmpState { get; set; }
        
        [XmlElementAttribute("EmpStreet", Order=89, Form=XmlSchemaForm.Unqualified)]
        public string EmpStreet { get; set; }
        
        [XmlElementAttribute("EmpZipCode", Order=90, Form=XmlSchemaForm.Unqualified)]
        public string EmpZipCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EndEmpDate", Order=91, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EndEmpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndEmpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EndEmpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EndEmpDate
        {
            get
            {
                if (this.EndEmpDateValueSpecified)
                {
                    return this.EndEmpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EndEmpDateValue = value.GetValueOrDefault();
                this.EndEmpDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepEqDecode> _eqDecode;
        
        [XmlElementAttribute("EqDecode", Order=92, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepEqDecode> EqDecode
        {
            get
            {
                return _eqDecode;
            }
            set
            {
                _eqDecode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EqDecode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool EqDecodeSpecified
        {
            get
            {
                return ((this.EqDecode != null) 
                            && (this.EqDecode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2Amount> _exp2Amount;
        
        [XmlElementAttribute("Exp2Amount", Order=93, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2Amount> Exp2Amount
        {
            get
            {
                return _exp2Amount;
            }
            set
            {
                _exp2Amount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2Amount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2AmountSpecified
        {
            get
            {
                return ((this.Exp2Amount != null) 
                            && (this.Exp2Amount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2Freq> _exp2Freq;
        
        [XmlElementAttribute("Exp2Freq", Order=94, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2Freq> Exp2Freq
        {
            get
            {
                return _exp2Freq;
            }
            set
            {
                _exp2Freq = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2Freq collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2FreqSpecified
        {
            get
            {
                return ((this.Exp2Freq != null) 
                            && (this.Exp2Freq.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2OtherAmount> _exp2OtherAmount;
        
        [XmlElementAttribute("Exp2OtherAmount", Order=95, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2OtherAmount> Exp2OtherAmount
        {
            get
            {
                return _exp2OtherAmount;
            }
            set
            {
                _exp2OtherAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2OtherAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2OtherAmountSpecified
        {
            get
            {
                return ((this.Exp2OtherAmount != null) 
                            && (this.Exp2OtherAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2OtherFreq> _exp2OtherFreq;
        
        [XmlElementAttribute("Exp2OtherFreq", Order=96, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2OtherFreq> Exp2OtherFreq
        {
            get
            {
                return _exp2OtherFreq;
            }
            set
            {
                _exp2OtherFreq = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2OtherFreq collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2OtherFreqSpecified
        {
            get
            {
                return ((this.Exp2OtherFreq != null) 
                            && (this.Exp2OtherFreq.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2ResidenceAmount> _exp2ResidenceAmount;
        
        [XmlElementAttribute("Exp2ResidenceAmount", Order=97, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2ResidenceAmount> Exp2ResidenceAmount
        {
            get
            {
                return _exp2ResidenceAmount;
            }
            set
            {
                _exp2ResidenceAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2ResidenceAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2ResidenceAmountSpecified
        {
            get
            {
                return ((this.Exp2ResidenceAmount != null) 
                            && (this.Exp2ResidenceAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2ResidenceFreq> _exp2ResidenceFreq;
        
        [XmlElementAttribute("Exp2ResidenceFreq", Order=98, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2ResidenceFreq> Exp2ResidenceFreq
        {
            get
            {
                return _exp2ResidenceFreq;
            }
            set
            {
                _exp2ResidenceFreq = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2ResidenceFreq collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2ResidenceFreqSpecified
        {
            get
            {
                return ((this.Exp2ResidenceFreq != null) 
                            && (this.Exp2ResidenceFreq.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepExp2ResidenceType> _exp2ResidenceType;
        
        [XmlElementAttribute("Exp2ResidenceType", Order=99, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepExp2ResidenceType> Exp2ResidenceType
        {
            get
            {
                return _exp2ResidenceType;
            }
            set
            {
                _exp2ResidenceType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Exp2ResidenceType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Exp2ResidenceTypeSpecified
        {
            get
            {
                return ((this.Exp2ResidenceType != null) 
                            && (this.Exp2ResidenceType.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpandedHistory", Order=100, Form=XmlSchemaForm.Unqualified)]
        public bool ExpandedHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpandedHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpandedHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpandedHistory
        {
            get
            {
                if (this.ExpandedHistoryValueSpecified)
                {
                    return this.ExpandedHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpandedHistoryValue = value.GetValueOrDefault();
                this.ExpandedHistoryValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("FirstName", Order=101, Form=XmlSchemaForm.Unqualified)]
        public string FirstName { get; set; }
        
        [XmlElementAttribute("HawkIndicator", Order=102, Form=XmlSchemaForm.Unqualified)]
        public string HawkIndicator { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepIdNumber> _idNumber;
        
        [XmlElementAttribute("IdNumber", Order=103, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepIdNumber> IdNumber
        {
            get
            {
                return _idNumber;
            }
            set
            {
                _idNumber = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdNumber collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdNumberSpecified
        {
            get
            {
                return ((this.IdNumber != null) 
                            && (this.IdNumber.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepIdState> _idState;
        
        [XmlElementAttribute("IdState", Order=104, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepIdState> IdState
        {
            get
            {
                return _idState;
            }
            set
            {
                _idState = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdState collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdStateSpecified
        {
            get
            {
                return ((this.IdState != null) 
                            && (this.IdState.Count != 0));
            }
        }
        
        [XmlElementAttribute("IdVerificationOid", Order=105, Form=XmlSchemaForm.Unqualified)]
        public string IdVerificationOid { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepInc2OtherAmount> _inc2OtherAmount;
        
        [XmlElementAttribute("Inc2OtherAmount", Order=106, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepInc2OtherAmount> Inc2OtherAmount
        {
            get
            {
                return _inc2OtherAmount;
            }
            set
            {
                _inc2OtherAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inc2OtherAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Inc2OtherAmountSpecified
        {
            get
            {
                return ((this.Inc2OtherAmount != null) 
                            && (this.Inc2OtherAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepInc2OtherFreq> _inc2OtherFreq;
        
        [XmlElementAttribute("Inc2OtherFreq", Order=107, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepInc2OtherFreq> Inc2OtherFreq
        {
            get
            {
                return _inc2OtherFreq;
            }
            set
            {
                _inc2OtherFreq = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inc2OtherFreq collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Inc2OtherFreqSpecified
        {
            get
            {
                return ((this.Inc2OtherFreq != null) 
                            && (this.Inc2OtherFreq.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepInc2SalaryAmount> _inc2SalaryAmount;
        
        [XmlElementAttribute("Inc2SalaryAmount", Order=108, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepInc2SalaryAmount> Inc2SalaryAmount
        {
            get
            {
                return _inc2SalaryAmount;
            }
            set
            {
                _inc2SalaryAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inc2SalaryAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Inc2SalaryAmountSpecified
        {
            get
            {
                return ((this.Inc2SalaryAmount != null) 
                            && (this.Inc2SalaryAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepInc2SalaryFreq> _inc2SalaryFreq;
        
        [XmlElementAttribute("Inc2SalaryFreq", Order=109, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepInc2SalaryFreq> Inc2SalaryFreq
        {
            get
            {
                return _inc2SalaryFreq;
            }
            set
            {
                _inc2SalaryFreq = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inc2SalaryFreq collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Inc2SalaryFreqSpecified
        {
            get
            {
                return ((this.Inc2SalaryFreq != null) 
                            && (this.Inc2SalaryFreq.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepInc2TotalAmount> _inc2TotalAmount;
        
        [XmlElementAttribute("Inc2TotalAmount", Order=110, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepInc2TotalAmount> Inc2TotalAmount
        {
            get
            {
                return _inc2TotalAmount;
            }
            set
            {
                _inc2TotalAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inc2TotalAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Inc2TotalAmountSpecified
        {
            get
            {
                return ((this.Inc2TotalAmount != null) 
                            && (this.Inc2TotalAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepInc2TotalFreq> _inc2TotalFreq;
        
        [XmlElementAttribute("Inc2TotalFreq", Order=111, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepInc2TotalFreq> Inc2TotalFreq
        {
            get
            {
                return _inc2TotalFreq;
            }
            set
            {
                _inc2TotalFreq = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inc2TotalFreq collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Inc2TotalFreqSpecified
        {
            get
            {
                return ((this.Inc2TotalFreq != null) 
                            && (this.Inc2TotalFreq.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeIdVerification", Order=112, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeIdVerificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeIdVerification property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeIdVerificationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeIdVerification
        {
            get
            {
                if (this.IncludeIdVerificationValueSpecified)
                {
                    return this.IncludeIdVerificationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeIdVerificationValue = value.GetValueOrDefault();
                this.IncludeIdVerificationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeNewAccountChex", Order=113, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeNewAccountChexValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeNewAccountChex property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeNewAccountChexValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeNewAccountChex
        {
            get
            {
                if (this.IncludeNewAccountChexValueSpecified)
                {
                    return this.IncludeNewAccountChexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeNewAccountChexValue = value.GetValueOrDefault();
                this.IncludeNewAccountChexValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeOfac", Order=114, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeOfacValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeOfac property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeOfacValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeOfac
        {
            get
            {
                if (this.IncludeOfacValueSpecified)
                {
                    return this.IncludeOfacValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeOfacValue = value.GetValueOrDefault();
                this.IncludeOfacValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeQualiFile", Order=115, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeQualiFileValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeQualiFile property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeQualiFileValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeQualiFile
        {
            get
            {
                if (this.IncludeQualiFileValueSpecified)
                {
                    return this.IncludeQualiFileValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeQualiFileValue = value.GetValueOrDefault();
                this.IncludeQualiFileValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Income", Order=116, Form=XmlSchemaForm.Unqualified)]
        public decimal IncomeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Income property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncomeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Income
        {
            get
            {
                if (this.IncomeValueSpecified)
                {
                    return this.IncomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncomeValue = value.GetValueOrDefault();
                this.IncomeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InfoInconsistent", Order=117, Form=XmlSchemaForm.Unqualified)]
        public bool InfoInconsistentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InfoInconsistent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InfoInconsistentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InfoInconsistent
        {
            get
            {
                if (this.InfoInconsistentValueSpecified)
                {
                    return this.InfoInconsistentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InfoInconsistentValue = value.GetValueOrDefault();
                this.InfoInconsistentValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("InquiryId", Order=118, Form=XmlSchemaForm.Unqualified)]
        public string InquiryId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InquiryType", Order=119, Form=XmlSchemaForm.Unqualified)]
        public short InquiryTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InquiryType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InquiryTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InquiryType
        {
            get
            {
                if (this.InquiryTypeValueSpecified)
                {
                    return this.InquiryTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InquiryTypeValue = value.GetValueOrDefault();
                this.InquiryTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("InstantUpdateAcct", Order=120, Form=XmlSchemaForm.Unqualified)]
        public string InstantUpdateAcct { get; set; }
        
        [XmlElementAttribute("InternetPasswd", Order=121, Form=XmlSchemaForm.Unqualified)]
        public string InternetPasswd { get; set; }
        
        [XmlElementAttribute("InternetUserId", Order=122, Form=XmlSchemaForm.Unqualified)]
        public string InternetUserId { get; set; }
        
        [XmlElementAttribute("IpAddress", Order=123, Form=XmlSchemaForm.Unqualified)]
        public string IpAddress { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepJob2EmpPrevType> _job2EmpPrevType;
        
        [XmlElementAttribute("Job2EmpPrevType", Order=124, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepJob2EmpPrevType> Job2EmpPrevType
        {
            get
            {
                return _job2EmpPrevType;
            }
            set
            {
                _job2EmpPrevType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Job2EmpPrevType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Job2EmpPrevTypeSpecified
        {
            get
            {
                return ((this.Job2EmpPrevType != null) 
                            && (this.Job2EmpPrevType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepJob2EmpType> _job2EmpType;
        
        [XmlElementAttribute("Job2EmpType", Order=125, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepJob2EmpType> Job2EmpType
        {
            get
            {
                return _job2EmpType;
            }
            set
            {
                _job2EmpType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Job2EmpType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Job2EmpTypeSpecified
        {
            get
            {
                return ((this.Job2EmpType != null) 
                            && (this.Job2EmpType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepJob2Months> _job2Months;
        
        [XmlElementAttribute("Job2Months", Order=126, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepJob2Months> Job2Months
        {
            get
            {
                return _job2Months;
            }
            set
            {
                _job2Months = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Job2Months collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Job2MonthsSpecified
        {
            get
            {
                return ((this.Job2Months != null) 
                            && (this.Job2Months.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepJob2PrevMonths> _job2PrevMonths;
        
        [XmlElementAttribute("Job2PrevMonths", Order=127, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepJob2PrevMonths> Job2PrevMonths
        {
            get
            {
                return _job2PrevMonths;
            }
            set
            {
                _job2PrevMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Job2PrevMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Job2PrevMonthsSpecified
        {
            get
            {
                return ((this.Job2PrevMonths != null) 
                            && (this.Job2PrevMonths.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepJob2PrevYears> _job2PrevYears;
        
        [XmlElementAttribute("Job2PrevYears", Order=128, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepJob2PrevYears> Job2PrevYears
        {
            get
            {
                return _job2PrevYears;
            }
            set
            {
                _job2PrevYears = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Job2PrevYears collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Job2PrevYearsSpecified
        {
            get
            {
                return ((this.Job2PrevYears != null) 
                            && (this.Job2PrevYears.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepJob2Years> _job2Years;
        
        [XmlElementAttribute("Job2Years", Order=129, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepJob2Years> Job2Years
        {
            get
            {
                return _job2Years;
            }
            set
            {
                _job2Years = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Job2Years collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Job2YearsSpecified
        {
            get
            {
                return ((this.Job2Years != null) 
                            && (this.Job2Years.Count != 0));
            }
        }
        
        [XmlElementAttribute("JointFileAccess", Order=130, Form=XmlSchemaForm.Unqualified)]
        public string JointFileAccess { get; set; }
        
        [XmlElementAttribute("LastName", Order=131, Form=XmlSchemaForm.Unqualified)]
        public string LastName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanAmount", Order=132, Form=XmlSchemaForm.Unqualified)]
        public decimal LoanAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LoanAmount
        {
            get
            {
                if (this.LoanAmountValueSpecified)
                {
                    return this.LoanAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanAmountValue = value.GetValueOrDefault();
                this.LoanAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanAppId", Order=133, Form=XmlSchemaForm.Unqualified)]
        public string LoanAppId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanTerms", Order=134, Form=XmlSchemaForm.Unqualified)]
        public short LoanTermsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanTerms property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanTermsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LoanTerms
        {
            get
            {
                if (this.LoanTermsValueSpecified)
                {
                    return this.LoanTermsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanTermsValue = value.GetValueOrDefault();
                this.LoanTermsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanTypeChr", Order=135, Form=XmlSchemaForm.Unqualified)]
        public string LoanTypeChr { get; set; }
        
        [XmlElementAttribute("LoanUse", Order=136, Form=XmlSchemaForm.Unqualified)]
        public string LoanUse { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=137, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LookType", Order=138, Form=XmlSchemaForm.Unqualified)]
        public string LookType { get; set; }
        
        [XmlElementAttribute("LookupBM", Order=139, Form=XmlSchemaForm.Unqualified)]
        public string LookupBm { get; set; }
        
        [XmlElementAttribute("LookupBSM", Order=140, Form=XmlSchemaForm.Unqualified)]
        public string LookupBsm { get; set; }
        
        [XmlElementAttribute("LookupIndCode", Order=141, Form=XmlSchemaForm.Unqualified)]
        public string LookupIndCode { get; set; }
        
        [XmlElementAttribute("LookupMemberCode", Order=142, Form=XmlSchemaForm.Unqualified)]
        public string LookupMemberCode { get; set; }
        
        [XmlElementAttribute("LookupSegmentInd", Order=143, Form=XmlSchemaForm.Unqualified)]
        public string LookupSegmentInd { get; set; }
        
        [XmlElementAttribute("MemNumPlainDesc", Order=144, Form=XmlSchemaForm.Unqualified)]
        public string MemNumPlainDesc { get; set; }
        
        [XmlElementAttribute("MiddleName", Order=145, Form=XmlSchemaForm.Unqualified)]
        public string MiddleName { get; set; }
        
        [XmlElementAttribute("MonthsCountInq", Order=146, Form=XmlSchemaForm.Unqualified)]
        public string MonthsCountInq { get; set; }
        
        [XmlElementAttribute("MonthsCountMaxDq", Order=147, Form=XmlSchemaForm.Unqualified)]
        public string MonthsCountMaxDq { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MultipleFile", Order=148, Form=XmlSchemaForm.Unqualified)]
        public short MultipleFileValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MultipleFile property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MultipleFileValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MultipleFile
        {
            get
            {
                if (this.MultipleFileValueSpecified)
                {
                    return this.MultipleFileValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MultipleFileValue = value.GetValueOrDefault();
                this.MultipleFileValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NameSuffix", Order=149, Form=XmlSchemaForm.Unqualified)]
        public string NameSuffix { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewMnthlyPmt", Order=150, Form=XmlSchemaForm.Unqualified)]
        public decimal NewMnthlyPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewMnthlyPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewMnthlyPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NewMnthlyPmt
        {
            get
            {
                if (this.NewMnthlyPmtValueSpecified)
                {
                    return this.NewMnthlyPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewMnthlyPmtValue = value.GetValueOrDefault();
                this.NewMnthlyPmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Occupation", Order=151, Form=XmlSchemaForm.Unqualified)]
        public string Occupation { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OfacInquiry", Order=152, Form=XmlSchemaForm.Unqualified)]
        public bool OfacInquiryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OfacInquiry property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OfacInquiryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OfacInquiry
        {
            get
            {
                if (this.OfacInquiryValueSpecified)
                {
                    return this.OfacInquiryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OfacInquiryValue = value.GetValueOrDefault();
                this.OfacInquiryValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OfacOid", Order=153, Form=XmlSchemaForm.Unqualified)]
        public string OfacOid { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OldMnthlyPmt", Order=154, Form=XmlSchemaForm.Unqualified)]
        public decimal OldMnthlyPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OldMnthlyPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OldMnthlyPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OldMnthlyPmt
        {
            get
            {
                if (this.OldMnthlyPmtValueSpecified)
                {
                    return this.OldMnthlyPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OldMnthlyPmtValue = value.GetValueOrDefault();
                this.OldMnthlyPmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OperatorCode", Order=155, Form=XmlSchemaForm.Unqualified)]
        public string OperatorCode { get; set; }
        
        [XmlElementAttribute("OptFeatureCode", Order=156, Form=XmlSchemaForm.Unqualified)]
        public string OptFeatureCode { get; set; }
        
        [XmlElementAttribute("OriginalCreditor", Order=157, Form=XmlSchemaForm.Unqualified)]
        public string OriginalCreditor { get; set; }
        
        [XmlElementAttribute("OriginatingSym", Order=158, Form=XmlSchemaForm.Unqualified)]
        public string OriginatingSym { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Override", Order=159, Form=XmlSchemaForm.Unqualified)]
        public short OverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Override property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Override
        {
            get
            {
                if (this.OverrideValueSpecified)
                {
                    return this.OverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverrideValue = value.GetValueOrDefault();
                this.OverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverrideAmount", Order=160, Form=XmlSchemaForm.Unqualified)]
        public decimal OverrideAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverrideAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverrideAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverrideAmount
        {
            get
            {
                if (this.OverrideAmountValueSpecified)
                {
                    return this.OverrideAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverrideAmountValue = value.GetValueOrDefault();
                this.OverrideAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OverrideCat", Order=161, Form=XmlSchemaForm.Unqualified)]
        public string OverrideCat { get; set; }
        
        [XmlElementAttribute("OverrideText", Order=162, Form=XmlSchemaForm.Unqualified)]
        public string OverrideText { get; set; }
        
        [XmlElementAttribute("Password", Order=163, Form=XmlSchemaForm.Unqualified)]
        public string Password { get; set; }
        
        [XmlElementAttribute("PayBasis", Order=164, Form=XmlSchemaForm.Unqualified)]
        public string PayBasis { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PhoneAppend", Order=165, Form=XmlSchemaForm.Unqualified)]
        public short PhoneAppendValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PhoneAppend property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PhoneAppendValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PhoneAppend
        {
            get
            {
                if (this.PhoneAppendValueSpecified)
                {
                    return this.PhoneAppendValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhoneAppendValue = value.GetValueOrDefault();
                this.PhoneAppendValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepPrdDecType10> _prdDecType10;
        
        [XmlElementAttribute("PrdDecType10", Order=166, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepPrdDecType10> PrdDecType10
        {
            get
            {
                return _prdDecType10;
            }
            set
            {
                _prdDecType10 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PrdDecType10 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrdDecType10Specified
        {
            get
            {
                return ((this.PrdDecType10 != null) 
                            && (this.PrdDecType10.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepPrdProductCode10> _prdProductCode10;
        
        [XmlElementAttribute("PrdProductCode10", Order=167, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepPrdProductCode10> PrdProductCode10
        {
            get
            {
                return _prdProductCode10;
            }
            set
            {
                _prdProductCode10 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PrdProductCode10 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrdProductCode10Specified
        {
            get
            {
                return ((this.PrdProductCode10 != null) 
                            && (this.PrdProductCode10.Count != 0));
            }
        }
        
        [XmlElementAttribute("PrevAddr1City", Order=168, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1City { get; set; }
        
        [XmlElementAttribute("PrevAddr1Directional", Order=169, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1Directional { get; set; }
        
        [XmlElementAttribute("PrevAddr1HouseNumber", Order=170, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1HouseNumber { get; set; }
        
        [XmlElementAttribute("PrevAddr1Quadrant", Order=171, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1Quadrant { get; set; }
        
        [XmlElementAttribute("PrevAddr1State", Order=172, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1State { get; set; }
        
        [XmlElementAttribute("PrevAddr1StreetName", Order=173, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1StreetName { get; set; }
        
        [XmlElementAttribute("PrevAddr1StreetType", Order=174, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1StreetType { get; set; }
        
        [XmlElementAttribute("PrevAddr1UnitNumber", Order=175, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1UnitNumber { get; set; }
        
        [XmlElementAttribute("PrevAddr1UnitType", Order=176, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1UnitType { get; set; }
        
        [XmlElementAttribute("PrevAddr1ZipCode", Order=177, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr1ZipCode { get; set; }
        
        [XmlElementAttribute("PrevAddr2City", Order=178, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2City { get; set; }
        
        [XmlElementAttribute("PrevAddr2Directional", Order=179, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2Directional { get; set; }
        
        [XmlElementAttribute("PrevAddr2HouseNumber", Order=180, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2HouseNumber { get; set; }
        
        [XmlElementAttribute("PrevAddr2Quadrant", Order=181, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2Quadrant { get; set; }
        
        [XmlElementAttribute("PrevAddr2State", Order=182, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2State { get; set; }
        
        [XmlElementAttribute("PrevAddr2StreetName", Order=183, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2StreetName { get; set; }
        
        [XmlElementAttribute("PrevAddr2StreetType", Order=184, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2StreetType { get; set; }
        
        [XmlElementAttribute("PrevAddr2UnitNumber", Order=185, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2UnitNumber { get; set; }
        
        [XmlElementAttribute("PrevAddr2UnitType", Order=186, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2UnitType { get; set; }
        
        [XmlElementAttribute("PrevAddr2ZipCode", Order=187, Form=XmlSchemaForm.Unqualified)]
        public string PrevAddr2ZipCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("QueueAfterDate", Order=188, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime QueueAfterDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the QueueAfterDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QueueAfterDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> QueueAfterDate
        {
            get
            {
                if (this.QueueAfterDateValueSpecified)
                {
                    return this.QueueAfterDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QueueAfterDateValue = value.GetValueOrDefault();
                this.QueueAfterDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("QueueAfterTime", Order=189, Form=XmlSchemaForm.Unqualified)]
        public short QueueAfterTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the QueueAfterTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QueueAfterTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> QueueAfterTime
        {
            get
            {
                if (this.QueueAfterTimeValueSpecified)
                {
                    return this.QueueAfterTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QueueAfterTimeValue = value.GetValueOrDefault();
                this.QueueAfterTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("QueueCode", Order=190, Form=XmlSchemaForm.Unqualified)]
        public short QueueCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the QueueCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QueueCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> QueueCode
        {
            get
            {
                if (this.QueueCodeValueSpecified)
                {
                    return this.QueueCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QueueCodeValue = value.GetValueOrDefault();
                this.QueueCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecommendedActionTypeId", Order=191, Form=XmlSchemaForm.Unqualified)]
        public short RecommendedActionTypeIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecommendedActionTypeId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecommendedActionTypeIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RecommendedActionTypeId
        {
            get
            {
                if (this.RecommendedActionTypeIdValueSpecified)
                {
                    return this.RecommendedActionTypeIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecommendedActionTypeIdValue = value.GetValueOrDefault();
                this.RecommendedActionTypeIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("RecordText", Order=192, Form=XmlSchemaForm.Unqualified)]
        public string RecordText { get; set; }
        
        [XmlElementAttribute("RedFlagActionTypeId", Order=193, Form=XmlSchemaForm.Unqualified)]
        public string RedFlagActionTypeId { get; set; }
        
        [XmlElementAttribute("RedFlagAlertLogId", Order=194, Form=XmlSchemaForm.Unqualified)]
        public string RedFlagAlertLogId { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRedFlagComments> _redFlagComments;
        
        [XmlElementAttribute("RedFlagComments", Order=195, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRedFlagComments> RedFlagComments
        {
            get
            {
                return _redFlagComments;
            }
            set
            {
                _redFlagComments = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RedFlagComments collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RedFlagCommentsSpecified
        {
            get
            {
                return ((this.RedFlagComments != null) 
                            && (this.RedFlagComments.Count != 0));
            }
        }
        
        [XmlElementAttribute("RedFlagFactId", Order=196, Form=XmlSchemaForm.Unqualified)]
        public string RedFlagFactId { get; set; }
        
        [XmlElementAttribute("RedFlagStatus", Order=197, Form=XmlSchemaForm.Unqualified)]
        public string RedFlagStatus { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRefNumber3> _refNumber3;
        
        [XmlElementAttribute("RefNumber3", Order=198, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRefNumber3> RefNumber3
        {
            get
            {
                return _refNumber3;
            }
            set
            {
                _refNumber3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RefNumber3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RefNumber3Specified
        {
            get
            {
                return ((this.RefNumber3 != null) 
                            && (this.RefNumber3.Count != 0));
            }
        }
        
        [XmlElementAttribute("ReferenceId", Order=199, Form=XmlSchemaForm.Unqualified)]
        public string ReferenceId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RequestDate", Order=200, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RequestDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RequestDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RequestDate
        {
            get
            {
                if (this.RequestDateValueSpecified)
                {
                    return this.RequestDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RequestDateValue = value.GetValueOrDefault();
                this.RequestDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RequestNumber", Order=201, Form=XmlSchemaForm.Unqualified)]
        public int RequestNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RequestNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> RequestNumber
        {
            get
            {
                if (this.RequestNumberValueSpecified)
                {
                    return this.RequestNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RequestNumberValue = value.GetValueOrDefault();
                this.RequestNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RequestTime", Order=202, Form=XmlSchemaForm.Unqualified)]
        public short RequestTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RequestTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RequestTime
        {
            get
            {
                if (this.RequestTimeValueSpecified)
                {
                    return this.RequestTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RequestTimeValue = value.GetValueOrDefault();
                this.RequestTimeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRes2Months> _res2Months;
        
        [XmlElementAttribute("Res2Months", Order=203, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRes2Months> Res2Months
        {
            get
            {
                return _res2Months;
            }
            set
            {
                _res2Months = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Res2Months collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Res2MonthsSpecified
        {
            get
            {
                return ((this.Res2Months != null) 
                            && (this.Res2Months.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRes2PrevMonths> _res2PrevMonths;
        
        [XmlElementAttribute("Res2PrevMonths", Order=204, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRes2PrevMonths> Res2PrevMonths
        {
            get
            {
                return _res2PrevMonths;
            }
            set
            {
                _res2PrevMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Res2PrevMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Res2PrevMonthsSpecified
        {
            get
            {
                return ((this.Res2PrevMonths != null) 
                            && (this.Res2PrevMonths.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRes2PrevType> _res2PrevType;
        
        [XmlElementAttribute("Res2PrevType", Order=205, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRes2PrevType> Res2PrevType
        {
            get
            {
                return _res2PrevType;
            }
            set
            {
                _res2PrevType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Res2PrevType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Res2PrevTypeSpecified
        {
            get
            {
                return ((this.Res2PrevType != null) 
                            && (this.Res2PrevType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRes2PrevYears> _res2PrevYears;
        
        [XmlElementAttribute("Res2PrevYears", Order=206, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRes2PrevYears> Res2PrevYears
        {
            get
            {
                return _res2PrevYears;
            }
            set
            {
                _res2PrevYears = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Res2PrevYears collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Res2PrevYearsSpecified
        {
            get
            {
                return ((this.Res2PrevYears != null) 
                            && (this.Res2PrevYears.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRes2Type> _res2Type;
        
        [XmlElementAttribute("Res2Type", Order=207, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRes2Type> Res2Type
        {
            get
            {
                return _res2Type;
            }
            set
            {
                _res2Type = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Res2Type collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Res2TypeSpecified
        {
            get
            {
                return ((this.Res2Type != null) 
                            && (this.Res2Type.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRes2Years> _res2Years;
        
        [XmlElementAttribute("Res2Years", Order=208, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRes2Years> Res2Years
        {
            get
            {
                return _res2Years;
            }
            set
            {
                _res2Years = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Res2Years collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Res2YearsSpecified
        {
            get
            {
                return ((this.Res2Years != null) 
                            && (this.Res2Years.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ResponseFormat", Order=209, Form=XmlSchemaForm.Unqualified)]
        public short ResponseFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResponseFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ResponseFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ResponseFormat
        {
            get
            {
                if (this.ResponseFormatValueSpecified)
                {
                    return this.ResponseFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ResponseFormatValue = value.GetValueOrDefault();
                this.ResponseFormatValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepRiskModel> _riskModel;
        
        [XmlElementAttribute("RiskModel", Order=210, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepRiskModel> RiskModel
        {
            get
            {
                return _riskModel;
            }
            set
            {
                _riskModel = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RiskModel collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RiskModelSpecified
        {
            get
            {
                return ((this.RiskModel != null) 
                            && (this.RiskModel.Count != 0));
            }
        }
        
        [XmlElementAttribute("RtNumber", Order=211, Form=XmlSchemaForm.Unqualified)]
        public string RtNumber { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepScoreModel> _scoreModel;
        
        [XmlElementAttribute("ScoreModel", Order=212, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepScoreModel> ScoreModel
        {
            get
            {
                return _scoreModel;
            }
            set
            {
                _scoreModel = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ScoreModel collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ScoreModelSpecified
        {
            get
            {
                return ((this.ScoreModel != null) 
                            && (this.ScoreModel.Count != 0));
            }
        }
        
        [XmlElementAttribute("SecondaryName", Order=213, Form=XmlSchemaForm.Unqualified)]
        public string SecondaryName { get; set; }
        
        [XmlElementAttribute("SelectCheckCode", Order=214, Form=XmlSchemaForm.Unqualified)]
        public string SelectCheckCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServiceBureau", Order=215, Form=XmlSchemaForm.Unqualified)]
        public bool ServiceBureauValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceBureau property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServiceBureauValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServiceBureau
        {
            get
            {
                if (this.ServiceBureauValueSpecified)
                {
                    return this.ServiceBureauValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceBureauValue = value.GetValueOrDefault();
                this.ServiceBureauValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigInconsistent", Order=216, Form=XmlSchemaForm.Unqualified)]
        public bool SigInconsistentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigInconsistent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigInconsistentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigInconsistent
        {
            get
            {
                if (this.SigInconsistentValueSpecified)
                {
                    return this.SigInconsistentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigInconsistentValue = value.GetValueOrDefault();
                this.SigInconsistentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Source", Order=217, Form=XmlSchemaForm.Unqualified)]
        public short SourceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Source property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Source
        {
            get
            {
                if (this.SourceValueSpecified)
                {
                    return this.SourceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceValue = value.GetValueOrDefault();
                this.SourceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SpecialComment", Order=218, Form=XmlSchemaForm.Unqualified)]
        public string SpecialComment { get; set; }
        
        [XmlElementAttribute("SpouseAccessPin", Order=219, Form=XmlSchemaForm.Unqualified)]
        public string SpouseAccessPin { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SpouseBirthDate", Order=220, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime SpouseBirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpouseBirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SpouseBirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SpouseBirthDate
        {
            get
            {
                if (this.SpouseBirthDateValueSpecified)
                {
                    return this.SpouseBirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpouseBirthDateValue = value.GetValueOrDefault();
                this.SpouseBirthDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SpouseEmpCity", Order=221, Form=XmlSchemaForm.Unqualified)]
        public string SpouseEmpCity { get; set; }
        
        [XmlElementAttribute("SpouseEmpName", Order=222, Form=XmlSchemaForm.Unqualified)]
        public string SpouseEmpName { get; set; }
        
        [XmlElementAttribute("SpouseEmpState", Order=223, Form=XmlSchemaForm.Unqualified)]
        public string SpouseEmpState { get; set; }
        
        [XmlElementAttribute("SpouseEmpStreet", Order=224, Form=XmlSchemaForm.Unqualified)]
        public string SpouseEmpStreet { get; set; }
        
        [XmlElementAttribute("SpouseEmpZipCode", Order=225, Form=XmlSchemaForm.Unqualified)]
        public string SpouseEmpZipCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SpouseEndEmpDate", Order=226, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime SpouseEndEmpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpouseEndEmpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SpouseEndEmpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SpouseEndEmpDate
        {
            get
            {
                if (this.SpouseEndEmpDateValueSpecified)
                {
                    return this.SpouseEndEmpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpouseEndEmpDateValue = value.GetValueOrDefault();
                this.SpouseEndEmpDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SpouseFirst", Order=227, Form=XmlSchemaForm.Unqualified)]
        public string SpouseFirst { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SpouseIncome", Order=228, Form=XmlSchemaForm.Unqualified)]
        public decimal SpouseIncomeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpouseIncome property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SpouseIncomeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SpouseIncome
        {
            get
            {
                if (this.SpouseIncomeValueSpecified)
                {
                    return this.SpouseIncomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpouseIncomeValue = value.GetValueOrDefault();
                this.SpouseIncomeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SpouseLast", Order=229, Form=XmlSchemaForm.Unqualified)]
        public string SpouseLast { get; set; }
        
        [XmlElementAttribute("SpouseMiddle", Order=230, Form=XmlSchemaForm.Unqualified)]
        public string SpouseMiddle { get; set; }
        
        [XmlElementAttribute("SpouseOccupation", Order=231, Form=XmlSchemaForm.Unqualified)]
        public string SpouseOccupation { get; set; }
        
        [XmlElementAttribute("SpousePayBasis", Order=232, Form=XmlSchemaForm.Unqualified)]
        public string SpousePayBasis { get; set; }
        
        [XmlElementAttribute("SpouseSecondaryNm", Order=233, Form=XmlSchemaForm.Unqualified)]
        public string SpouseSecondaryNm { get; set; }
        
        [XmlElementAttribute("SpouseSsn", Order=234, Form=XmlSchemaForm.Unqualified)]
        public string SpouseSsn { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SpouseStartEmpDate", Order=235, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime SpouseStartEmpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpouseStartEmpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SpouseStartEmpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SpouseStartEmpDate
        {
            get
            {
                if (this.SpouseStartEmpDateValueSpecified)
                {
                    return this.SpouseStartEmpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpouseStartEmpDateValue = value.GetValueOrDefault();
                this.SpouseStartEmpDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SpouseSuffix", Order=236, Form=XmlSchemaForm.Unqualified)]
        public string SpouseSuffix { get; set; }
        
        [XmlElementAttribute("Ssn", Order=237, Form=XmlSchemaForm.Unqualified)]
        public string Ssn { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CredRepSsnSearch> _ssnSearch;
        
        [XmlElementAttribute("SsnSearch", Order=238, Form=XmlSchemaForm.Unqualified)]
        public Collection<CredRepSsnSearch> SsnSearch
        {
            get
            {
                return _ssnSearch;
            }
            set
            {
                _ssnSearch = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SsnSearch collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SsnSearchSpecified
        {
            get
            {
                return ((this.SsnSearch != null) 
                            && (this.SsnSearch.Count != 0));
            }
        }
        
        [XmlElementAttribute("SsnSearchFacs", Order=239, Form=XmlSchemaForm.Unqualified)]
        public string SsnSearchFacs { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StartEmpDate", Order=240, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime StartEmpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartEmpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StartEmpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> StartEmpDate
        {
            get
            {
                if (this.StartEmpDateValueSpecified)
                {
                    return this.StartEmpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StartEmpDateValue = value.GetValueOrDefault();
                this.StartEmpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatusCode", Order=241, Form=XmlSchemaForm.Unqualified)]
        public short StatusCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatusCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatusCode
        {
            get
            {
                if (this.StatusCodeValueSpecified)
                {
                    return this.StatusCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusCodeValue = value.GetValueOrDefault();
                this.StatusCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("StrategyType", Order=242, Form=XmlSchemaForm.Unqualified)]
        public string StrategyType { get; set; }
        
        [XmlElementAttribute("SubscriberCode", Order=243, Form=XmlSchemaForm.Unqualified)]
        public string SubscriberCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TestEnvironment", Order=244, Form=XmlSchemaForm.Unqualified)]
        public bool TestEnvironmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TestEnvironment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TestEnvironmentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TestEnvironment
        {
            get
            {
                if (this.TestEnvironmentValueSpecified)
                {
                    return this.TestEnvironmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TestEnvironmentValue = value.GetValueOrDefault();
                this.TestEnvironmentValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UseType", Order=245, Form=XmlSchemaForm.Unqualified)]
        public string UseType { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("User", Order=246, Form=XmlSchemaForm.Unqualified)]
        public short UserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the User property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> User
        {
            get
            {
                if (this.UserValueSpecified)
                {
                    return this.UserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserValue = value.GetValueOrDefault();
                this.UserValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserId", Order=247, Form=XmlSchemaForm.Unqualified)]
        public string UserId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Version", Order=248, Form=XmlSchemaForm.Unqualified)]
        public short VersionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Version property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VersionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Version
        {
            get
            {
                if (this.VersionValueSpecified)
                {
                    return this.VersionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VersionValue = value.GetValueOrDefault();
                this.VersionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=249, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=250)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
