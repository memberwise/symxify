//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\CashLetterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\CashLetterService\generated-output -n CashLetterService
namespace CashLetterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CashLetter", Namespace="http://www.symxchange.generated.symitar.com/crud/cashletter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class CashLetter
    {
        
        [XmlElementAttribute("AccountInformation", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccountInformation { get; set; }
        
        [XmlElementAttribute("AccountNumber", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string AccountNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustedTotalAmount", Order=2, Form=XmlSchemaForm.Unqualified)]
        public decimal AdjustedTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustedTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustedTotalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AdjustedTotalAmount
        {
            get
            {
                if (this.AdjustedTotalAmountValueSpecified)
                {
                    return this.AdjustedTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustedTotalAmountValue = value.GetValueOrDefault();
                this.AdjustedTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustmentAmount", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal AdjustmentAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustmentAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustmentAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AdjustmentAmount
        {
            get
            {
                if (this.AdjustmentAmountValueSpecified)
                {
                    return this.AdjustmentAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustmentAmountValue = value.GetValueOrDefault();
                this.AdjustmentAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustmentDate", Order=4, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime AdjustmentDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustmentDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustmentDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> AdjustmentDate
        {
            get
            {
                if (this.AdjustmentDateValueSpecified)
                {
                    return this.AdjustmentDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustmentDateValue = value.GetValueOrDefault();
                this.AdjustmentDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CashLetterAvailableAmount> _availableAmount;
        
        [XmlElementAttribute("AvailableAmount", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<CashLetterAvailableAmount> AvailableAmount
        {
            get
            {
                return _availableAmount;
            }
            set
            {
                _availableAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AvailableAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AvailableAmountSpecified
        {
            get
            {
                return ((this.AvailableAmount != null) 
                            && (this.AvailableAmount.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CashLetter" /> class.</para>
        /// </summary>
        public CashLetter()
        {
            this._availableAmount = new Collection<CashLetterAvailableAmount>();
            this._availableDate = new Collection<CashLetterAvailableDate>();
            this._dayDeferredAmount = new Collection<CashLetterDayDeferredAmount>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CashLetterAvailableDate> _availableDate;
        
        [XmlElementAttribute("AvailableDate", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<CashLetterAvailableDate> AvailableDate
        {
            get
            {
                return _availableDate;
            }
            set
            {
                _availableDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AvailableDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AvailableDateSpecified
        {
            get
            {
                return ((this.AvailableDate != null) 
                            && (this.AvailableDate.Count != 0));
            }
        }
        
        [XmlElementAttribute("BatchId", Order=7, Form=XmlSchemaForm.Unqualified)]
        public string BatchId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CalculatedAmount", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal CalculatedAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CalculatedAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CalculatedAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CalculatedAmount
        {
            get
            {
                if (this.CalculatedAmountValueSpecified)
                {
                    return this.CalculatedAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CalculatedAmountValue = value.GetValueOrDefault();
                this.CalculatedAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CalculatedDate", Order=10, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CalculatedDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CalculatedDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CalculatedDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CalculatedDate
        {
            get
            {
                if (this.CalculatedDateValueSpecified)
                {
                    return this.CalculatedDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CalculatedDateValue = value.GetValueOrDefault();
                this.CalculatedDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashLetterAmount", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal CashLetterAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashLetterAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashLetterAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CashLetterAmount
        {
            get
            {
                if (this.CashLetterAmountValueSpecified)
                {
                    return this.CashLetterAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashLetterAmountValue = value.GetValueOrDefault();
                this.CashLetterAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashLetterDate", Order=12, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CashLetterDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashLetterDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashLetterDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CashLetterDate
        {
            get
            {
                if (this.CashLetterDateValueSpecified)
                {
                    return this.CashLetterDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashLetterDateValue = value.GetValueOrDefault();
                this.CashLetterDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CorporateId", Order=13, Form=XmlSchemaForm.Unqualified)]
        public string CorporateId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreationDate", Order=14, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CreationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CreationDate
        {
            get
            {
                if (this.CreationDateValueSpecified)
                {
                    return this.CreationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreationDateValue = value.GetValueOrDefault();
                this.CreationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreationTime", Order=15, Form=XmlSchemaForm.Unqualified)]
        public short CreationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreationTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreationTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreationTime
        {
            get
            {
                if (this.CreationTimeValueSpecified)
                {
                    return this.CreationTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreationTimeValue = value.GetValueOrDefault();
                this.CreationTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditAmount", Order=16, Form=XmlSchemaForm.Unqualified)]
        public decimal CreditAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CreditAmount
        {
            get
            {
                if (this.CreditAmountValueSpecified)
                {
                    return this.CreditAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditAmountValue = value.GetValueOrDefault();
                this.CreditAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CashLetterDayDeferredAmount> _dayDeferredAmount;
        
        [XmlElementAttribute("DayDeferredAmount", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<CashLetterDayDeferredAmount> DayDeferredAmount
        {
            get
            {
                return _dayDeferredAmount;
            }
            set
            {
                _dayDeferredAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DayDeferredAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DayDeferredAmountSpecified
        {
            get
            {
                return ((this.DayDeferredAmount != null) 
                            && (this.DayDeferredAmount.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DebitAmount", Order=18, Form=XmlSchemaForm.Unqualified)]
        public decimal DebitAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DebitAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DebitAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DebitAmount
        {
            get
            {
                if (this.DebitAmountValueSpecified)
                {
                    return this.DebitAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DebitAmountValue = value.GetValueOrDefault();
                this.DebitAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DebitCredit", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short DebitCreditValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DebitCredit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DebitCreditValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DebitCredit
        {
            get
            {
                if (this.DebitCreditValueSpecified)
                {
                    return this.DebitCreditValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DebitCreditValue = value.GetValueOrDefault();
                this.DebitCreditValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepositDate", Order=20, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime DepositDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepositDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepositDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DepositDate
        {
            get
            {
                if (this.DepositDateValueSpecified)
                {
                    return this.DepositDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepositDateValue = value.GetValueOrDefault();
                this.DepositDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FedCode", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short FedCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FedCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FedCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FedCode
        {
            get
            {
                if (this.FedCodeValueSpecified)
                {
                    return this.FedCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FedCodeValue = value.GetValueOrDefault();
                this.FedCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("FedReference", Order=22, Form=XmlSchemaForm.Unqualified)]
        public string FedReference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequence", Order=23, Form=XmlSchemaForm.Unqualified)]
        public int GlobalSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlobalSequence
        {
            get
            {
                if (this.GlobalSequenceValueSpecified)
                {
                    return this.GlobalSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceValue = value.GetValueOrDefault();
                this.GlobalSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequenceDate", Order=24, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime GlobalSequenceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequenceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> GlobalSequenceDate
        {
            get
            {
                if (this.GlobalSequenceDateValueSpecified)
                {
                    return this.GlobalSequenceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceDateValue = value.GetValueOrDefault();
                this.GlobalSequenceDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImmediateAmount", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal ImmediateAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImmediateAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImmediateAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ImmediateAmount
        {
            get
            {
                if (this.ImmediateAmountValueSpecified)
                {
                    return this.ImmediateAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImmediateAmountValue = value.GetValueOrDefault();
                this.ImmediateAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItemCount", Order=26, Form=XmlSchemaForm.Unqualified)]
        public int ItemCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItemCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItemCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ItemCount
        {
            get
            {
                if (this.ItemCountValueSpecified)
                {
                    return this.ItemCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItemCountValue = value.GetValueOrDefault();
                this.ItemCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MemberId", Order=27, Form=XmlSchemaForm.Unqualified)]
        public string MemberId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalAmount", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal OriginalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OriginalAmount
        {
            get
            {
                if (this.OriginalAmountValueSpecified)
                {
                    return this.OriginalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalAmountValue = value.GetValueOrDefault();
                this.OriginalAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalDepositDate", Order=29, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime OriginalDepositDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalDepositDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalDepositDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> OriginalDepositDate
        {
            get
            {
                if (this.OriginalDepositDateValueSpecified)
                {
                    return this.OriginalDepositDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalDepositDateValue = value.GetValueOrDefault();
                this.OriginalDepositDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OriginatorRT", Order=30, Form=XmlSchemaForm.Unqualified)]
        public string OriginatorRt { get; set; }
        
        [XmlElementAttribute("Payee", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string Payee { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PriorAmount", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal PriorAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PriorAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PriorAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PriorAmount
        {
            get
            {
                if (this.PriorAmountValueSpecified)
                {
                    return this.PriorAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PriorAmountValue = value.GetValueOrDefault();
                this.PriorAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ProcessDate", Order=33, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ProcessDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProcessDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProcessDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ProcessDate
        {
            get
            {
                if (this.ProcessDateValueSpecified)
                {
                    return this.ProcessDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProcessDateValue = value.GetValueOrDefault();
                this.ProcessDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ResubmitAmount", Order=35, Form=XmlSchemaForm.Unqualified)]
        public decimal ResubmitAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResubmitAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ResubmitAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ResubmitAmount
        {
            get
            {
                if (this.ResubmitAmountValueSpecified)
                {
                    return this.ResubmitAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ResubmitAmountValue = value.GetValueOrDefault();
                this.ResubmitAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ReturnReason", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string ReturnReason { get; set; }
        
        [XmlElementAttribute("ReturnType", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string ReturnType { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReversalDate", Order=38, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ReversalDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReversalDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReversalDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ReversalDate
        {
            get
            {
                if (this.ReversalDateValueSpecified)
                {
                    return this.ReversalDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReversalDateValue = value.GetValueOrDefault();
                this.ReversalDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReversalFlag", Order=39, Form=XmlSchemaForm.Unqualified)]
        public short ReversalFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReversalFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReversalFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReversalFlag
        {
            get
            {
                if (this.ReversalFlagValueSpecified)
                {
                    return this.ReversalFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReversalFlagValue = value.GetValueOrDefault();
                this.ReversalFlagValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ShareId", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string ShareId { get; set; }
        
        [XmlElementAttribute("StatementCode", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string StatementCode { get; set; }
        
        [XmlElementAttribute("ThirdPartyInformation", Order=42, Form=XmlSchemaForm.Unqualified)]
        public string ThirdPartyInformation { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UsCentralRT", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string UsCentralRt { get; set; }
        
        [XmlElementAttribute("Version_1", Order=45, Form=XmlSchemaForm.Unqualified)]
        public CashLetterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=46)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
