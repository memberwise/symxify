//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("DivTable", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("DivTable", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(DivTableFields_2))]
    public partial class DivTable_2
    {
        
        [XmlIgnoreAttribute()]
        private Collection<DivTableBalanceCutoff_2> _balanceCutoff;
        
        [XmlElementAttribute("BalanceCutoff", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<DivTableBalanceCutoff_2> BalanceCutoff
        {
            get
            {
                return _balanceCutoff;
            }
            set
            {
                _balanceCutoff = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BalanceCutoff collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BalanceCutoffSpecified
        {
            get
            {
                return ((this.BalanceCutoff != null) 
                            && (this.BalanceCutoff.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DivTable_2" /> class.</para>
        /// </summary>
        public DivTable_2()
        {
            this._balanceCutoff = new Collection<DivTableBalanceCutoff_2>();
            this._lrbGraceDays = new Collection<DivTableLrbGraceDays_2>();
            this._marginRate = new Collection<DivTableMarginRate_2>();
            this._rate = new Collection<DivTableRate_2>();
            this._relCodeList = new Collection<DivTableRelCodeList_2>();
            this._table = new Collection<DivTableTable_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollectedBalMaxHoldDays", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short CollectedBalMaxHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollectedBalMaxHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollectedBalMaxHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CollectedBalMaxHoldDays
        {
            get
            {
                if (this.CollectedBalMaxHoldDaysValueSpecified)
                {
                    return this.CollectedBalMaxHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollectedBalMaxHoldDaysValue = value.GetValueOrDefault();
                this.CollectedBalMaxHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Compounding", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short CompoundingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Compounding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CompoundingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Compounding
        {
            get
            {
                if (this.CompoundingValueSpecified)
                {
                    return this.CompoundingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CompoundingValue = value.GetValueOrDefault();
                this.CompoundingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DefinedCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short DefinedCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefinedCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DefinedCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DefinedCode
        {
            get
            {
                if (this.DefinedCodeValueSpecified)
                {
                    return this.DefinedCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DefinedCodeValue = value.GetValueOrDefault();
                this.DefinedCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivIndexTableOption", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short DivIndexTableOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivIndexTableOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivIndexTableOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivIndexTableOption
        {
            get
            {
                if (this.DivIndexTableOptionValueSpecified)
                {
                    return this.DivIndexTableOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivIndexTableOptionValue = value.GetValueOrDefault();
                this.DivIndexTableOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FillInRateMethod", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short FillInRateMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FillInRateMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FillInRateMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FillInRateMethod
        {
            get
            {
                if (this.FillInRateMethodValueSpecified)
                {
                    return this.FillInRateMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FillInRateMethodValue = value.GetValueOrDefault();
                this.FillInRateMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Frequency", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short FrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Frequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Frequency
        {
            get
            {
                if (this.FrequencyValueSpecified)
                {
                    return this.FrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrequencyValue = value.GetValueOrDefault();
                this.FrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Increment", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal IncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Increment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Increment
        {
            get
            {
                if (this.IncrementValueSpecified)
                {
                    return this.IncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncrementValue = value.GetValueOrDefault();
                this.IncrementValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DivTableLrbGraceDays_2> _lrbGraceDays;
        
        [XmlElementAttribute("LrbGraceDays", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<DivTableLrbGraceDays_2> LrbGraceDays
        {
            get
            {
                return _lrbGraceDays;
            }
            set
            {
                _lrbGraceDays = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LrbGraceDays collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LrbGraceDaysSpecified
        {
            get
            {
                return ((this.LrbGraceDays != null) 
                            && (this.LrbGraceDays.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DivTableMarginRate_2> _marginRate;
        
        [XmlElementAttribute("MarginRate", Order=9, Form=XmlSchemaForm.Unqualified)]
        public Collection<DivTableMarginRate_2> MarginRate
        {
            get
            {
                return _marginRate;
            }
            set
            {
                _marginRate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MarginRate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MarginRateSpecified
        {
            get
            {
                return ((this.MarginRate != null) 
                            && (this.MarginRate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Method", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short MethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Method property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Method
        {
            get
            {
                if (this.MethodValueSpecified)
                {
                    return this.MethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MethodValue = value.GetValueOrDefault();
                this.MethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinDailyBalance", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal MinDailyBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDailyBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinDailyBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinDailyBalance
        {
            get
            {
                if (this.MinDailyBalanceValueSpecified)
                {
                    return this.MinDailyBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDailyBalanceValue = value.GetValueOrDefault();
                this.MinDailyBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumBalance", Order=12, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumBalance
        {
            get
            {
                if (this.MinimumBalanceValueSpecified)
                {
                    return this.MinimumBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumBalanceValue = value.GetValueOrDefault();
                this.MinimumBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewAccountCode", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short NewAccountCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewAccountCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewAccountCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewAccountCode
        {
            get
            {
                if (this.NewAccountCodeValueSpecified)
                {
                    return this.NewAccountCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewAccountCodeValue = value.GetValueOrDefault();
                this.NewAccountCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short PaymentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentCode
        {
            get
            {
                if (this.PaymentCodeValueSpecified)
                {
                    return this.PaymentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCodeValue = value.GetValueOrDefault();
                this.PaymentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostAverageBalanceComment", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool PostAverageBalanceCommentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostAverageBalanceComment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostAverageBalanceCommentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PostAverageBalanceComment
        {
            get
            {
                if (this.PostAverageBalanceCommentValueSpecified)
                {
                    return this.PostAverageBalanceCommentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostAverageBalanceCommentValue = value.GetValueOrDefault();
                this.PostAverageBalanceCommentValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DivTableRate_2> _rate;
        
        [XmlElementAttribute("Rate", Order=16, Form=XmlSchemaForm.Unqualified)]
        public Collection<DivTableRate_2> Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Rate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RateSpecified
        {
            get
            {
                return ((this.Rate != null) 
                            && (this.Rate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RateSelection", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short RateSelectionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RateSelection property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RateSelectionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RateSelection
        {
            get
            {
                if (this.RateSelectionValueSpecified)
                {
                    return this.RateSelectionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RateSelectionValue = value.GetValueOrDefault();
                this.RateSelectionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DivTableRelCodeList_2> _relCodeList;
        
        [XmlElementAttribute("RelCodeList", Order=18, Form=XmlSchemaForm.Unqualified)]
        public Collection<DivTableRelCodeList_2> RelCodeList
        {
            get
            {
                return _relCodeList;
            }
            set
            {
                _relCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCodeListSpecified
        {
            get
            {
                return ((this.RelCodeList != null) 
                            && (this.RelCodeList.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScheduleType", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short ScheduleTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScheduleType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScheduleTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ScheduleType
        {
            get
            {
                if (this.ScheduleTypeValueSpecified)
                {
                    return this.ScheduleTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScheduleTypeValue = value.GetValueOrDefault();
                this.ScheduleTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DivTableTable_2> _table;
        
        [XmlElementAttribute("Table", Order=20, Form=XmlSchemaForm.Unqualified)]
        public Collection<DivTableTable_2> Table
        {
            get
            {
                return _table;
            }
            set
            {
                _table = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Table collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TableSpecified
        {
            get
            {
                return ((this.Table != null) 
                            && (this.Table.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=22, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=23)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
