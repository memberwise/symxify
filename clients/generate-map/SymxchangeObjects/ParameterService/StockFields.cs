//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("StockFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("StockFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class StockFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeCollateralPercent", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool TypeCollateralPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeCollateralPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeCollateralPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TypeCollateralPercent
        {
            get
            {
                if (this.TypeCollateralPercentValueSpecified)
                {
                    return this.TypeCollateralPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeCollateralPercentValue = value.GetValueOrDefault();
                this.TypeCollateralPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeDecimalPrice", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool TypeDecimalPriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeDecimalPrice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeDecimalPriceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TypeDecimalPrice
        {
            get
            {
                if (this.TypeDecimalPriceValueSpecified)
                {
                    return this.TypeDecimalPriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeDecimalPriceValue = value.GetValueOrDefault();
                this.TypeDecimalPriceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeDescription", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool TypeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TypeDescription
        {
            get
            {
                if (this.TypeDescriptionValueSpecified)
                {
                    return this.TypeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeDescriptionValue = value.GetValueOrDefault();
                this.TypeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _typeFractionPrice;
        
        [XmlElementAttribute("TypeFractionPrice", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TypeFractionPrice
        {
            get
            {
                return _typeFractionPrice;
            }
            set
            {
                _typeFractionPrice = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TypeFractionPrice collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TypeFractionPriceSpecified
        {
            get
            {
                return ((this.TypeFractionPrice != null) 
                            && (this.TypeFractionPrice.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StockFields" /> class.</para>
        /// </summary>
        public StockFields()
        {
            this._typeFractionPrice = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeStockDollars", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool TypeStockDollarsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeStockDollars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeStockDollarsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TypeStockDollars
        {
            get
            {
                if (this.TypeStockDollarsValueSpecified)
                {
                    return this.TypeStockDollarsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeStockDollarsValue = value.GetValueOrDefault();
                this.TypeStockDollarsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeStockEighths", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool TypeStockEighthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeStockEighths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeStockEighthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TypeStockEighths
        {
            get
            {
                if (this.TypeStockEighthsValueSpecified)
                {
                    return this.TypeStockEighthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeStockEighthsValue = value.GetValueOrDefault();
                this.TypeStockEighthsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeTickerSymbol", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool TypeTickerSymbolValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeTickerSymbol property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeTickerSymbolValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TypeTickerSymbol
        {
            get
            {
                if (this.TypeTickerSymbolValueSpecified)
                {
                    return this.TypeTickerSymbolValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeTickerSymbolValue = value.GetValueOrDefault();
                this.TypeTickerSymbolValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=8, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=9)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
