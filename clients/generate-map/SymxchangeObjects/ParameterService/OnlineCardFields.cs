//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("OnlineCardFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("OnlineCardFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class OnlineCardFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivateOnFirstPinTran", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool ActivateOnFirstPinTranValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivateOnFirstPinTran property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivateOnFirstPinTranValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ActivateOnFirstPinTran
        {
            get
            {
                if (this.ActivateOnFirstPinTranValueSpecified)
                {
                    return this.ActivateOnFirstPinTranValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivateOnFirstPinTranValue = value.GetValueOrDefault();
                this.ActivateOnFirstPinTranValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AggregateLimitingCardTypes", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AggregateLimitingCardTypesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AggregateLimitingCardTypes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AggregateLimitingCardTypesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AggregateLimitingCardTypes
        {
            get
            {
                if (this.AggregateLimitingCardTypesValueSpecified)
                {
                    return this.AggregateLimitingCardTypesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AggregateLimitingCardTypesValue = value.GetValueOrDefault();
                this.AggregateLimitingCardTypesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateDraftAccount", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AlternateDraftAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateDraftAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateDraftAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AlternateDraftAccount
        {
            get
            {
                if (this.AlternateDraftAccountValueSpecified)
                {
                    return this.AlternateDraftAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateDraftAccountValue = value.GetValueOrDefault();
                this.AlternateDraftAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlternateFundingAccount", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AlternateFundingAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlternateFundingAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlternateFundingAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AlternateFundingAccount
        {
            get
            {
                if (this.AlternateFundingAccountValueSpecified)
                {
                    return this.AlternateFundingAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlternateFundingAccountValue = value.GetValueOrDefault();
                this.AlternateFundingAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AlwaysPosttoFundingList", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool AlwaysPosttoFundingListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AlwaysPosttoFundingList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AlwaysPosttoFundingListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AlwaysPosttoFundingList
        {
            get
            {
                if (this.AlwaysPosttoFundingListValueSpecified)
                {
                    return this.AlwaysPosttoFundingListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlwaysPosttoFundingListValue = value.GetValueOrDefault();
                this.AlwaysPosttoFundingListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmAmountLimitFields", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool AtmAmountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmAmountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmAmountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmAmountLimitFields
        {
            get
            {
                if (this.AtmAmountLimitFieldsValueSpecified)
                {
                    return this.AtmAmountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmAmountLimitFieldsValue = value.GetValueOrDefault();
                this.AtmAmountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmAmountUsedFields", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AtmAmountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmAmountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmAmountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmAmountUsedFields
        {
            get
            {
                if (this.AtmAmountUsedFieldsValueSpecified)
                {
                    return this.AtmAmountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmAmountUsedFieldsValue = value.GetValueOrDefault();
                this.AtmAmountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmCountLimitFields", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool AtmCountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmCountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmCountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmCountLimitFields
        {
            get
            {
                if (this.AtmCountLimitFieldsValueSpecified)
                {
                    return this.AtmCountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmCountLimitFieldsValue = value.GetValueOrDefault();
                this.AtmCountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmCountUsedFields", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool AtmCountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmCountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmCountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmCountUsedFields
        {
            get
            {
                if (this.AtmCountUsedFieldsValueSpecified)
                {
                    return this.AtmCountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmCountUsedFieldsValue = value.GetValueOrDefault();
                this.AtmCountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmDepAmtLimitPerCard", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool AtmDepAmtLimitPerCardValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmDepAmtLimitPerCard property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmDepAmtLimitPerCardValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmDepAmtLimitPerCard
        {
            get
            {
                if (this.AtmDepAmtLimitPerCardValueSpecified)
                {
                    return this.AtmDepAmtLimitPerCardValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmDepAmtLimitPerCardValue = value.GetValueOrDefault();
                this.AtmDepAmtLimitPerCardValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmDepositCountLimiting", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool AtmDepositCountLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmDepositCountLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmDepositCountLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmDepositCountLimiting
        {
            get
            {
                if (this.AtmDepositCountLimitingValueSpecified)
                {
                    return this.AtmDepositCountLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmDepositCountLimitingValue = value.GetValueOrDefault();
                this.AtmDepositCountLimitingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPaymentCategorization", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool BillPaymentCategorizationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPaymentCategorization property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPaymentCategorizationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPaymentCategorization
        {
            get
            {
                if (this.BillPaymentCategorizationValueSpecified)
                {
                    return this.BillPaymentCategorizationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPaymentCategorizationValue = value.GetValueOrDefault();
                this.BillPaymentCategorizationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Bin", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool BinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Bin
        {
            get
            {
                if (this.BinValueSpecified)
                {
                    return this.BinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BinValue = value.GetValueOrDefault();
                this.BinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BinType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool BinTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BinType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BinTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BinType
        {
            get
            {
                if (this.BinTypeValueSpecified)
                {
                    return this.BinTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BinTypeValue = value.GetValueOrDefault();
                this.BinTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BpAmountLimitFields", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool BpAmountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BpAmountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BpAmountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BpAmountLimitFields
        {
            get
            {
                if (this.BpAmountLimitFieldsValueSpecified)
                {
                    return this.BpAmountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BpAmountLimitFieldsValue = value.GetValueOrDefault();
                this.BpAmountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BpAmountUsedFields", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool BpAmountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BpAmountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BpAmountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BpAmountUsedFields
        {
            get
            {
                if (this.BpAmountUsedFieldsValueSpecified)
                {
                    return this.BpAmountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BpAmountUsedFieldsValue = value.GetValueOrDefault();
                this.BpAmountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BpCountLimitFields", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool BpCountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BpCountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BpCountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BpCountLimitFields
        {
            get
            {
                if (this.BpCountLimitFieldsValueSpecified)
                {
                    return this.BpCountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BpCountLimitFieldsValue = value.GetValueOrDefault();
                this.BpCountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BpCountUsedFields", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool BpCountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BpCountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BpCountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BpCountUsedFields
        {
            get
            {
                if (this.BpCountUsedFieldsValueSpecified)
                {
                    return this.BpCountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BpCountUsedFieldsValue = value.GetValueOrDefault();
                this.BpCountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardLimitingOption", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool CardLimitingOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardLimitingOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardLimitingOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardLimitingOption
        {
            get
            {
                if (this.CardLimitingOptionValueSpecified)
                {
                    return this.CardLimitingOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardLimitingOptionValue = value.GetValueOrDefault();
                this.CardLimitingOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardNumberLength", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool CardNumberLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardNumberLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardNumberLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardNumberLength
        {
            get
            {
                if (this.CardNumberLengthValueSpecified)
                {
                    return this.CardNumberLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardNumberLengthValue = value.GetValueOrDefault();
                this.CardNumberLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardNumberinTranHistory", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool CardNumberinTranHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardNumberinTranHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardNumberinTranHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardNumberinTranHistory
        {
            get
            {
                if (this.CardNumberinTranHistoryValueSpecified)
                {
                    return this.CardNumberinTranHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardNumberinTranHistoryValue = value.GetValueOrDefault();
                this.CardNumberinTranHistoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardType", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool CardTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardType
        {
            get
            {
                if (this.CardTypeValueSpecified)
                {
                    return this.CardTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardTypeValue = value.GetValueOrDefault();
                this.CardTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeMasterCardCcaFee", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool ChargeMasterCardCcaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeMasterCardCcaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeMasterCardCcaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargeMasterCardCcaFee
        {
            get
            {
                if (this.ChargeMasterCardCcaFeeValueSpecified)
                {
                    return this.ChargeMasterCardCcaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeMasterCardCcaFeeValue = value.GetValueOrDefault();
                this.ChargeMasterCardCcaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeMasterCardIcaFee", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool ChargeMasterCardIcaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeMasterCardIcaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeMasterCardIcaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargeMasterCardIcaFee
        {
            get
            {
                if (this.ChargeMasterCardIcaFeeValueSpecified)
                {
                    return this.ChargeMasterCardIcaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeMasterCardIcaFeeValue = value.GetValueOrDefault();
                this.ChargeMasterCardIcaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckActivationDate", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool CheckActivationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckActivationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckActivationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckActivationDate
        {
            get
            {
                if (this.CheckActivationDateValueSpecified)
                {
                    return this.CheckActivationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckActivationDateValue = value.GetValueOrDefault();
                this.CheckActivationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckOnlineMsgExpDate", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool CheckOnlineMsgExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckOnlineMsgExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckOnlineMsgExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckOnlineMsgExpDate
        {
            get
            {
                if (this.CheckOnlineMsgExpDateValueSpecified)
                {
                    return this.CheckOnlineMsgExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckOnlineMsgExpDateValue = value.GetValueOrDefault();
                this.CheckOnlineMsgExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChgVisaMultiCrrncyIsaFee", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool ChgVisaMultiCrrncyIsaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChgVisaMultiCrrncyIsaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChgVisaMultiCrrncyIsaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChgVisaMultiCrrncyIsaFee
        {
            get
            {
                if (this.ChgVisaMultiCrrncyIsaFeeValueSpecified)
                {
                    return this.ChgVisaMultiCrrncyIsaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChgVisaMultiCrrncyIsaFeeValue = value.GetValueOrDefault();
                this.ChgVisaMultiCrrncyIsaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChgVisasGlCrrncyIsaFee", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool ChgVisasGlCrrncyIsaFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChgVisasGlCrrncyIsaFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChgVisasGlCrrncyIsaFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChgVisasGlCrrncyIsaFee
        {
            get
            {
                if (this.ChgVisasGlCrrncyIsaFeeValueSpecified)
                {
                    return this.ChgVisasGlCrrncyIsaFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChgVisasGlCrrncyIsaFeeValue = value.GetValueOrDefault();
                this.ChgVisasGlCrrncyIsaFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditFacility", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool CreditFacilityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditFacility property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditFacilityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreditFacility
        {
            get
            {
                if (this.CreditFacilityValueSpecified)
                {
                    return this.CreditFacilityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditFacilityValue = value.GetValueOrDefault();
                this.CreditFacilityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeactivatePreviousCard", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool DeactivatePreviousCardValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeactivatePreviousCard property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeactivatePreviousCardValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeactivatePreviousCard
        {
            get
            {
                if (this.DeactivatePreviousCardValueSpecified)
                {
                    return this.DeactivatePreviousCardValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeactivatePreviousCardValue = value.GetValueOrDefault();
                this.DeactivatePreviousCardValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeactvPrevCardExclWarnCd", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool DeactvPrevCardExclWarnCdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeactvPrevCardExclWarnCd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeactvPrevCardExclWarnCdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeactvPrevCardExclWarnCd
        {
            get
            {
                if (this.DeactvPrevCardExclWarnCdValueSpecified)
                {
                    return this.DeactvPrevCardExclWarnCdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeactvPrevCardExclWarnCdValue = value.GetValueOrDefault();
                this.DeactvPrevCardExclWarnCdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FundingAccount", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool FundingAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FundingAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FundingAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FundingAccount
        {
            get
            {
                if (this.FundingAccountValueSpecified)
                {
                    return this.FundingAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FundingAccountValue = value.GetValueOrDefault();
                this.FundingAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdLogicOption", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool IdLogicOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdLogicOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdLogicOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IdLogicOption
        {
            get
            {
                if (this.IdLogicOptionValueSpecified)
                {
                    return this.IdLogicOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdLogicOptionValue = value.GetValueOrDefault();
                this.IdLogicOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitCustomCondition;
        
        [XmlElementAttribute("LimitCustomCondition", Order=33, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitCustomCondition
        {
            get
            {
                return _limitCustomCondition;
            }
            set
            {
                _limitCustomCondition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitCustomCondition collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitCustomConditionSpecified
        {
            get
            {
                return ((this.LimitCustomCondition != null) 
                            && (this.LimitCustomCondition.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OnlineCardFields" /> class.</para>
        /// </summary>
        public OnlineCardFields()
        {
            this._limitCustomCondition = new Collection<short>();
            this._limitDescription = new Collection<short>();
            this._limitMcc = new Collection<short>();
            this._limitSourceCodes = new Collection<short>();
            this._limitTransactionCodes = new Collection<short>();
            this._limitTransactionSubTypes = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitDescription;
        
        [XmlElementAttribute("LimitDescription", Order=34, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitDescription
        {
            get
            {
                return _limitDescription;
            }
            set
            {
                _limitDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitDescriptionSpecified
        {
            get
            {
                return ((this.LimitDescription != null) 
                            && (this.LimitDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitMcc;
        
        [XmlElementAttribute("LimitMcc", Order=35, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitMcc
        {
            get
            {
                return _limitMcc;
            }
            set
            {
                _limitMcc = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitMcc collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitMccSpecified
        {
            get
            {
                return ((this.LimitMcc != null) 
                            && (this.LimitMcc.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitSourceCodes;
        
        [XmlElementAttribute("LimitSourceCodes", Order=36, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitSourceCodes
        {
            get
            {
                return _limitSourceCodes;
            }
            set
            {
                _limitSourceCodes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitSourceCodes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitSourceCodesSpecified
        {
            get
            {
                return ((this.LimitSourceCodes != null) 
                            && (this.LimitSourceCodes.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitTransactionCodes;
        
        [XmlElementAttribute("LimitTransactionCodes", Order=37, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitTransactionCodes
        {
            get
            {
                return _limitTransactionCodes;
            }
            set
            {
                _limitTransactionCodes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitTransactionCodes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitTransactionCodesSpecified
        {
            get
            {
                return ((this.LimitTransactionCodes != null) 
                            && (this.LimitTransactionCodes.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limitTransactionSubTypes;
        
        [XmlElementAttribute("LimitTransactionSubTypes", Order=38, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> LimitTransactionSubTypes
        {
            get
            {
                return _limitTransactionSubTypes;
            }
            set
            {
                _limitTransactionSubTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitTransactionSubTypes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitTransactionSubTypesSpecified
        {
            get
            {
                return ((this.LimitTransactionSubTypes != null) 
                            && (this.LimitTransactionSubTypes.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardCcaRate", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool MasterCardCcaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardCcaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardCcaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MasterCardCcaRate
        {
            get
            {
                if (this.MasterCardCcaRateValueSpecified)
                {
                    return this.MasterCardCcaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardCcaRateValue = value.GetValueOrDefault();
                this.MasterCardCcaRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MasterCardIcaRate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool MasterCardIcaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MasterCardIcaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MasterCardIcaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MasterCardIcaRate
        {
            get
            {
                if (this.MasterCardIcaRateValueSpecified)
                {
                    return this.MasterCardIcaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MasterCardIcaRateValue = value.GetValueOrDefault();
                this.MasterCardIcaRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MatchOnlineMsgExpDate", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool MatchOnlineMsgExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MatchOnlineMsgExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MatchOnlineMsgExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MatchOnlineMsgExpDate
        {
            get
            {
                if (this.MatchOnlineMsgExpDateValueSpecified)
                {
                    return this.MatchOnlineMsgExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MatchOnlineMsgExpDateValue = value.GetValueOrDefault();
                this.MatchOnlineMsgExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAfdApprForGreaterAmt", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool MaxAfdApprForGreaterAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAfdApprForGreaterAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAfdApprForGreaterAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaxAfdApprForGreaterAmt
        {
            get
            {
                if (this.MaxAfdApprForGreaterAmtValueSpecified)
                {
                    return this.MaxAfdApprForGreaterAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAfdApprForGreaterAmtValue = value.GetValueOrDefault();
                this.MaxAfdApprForGreaterAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MccInTranHistory", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool MccInTranHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MccInTranHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MccInTranHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MccInTranHistory
        {
            get
            {
                if (this.MccInTranHistoryValueSpecified)
                {
                    return this.MccInTranHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MccInTranHistoryValue = value.GetValueOrDefault();
                this.MccInTranHistoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdToleranceAvailBalList", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool OdToleranceAvailBalListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdToleranceAvailBalList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdToleranceAvailBalListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OdToleranceAvailBalList
        {
            get
            {
                if (this.OdToleranceAvailBalListValueSpecified)
                {
                    return this.OdToleranceAvailBalListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdToleranceAvailBalListValue = value.GetValueOrDefault();
                this.OdToleranceAvailBalListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdTransferAvailBalList", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool OdTransferAvailBalListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdTransferAvailBalList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdTransferAvailBalListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OdTransferAvailBalList
        {
            get
            {
                if (this.OdTransferAvailBalListValueSpecified)
                {
                    return this.OdTransferAvailBalListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdTransferAvailBalListValue = value.GetValueOrDefault();
                this.OdTransferAvailBalListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawToleranceApprList", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawToleranceApprListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawToleranceApprList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawToleranceApprListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawToleranceApprList
        {
            get
            {
                if (this.OverdrawToleranceApprListValueSpecified)
                {
                    return this.OverdrawToleranceApprListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawToleranceApprListValue = value.GetValueOrDefault();
                this.OverdrawToleranceApprListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferApprList", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawTransferApprListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferApprList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferApprListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawTransferApprList
        {
            get
            {
                if (this.OverdrawTransferApprListValueSpecified)
                {
                    return this.OverdrawTransferApprListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferApprListValue = value.GetValueOrDefault();
                this.OverdrawTransferApprListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PctOverLocAvailBalList", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool PctOverLocAvailBalListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PctOverLocAvailBalList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PctOverLocAvailBalListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PctOverLocAvailBalList
        {
            get
            {
                if (this.PctOverLocAvailBalListValueSpecified)
                {
                    return this.PctOverLocAvailBalListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PctOverLocAvailBalListValue = value.GetValueOrDefault();
                this.PctOverLocAvailBalListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosAmountLimitFields", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool PosAmountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosAmountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosAmountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosAmountLimitFields
        {
            get
            {
                if (this.PosAmountLimitFieldsValueSpecified)
                {
                    return this.PosAmountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosAmountLimitFieldsValue = value.GetValueOrDefault();
                this.PosAmountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosAmountUsedFields", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool PosAmountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosAmountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosAmountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosAmountUsedFields
        {
            get
            {
                if (this.PosAmountUsedFieldsValueSpecified)
                {
                    return this.PosAmountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosAmountUsedFieldsValue = value.GetValueOrDefault();
                this.PosAmountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosCountLimitFields", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool PosCountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosCountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosCountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosCountLimitFields
        {
            get
            {
                if (this.PosCountLimitFieldsValueSpecified)
                {
                    return this.PosCountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosCountLimitFieldsValue = value.GetValueOrDefault();
                this.PosCountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosCountUsedFields", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool PosCountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosCountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosCountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosCountUsedFields
        {
            get
            {
                if (this.PosCountUsedFieldsValueSpecified)
                {
                    return this.PosCountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosCountUsedFieldsValue = value.GetValueOrDefault();
                this.PosCountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosttoAltDraftList", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool PosttoAltDraftListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosttoAltDraftList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosttoAltDraftListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosttoAltDraftList
        {
            get
            {
                if (this.PosttoAltDraftListValueSpecified)
                {
                    return this.PosttoAltDraftListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosttoAltDraftListValue = value.GetValueOrDefault();
                this.PosttoAltDraftListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosttoAltFundingList", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool PosttoAltFundingListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosttoAltFundingList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosttoAltFundingListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosttoAltFundingList
        {
            get
            {
                if (this.PosttoAltFundingListValueSpecified)
                {
                    return this.PosttoAltFundingListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosttoAltFundingListValue = value.GetValueOrDefault();
                this.PosttoAltFundingListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServiceAccessCode", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool ServiceAccessCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceAccessCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServiceAccessCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServiceAccessCode
        {
            get
            {
                if (this.ServiceAccessCodeValueSpecified)
                {
                    return this.ServiceAccessCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceAccessCodeValue = value.GetValueOrDefault();
                this.ServiceAccessCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigAmountLimitFields", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool SigAmountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigAmountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigAmountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigAmountLimitFields
        {
            get
            {
                if (this.SigAmountLimitFieldsValueSpecified)
                {
                    return this.SigAmountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigAmountLimitFieldsValue = value.GetValueOrDefault();
                this.SigAmountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigAmountUsedFields", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool SigAmountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigAmountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigAmountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigAmountUsedFields
        {
            get
            {
                if (this.SigAmountUsedFieldsValueSpecified)
                {
                    return this.SigAmountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigAmountUsedFieldsValue = value.GetValueOrDefault();
                this.SigAmountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigCountLimitFields", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool SigCountLimitFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigCountLimitFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigCountLimitFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigCountLimitFields
        {
            get
            {
                if (this.SigCountLimitFieldsValueSpecified)
                {
                    return this.SigCountLimitFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigCountLimitFieldsValue = value.GetValueOrDefault();
                this.SigCountLimitFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigCountUsedFields", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool SigCountUsedFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigCountUsedFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigCountUsedFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigCountUsedFields
        {
            get
            {
                if (this.SigCountUsedFieldsValueSpecified)
                {
                    return this.SigCountUsedFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigCountUsedFieldsValue = value.GetValueOrDefault();
                this.SigCountUsedFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SignatureDescription", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool SignatureDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SignatureDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SignatureDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SignatureDescription
        {
            get
            {
                if (this.SignatureDescriptionValueSpecified)
                {
                    return this.SignatureDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SignatureDescriptionValue = value.GetValueOrDefault();
                this.SignatureDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SuffixPosition", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool SuffixPositionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SuffixPosition property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SuffixPositionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SuffixPosition
        {
            get
            {
                if (this.SuffixPositionValueSpecified)
                {
                    return this.SuffixPositionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SuffixPositionValue = value.GetValueOrDefault();
                this.SuffixPositionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UniqueCardNumber", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool UniqueCardNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UniqueCardNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UniqueCardNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UniqueCardNumber
        {
            get
            {
                if (this.UniqueCardNumberValueSpecified)
                {
                    return this.UniqueCardNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UniqueCardNumberValue = value.GetValueOrDefault();
                this.UniqueCardNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseAccessEnableFlags", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool UseAccessEnableFlagsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseAccessEnableFlags property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseAccessEnableFlagsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseAccessEnableFlags
        {
            get
            {
                if (this.UseAccessEnableFlagsValueSpecified)
                {
                    return this.UseAccessEnableFlagsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseAccessEnableFlagsValue = value.GetValueOrDefault();
                this.UseAccessEnableFlagsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ValidateCheckDigit", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool ValidateCheckDigitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidateCheckDigit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValidateCheckDigitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ValidateCheckDigit
        {
            get
            {
                if (this.ValidateCheckDigitValueSpecified)
                {
                    return this.ValidateCheckDigitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValidateCheckDigitValue = value.GetValueOrDefault();
                this.ValidateCheckDigitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaMultiCurrencyIsaRate", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool VisaMultiCurrencyIsaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaMultiCurrencyIsaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaMultiCurrencyIsaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VisaMultiCurrencyIsaRate
        {
            get
            {
                if (this.VisaMultiCurrencyIsaRateValueSpecified)
                {
                    return this.VisaMultiCurrencyIsaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaMultiCurrencyIsaRateValue = value.GetValueOrDefault();
                this.VisaMultiCurrencyIsaRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VisaSingleCurrencyIsaRate", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool VisaSingleCurrencyIsaRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VisaSingleCurrencyIsaRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VisaSingleCurrencyIsaRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VisaSingleCurrencyIsaRate
        {
            get
            {
                if (this.VisaSingleCurrencyIsaRateValueSpecified)
                {
                    return this.VisaSingleCurrencyIsaRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VisaSingleCurrencyIsaRateValue = value.GetValueOrDefault();
                this.VisaSingleCurrencyIsaRateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=67, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MerchantReturnAuths", Order=68, Form=XmlSchemaForm.Unqualified)]
        public bool MerchantReturnAuthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MerchantReturnAuths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MerchantReturnAuthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MerchantReturnAuths
        {
            get
            {
                if (this.MerchantReturnAuthsValueSpecified)
                {
                    return this.MerchantReturnAuthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MerchantReturnAuthsValue = value.GetValueOrDefault();
                this.MerchantReturnAuthsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_2", Order=69, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version2 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=70)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
