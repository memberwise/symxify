//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ScreenDefinition", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("ScreenDefinition", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class ScreenDefinition
    {
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionField1> _field1;
        
        [XmlElementAttribute("Field1", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionField1> Field1
        {
            get
            {
                return _field1;
            }
            set
            {
                _field1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Field1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Field1Specified
        {
            get
            {
                return ((this.Field1 != null) 
                            && (this.Field1.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScreenDefinition" /> class.</para>
        /// </summary>
        public ScreenDefinition()
        {
            this._field1 = new Collection<ScreenDefinitionField1>();
            this._field5 = new Collection<ScreenDefinitionField5>();
            this._lCol = new Collection<ScreenDefinitionLCol>();
            this._line = new Collection<ScreenDefinitionLine>();
            this._rCol = new Collection<ScreenDefinitionRCol>();
            this._row = new Collection<ScreenDefinitionRow>();
            this._side = new Collection<ScreenDefinitionSide>();
            this._subField = new Collection<ScreenDefinitionSubField>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionField5> _field5;
        
        [XmlElementAttribute("Field5", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionField5> Field5
        {
            get
            {
                return _field5;
            }
            set
            {
                _field5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Field5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Field5Specified
        {
            get
            {
                return ((this.Field5 != null) 
                            && (this.Field5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionLCol> _lCol;
        
        [XmlElementAttribute("LCol", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionLCol> LCol
        {
            get
            {
                return _lCol;
            }
            set
            {
                _lCol = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LCol collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LColSpecified
        {
            get
            {
                return ((this.LCol != null) 
                            && (this.LCol.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionLine> _line;
        
        [XmlElementAttribute("Line", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionLine> Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LineSpecified
        {
            get
            {
                return ((this.Line != null) 
                            && (this.Line.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionRCol> _rCol;
        
        [XmlElementAttribute("RCol", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionRCol> RCol
        {
            get
            {
                return _rCol;
            }
            set
            {
                _rCol = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RCol collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RColSpecified
        {
            get
            {
                return ((this.RCol != null) 
                            && (this.RCol.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionRow> _row;
        
        [XmlElementAttribute("Row", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionRow> Row
        {
            get
            {
                return _row;
            }
            set
            {
                _row = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Row collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RowSpecified
        {
            get
            {
                return ((this.Row != null) 
                            && (this.Row.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScreenSelection", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short ScreenSelectionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScreenSelection property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScreenSelectionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ScreenSelection
        {
            get
            {
                if (this.ScreenSelectionValueSpecified)
                {
                    return this.ScreenSelectionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScreenSelectionValue = value.GetValueOrDefault();
                this.ScreenSelectionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionSide> _side;
        
        [XmlElementAttribute("Side", Order=7, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionSide> Side
        {
            get
            {
                return _side;
            }
            set
            {
                _side = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Side collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SideSpecified
        {
            get
            {
                return ((this.Side != null) 
                            && (this.Side.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ScreenDefinitionSubField> _subField;
        
        [XmlElementAttribute("SubField", Order=8, Form=XmlSchemaForm.Unqualified)]
        public Collection<ScreenDefinitionSubField> SubField
        {
            get
            {
                return _subField;
            }
            set
            {
                _subField = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SubField collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SubFieldSpecified
        {
            get
            {
                return ((this.SubField != null) 
                            && (this.SubField.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=10, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=11)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
