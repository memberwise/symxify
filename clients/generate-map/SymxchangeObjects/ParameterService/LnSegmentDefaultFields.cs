//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LnSegmentDefaultFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LnSegmentDefaultFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class LnSegmentDefaultFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApplyAsBilled", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool ApplyAsBilledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApplyAsBilled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApplyAsBilledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApplyAsBilled
        {
            get
            {
                if (this.ApplyAsBilledValueSpecified)
                {
                    return this.ApplyAsBilledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApplyAsBilledValue = value.GetValueOrDefault();
                this.ApplyAsBilledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingDefaultDays", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool BillingDefaultDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingDefaultDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingDefaultDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingDefaultDays
        {
            get
            {
                if (this.BillingDefaultDaysValueSpecified)
                {
                    return this.BillingDefaultDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingDefaultDaysValue = value.GetValueOrDefault();
                this.BillingDefaultDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingMethod", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BillingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingMethod
        {
            get
            {
                if (this.BillingMethodValueSpecified)
                {
                    return this.BillingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingMethodValue = value.GetValueOrDefault();
                this.BillingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Description", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool DescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Description property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Description
        {
            get
            {
                if (this.DescriptionValueSpecified)
                {
                    return this.DescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DescriptionValue = value.GetValueOrDefault();
                this.DescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DiscountRate", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool DiscountRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscountRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DiscountRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DiscountRate
        {
            get
            {
                if (this.DiscountRateValueSpecified)
                {
                    return this.DiscountRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DiscountRateValue = value.GetValueOrDefault();
                this.DiscountRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExceedLevelPmtAmt", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool ExceedLevelPmtAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExceedLevelPmtAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExceedLevelPmtAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExceedLevelPmtAmt
        {
            get
            {
                if (this.ExceedLevelPmtAmtValueSpecified)
                {
                    return this.ExceedLevelPmtAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExceedLevelPmtAmtValue = value.GetValueOrDefault();
                this.ExceedLevelPmtAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRate", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool InterestRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestRate
        {
            get
            {
                if (this.InterestRateValueSpecified)
                {
                    return this.InterestRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateValue = value.GetValueOrDefault();
                this.InterestRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateIndex", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool InterestRateIndexValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateIndex property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateIndexValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestRateIndex
        {
            get
            {
                if (this.InterestRateIndexValueSpecified)
                {
                    return this.InterestRateIndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateIndexValue = value.GetValueOrDefault();
                this.InterestRateIndexValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMargin", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool InterestRateMarginValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMargin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMarginValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestRateMargin
        {
            get
            {
                if (this.InterestRateMarginValueSpecified)
                {
                    return this.InterestRateMarginValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMarginValue = value.GetValueOrDefault();
                this.InterestRateMarginValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMarginSign", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool InterestRateMarginSignValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMarginSign property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMarginSignValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestRateMarginSign
        {
            get
            {
                if (this.InterestRateMarginSignValueSpecified)
                {
                    return this.InterestRateMarginSignValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMarginSignValue = value.GetValueOrDefault();
                this.InterestRateMarginSignValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMax", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool InterestRateMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestRateMax
        {
            get
            {
                if (this.InterestRateMaxValueSpecified)
                {
                    return this.InterestRateMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMaxValue = value.GetValueOrDefault();
                this.InterestRateMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMin", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool InterestRateMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestRateMin
        {
            get
            {
                if (this.InterestRateMinValueSpecified)
                {
                    return this.InterestRateMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMinValue = value.GetValueOrDefault();
                this.InterestRateMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool InterestTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestType
        {
            get
            {
                if (this.InterestTypeValueSpecified)
                {
                    return this.InterestTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestTypeValue = value.GetValueOrDefault();
                this.InterestTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPaymentAmt", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool LevelPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LevelPaymentAmt
        {
            get
            {
                if (this.LevelPaymentAmtValueSpecified)
                {
                    return this.LevelPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPaymentAmtValue = value.GetValueOrDefault();
                this.LevelPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPrincipalAmt", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool LevelPrincipalAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPrincipalAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPrincipalAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LevelPrincipalAmt
        {
            get
            {
                if (this.LevelPrincipalAmtValueSpecified)
                {
                    return this.LevelPrincipalAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPrincipalAmtValue = value.GetValueOrDefault();
                this.LevelPrincipalAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumPayment", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumPayment
        {
            get
            {
                if (this.MinimumPaymentValueSpecified)
                {
                    return this.MinimumPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumPaymentValue = value.GetValueOrDefault();
                this.MinimumPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalcType", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentCalcTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalcType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalcTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentCalcType
        {
            get
            {
                if (this.PaymentCalcTypeValueSpecified)
                {
                    return this.PaymentCalcTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalcTypeValue = value.GetValueOrDefault();
                this.PaymentCalcTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentType", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentType
        {
            get
            {
                if (this.PaymentTypeValueSpecified)
                {
                    return this.PaymentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentTypeValue = value.GetValueOrDefault();
                this.PaymentTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PercentPrincipal", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool PercentPrincipalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PercentPrincipal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PercentPrincipalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PercentPrincipal
        {
            get
            {
                if (this.PercentPrincipalValueSpecified)
                {
                    return this.PercentPrincipalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PercentPrincipalValue = value.GetValueOrDefault();
                this.PercentPrincipalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicCap", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool PeriodicCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PeriodicCap
        {
            get
            {
                if (this.PeriodicCapValueSpecified)
                {
                    return this.PeriodicCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicCapValue = value.GetValueOrDefault();
                this.PeriodicCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicFrequency", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool PeriodicFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PeriodicFrequency
        {
            get
            {
                if (this.PeriodicFrequencyValueSpecified)
                {
                    return this.PeriodicFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicFrequencyValue = value.GetValueOrDefault();
                this.PeriodicFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicStartDate", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool PeriodicStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PeriodicStartDate
        {
            get
            {
                if (this.PeriodicStartDateValueSpecified)
                {
                    return this.PeriodicStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicStartDateValue = value.GetValueOrDefault();
                this.PeriodicStartDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicStartRate", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool PeriodicStartRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicStartRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicStartRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PeriodicStartRate
        {
            get
            {
                if (this.PeriodicStartRateValueSpecified)
                {
                    return this.PeriodicStartRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicStartRateValue = value.GetValueOrDefault();
                this.PeriodicStartRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RiskRate", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool RiskRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RiskRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RiskRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RiskRate
        {
            get
            {
                if (this.RiskRateValueSpecified)
                {
                    return this.RiskRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RiskRateValue = value.GetValueOrDefault();
                this.RiskRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SegmentType", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool SegmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SegmentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SegmentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SegmentType
        {
            get
            {
                if (this.SegmentTypeValueSpecified)
                {
                    return this.SegmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SegmentTypeValue = value.GetValueOrDefault();
                this.SegmentTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VariableRateIndicator", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool VariableRateIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VariableRateIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VariableRateIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VariableRateIndicator
        {
            get
            {
                if (this.VariableRateIndicatorValueSpecified)
                {
                    return this.VariableRateIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VariableRateIndicatorValue = value.GetValueOrDefault();
                this.VariableRateIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=28, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=29)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LnSegmentDefaultFields" /> class.</para>
        /// </summary>
        public LnSegmentDefaultFields()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
