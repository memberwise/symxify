//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("InventoryType", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("InventoryType", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class InventoryType
    {
        
        [XmlElementAttribute("AlternateDescription", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AlternateDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=2, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpenseGlCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short ExpenseGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpenseGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpenseGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExpenseGlCode
        {
            get
            {
                if (this.ExpenseGlCodeValueSpecified)
                {
                    return this.ExpenseGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpenseGlCodeValue = value.GetValueOrDefault();
                this.ExpenseGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeGlCode", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short FeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FeeGlCode
        {
            get
            {
                if (this.FeeGlCodeValueSpecified)
                {
                    return this.FeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeGlCodeValue = value.GetValueOrDefault();
                this.FeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdDefault", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short IdDefaultValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdDefault property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdDefaultValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdDefault
        {
            get
            {
                if (this.IdDefaultValueSpecified)
                {
                    return this.IdDefaultValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdDefaultValue = value.GetValueOrDefault();
                this.IdDefaultValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncomeGlCode", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short IncomeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncomeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncomeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IncomeGlCode
        {
            get
            {
                if (this.IncomeGlCodeValueSpecified)
                {
                    return this.IncomeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncomeGlCodeValue = value.GetValueOrDefault();
                this.IncomeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InventoryGlCode", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short InventoryGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InventoryGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InventoryGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InventoryGlCode
        {
            get
            {
                if (this.InventoryGlCodeValueSpecified)
                {
                    return this.InventoryGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InventoryGlCodeValue = value.GetValueOrDefault();
                this.InventoryGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InventoryType", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short InventoryTypePropertyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InventoryTypeProperty property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InventoryTypePropertyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InventoryTypeProperty
        {
            get
            {
                if (this.InventoryTypePropertyValueSpecified)
                {
                    return this.InventoryTypePropertyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InventoryTypePropertyValue = value.GetValueOrDefault();
                this.InventoryTypePropertyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MultiplePrompt", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short MultiplePromptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MultiplePrompt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MultiplePromptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MultiplePrompt
        {
            get
            {
                if (this.MultiplePromptValueSpecified)
                {
                    return this.MultiplePromptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MultiplePromptValue = value.GetValueOrDefault();
                this.MultiplePromptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegotiableInstrumentTracking", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool NegotiableInstrumentTrackingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegotiableInstrumentTracking property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegotiableInstrumentTrackingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NegotiableInstrumentTracking
        {
            get
            {
                if (this.NegotiableInstrumentTrackingValueSpecified)
                {
                    return this.NegotiableInstrumentTrackingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegotiableInstrumentTrackingValue = value.GetValueOrDefault();
                this.NegotiableInstrumentTrackingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScreenDefinitionType", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short ScreenDefinitionTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScreenDefinitionType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScreenDefinitionTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ScreenDefinitionType
        {
            get
            {
                if (this.ScreenDefinitionTypeValueSpecified)
                {
                    return this.ScreenDefinitionTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScreenDefinitionTypeValue = value.GetValueOrDefault();
                this.ScreenDefinitionTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SerialNumberUsage", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short SerialNumberUsageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SerialNumberUsage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SerialNumberUsageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SerialNumberUsage
        {
            get
            {
                if (this.SerialNumberUsageValueSpecified)
                {
                    return this.SerialNumberUsageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SerialNumberUsageValue = value.GetValueOrDefault();
                this.SerialNumberUsageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SignificantDigits", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short SignificantDigitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SignificantDigits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SignificantDigitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SignificantDigits
        {
            get
            {
                if (this.SignificantDigitsValueSpecified)
                {
                    return this.SignificantDigitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SignificantDigitsValue = value.GetValueOrDefault();
                this.SignificantDigitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SummaryCommentCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short SummaryCommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SummaryCommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SummaryCommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SummaryCommentCode
        {
            get
            {
                if (this.SummaryCommentCodeValueSpecified)
                {
                    return this.SummaryCommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SummaryCommentCodeValue = value.GetValueOrDefault();
                this.SummaryCommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=15, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=16)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InventoryType" /> class.</para>
        /// </summary>
        public InventoryType()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
