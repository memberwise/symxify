//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("AccountDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("AccountDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(AccountDefaultFields_2))]
    public partial class AccountDefault_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcctType", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short AcctTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcctType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcctTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AcctType
        {
            get
            {
                if (this.AcctTypeValueSpecified)
                {
                    return this.AcctTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcctTypeValue = value.GetValueOrDefault();
                this.AcctTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmountCap", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal CappedFeesAmountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CappedFeesAmountCap
        {
            get
            {
                if (this.CappedFeesAmountCapValueSpecified)
                {
                    return this.CappedFeesAmountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmountCapValue = value.GetValueOrDefault();
                this.CappedFeesAmountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCountCap", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short CappedFeesCountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CappedFeesCountCap
        {
            get
            {
                if (this.CappedFeesCountCapValueSpecified)
                {
                    return this.CappedFeesCountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCountCapValue = value.GetValueOrDefault();
                this.CappedFeesCountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=3, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommercialCode", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short CommercialCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommercialCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommercialCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommercialCode
        {
            get
            {
                if (this.CommercialCodeValueSpecified)
                {
                    return this.CommercialCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommercialCodeValue = value.GetValueOrDefault();
                this.CommercialCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<AccountDefaultCountLimit_2> _countLimit;
        
        [XmlElementAttribute("CountLimit", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<AccountDefaultCountLimit_2> CountLimit
        {
            get
            {
                return _countLimit;
            }
            set
            {
                _countLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CountLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CountLimitSpecified
        {
            get
            {
                return ((this.CountLimit != null) 
                            && (this.CountLimit.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AccountDefault_2" /> class.</para>
        /// </summary>
        public AccountDefault_2()
        {
            this._countLimit = new Collection<AccountDefaultCountLimit_2>();
            this._limit = new Collection<AccountDefaultLimit_2>();
            this._perItemLimit = new Collection<AccountDefaultPerItemLimit_2>();
            this._warningCode = new Collection<AccountDefaultWarningCode_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EStmtEnable", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short EStmtEnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EStmtEnable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EStmtEnableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EStmtEnable
        {
            get
            {
                if (this.EStmtEnableValueSpecified)
                {
                    return this.EStmtEnableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EStmtEnableValue = value.GetValueOrDefault();
                this.EStmtEnableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EStmtNotify", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short EStmtNotifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EStmtNotify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EStmtNotifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EStmtNotify
        {
            get
            {
                if (this.EStmtNotifyValueSpecified)
                {
                    return this.EStmtNotifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EStmtNotifyValue = value.GetValueOrDefault();
                this.EStmtNotifyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EnableFloat", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short EnableFloatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnableFloat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EnableFloatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EnableFloat
        {
            get
            {
                if (this.EnableFloatValueSpecified)
                {
                    return this.EnableFloatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnableFloatValue = value.GetValueOrDefault();
                this.EnableFloatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HeadOfHousehold", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short HeadOfHouseholdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeadOfHousehold property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HeadOfHouseholdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HeadOfHousehold
        {
            get
            {
                if (this.HeadOfHouseholdValueSpecified)
                {
                    return this.HeadOfHouseholdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeadOfHouseholdValue = value.GetValueOrDefault();
                this.HeadOfHouseholdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KrHoldBaseAmount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal KrHoldBaseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KrHoldBaseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KrHoldBaseAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> KrHoldBaseAmount
        {
            get
            {
                if (this.KrHoldBaseAmountValueSpecified)
                {
                    return this.KrHoldBaseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KrHoldBaseAmountValue = value.GetValueOrDefault();
                this.KrHoldBaseAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<AccountDefaultLimit_2> _limit;
        
        [XmlElementAttribute("Limit", Order=11, Form=XmlSchemaForm.Unqualified)]
        public Collection<AccountDefaultLimit_2> Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _limit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Limit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitSpecified
        {
            get
            {
                return ((this.Limit != null) 
                            && (this.Limit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberGroup", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short MemberGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberGroup
        {
            get
            {
                if (this.MemberGroupValueSpecified)
                {
                    return this.MemberGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberGroupValue = value.GetValueOrDefault();
                this.MemberGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberStatus", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short MemberStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberStatus
        {
            get
            {
                if (this.MemberStatusValueSpecified)
                {
                    return this.MemberStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberStatusValue = value.GetValueOrDefault();
                this.MemberStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonRegCcCheckHoldBaseAmt", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal NonRegCcCheckHoldBaseAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonRegCcCheckHoldBaseAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonRegCcCheckHoldBaseAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NonRegCcCheckHoldBaseAmt
        {
            get
            {
                if (this.NonRegCcCheckHoldBaseAmtValueSpecified)
                {
                    return this.NonRegCcCheckHoldBaseAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonRegCcCheckHoldBaseAmtValue = value.GetValueOrDefault();
                this.NonRegCcCheckHoldBaseAmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<AccountDefaultPerItemLimit_2> _perItemLimit;
        
        [XmlElementAttribute("PerItemLimit", Order=15, Form=XmlSchemaForm.Unqualified)]
        public Collection<AccountDefaultPerItemLimit_2> PerItemLimit
        {
            get
            {
                return _perItemLimit;
            }
            set
            {
                _perItemLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PerItemLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PerItemLimitSpecified
        {
            get
            {
                return ((this.PerItemLimit != null) 
                            && (this.PerItemLimit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ProxyDate", Order=16, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ProxyDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProxyDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProxyDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ProxyDate
        {
            get
            {
                if (this.ProxyDateValueSpecified)
                {
                    return this.ProxyDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProxyDateValue = value.GetValueOrDefault();
                this.ProxyDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipCode", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short RelationshipCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RelationshipCode
        {
            get
            {
                if (this.RelationshipCodeValueSpecified)
                {
                    return this.RelationshipCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipCodeValue = value.GetValueOrDefault();
                this.RelationshipCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipOverride", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short RelationshipOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RelationshipOverride
        {
            get
            {
                if (this.RelationshipOverrideValueSpecified)
                {
                    return this.RelationshipOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipOverrideValue = value.GetValueOrDefault();
                this.RelationshipOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipOverrideEffDate", Order=20, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RelationshipOverrideEffDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipOverrideEffDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipOverrideEffDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RelationshipOverrideEffDate
        {
            get
            {
                if (this.RelationshipOverrideEffDateValueSpecified)
                {
                    return this.RelationshipOverrideEffDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipOverrideEffDateValue = value.GetValueOrDefault();
                this.RelationshipOverrideEffDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RelationshipOverrideExpDate", Order=21, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RelationshipOverrideExpDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelationshipOverrideExpDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RelationshipOverrideExpDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RelationshipOverrideExpDate
        {
            get
            {
                if (this.RelationshipOverrideExpDateValueSpecified)
                {
                    return this.RelationshipOverrideExpDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RelationshipOverrideExpDateValue = value.GetValueOrDefault();
                this.RelationshipOverrideExpDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Restrict", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short RestrictValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Restrict property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestrictValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Restrict
        {
            get
            {
                if (this.RestrictValueSpecified)
                {
                    return this.RestrictValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestrictValue = value.GetValueOrDefault();
                this.RestrictValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("StateReporting", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string StateReporting { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementMailCode", Order=24, Form=XmlSchemaForm.Unqualified)]
        public short StatementMailCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementMailCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementMailCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementMailCode
        {
            get
            {
                if (this.StatementMailCodeValueSpecified)
                {
                    return this.StatementMailCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementMailCodeValue = value.GetValueOrDefault();
                this.StatementMailCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=26, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=27, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=28, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=29, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=30, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=32, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=33, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<AccountDefaultWarningCode_2> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=34, Form=XmlSchemaForm.Unqualified)]
        public Collection<AccountDefaultWarningCode_2> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=35, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=36)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
