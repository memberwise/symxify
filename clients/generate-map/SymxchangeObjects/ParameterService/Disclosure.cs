//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Disclosure", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Disclosure", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class Disclosure
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClosedEndDisclosureFormat", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short ClosedEndDisclosureFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClosedEndDisclosureFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClosedEndDisclosureFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ClosedEndDisclosureFormat
        {
            get
            {
                if (this.ClosedEndDisclosureFormatValueSpecified)
                {
                    return this.ClosedEndDisclosureFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClosedEndDisclosureFormatValue = value.GetValueOrDefault();
                this.ClosedEndDisclosureFormatValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DisabilityDescription", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string DisabilityDescription { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<DisclosureFedLine1> _fedLine1;
        
        [XmlElementAttribute("FedLine1", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<DisclosureFedLine1> FedLine1
        {
            get
            {
                return _fedLine1;
            }
            set
            {
                _fedLine1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FedLine1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FedLine1Specified
        {
            get
            {
                return ((this.FedLine1 != null) 
                            && (this.FedLine1.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Disclosure" /> class.</para>
        /// </summary>
        public Disclosure()
        {
            this._fedLine1 = new Collection<DisclosureFedLine1>();
            this._fedLine2 = new Collection<DisclosureFedLine2>();
            this._secLine1 = new Collection<DisclosureSecLine1>();
            this._secLine2 = new Collection<DisclosureSecLine2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DisclosureFedLine2> _fedLine2;
        
        [XmlElementAttribute("FedLine2", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<DisclosureFedLine2> FedLine2
        {
            get
            {
                return _fedLine2;
            }
            set
            {
                _fedLine2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FedLine2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FedLine2Specified
        {
            get
            {
                return ((this.FedLine2 != null) 
                            && (this.FedLine2.Count != 0));
            }
        }
        
        [XmlElementAttribute("JointDisabilityDescription", Order=4, Form=XmlSchemaForm.Unqualified)]
        public string JointDisabilityDescription { get; set; }
        
        [XmlElementAttribute("JointLifeDescription", Order=5, Form=XmlSchemaForm.Unqualified)]
        public string JointLifeDescription { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<DisclosureSecLine1> _secLine1;
        
        [XmlElementAttribute("SecLine1", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<DisclosureSecLine1> SecLine1
        {
            get
            {
                return _secLine1;
            }
            set
            {
                _secLine1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SecLine1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SecLine1Specified
        {
            get
            {
                return ((this.SecLine1 != null) 
                            && (this.SecLine1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DisclosureSecLine2> _secLine2;
        
        [XmlElementAttribute("SecLine2", Order=7, Form=XmlSchemaForm.Unqualified)]
        public Collection<DisclosureSecLine2> SecLine2
        {
            get
            {
                return _secLine2;
            }
            set
            {
                _secLine2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SecLine2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SecLine2Specified
        {
            get
            {
                return ((this.SecLine2 != null) 
                            && (this.SecLine2.Count != 0));
            }
        }
        
        [XmlElementAttribute("SingleLifeDescription", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string SingleLifeDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseExtraAddress", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool UseExtraAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseExtraAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseExtraAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseExtraAddress
        {
            get
            {
                if (this.UseExtraAddressValueSpecified)
                {
                    return this.UseExtraAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseExtraAddressValue = value.GetValueOrDefault();
                this.UseExtraAddressValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=10, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=11)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
