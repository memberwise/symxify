//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LoanDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class LoanDefault
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowUnappliedPmt", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short AllowUnappliedPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowUnappliedPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowUnappliedPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AllowUnappliedPmt
        {
            get
            {
                if (this.AllowUnappliedPmtValueSpecified)
                {
                    return this.AllowUnappliedPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowUnappliedPmtValue = value.GetValueOrDefault();
                this.AllowUnappliedPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationSchd", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationSchd
        {
            get
            {
                if (this.AmortizationSchdValueSpecified)
                {
                    return this.AmortizationSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationSchdValue = value.GetValueOrDefault();
                this.AmortizationSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationSchdType", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationSchdType
        {
            get
            {
                if (this.AmortizationSchdTypeValueSpecified)
                {
                    return this.AmortizationSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationSchdTypeValue = value.GetValueOrDefault();
                this.AmortizationSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizationTerm", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short AmortizationTermValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizationTerm property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizationTermValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizationTerm
        {
            get
            {
                if (this.AmortizationTermValueSpecified)
                {
                    return this.AmortizationTermValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizationTermValue = value.GetValueOrDefault();
                this.AmortizationTermValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApplyAsBilled", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short ApplyAsBilledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApplyAsBilled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApplyAsBilledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ApplyAsBilled
        {
            get
            {
                if (this.ApplyAsBilledValueSpecified)
                {
                    return this.ApplyAsBilledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApplyAsBilledValue = value.GetValueOrDefault();
                this.ApplyAsBilledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApprovalCode", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short ApprovalCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApprovalCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApprovalCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ApprovalCode
        {
            get
            {
                if (this.ApprovalCodeValueSpecified)
                {
                    return this.ApprovalCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApprovalCodeValue = value.GetValueOrDefault();
                this.ApprovalCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ArmNotice", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short ArmNoticeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ArmNotice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ArmNoticeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ArmNotice
        {
            get
            {
                if (this.ArmNoticeValueSpecified)
                {
                    return this.ArmNoticeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ArmNoticeValue = value.GetValueOrDefault();
                this.ArmNoticeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AvailCreditCalc", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short AvailCreditCalcValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AvailCreditCalc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AvailCreditCalcValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AvailCreditCalc
        {
            get
            {
                if (this.AvailCreditCalcValueSpecified)
                {
                    return this.AvailCreditCalcValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AvailCreditCalcValue = value.GetValueOrDefault();
                this.AvailCreditCalcValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingDefaultDays", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short BillingDefaultDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingDefaultDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingDefaultDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillingDefaultDays
        {
            get
            {
                if (this.BillingDefaultDaysValueSpecified)
                {
                    return this.BillingDefaultDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingDefaultDaysValue = value.GetValueOrDefault();
                this.BillingDefaultDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingMethod", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short BillingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillingMethod
        {
            get
            {
                if (this.BillingMethodValueSpecified)
                {
                    return this.BillingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingMethodValue = value.GetValueOrDefault();
                this.BillingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingNotice", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short BillingNoticeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingNotice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingNoticeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillingNotice
        {
            get
            {
                if (this.BillingNoticeValueSpecified)
                {
                    return this.BillingNoticeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingNoticeValue = value.GetValueOrDefault();
                this.BillingNoticeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingNoticeMin", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal BillingNoticeMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingNoticeMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingNoticeMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillingNoticeMin
        {
            get
            {
                if (this.BillingNoticeMinValueSpecified)
                {
                    return this.BillingNoticeMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingNoticeMinValue = value.GetValueOrDefault();
                this.BillingNoticeMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BtLimitMax", Order=12, Form=XmlSchemaForm.Unqualified)]
        public decimal BtLimitMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BtLimitMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BtLimitMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BtLimitMax
        {
            get
            {
                if (this.BtLimitMaxValueSpecified)
                {
                    return this.BtLimitMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BtLimitMaxValue = value.GetValueOrDefault();
                this.BtLimitMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BtPercent", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal BtPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BtPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BtPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BtPercent
        {
            get
            {
                if (this.BtPercentValueSpecified)
                {
                    return this.BtPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BtPercentValue = value.GetValueOrDefault();
                this.BtPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CaLimitMax", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal CaLimitMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CaLimitMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CaLimitMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CaLimitMax
        {
            get
            {
                if (this.CaLimitMaxValueSpecified)
                {
                    return this.CaLimitMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CaLimitMaxValue = value.GetValueOrDefault();
                this.CaLimitMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CaPercent", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal CaPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CaPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CaPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CaPercent
        {
            get
            {
                if (this.CaPercentValueSpecified)
                {
                    return this.CaPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CaPercentValue = value.GetValueOrDefault();
                this.CaPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CallItemSchd", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short CallItemSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CallItemSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CallItemSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CallItemSchd
        {
            get
            {
                if (this.CallItemSchdValueSpecified)
                {
                    return this.CallItemSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CallItemSchdValue = value.GetValueOrDefault();
                this.CallItemSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CallItemSchdType", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short CallItemSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CallItemSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CallItemSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CallItemSchdType
        {
            get
            {
                if (this.CallItemSchdTypeValueSpecified)
                {
                    return this.CallItemSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CallItemSchdTypeValue = value.GetValueOrDefault();
                this.CallItemSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cancelable", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short CancelableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cancelable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CancelableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Cancelable
        {
            get
            {
                if (this.CancelableValueSpecified)
                {
                    return this.CancelableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CancelableValue = value.GetValueOrDefault();
                this.CancelableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesAmountCap", Order=19, Form=XmlSchemaForm.Unqualified)]
        public decimal CappedFeesAmountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesAmountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesAmountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CappedFeesAmountCap
        {
            get
            {
                if (this.CappedFeesAmountCapValueSpecified)
                {
                    return this.CappedFeesAmountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesAmountCapValue = value.GetValueOrDefault();
                this.CappedFeesAmountCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CappedFeesCountCap", Order=20, Form=XmlSchemaForm.Unqualified)]
        public short CappedFeesCountCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CappedFeesCountCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CappedFeesCountCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CappedFeesCountCap
        {
            get
            {
                if (this.CappedFeesCountCapValueSpecified)
                {
                    return this.CappedFeesCountCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CappedFeesCountCapValue = value.GetValueOrDefault();
                this.CappedFeesCountCapValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckDigits", Order=21, Form=XmlSchemaForm.Unqualified)]
        public string CheckDigits { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=22, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollateralCode", Order=23, Form=XmlSchemaForm.Unqualified)]
        public short CollateralCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollateralCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollateralCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CollateralCode
        {
            get
            {
                if (this.CollateralCodeValueSpecified)
                {
                    return this.CollateralCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollateralCodeValue = value.GetValueOrDefault();
                this.CollateralCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CombinedCaBtLimitMax", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal CombinedCaBtLimitMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CombinedCaBtLimitMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CombinedCaBtLimitMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CombinedCaBtLimitMax
        {
            get
            {
                if (this.CombinedCaBtLimitMaxValueSpecified)
                {
                    return this.CombinedCaBtLimitMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CombinedCaBtLimitMaxValue = value.GetValueOrDefault();
                this.CombinedCaBtLimitMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CombinedCaBtPercent", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal CombinedCaBtPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CombinedCaBtPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CombinedCaBtPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CombinedCaBtPercent
        {
            get
            {
                if (this.CombinedCaBtPercentValueSpecified)
                {
                    return this.CombinedCaBtPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CombinedCaBtPercentValue = value.GetValueOrDefault();
                this.CombinedCaBtPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ComboLnSegmentMax", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short ComboLnSegmentMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ComboLnSegmentMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ComboLnSegmentMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ComboLnSegmentMax
        {
            get
            {
                if (this.ComboLnSegmentMaxValueSpecified)
                {
                    return this.ComboLnSegmentMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ComboLnSegmentMaxValue = value.GetValueOrDefault();
                this.ComboLnSegmentMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ComboPmtOrderMeth", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short ComboPmtOrderMethValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ComboPmtOrderMeth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ComboPmtOrderMethValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ComboPmtOrderMeth
        {
            get
            {
                if (this.ComboPmtOrderMethValueSpecified)
                {
                    return this.ComboPmtOrderMethValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ComboPmtOrderMethValue = value.GetValueOrDefault();
                this.ComboPmtOrderMethValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ComboSeg0PmtOrder", Order=28, Form=XmlSchemaForm.Unqualified)]
        public short ComboSeg0PmtOrderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ComboSeg0PmtOrder property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ComboSeg0PmtOrderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ComboSeg0PmtOrder
        {
            get
            {
                if (this.ComboSeg0PmtOrderValueSpecified)
                {
                    return this.ComboSeg0PmtOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ComboSeg0PmtOrderValue = value.GetValueOrDefault();
                this.ComboSeg0PmtOrderValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CorporateUserTransferCode", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short CorporateUserTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CorporateUserTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CorporateUserTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CorporateUserTransferCode
        {
            get
            {
                if (this.CorporateUserTransferCodeValueSpecified)
                {
                    return this.CorporateUserTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CorporateUserTransferCodeValue = value.GetValueOrDefault();
                this.CorporateUserTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CrIntTypeInd", Order=30, Form=XmlSchemaForm.Unqualified)]
        public string CrIntTypeInd { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredLimitExpiration", Order=31, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CredLimitExpirationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredLimitExpiration property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredLimitExpirationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CredLimitExpiration
        {
            get
            {
                if (this.CredLimitExpirationValueSpecified)
                {
                    return this.CredLimitExpirationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredLimitExpirationValue = value.GetValueOrDefault();
                this.CredLimitExpirationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditLimit", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal CreditLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CreditLimit
        {
            get
            {
                if (this.CreditLimitValueSpecified)
                {
                    return this.CreditLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditLimitValue = value.GetValueOrDefault();
                this.CreditLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditLimitGroup", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short CreditLimitGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditLimitGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditLimitGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditLimitGroup
        {
            get
            {
                if (this.CreditLimitGroupValueSpecified)
                {
                    return this.CreditLimitGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditLimitGroupValue = value.GetValueOrDefault();
                this.CreditLimitGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditReportingCode", Order=34, Form=XmlSchemaForm.Unqualified)]
        public short CreditReportingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditReportingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditReportingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditReportingCode
        {
            get
            {
                if (this.CreditReportingCodeValueSpecified)
                {
                    return this.CreditReportingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditReportingCodeValue = value.GetValueOrDefault();
                this.CreditReportingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuTotalsUseCode", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short CuTotalsUseCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuTotalsUseCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuTotalsUseCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CuTotalsUseCode
        {
            get
            {
                if (this.CuTotalsUseCodeValueSpecified)
                {
                    return this.CuTotalsUseCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuTotalsUseCodeValue = value.GetValueOrDefault();
                this.CuTotalsUseCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DealerCity", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string DealerCity { get; set; }
        
        [XmlElementAttribute("DealerCounty", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string DealerCounty { get; set; }
        
        [XmlElementAttribute("DealerState", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string DealerState { get; set; }
        
        [XmlElementAttribute("Description", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DiscountRate", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal DiscountRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscountRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DiscountRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DiscountRate
        {
            get
            {
                if (this.DiscountRateValueSpecified)
                {
                    return this.DiscountRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DiscountRateValue = value.GetValueOrDefault();
                this.DiscountRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqCalculationMethod", Order=41, Form=XmlSchemaForm.Unqualified)]
        public short DqCalculationMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqCalculationMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqCalculationMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqCalculationMethod
        {
            get
            {
                if (this.DqCalculationMethodValueSpecified)
                {
                    return this.DqCalculationMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqCalculationMethodValue = value.GetValueOrDefault();
                this.DqCalculationMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqNoticeNumber", Order=42, Form=XmlSchemaForm.Unqualified)]
        public short DqNoticeNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqNoticeNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqNoticeNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqNoticeNumber
        {
            get
            {
                if (this.DqNoticeNumberValueSpecified)
                {
                    return this.DqNoticeNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqNoticeNumberValue = value.GetValueOrDefault();
                this.DqNoticeNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqNoticeType", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short DqNoticeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqNoticeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqNoticeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqNoticeType
        {
            get
            {
                if (this.DqNoticeTypeValueSpecified)
                {
                    return this.DqNoticeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqNoticeTypeValue = value.GetValueOrDefault();
                this.DqNoticeTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDateAdvanceCode", Order=44, Form=XmlSchemaForm.Unqualified)]
        public short DueDateAdvanceCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDateAdvanceCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDateAdvanceCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDateAdvanceCode
        {
            get
            {
                if (this.DueDateAdvanceCodeValueSpecified)
                {
                    return this.DueDateAdvanceCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDateAdvanceCodeValue = value.GetValueOrDefault();
                this.DueDateAdvanceCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay1", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short DueDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDay1
        {
            get
            {
                if (this.DueDay1ValueSpecified)
                {
                    return this.DueDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay1Value = value.GetValueOrDefault();
                this.DueDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay2", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short DueDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDay2
        {
            get
            {
                if (this.DueDay2ValueSpecified)
                {
                    return this.DueDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay2Value = value.GetValueOrDefault();
                this.DueDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EcoaCode", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short EcoaCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EcoaCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EcoaCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EcoaCode
        {
            get
            {
                if (this.EcoaCodeValueSpecified)
                {
                    return this.EcoaCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EcoaCodeValue = value.GetValueOrDefault();
                this.EcoaCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveApr", Order=48, Form=XmlSchemaForm.Unqualified)]
        public decimal EffectiveAprValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveApr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveAprValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EffectiveApr
        {
            get
            {
                if (this.EffectiveAprValueSpecified)
                {
                    return this.EffectiveAprValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveAprValue = value.GetValueOrDefault();
                this.EffectiveAprValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExceedLevelPmtAmt", Order=49, Form=XmlSchemaForm.Unqualified)]
        public short ExceedLevelPmtAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExceedLevelPmtAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExceedLevelPmtAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExceedLevelPmtAmt
        {
            get
            {
                if (this.ExceedLevelPmtAmtValueSpecified)
                {
                    return this.ExceedLevelPmtAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExceedLevelPmtAmtValue = value.GetValueOrDefault();
                this.ExceedLevelPmtAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Fasb91AlternateTerm", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short Fasb91AlternateTermValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Fasb91AlternateTerm property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Fasb91AlternateTermValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Fasb91AlternateTerm
        {
            get
            {
                if (this.Fasb91AlternateTermValueSpecified)
                {
                    return this.Fasb91AlternateTermValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Fasb91AlternateTermValue = value.GetValueOrDefault();
                this.Fasb91AlternateTermValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Fasb91Code", Order=51, Form=XmlSchemaForm.Unqualified)]
        public short Fasb91CodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Fasb91Code property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Fasb91CodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Fasb91Code
        {
            get
            {
                if (this.Fasb91CodeValueSpecified)
                {
                    return this.Fasb91CodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Fasb91CodeValue = value.GetValueOrDefault();
                this.Fasb91CodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeesChargesPostingOption", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short FeesChargesPostingOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeesChargesPostingOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeesChargesPostingOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FeesChargesPostingOption
        {
            get
            {
                if (this.FeesChargesPostingOptionValueSpecified)
                {
                    return this.FeesChargesPostingOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeesChargesPostingOptionValue = value.GetValueOrDefault();
                this.FeesChargesPostingOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedDealerCityTaxRate", Order=53, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedDealerCityTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedDealerCityTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedDealerCityTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedDealerCityTaxRate
        {
            get
            {
                if (this.FixedDealerCityTaxRateValueSpecified)
                {
                    return this.FixedDealerCityTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedDealerCityTaxRateValue = value.GetValueOrDefault();
                this.FixedDealerCityTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedDealerCountyTaxRate", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedDealerCountyTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedDealerCountyTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedDealerCountyTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedDealerCountyTaxRate
        {
            get
            {
                if (this.FixedDealerCountyTaxRateValueSpecified)
                {
                    return this.FixedDealerCountyTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedDealerCountyTaxRateValue = value.GetValueOrDefault();
                this.FixedDealerCountyTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedDealerStateTaxRate", Order=55, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedDealerStateTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedDealerStateTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedDealerStateTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedDealerStateTaxRate
        {
            get
            {
                if (this.FixedDealerStateTaxRateValueSpecified)
                {
                    return this.FixedDealerStateTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedDealerStateTaxRateValue = value.GetValueOrDefault();
                this.FixedDealerStateTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedLesseeCityTaxRate", Order=56, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedLesseeCityTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedLesseeCityTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedLesseeCityTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedLesseeCityTaxRate
        {
            get
            {
                if (this.FixedLesseeCityTaxRateValueSpecified)
                {
                    return this.FixedLesseeCityTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedLesseeCityTaxRateValue = value.GetValueOrDefault();
                this.FixedLesseeCityTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedLesseeCountyTaxRate", Order=57, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedLesseeCountyTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedLesseeCountyTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedLesseeCountyTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedLesseeCountyTaxRate
        {
            get
            {
                if (this.FixedLesseeCountyTaxRateValueSpecified)
                {
                    return this.FixedLesseeCountyTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedLesseeCountyTaxRateValue = value.GetValueOrDefault();
                this.FixedLesseeCountyTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FixedLesseeStateTaxRate", Order=58, Form=XmlSchemaForm.Unqualified)]
        public decimal FixedLesseeStateTaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FixedLesseeStateTaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FixedLesseeStateTaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FixedLesseeStateTaxRate
        {
            get
            {
                if (this.FixedLesseeStateTaxRateValueSpecified)
                {
                    return this.FixedLesseeStateTaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FixedLesseeStateTaxRateValue = value.GetValueOrDefault();
                this.FixedLesseeStateTaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlAccrualStatusOption", Order=59, Form=XmlSchemaForm.Unqualified)]
        public short GlAccrualStatusOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlAccrualStatusOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlAccrualStatusOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlAccrualStatusOption
        {
            get
            {
                if (this.GlAccrualStatusOptionValueSpecified)
                {
                    return this.GlAccrualStatusOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlAccrualStatusOptionValue = value.GetValueOrDefault();
                this.GlAccrualStatusOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InitialArmNotice", Order=60, Form=XmlSchemaForm.Unqualified)]
        public short InitialArmNoticeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InitialArmNotice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InitialArmNoticeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InitialArmNotice
        {
            get
            {
                if (this.InitialArmNoticeValueSpecified)
                {
                    return this.InitialArmNoticeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InitialArmNoticeValue = value.GetValueOrDefault();
                this.InitialArmNoticeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InitialBcdSettingOption", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short InitialBcdSettingOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InitialBcdSettingOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InitialBcdSettingOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InitialBcdSettingOption
        {
            get
            {
                if (this.InitialBcdSettingOptionValueSpecified)
                {
                    return this.InitialBcdSettingOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InitialBcdSettingOptionValue = value.GetValueOrDefault();
                this.InitialBcdSettingOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceMax", Order=62, Form=XmlSchemaForm.Unqualified)]
        public decimal InsuranceMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InsuranceMax
        {
            get
            {
                if (this.InsuranceMaxValueSpecified)
                {
                    return this.InsuranceMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceMaxValue = value.GetValueOrDefault();
                this.InsuranceMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceType", Order=63, Form=XmlSchemaForm.Unqualified)]
        public short InsuranceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InsuranceType
        {
            get
            {
                if (this.InsuranceTypeValueSpecified)
                {
                    return this.InsuranceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceTypeValue = value.GetValueOrDefault();
                this.InsuranceTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IntPayoffCalc", Order=64, Form=XmlSchemaForm.Unqualified)]
        public short IntPayoffCalcValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IntPayoffCalc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IntPayoffCalcValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IntPayoffCalc
        {
            get
            {
                if (this.IntPayoffCalcValueSpecified)
                {
                    return this.IntPayoffCalcValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IntPayoffCalcValue = value.GetValueOrDefault();
                this.IntPayoffCalcValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRate", Order=65, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InterestRate
        {
            get
            {
                if (this.InterestRateValueSpecified)
                {
                    return this.InterestRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateValue = value.GetValueOrDefault();
                this.InterestRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateIndex", Order=66, Form=XmlSchemaForm.Unqualified)]
        public short InterestRateIndexValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateIndex property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateIndexValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InterestRateIndex
        {
            get
            {
                if (this.InterestRateIndexValueSpecified)
                {
                    return this.InterestRateIndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateIndexValue = value.GetValueOrDefault();
                this.InterestRateIndexValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMargin", Order=67, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestRateMarginValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMargin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMarginValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InterestRateMargin
        {
            get
            {
                if (this.InterestRateMarginValueSpecified)
                {
                    return this.InterestRateMarginValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMarginValue = value.GetValueOrDefault();
                this.InterestRateMarginValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMarginSign", Order=68, Form=XmlSchemaForm.Unqualified)]
        public short InterestRateMarginSignValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMarginSign property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMarginSignValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InterestRateMarginSign
        {
            get
            {
                if (this.InterestRateMarginSignValueSpecified)
                {
                    return this.InterestRateMarginSignValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMarginSignValue = value.GetValueOrDefault();
                this.InterestRateMarginSignValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMax", Order=69, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestRateMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InterestRateMax
        {
            get
            {
                if (this.InterestRateMaxValueSpecified)
                {
                    return this.InterestRateMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMaxValue = value.GetValueOrDefault();
                this.InterestRateMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRateMin", Order=70, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestRateMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRateMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InterestRateMin
        {
            get
            {
                if (this.InterestRateMinValueSpecified)
                {
                    return this.InterestRateMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateMinValue = value.GetValueOrDefault();
                this.InterestRateMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestType", Order=71, Form=XmlSchemaForm.Unqualified)]
        public short InterestTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InterestType
        {
            get
            {
                if (this.InterestTypeValueSpecified)
                {
                    return this.InterestTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestTypeValue = value.GetValueOrDefault();
                this.InterestTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LateChargeType", Order=72, Form=XmlSchemaForm.Unqualified)]
        public short LateChargeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LateChargeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LateChargeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LateChargeType
        {
            get
            {
                if (this.LateChargeTypeValueSpecified)
                {
                    return this.LateChargeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LateChargeTypeValue = value.GetValueOrDefault();
                this.LateChargeTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseDispositionDate", Order=73, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LeaseDispositionDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseDispositionDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseDispositionDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LeaseDispositionDate
        {
            get
            {
                if (this.LeaseDispositionDateValueSpecified)
                {
                    return this.LeaseDispositionDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseDispositionDateValue = value.GetValueOrDefault();
                this.LeaseDispositionDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseDispositionFee", Order=74, Form=XmlSchemaForm.Unqualified)]
        public decimal LeaseDispositionFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseDispositionFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseDispositionFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LeaseDispositionFee
        {
            get
            {
                if (this.LeaseDispositionFeeValueSpecified)
                {
                    return this.LeaseDispositionFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseDispositionFeeValue = value.GetValueOrDefault();
                this.LeaseDispositionFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseTerminateDate", Order=75, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LeaseTerminateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseTerminateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseTerminateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LeaseTerminateDate
        {
            get
            {
                if (this.LeaseTerminateDateValueSpecified)
                {
                    return this.LeaseTerminateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseTerminateDateValue = value.GetValueOrDefault();
                this.LeaseTerminateDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseTerminateFee", Order=76, Form=XmlSchemaForm.Unqualified)]
        public decimal LeaseTerminateFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseTerminateFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseTerminateFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LeaseTerminateFee
        {
            get
            {
                if (this.LeaseTerminateFeeValueSpecified)
                {
                    return this.LeaseTerminateFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseTerminateFeeValue = value.GetValueOrDefault();
                this.LeaseTerminateFeeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LesseeCity", Order=77, Form=XmlSchemaForm.Unqualified)]
        public string LesseeCity { get; set; }
        
        [XmlElementAttribute("LesseeCounty", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string LesseeCounty { get; set; }
        
        [XmlElementAttribute("LesseeState", Order=79, Form=XmlSchemaForm.Unqualified)]
        public string LesseeState { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPaymentAmt", Order=80, Form=XmlSchemaForm.Unqualified)]
        public decimal LevelPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LevelPaymentAmt
        {
            get
            {
                if (this.LevelPaymentAmtValueSpecified)
                {
                    return this.LevelPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPaymentAmtValue = value.GetValueOrDefault();
                this.LevelPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPrincipalAmt", Order=81, Form=XmlSchemaForm.Unqualified)]
        public decimal LevelPrincipalAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPrincipalAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPrincipalAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LevelPrincipalAmt
        {
            get
            {
                if (this.LevelPrincipalAmtValueSpecified)
                {
                    return this.LevelPrincipalAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPrincipalAmtValue = value.GetValueOrDefault();
                this.LevelPrincipalAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCode", Order=82, Form=XmlSchemaForm.Unqualified)]
        public short LoanCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LoanCode
        {
            get
            {
                if (this.LoanCodeValueSpecified)
                {
                    return this.LoanCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCodeValue = value.GetValueOrDefault();
                this.LoanCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanType", Order=83, Form=XmlSchemaForm.Unqualified)]
        public short LoanTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LoanType
        {
            get
            {
                if (this.LoanTypeValueSpecified)
                {
                    return this.LoanTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanTypeValue = value.GetValueOrDefault();
                this.LoanTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxDueDateAdvancePeriod", Order=84, Form=XmlSchemaForm.Unqualified)]
        public short MaxDueDateAdvancePeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxDueDateAdvancePeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxDueDateAdvancePeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxDueDateAdvancePeriod
        {
            get
            {
                if (this.MaxDueDateAdvancePeriodValueSpecified)
                {
                    return this.MaxDueDateAdvancePeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxDueDateAdvancePeriodValue = value.GetValueOrDefault();
                this.MaxDueDateAdvancePeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberUserTransferCode", Order=85, Form=XmlSchemaForm.Unqualified)]
        public short MemberUserTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberUserTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberUserTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberUserTransferCode
        {
            get
            {
                if (this.MemberUserTransferCodeValueSpecified)
                {
                    return this.MemberUserTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberUserTransferCodeValue = value.GetValueOrDefault();
                this.MemberUserTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MfoelId", Order=86, Form=XmlSchemaForm.Unqualified)]
        public short MfoelIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MfoelId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MfoelIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MfoelId
        {
            get
            {
                if (this.MfoelIdValueSpecified)
                {
                    return this.MfoelIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MfoelIdValue = value.GetValueOrDefault();
                this.MfoelIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinAdvance", Order=87, Form=XmlSchemaForm.Unqualified)]
        public decimal MinAdvanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinAdvance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinAdvanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinAdvance
        {
            get
            {
                if (this.MinAdvanceValueSpecified)
                {
                    return this.MinAdvanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinAdvanceValue = value.GetValueOrDefault();
                this.MinAdvanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinBalance", Order=88, Form=XmlSchemaForm.Unqualified)]
        public decimal MinBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinBalance
        {
            get
            {
                if (this.MinBalanceValueSpecified)
                {
                    return this.MinBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinBalanceValue = value.GetValueOrDefault();
                this.MinBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumPayment", Order=89, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumPayment
        {
            get
            {
                if (this.MinimumPaymentValueSpecified)
                {
                    return this.MinimumPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumPaymentValue = value.GetValueOrDefault();
                this.MinimumPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewLoanDueDateCode", Order=90, Form=XmlSchemaForm.Unqualified)]
        public short NewLoanDueDateCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewLoanDueDateCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewLoanDueDateCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewLoanDueDateCode
        {
            get
            {
                if (this.NewLoanDueDateCodeValueSpecified)
                {
                    return this.NewLoanDueDateCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewLoanDueDateCodeValue = value.GetValueOrDefault();
                this.NewLoanDueDateCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewSegCutoffDays", Order=91, Form=XmlSchemaForm.Unqualified)]
        public short NewSegCutoffDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewSegCutoffDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewSegCutoffDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewSegCutoffDays
        {
            get
            {
                if (this.NewSegCutoffDaysValueSpecified)
                {
                    return this.NewSegCutoffDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewSegCutoffDaysValue = value.GetValueOrDefault();
                this.NewSegCutoffDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewSegCutoffOption", Order=92, Form=XmlSchemaForm.Unqualified)]
        public short NewSegCutoffOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewSegCutoffOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewSegCutoffOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewSegCutoffOption
        {
            get
            {
                if (this.NewSegCutoffOptionValueSpecified)
                {
                    return this.NewSegCutoffOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewSegCutoffOptionValue = value.GetValueOrDefault();
                this.NewSegCutoffOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Nickname", Order=93, Form=XmlSchemaForm.Unqualified)]
        public string Nickname { get; set; }
        
        [XmlElementAttribute("NoteNumber", Order=94, Form=XmlSchemaForm.Unqualified)]
        public string NoteNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OccupancyType", Order=95, Form=XmlSchemaForm.Unqualified)]
        public short OccupancyTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OccupancyType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OccupancyTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OccupancyType
        {
            get
            {
                if (this.OccupancyTypeValueSpecified)
                {
                    return this.OccupancyTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OccupancyTypeValue = value.GetValueOrDefault();
                this.OccupancyTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OriginalRate", Order=96, Form=XmlSchemaForm.Unqualified)]
        public decimal OriginalRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginalRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OriginalRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OriginalRate
        {
            get
            {
                if (this.OriginalRateValueSpecified)
                {
                    return this.OriginalRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OriginalRateValue = value.GetValueOrDefault();
                this.OriginalRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlAuthFee", Order=97, Form=XmlSchemaForm.Unqualified)]
        public short OvlAuthFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlAuthFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlAuthFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OvlAuthFee
        {
            get
            {
                if (this.OvlAuthFeeValueSpecified)
                {
                    return this.OvlAuthFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlAuthFeeValue = value.GetValueOrDefault();
                this.OvlAuthFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlOptIn", Order=98, Form=XmlSchemaForm.Unqualified)]
        public short OvlOptInValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlOptIn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlOptInValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OvlOptIn
        {
            get
            {
                if (this.OvlOptInValueSpecified)
                {
                    return this.OvlOptInValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlOptInValue = value.GetValueOrDefault();
                this.OvlOptInValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlPrevAuthFee", Order=99, Form=XmlSchemaForm.Unqualified)]
        public short OvlPrevAuthFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlPrevAuthFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlPrevAuthFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OvlPrevAuthFee
        {
            get
            {
                if (this.OvlPrevAuthFeeValueSpecified)
                {
                    return this.OvlPrevAuthFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlPrevAuthFeeValue = value.GetValueOrDefault();
                this.OvlPrevAuthFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlStmtDisclFee", Order=100, Form=XmlSchemaForm.Unqualified)]
        public decimal OvlStmtDisclFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlStmtDisclFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlStmtDisclFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OvlStmtDisclFee
        {
            get
            {
                if (this.OvlStmtDisclFeeValueSpecified)
                {
                    return this.OvlStmtDisclFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlStmtDisclFeeValue = value.GetValueOrDefault();
                this.OvlStmtDisclFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Payment", Order=101, Form=XmlSchemaForm.Unqualified)]
        public decimal PaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Payment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Payment
        {
            get
            {
                if (this.PaymentValueSpecified)
                {
                    return this.PaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentValue = value.GetValueOrDefault();
                this.PaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentApplicationMethod", Order=102, Form=XmlSchemaForm.Unqualified)]
        public short PaymentApplicationMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentApplicationMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentApplicationMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentApplicationMethod
        {
            get
            {
                if (this.PaymentApplicationMethodValueSpecified)
                {
                    return this.PaymentApplicationMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentApplicationMethodValue = value.GetValueOrDefault();
                this.PaymentApplicationMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalcType", Order=103, Form=XmlSchemaForm.Unqualified)]
        public short PaymentCalcTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalcType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalcTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentCalcType
        {
            get
            {
                if (this.PaymentCalcTypeValueSpecified)
                {
                    return this.PaymentCalcTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalcTypeValue = value.GetValueOrDefault();
                this.PaymentCalcTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCount", Order=104, Form=XmlSchemaForm.Unqualified)]
        public short PaymentCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentCount
        {
            get
            {
                if (this.PaymentCountValueSpecified)
                {
                    return this.PaymentCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCountValue = value.GetValueOrDefault();
                this.PaymentCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentFrequency", Order=105, Form=XmlSchemaForm.Unqualified)]
        public short PaymentFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentFrequency
        {
            get
            {
                if (this.PaymentFrequencyValueSpecified)
                {
                    return this.PaymentFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentFrequencyValue = value.GetValueOrDefault();
                this.PaymentFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentMethod", Order=106, Form=XmlSchemaForm.Unqualified)]
        public short PaymentMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentMethod
        {
            get
            {
                if (this.PaymentMethodValueSpecified)
                {
                    return this.PaymentMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentMethodValue = value.GetValueOrDefault();
                this.PaymentMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentSkipStartDay", Order=107, Form=XmlSchemaForm.Unqualified)]
        public short PaymentSkipStartDayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentSkipStartDay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentSkipStartDayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentSkipStartDay
        {
            get
            {
                if (this.PaymentSkipStartDayValueSpecified)
                {
                    return this.PaymentSkipStartDayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentSkipStartDayValue = value.GetValueOrDefault();
                this.PaymentSkipStartDayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentSkips", Order=108, Form=XmlSchemaForm.Unqualified)]
        public short PaymentSkipsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentSkips property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentSkipsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentSkips
        {
            get
            {
                if (this.PaymentSkipsValueSpecified)
                {
                    return this.PaymentSkipsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentSkipsValue = value.GetValueOrDefault();
                this.PaymentSkipsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentType", Order=109, Form=XmlSchemaForm.Unqualified)]
        public short PaymentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentType
        {
            get
            {
                if (this.PaymentTypeValueSpecified)
                {
                    return this.PaymentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentTypeValue = value.GetValueOrDefault();
                this.PaymentTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PercentPrincipal", Order=110, Form=XmlSchemaForm.Unqualified)]
        public decimal PercentPrincipalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PercentPrincipal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PercentPrincipalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PercentPrincipal
        {
            get
            {
                if (this.PercentPrincipalValueSpecified)
                {
                    return this.PercentPrincipalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PercentPrincipalValue = value.GetValueOrDefault();
                this.PercentPrincipalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicCap", Order=111, Form=XmlSchemaForm.Unqualified)]
        public decimal PeriodicCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PeriodicCap
        {
            get
            {
                if (this.PeriodicCapValueSpecified)
                {
                    return this.PeriodicCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicCapValue = value.GetValueOrDefault();
                this.PeriodicCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicFrequency", Order=112, Form=XmlSchemaForm.Unqualified)]
        public short PeriodicFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PeriodicFrequency
        {
            get
            {
                if (this.PeriodicFrequencyValueSpecified)
                {
                    return this.PeriodicFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicFrequencyValue = value.GetValueOrDefault();
                this.PeriodicFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicStartDate", Order=113, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PeriodicStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PeriodicStartDate
        {
            get
            {
                if (this.PeriodicStartDateValueSpecified)
                {
                    return this.PeriodicStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicStartDateValue = value.GetValueOrDefault();
                this.PeriodicStartDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PeriodicStartRate", Order=114, Form=XmlSchemaForm.Unqualified)]
        public decimal PeriodicStartRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicStartRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PeriodicStartRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PeriodicStartRate
        {
            get
            {
                if (this.PeriodicStartRateValueSpecified)
                {
                    return this.PeriodicStartRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PeriodicStartRateValue = value.GetValueOrDefault();
                this.PeriodicStartRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrepaymentPenalty", Order=115, Form=XmlSchemaForm.Unqualified)]
        public short PrepaymentPenaltyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrepaymentPenalty property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrepaymentPenaltyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrepaymentPenalty
        {
            get
            {
                if (this.PrepaymentPenaltyValueSpecified)
                {
                    return this.PrepaymentPenaltyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrepaymentPenaltyValue = value.GetValueOrDefault();
                this.PrepaymentPenaltyValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoAdvanceCutoff> _promoAdvanceCutoff;
        
        [XmlElementAttribute("PromoAdvanceCutoff", Order=116, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoAdvanceCutoff> PromoAdvanceCutoff
        {
            get
            {
                return _promoAdvanceCutoff;
            }
            set
            {
                _promoAdvanceCutoff = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoAdvanceCutoff collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoAdvanceCutoffSpecified
        {
            get
            {
                return ((this.PromoAdvanceCutoff != null) 
                            && (this.PromoAdvanceCutoff.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanDefault" /> class.</para>
        /// </summary>
        public LoanDefault()
        {
            this._promoAdvanceCutoff = new Collection<LoanDefaultPromoAdvanceCutoff>();
            this._promoEffectDate = new Collection<LoanDefaultPromoEffectDate>();
            this._promoExpireDate = new Collection<LoanDefaultPromoExpireDate>();
            this._promoRate = new Collection<LoanDefaultPromoRate>();
            this._promoRateMax = new Collection<LoanDefaultPromoRateMax>();
            this._promoRateMin = new Collection<LoanDefaultPromoRateMin>();
            this._promoRateOffset = new Collection<LoanDefaultPromoRateOffset>();
            this._promoRateType = new Collection<LoanDefaultPromoRateType>();
            this._promoType = new Collection<LoanDefaultPromoType>();
            this._service = new Collection<LoanDefaultService>();
            this._warningCode = new Collection<LoanDefaultWarningCode>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoEffectDate> _promoEffectDate;
        
        [XmlElementAttribute("PromoEffectDate", Order=117, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoEffectDate> PromoEffectDate
        {
            get
            {
                return _promoEffectDate;
            }
            set
            {
                _promoEffectDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoEffectDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoEffectDateSpecified
        {
            get
            {
                return ((this.PromoEffectDate != null) 
                            && (this.PromoEffectDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoExpireDate> _promoExpireDate;
        
        [XmlElementAttribute("PromoExpireDate", Order=118, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoExpireDate> PromoExpireDate
        {
            get
            {
                return _promoExpireDate;
            }
            set
            {
                _promoExpireDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoExpireDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoExpireDateSpecified
        {
            get
            {
                return ((this.PromoExpireDate != null) 
                            && (this.PromoExpireDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoRate> _promoRate;
        
        [XmlElementAttribute("PromoRate", Order=119, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoRate> PromoRate
        {
            get
            {
                return _promoRate;
            }
            set
            {
                _promoRate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoRate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoRateSpecified
        {
            get
            {
                return ((this.PromoRate != null) 
                            && (this.PromoRate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoRateMax> _promoRateMax;
        
        [XmlElementAttribute("PromoRateMax", Order=120, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoRateMax> PromoRateMax
        {
            get
            {
                return _promoRateMax;
            }
            set
            {
                _promoRateMax = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoRateMax collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoRateMaxSpecified
        {
            get
            {
                return ((this.PromoRateMax != null) 
                            && (this.PromoRateMax.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoRateMin> _promoRateMin;
        
        [XmlElementAttribute("PromoRateMin", Order=121, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoRateMin> PromoRateMin
        {
            get
            {
                return _promoRateMin;
            }
            set
            {
                _promoRateMin = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoRateMin collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoRateMinSpecified
        {
            get
            {
                return ((this.PromoRateMin != null) 
                            && (this.PromoRateMin.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoRateOffset> _promoRateOffset;
        
        [XmlElementAttribute("PromoRateOffset", Order=122, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoRateOffset> PromoRateOffset
        {
            get
            {
                return _promoRateOffset;
            }
            set
            {
                _promoRateOffset = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoRateOffset collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoRateOffsetSpecified
        {
            get
            {
                return ((this.PromoRateOffset != null) 
                            && (this.PromoRateOffset.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoRateType> _promoRateType;
        
        [XmlElementAttribute("PromoRateType", Order=123, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoRateType> PromoRateType
        {
            get
            {
                return _promoRateType;
            }
            set
            {
                _promoRateType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoRateType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoRateTypeSpecified
        {
            get
            {
                return ((this.PromoRateType != null) 
                            && (this.PromoRateType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultPromoType> _promoType;
        
        [XmlElementAttribute("PromoType", Order=124, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultPromoType> PromoType
        {
            get
            {
                return _promoType;
            }
            set
            {
                _promoType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PromoType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PromoTypeSpecified
        {
            get
            {
                return ((this.PromoType != null) 
                            && (this.PromoType.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PropertyAddressType", Order=125, Form=XmlSchemaForm.Unqualified)]
        public short PropertyAddressTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PropertyAddressType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PropertyAddressTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PropertyAddressType
        {
            get
            {
                if (this.PropertyAddressTypeValueSpecified)
                {
                    return this.PropertyAddressTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PropertyAddressTypeValue = value.GetValueOrDefault();
                this.PropertyAddressTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PurposeCode", Order=126, Form=XmlSchemaForm.Unqualified)]
        public short PurposeCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PurposeCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PurposeCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PurposeCode
        {
            get
            {
                if (this.PurposeCodeValueSpecified)
                {
                    return this.PurposeCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PurposeCodeValue = value.GetValueOrDefault();
                this.PurposeCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PutItemSchd", Order=127, Form=XmlSchemaForm.Unqualified)]
        public short PutItemSchdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PutItemSchd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PutItemSchdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PutItemSchd
        {
            get
            {
                if (this.PutItemSchdValueSpecified)
                {
                    return this.PutItemSchdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PutItemSchdValue = value.GetValueOrDefault();
                this.PutItemSchdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PutItemSchdType", Order=128, Form=XmlSchemaForm.Unqualified)]
        public short PutItemSchdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PutItemSchdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PutItemSchdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PutItemSchdType
        {
            get
            {
                if (this.PutItemSchdTypeValueSpecified)
                {
                    return this.PutItemSchdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PutItemSchdTypeValue = value.GetValueOrDefault();
                this.PutItemSchdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RateChangeCycleMonths", Order=129, Form=XmlSchemaForm.Unqualified)]
        public short RateChangeCycleMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RateChangeCycleMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RateChangeCycleMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RateChangeCycleMonths
        {
            get
            {
                if (this.RateChangeCycleMonthsValueSpecified)
                {
                    return this.RateChangeCycleMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RateChangeCycleMonthsValue = value.GetValueOrDefault();
                this.RateChangeCycleMonthsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RateRoundingMethod", Order=130, Form=XmlSchemaForm.Unqualified)]
        public short RateRoundingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RateRoundingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RateRoundingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RateRoundingMethod
        {
            get
            {
                if (this.RateRoundingMethodValueSpecified)
                {
                    return this.RateRoundingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RateRoundingMethodValue = value.GetValueOrDefault();
                this.RateRoundingMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=131, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RefundPostCode", Order=132, Form=XmlSchemaForm.Unqualified)]
        public short RefundPostCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RefundPostCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RefundPostCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RefundPostCode
        {
            get
            {
                if (this.RefundPostCodeValueSpecified)
                {
                    return this.RefundPostCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RefundPostCodeValue = value.GetValueOrDefault();
                this.RefundPostCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RiskRate", Order=133, Form=XmlSchemaForm.Unqualified)]
        public decimal RiskRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RiskRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RiskRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RiskRate
        {
            get
            {
                if (this.RiskRateValueSpecified)
                {
                    return this.RiskRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RiskRateValue = value.GetValueOrDefault();
                this.RiskRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RoundRateTo", Order=134, Form=XmlSchemaForm.Unqualified)]
        public decimal RoundRateToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RoundRateTo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RoundRateToValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RoundRateTo
        {
            get
            {
                if (this.RoundRateToValueSpecified)
                {
                    return this.RoundRateToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RoundRateToValue = value.GetValueOrDefault();
                this.RoundRateToValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxCityIndicator", Order=135, Form=XmlSchemaForm.Unqualified)]
        public short SalesTaxCityIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxCityIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxCityIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SalesTaxCityIndicator
        {
            get
            {
                if (this.SalesTaxCityIndicatorValueSpecified)
                {
                    return this.SalesTaxCityIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxCityIndicatorValue = value.GetValueOrDefault();
                this.SalesTaxCityIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxCountyIndicator", Order=136, Form=XmlSchemaForm.Unqualified)]
        public short SalesTaxCountyIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxCountyIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxCountyIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SalesTaxCountyIndicator
        {
            get
            {
                if (this.SalesTaxCountyIndicatorValueSpecified)
                {
                    return this.SalesTaxCountyIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxCountyIndicatorValue = value.GetValueOrDefault();
                this.SalesTaxCountyIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxStateIndicator", Order=137, Form=XmlSchemaForm.Unqualified)]
        public short SalesTaxStateIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxStateIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxStateIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SalesTaxStateIndicator
        {
            get
            {
                if (this.SalesTaxStateIndicatorValueSpecified)
                {
                    return this.SalesTaxStateIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxStateIndicatorValue = value.GetValueOrDefault();
                this.SalesTaxStateIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecuredCode", Order=138, Form=XmlSchemaForm.Unqualified)]
        public short SecuredCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecuredCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecuredCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SecuredCode
        {
            get
            {
                if (this.SecuredCodeValueSpecified)
                {
                    return this.SecuredCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecuredCodeValue = value.GetValueOrDefault();
                this.SecuredCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Seg0Description", Order=139, Form=XmlSchemaForm.Unqualified)]
        public string Seg0Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Seg0LevelPrinPmt", Order=140, Form=XmlSchemaForm.Unqualified)]
        public decimal Seg0LevelPrinPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Seg0LevelPrinPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Seg0LevelPrinPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Seg0LevelPrinPmt
        {
            get
            {
                if (this.Seg0LevelPrinPmtValueSpecified)
                {
                    return this.Seg0LevelPrinPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Seg0LevelPrinPmtValue = value.GetValueOrDefault();
                this.Seg0LevelPrinPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Seg0PaymentOrder", Order=141, Form=XmlSchemaForm.Unqualified)]
        public short Seg0PaymentOrderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Seg0PaymentOrder property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Seg0PaymentOrderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Seg0PaymentOrder
        {
            get
            {
                if (this.Seg0PaymentOrderValueSpecified)
                {
                    return this.Seg0PaymentOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Seg0PaymentOrderValue = value.GetValueOrDefault();
                this.Seg0PaymentOrderValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultService> _service;
        
        [XmlElementAttribute("Service", Order=142, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultService> Service
        {
            get
            {
                return _service;
            }
            set
            {
                _service = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Service collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ServiceSpecified
        {
            get
            {
                return ((this.Service != null) 
                            && (this.Service.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SplitRate", Order=143, Form=XmlSchemaForm.Unqualified)]
        public decimal SplitRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SplitRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SplitRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SplitRate
        {
            get
            {
                if (this.SplitRateValueSpecified)
                {
                    return this.SplitRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SplitRateValue = value.GetValueOrDefault();
                this.SplitRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SplitRateBalance", Order=144, Form=XmlSchemaForm.Unqualified)]
        public decimal SplitRateBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SplitRateBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SplitRateBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SplitRateBalance
        {
            get
            {
                if (this.SplitRateBalanceValueSpecified)
                {
                    return this.SplitRateBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SplitRateBalanceValue = value.GetValueOrDefault();
                this.SplitRateBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementGroup", Order=145, Form=XmlSchemaForm.Unqualified)]
        public short StatementGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementGroup
        {
            get
            {
                if (this.StatementGroupValueSpecified)
                {
                    return this.StatementGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementGroupValue = value.GetValueOrDefault();
                this.StatementGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementMailCode", Order=146, Form=XmlSchemaForm.Unqualified)]
        public short StatementMailCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementMailCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementMailCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementMailCode
        {
            get
            {
                if (this.StatementMailCodeValueSpecified)
                {
                    return this.StatementMailCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementMailCodeValue = value.GetValueOrDefault();
                this.StatementMailCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StmtMaxLateFee", Order=147, Form=XmlSchemaForm.Unqualified)]
        public decimal StmtMaxLateFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StmtMaxLateFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StmtMaxLateFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StmtMaxLateFee
        {
            get
            {
                if (this.StmtMaxLateFeeValueSpecified)
                {
                    return this.StmtMaxLateFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StmtMaxLateFeeValue = value.GetValueOrDefault();
                this.StmtMaxLateFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StmtMaxPenaltyApr", Order=148, Form=XmlSchemaForm.Unqualified)]
        public decimal StmtMaxPenaltyAprValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StmtMaxPenaltyApr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StmtMaxPenaltyAprValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StmtMaxPenaltyApr
        {
            get
            {
                if (this.StmtMaxPenaltyAprValueSpecified)
                {
                    return this.StmtMaxPenaltyAprValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StmtMaxPenaltyAprValue = value.GetValueOrDefault();
                this.StmtMaxPenaltyAprValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StudentLoanCode", Order=149, Form=XmlSchemaForm.Unqualified)]
        public short StudentLoanCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StudentLoanCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StudentLoanCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StudentLoanCode
        {
            get
            {
                if (this.StudentLoanCodeValueSpecified)
                {
                    return this.StudentLoanCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StudentLoanCodeValue = value.GetValueOrDefault();
                this.StudentLoanCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=150, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnamortizedFees", Order=151, Form=XmlSchemaForm.Unqualified)]
        public decimal UnamortizedFeesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnamortizedFees property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnamortizedFeesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnamortizedFees
        {
            get
            {
                if (this.UnamortizedFeesValueSpecified)
                {
                    return this.UnamortizedFeesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnamortizedFeesValue = value.GetValueOrDefault();
                this.UnamortizedFeesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=152, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=153, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=154, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=155, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=156, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [XmlElementAttribute("UserChar4", Order=157, Form=XmlSchemaForm.Unqualified)]
        public string UserChar4 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=158, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate2", Order=159, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate2
        {
            get
            {
                if (this.UserDate2ValueSpecified)
                {
                    return this.UserDate2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate2Value = value.GetValueOrDefault();
                this.UserDate2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VariableRateIndicator", Order=160, Form=XmlSchemaForm.Unqualified)]
        public short VariableRateIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VariableRateIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VariableRateIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> VariableRateIndicator
        {
            get
            {
                if (this.VariableRateIndicatorValueSpecified)
                {
                    return this.VariableRateIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VariableRateIndicatorValue = value.GetValueOrDefault();
                this.VariableRateIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanDefaultWarningCode> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=161, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanDefaultWarningCode> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=162, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Investor", Order=163, Form=XmlSchemaForm.Unqualified)]
        public short InvestorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Investor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvestorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Investor
        {
            get
            {
                if (this.InvestorValueSpecified)
                {
                    return this.InvestorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvestorValue = value.GetValueOrDefault();
                this.InvestorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RemittanceType", Order=164, Form=XmlSchemaForm.Unqualified)]
        public short RemittanceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RemittanceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RemittanceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RemittanceType
        {
            get
            {
                if (this.RemittanceTypeValueSpecified)
                {
                    return this.RemittanceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RemittanceTypeValue = value.GetValueOrDefault();
                this.RemittanceTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_2", Order=165, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version2 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=166)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
