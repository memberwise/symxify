//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("PayCalcFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("PayCalcFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class PayCalcFields
    {
        
        [XmlIgnoreAttribute()]
        private Collection<short> _balanceCutoff;
        
        [XmlElementAttribute("BalanceCutoff", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> BalanceCutoff
        {
            get
            {
                return _balanceCutoff;
            }
            set
            {
                _balanceCutoff = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BalanceCutoff collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BalanceCutoffSpecified
        {
            get
            {
                return ((this.BalanceCutoff != null) 
                            && (this.BalanceCutoff.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PayCalcFields" /> class.</para>
        /// </summary>
        public PayCalcFields()
        {
            this._balanceCutoff = new Collection<short>();
            this._intRateCutoff = new Collection<short>();
            this._payment14 = new Collection<short>();
            this._paymentPercent15 = new Collection<short>();
            this._payoffMonths = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceIncrement", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalanceIncrement
        {
            get
            {
                if (this.BalanceIncrementValueSpecified)
                {
                    return this.BalanceIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceIncrementValue = value.GetValueOrDefault();
                this.BalanceIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceIncrementRounding", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BalanceIncrementRoundingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceIncrementRounding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceIncrementRoundingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BalanceIncrementRounding
        {
            get
            {
                if (this.BalanceIncrementRoundingValueSpecified)
                {
                    return this.BalanceIncrementRoundingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceIncrementRoundingValue = value.GetValueOrDefault();
                this.BalanceIncrementRoundingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DefinedCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool DefinedCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefinedCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DefinedCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DefinedCode
        {
            get
            {
                if (this.DefinedCodeValueSpecified)
                {
                    return this.DefinedCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DefinedCodeValue = value.GetValueOrDefault();
                this.DefinedCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Description", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool DescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Description property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Description
        {
            get
            {
                if (this.DescriptionValueSpecified)
                {
                    return this.DescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DescriptionValue = value.GetValueOrDefault();
                this.DescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueGraceDays", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool DueGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DueGraceDays
        {
            get
            {
                if (this.DueGraceDaysValueSpecified)
                {
                    return this.DueGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueGraceDaysValue = value.GetValueOrDefault();
                this.DueGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _intRateCutoff;
        
        [XmlElementAttribute("IntRateCutoff", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> IntRateCutoff
        {
            get
            {
                return _intRateCutoff;
            }
            set
            {
                _intRateCutoff = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IntRateCutoff collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntRateCutoffSpecified
        {
            get
            {
                return ((this.IntRateCutoff != null) 
                            && (this.IntRateCutoff.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestAdjPercent", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool InterestAdjPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestAdjPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestAdjPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestAdjPercent
        {
            get
            {
                if (this.InterestAdjPercentValueSpecified)
                {
                    return this.InterestAdjPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestAdjPercentValue = value.GetValueOrDefault();
                this.InterestAdjPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LgDestnPmtCalcSetCode", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool LgDestnPmtCalcSetCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LgDestnPmtCalcSetCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LgDestnPmtCalcSetCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LgDestnPmtCalcSetCode
        {
            get
            {
                if (this.LgDestnPmtCalcSetCodeValueSpecified)
                {
                    return this.LgDestnPmtCalcSetCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LgDestnPmtCalcSetCodeValue = value.GetValueOrDefault();
                this.LgDestnPmtCalcSetCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LgSourcePmtCalcSetCode", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool LgSourcePmtCalcSetCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LgSourcePmtCalcSetCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LgSourcePmtCalcSetCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LgSourcePmtCalcSetCode
        {
            get
            {
                if (this.LgSourcePmtCalcSetCodeValueSpecified)
                {
                    return this.LgSourcePmtCalcSetCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LgSourcePmtCalcSetCodeValue = value.GetValueOrDefault();
                this.LgSourcePmtCalcSetCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Payment10", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool Payment10Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Payment10 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Payment10ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Payment10
        {
            get
            {
                if (this.Payment10ValueSpecified)
                {
                    return this.Payment10Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Payment10Value = value.GetValueOrDefault();
                this.Payment10ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _payment14;
        
        [XmlElementAttribute("Payment14", Order=11, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Payment14
        {
            get
            {
                return _payment14;
            }
            set
            {
                _payment14 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Payment14 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Payment14Specified
        {
            get
            {
                return ((this.Payment14 != null) 
                            && (this.Payment14.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalculationFormula", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentCalculationFormulaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalculationFormula property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalculationFormulaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentCalculationFormula
        {
            get
            {
                if (this.PaymentCalculationFormulaValueSpecified)
                {
                    return this.PaymentCalculationFormulaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalculationFormulaValue = value.GetValueOrDefault();
                this.PaymentCalculationFormulaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalculationSetCode", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentCalculationSetCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalculationSetCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalculationSetCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentCalculationSetCode
        {
            get
            {
                if (this.PaymentCalculationSetCodeValueSpecified)
                {
                    return this.PaymentCalculationSetCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalculationSetCodeValue = value.GetValueOrDefault();
                this.PaymentCalculationSetCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalculationType", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentCalculationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalculationType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalculationTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentCalculationType
        {
            get
            {
                if (this.PaymentCalculationTypeValueSpecified)
                {
                    return this.PaymentCalculationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalculationTypeValue = value.GetValueOrDefault();
                this.PaymentCalculationTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentFrequencyAdjustment", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentFrequencyAdjustmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentFrequencyAdjustment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentFrequencyAdjustmentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentFrequencyAdjustment
        {
            get
            {
                if (this.PaymentFrequencyAdjustmentValueSpecified)
                {
                    return this.PaymentFrequencyAdjustmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentFrequencyAdjustmentValue = value.GetValueOrDefault();
                this.PaymentFrequencyAdjustmentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentMinimum", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentMinimumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentMinimum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentMinimumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentMinimum
        {
            get
            {
                if (this.PaymentMinimumValueSpecified)
                {
                    return this.PaymentMinimumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentMinimumValue = value.GetValueOrDefault();
                this.PaymentMinimumValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _paymentPercent15;
        
        [XmlElementAttribute("PaymentPercent15", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PaymentPercent15
        {
            get
            {
                return _paymentPercent15;
            }
            set
            {
                _paymentPercent15 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PaymentPercent15 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PaymentPercent15Specified
        {
            get
            {
                return ((this.PaymentPercent15 != null) 
                            && (this.PaymentPercent15.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentPercent2", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentPercent2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentPercent2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentPercent2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentPercent2
        {
            get
            {
                if (this.PaymentPercent2ValueSpecified)
                {
                    return this.PaymentPercent2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentPercent2Value = value.GetValueOrDefault();
                this.PaymentPercent2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _payoffMonths;
        
        [XmlElementAttribute("PayoffMonths", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PayoffMonths
        {
            get
            {
                return _payoffMonths;
            }
            set
            {
                _payoffMonths = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PayoffMonths collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PayoffMonthsSpecified
        {
            get
            {
                return ((this.PayoffMonths != null) 
                            && (this.PayoffMonths.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RoundPaymentUptoMultiple", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool RoundPaymentUptoMultipleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RoundPaymentUptoMultiple property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RoundPaymentUptoMultipleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RoundPaymentUptoMultiple
        {
            get
            {
                if (this.RoundPaymentUptoMultipleValueSpecified)
                {
                    return this.RoundPaymentUptoMultipleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RoundPaymentUptoMultipleValue = value.GetValueOrDefault();
                this.RoundPaymentUptoMultipleValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=21, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=22)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
