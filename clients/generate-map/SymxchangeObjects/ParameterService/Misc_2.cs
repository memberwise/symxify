//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Misc", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Misc", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(MiscFields_2))]
    public partial class Misc_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptThresholdPmtinTllr", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptThresholdPmtinTllrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptThresholdPmtinTllr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptThresholdPmtinTllrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptThresholdPmtinTllr
        {
            get
            {
                if (this.AcceptThresholdPmtinTllrValueSpecified)
                {
                    return this.AcceptThresholdPmtinTllrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptThresholdPmtinTllrValue = value.GetValueOrDefault();
                this.AcceptThresholdPmtinTllrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptUnappliedPmtinTlr", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptUnappliedPmtinTlrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptUnappliedPmtinTlr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptUnappliedPmtinTlrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptUnappliedPmtinTlr
        {
            get
            {
                if (this.AcceptUnappliedPmtinTlrValueSpecified)
                {
                    return this.AcceptUnappliedPmtinTlrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptUnappliedPmtinTlrValue = value.GetValueOrDefault();
                this.AcceptUnappliedPmtinTlrValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AccountManagerSpecfile", Order=2, Form=XmlSchemaForm.Unqualified)]
        public string AccountManagerSpecfile { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcctVerifyOnIqFmMenus", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AcctVerifyOnIqFmMenusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcctVerifyOnIqFmMenus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcctVerifyOnIqFmMenusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcctVerifyOnIqFmMenus
        {
            get
            {
                if (this.AcctVerifyOnIqFmMenusValueSpecified)
                {
                    return this.AcctVerifyOnIqFmMenusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcctVerifyOnIqFmMenusValue = value.GetValueOrDefault();
                this.AcctVerifyOnIqFmMenusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcctVerifyonXfrDeposit", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool AcctVerifyonXfrDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcctVerifyonXfrDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcctVerifyonXfrDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcctVerifyonXfrDeposit
        {
            get
            {
                if (this.AcctVerifyonXfrDepositValueSpecified)
                {
                    return this.AcctVerifyonXfrDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcctVerifyonXfrDepositValue = value.GetValueOrDefault();
                this.AcctVerifyonXfrDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcsSys", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool AcsSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcsSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcsSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcsSys
        {
            get
            {
                if (this.AcsSysValueSpecified)
                {
                    return this.AcsSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcsSysValue = value.GetValueOrDefault();
                this.AcsSysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AddtoCheckPayeeLines", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AddtoCheckPayeeLinesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AddtoCheckPayeeLines property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AddtoCheckPayeeLinesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AddtoCheckPayeeLines
        {
            get
            {
                if (this.AddtoCheckPayeeLinesValueSpecified)
                {
                    return this.AddtoCheckPayeeLinesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AddtoCheckPayeeLinesValue = value.GetValueOrDefault();
                this.AddtoCheckPayeeLinesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApAchPayments", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool ApAchPaymentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApAchPayments property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApAchPaymentsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApAchPayments
        {
            get
            {
                if (this.ApAchPaymentsValueSpecified)
                {
                    return this.ApAchPaymentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApAchPaymentsValue = value.GetValueOrDefault();
                this.ApAchPaymentsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AudioAccessLen", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short AudioAccessLenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AudioAccessLen property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AudioAccessLenValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AudioAccessLen
        {
            get
            {
                if (this.AudioAccessLenValueSpecified)
                {
                    return this.AudioAccessLenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AudioAccessLenValue = value.GetValueOrDefault();
                this.AudioAccessLenValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AudioLnApp", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool AudioLnAppValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AudioLnApp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AudioLnAppValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AudioLnApp
        {
            get
            {
                if (this.AudioLnAppValueSpecified)
                {
                    return this.AudioLnAppValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AudioLnAppValue = value.GetValueOrDefault();
                this.AudioLnAppValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AudioPinHbPwdAccess", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short AudioPinHbPwdAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AudioPinHbPwdAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AudioPinHbPwdAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AudioPinHbPwdAccess
        {
            get
            {
                if (this.AudioPinHbPwdAccessValueSpecified)
                {
                    return this.AudioPinHbPwdAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AudioPinHbPwdAccessValue = value.GetValueOrDefault();
                this.AudioPinHbPwdAccessValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutoBatch", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool AutoBatchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoBatch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutoBatchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutoBatch
        {
            get
            {
                if (this.AutoBatchValueSpecified)
                {
                    return this.AutoBatchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoBatchValue = value.GetValueOrDefault();
                this.AutoBatchValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AvailBalHoldTypeExclList", Order=12, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap AvailBalHoldTypeExclList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Bankruptcy", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool BankruptcyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bankruptcy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BankruptcyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Bankruptcy
        {
            get
            {
                if (this.BankruptcyValueSpecified)
                {
                    return this.BankruptcyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BankruptcyValue = value.GetValueOrDefault();
                this.BankruptcyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchOutputtoPrintControl", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool BatchOutputtoPrintControlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchOutputtoPrintControl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchOutputtoPrintControlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BatchOutputtoPrintControl
        {
            get
            {
                if (this.BatchOutputtoPrintControlValueSpecified)
                {
                    return this.BatchOutputtoPrintControlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchOutputtoPrintControlValue = value.GetValueOrDefault();
                this.BatchOutputtoPrintControlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Biodentify", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool BiodentifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Biodentify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BiodentifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Biodentify
        {
            get
            {
                if (this.BiodentifyValueSpecified)
                {
                    return this.BiodentifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BiodentifyValue = value.GetValueOrDefault();
                this.BiodentifyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondsRequireMicrData", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short BondsRequireMicrDataValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondsRequireMicrData property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondsRequireMicrDataValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BondsRequireMicrData
        {
            get
            {
                if (this.BondsRequireMicrDataValueSpecified)
                {
                    return this.BondsRequireMicrDataValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondsRequireMicrDataValue = value.GetValueOrDefault();
                this.BondsRequireMicrDataValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BulkDepHoldIncludesCash", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool BulkDepHoldIncludesCashValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BulkDepHoldIncludesCash property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BulkDepHoldIncludesCashValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BulkDepHoldIncludesCash
        {
            get
            {
                if (this.BulkDepHoldIncludesCashValueSpecified)
                {
                    return this.BulkDepHoldIncludesCashValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BulkDepHoldIncludesCashValue = value.GetValueOrDefault();
                this.BulkDepHoldIncludesCashValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BulkDepositHoldDays", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short BulkDepositHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BulkDepositHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BulkDepositHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BulkDepositHoldDays
        {
            get
            {
                if (this.BulkDepositHoldDaysValueSpecified)
                {
                    return this.BulkDepositHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BulkDepositHoldDaysValue = value.GetValueOrDefault();
                this.BulkDepositHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BulkReconDays", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short BulkReconDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BulkReconDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BulkReconDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BulkReconDays
        {
            get
            {
                if (this.BulkReconDaysValueSpecified)
                {
                    return this.BulkReconDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BulkReconDaysValue = value.GetValueOrDefault();
                this.BulkReconDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardActRounding", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool CardActRoundingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardActRounding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardActRoundingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardActRounding
        {
            get
            {
                if (this.CardActRoundingValueSpecified)
                {
                    return this.CardActRoundingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardActRoundingValue = value.GetValueOrDefault();
                this.CardActRoundingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardDisputeWarning", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short CardDisputeWarningValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardDisputeWarning property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardDisputeWarningValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardDisputeWarning
        {
            get
            {
                if (this.CardDisputeWarningValueSpecified)
                {
                    return this.CardDisputeWarningValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardDisputeWarningValue = value.GetValueOrDefault();
                this.CardDisputeWarningValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CardNumberMask", Order=22, Form=XmlSchemaForm.Unqualified)]
        public string CardNumberMask { get; set; }
        
        [XmlElementAttribute("CardSwipeAuditFile", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string CardSwipeAuditFile { get; set; }
        
        [XmlElementAttribute("CashReportingGlCodes", Order=24, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CashReportingGlCodes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CcBalanceTransfer", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool CcBalanceTransferValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CcBalanceTransfer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CcBalanceTransferValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CcBalanceTransfer
        {
            get
            {
                if (this.CcBalanceTransferValueSpecified)
                {
                    return this.CcBalanceTransferValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CcBalanceTransferValue = value.GetValueOrDefault();
                this.CcBalanceTransferValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CcExpansion", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool CcExpansionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CcExpansion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CcExpansionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CcExpansion
        {
            get
            {
                if (this.CcExpansionValueSpecified)
                {
                    return this.CcExpansionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CcExpansionValue = value.GetValueOrDefault();
                this.CcExpansionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CdmSys", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool CdmSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CdmSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CdmSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CdmSys
        {
            get
            {
                if (this.CdmSysValueSpecified)
                {
                    return this.CdmSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CdmSysValue = value.GetValueOrDefault();
                this.CdmSysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CertApyEarnedDisclosure", Order=28, Form=XmlSchemaForm.Unqualified)]
        public short CertApyEarnedDisclosureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CertApyEarnedDisclosure property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CertApyEarnedDisclosureValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CertApyEarnedDisclosure
        {
            get
            {
                if (this.CertApyEarnedDisclosureValueSpecified)
                {
                    return this.CertApyEarnedDisclosureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CertApyEarnedDisclosureValue = value.GetValueOrDefault();
                this.CertApyEarnedDisclosureValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CertPenaltybyPowerOn", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool CertPenaltybyPowerOnValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CertPenaltybyPowerOn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CertPenaltybyPowerOnValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CertPenaltybyPowerOn
        {
            get
            {
                if (this.CertPenaltybyPowerOnValueSpecified)
                {
                    return this.CertPenaltybyPowerOnValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CertPenaltybyPowerOnValue = value.GetValueOrDefault();
                this.CertPenaltybyPowerOnValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CertifiedExpirationDays", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short CertifiedExpirationDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CertifiedExpirationDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CertifiedExpirationDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CertifiedExpirationDays
        {
            get
            {
                if (this.CertifiedExpirationDaysValueSpecified)
                {
                    return this.CertifiedExpirationDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CertifiedExpirationDaysValue = value.GetValueOrDefault();
                this.CertifiedExpirationDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CfmCdmSys", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool CfmCdmSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CfmCdmSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CfmCdmSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CfmCdmSys
        {
            get
            {
                if (this.CfmCdmSysValueSpecified)
                {
                    return this.CfmCdmSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CfmCdmSysValue = value.GetValueOrDefault();
                this.CfmCdmSysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Chapter4TaxRate", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal Chapter4TaxRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Chapter4TaxRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Chapter4TaxRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Chapter4TaxRate
        {
            get
            {
                if (this.Chapter4TaxRateValueSpecified)
                {
                    return this.Chapter4TaxRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Chapter4TaxRateValue = value.GetValueOrDefault();
                this.Chapter4TaxRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffPaymentOrder", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short ChargeOffPaymentOrderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffPaymentOrder property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffPaymentOrderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargeOffPaymentOrder
        {
            get
            {
                if (this.ChargeOffPaymentOrderValueSpecified)
                {
                    return this.ChargeOffPaymentOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffPaymentOrderValue = value.GetValueOrDefault();
                this.ChargeOffPaymentOrderValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargePartialCapFee", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool ChargePartialCapFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargePartialCapFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargePartialCapFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargePartialCapFee
        {
            get
            {
                if (this.ChargePartialCapFeeValueSpecified)
                {
                    return this.ChargePartialCapFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargePartialCapFeeValue = value.GetValueOrDefault();
                this.ChargePartialCapFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargedOffLoanPmtOption", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short ChargedOffLoanPmtOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargedOffLoanPmtOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargedOffLoanPmtOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargedOffLoanPmtOption
        {
            get
            {
                if (this.ChargedOffLoanPmtOptionValueSpecified)
                {
                    return this.ChargedOffLoanPmtOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargedOffLoanPmtOptionValue = value.GetValueOrDefault();
                this.ChargedOffLoanPmtOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ChargedOffLoanTypesList", Order=36, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ChargedOffLoanTypesList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargedOffShareDepOption", Order=37, Form=XmlSchemaForm.Unqualified)]
        public short ChargedOffShareDepOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargedOffShareDepOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargedOffShareDepOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargedOffShareDepOption
        {
            get
            {
                if (this.ChargedOffShareDepOptionValueSpecified)
                {
                    return this.ChargedOffShareDepOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargedOffShareDepOptionValue = value.GetValueOrDefault();
                this.ChargedOffShareDepOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ChargedOffShareTypesList", Order=38, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ChargedOffShareTypesList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckDepTrack", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool CheckDepTrackValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckDepTrack property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckDepTrackValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckDepTrack
        {
            get
            {
                if (this.CheckDepTrackValueSpecified)
                {
                    return this.CheckDepTrackValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckDepTrackValue = value.GetValueOrDefault();
                this.CheckDepTrackValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckFmHistoryControl", Order=40, Form=XmlSchemaForm.Unqualified)]
        public short CheckFmHistoryControlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckFmHistoryControl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckFmHistoryControlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CheckFmHistoryControl
        {
            get
            {
                if (this.CheckFmHistoryControlValueSpecified)
                {
                    return this.CheckFmHistoryControlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckFmHistoryControlValue = value.GetValueOrDefault();
                this.CheckFmHistoryControlValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckName", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string CheckName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckPrintFormat", Order=42, Form=XmlSchemaForm.Unqualified)]
        public short CheckPrintFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckPrintFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckPrintFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CheckPrintFormat
        {
            get
            {
                if (this.CheckPrintFormatValueSpecified)
                {
                    return this.CheckPrintFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckPrintFormatValue = value.GetValueOrDefault();
                this.CheckPrintFormatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckValidatorUse", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short CheckValidatorUseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckValidatorUse property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckValidatorUseValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CheckValidatorUse
        {
            get
            {
                if (this.CheckValidatorUseValueSpecified)
                {
                    return this.CheckValidatorUseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckValidatorUseValue = value.GetValueOrDefault();
                this.CheckValidatorUseValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CheckingName", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string CheckingName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChecksRequireMicrData", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short ChecksRequireMicrDataValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChecksRequireMicrData property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChecksRequireMicrDataValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChecksRequireMicrData
        {
            get
            {
                if (this.ChecksRequireMicrDataValueSpecified)
                {
                    return this.ChecksRequireMicrDataValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChecksRequireMicrDataValue = value.GetValueOrDefault();
                this.ChecksRequireMicrDataValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChgAcctNumWizLookupType", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short ChgAcctNumWizLookupTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChgAcctNumWizLookupType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChgAcctNumWizLookupTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChgAcctNumWizLookupType
        {
            get
            {
                if (this.ChgAcctNumWizLookupTypeValueSpecified)
                {
                    return this.ChgAcctNumWizLookupTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChgAcctNumWizLookupTypeValue = value.GetValueOrDefault();
                this.ChgAcctNumWizLookupTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ChgAcctNumWizSpecfile", Order=47, Form=XmlSchemaForm.Unqualified)]
        public string ChgAcctNumWizSpecfile { get; set; }
        
        [XmlElementAttribute("CkValidatorRtNumber", Order=48, Form=XmlSchemaForm.Unqualified)]
        public string CkValidatorRtNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByCdMoTcTrancodes", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByCdMoTcTrancodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByCdMoTcTrancodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByCdMoTcTrancodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByCdMoTcTrancodes
        {
            get
            {
                if (this.CmntByCdMoTcTrancodesValueSpecified)
                {
                    return this.CmntByCdMoTcTrancodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByCdMoTcTrancodesValue = value.GetValueOrDefault();
                this.CmntByCdMoTcTrancodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByFdFrTrancodes", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByFdFrTrancodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByFdFrTrancodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByFdFrTrancodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByFdFrTrancodes
        {
            get
            {
                if (this.CmntByFdFrTrancodesValueSpecified)
                {
                    return this.CmntByFdFrTrancodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByFdFrTrancodesValue = value.GetValueOrDefault();
                this.CmntByFdFrTrancodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByKcTrancode", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByKcTrancodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByKcTrancode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByKcTrancodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByKcTrancode
        {
            get
            {
                if (this.CmntByKcTrancodeValueSpecified)
                {
                    return this.CmntByKcTrancodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByKcTrancodeValue = value.GetValueOrDefault();
                this.CmntByKcTrancodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByKdKoKsTrancodes", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByKdKoKsTrancodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByKdKoKsTrancodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByKdKoKsTrancodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByKdKoKsTrancodes
        {
            get
            {
                if (this.CmntByKdKoKsTrancodesValueSpecified)
                {
                    return this.CmntByKdKoKsTrancodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByKdKoKsTrancodesValue = value.GetValueOrDefault();
                this.CmntByKdKoKsTrancodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByKrTranCode", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByKrTranCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByKrTranCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByKrTranCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByKrTranCode
        {
            get
            {
                if (this.CmntByKrTranCodeValueSpecified)
                {
                    return this.CmntByKrTranCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByKrTranCodeValue = value.GetValueOrDefault();
                this.CmntByKrTranCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByNsfAchAmount", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByNsfAchAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByNsfAchAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByNsfAchAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByNsfAchAmount
        {
            get
            {
                if (this.CmntByNsfAchAmountValueSpecified)
                {
                    return this.CmntByNsfAchAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByNsfAchAmountValue = value.GetValueOrDefault();
                this.CmntByNsfAchAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntByNsfDraftAmount", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool CmntByNsfDraftAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntByNsfDraftAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntByNsfDraftAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntByNsfDraftAmount
        {
            get
            {
                if (this.CmntByNsfDraftAmountValueSpecified)
                {
                    return this.CmntByNsfDraftAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntByNsfDraftAmountValue = value.GetValueOrDefault();
                this.CmntByNsfDraftAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntBySpTrancode", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool CmntBySpTrancodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntBySpTrancode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntBySpTrancodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntBySpTrancode
        {
            get
            {
                if (this.CmntBySpTrancodeValueSpecified)
                {
                    return this.CmntBySpTrancodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntBySpTrancodeValue = value.GetValueOrDefault();
                this.CmntBySpTrancodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntbyCheckHold", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool CmntbyCheckHoldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntbyCheckHold property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntbyCheckHoldValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntbyCheckHold
        {
            get
            {
                if (this.CmntbyCheckHoldValueSpecified)
                {
                    return this.CmntbyCheckHoldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntbyCheckHoldValue = value.GetValueOrDefault();
                this.CmntbyCheckHoldValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CmntbyTellerTrnCodeFees", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool CmntbyTellerTrnCodeFeesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmntbyTellerTrnCodeFees property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CmntbyTellerTrnCodeFeesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CmntbyTellerTrnCodeFees
        {
            get
            {
                if (this.CmntbyTellerTrnCodeFeesValueSpecified)
                {
                    return this.CmntbyTellerTrnCodeFeesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CmntbyTellerTrnCodeFeesValue = value.GetValueOrDefault();
                this.CmntbyTellerTrnCodeFeesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollateralSystem", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool CollateralSystemValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollateralSystem property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollateralSystemValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CollateralSystem
        {
            get
            {
                if (this.CollateralSystemValueSpecified)
                {
                    return this.CollateralSystemValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollateralSystemValue = value.GetValueOrDefault();
                this.CollateralSystemValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CombinationLoans", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool CombinationLoansValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CombinationLoans property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CombinationLoansValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CombinationLoans
        {
            get
            {
                if (this.CombinationLoansValueSpecified)
                {
                    return this.CombinationLoansValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CombinationLoansValue = value.GetValueOrDefault();
                this.CombinationLoansValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode0Allowed", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short CommentCode0AllowedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode0Allowed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCode0AllowedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode0Allowed
        {
            get
            {
                if (this.CommentCode0AllowedValueSpecified)
                {
                    return this.CommentCode0AllowedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCode0AllowedValue = value.GetValueOrDefault();
                this.CommentCode0AllowedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCodeRequired", Order=62, Form=XmlSchemaForm.Unqualified)]
        public short CommentCodeRequiredValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCodeRequired property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeRequiredValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCodeRequired
        {
            get
            {
                if (this.CommentCodeRequiredValueSpecified)
                {
                    return this.CommentCodeRequiredValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeRequiredValue = value.GetValueOrDefault();
                this.CommentCodeRequiredValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConfirmationSequence", Order=63, Form=XmlSchemaForm.Unqualified)]
        public int ConfirmationSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConfirmationSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConfirmationSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ConfirmationSequence
        {
            get
            {
                if (this.ConfirmationSequenceValueSpecified)
                {
                    return this.ConfirmationSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConfirmationSequenceValue = value.GetValueOrDefault();
                this.ConfirmationSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayCommentCode", Order=64, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayCommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayCommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayCommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayCommentCode
        {
            get
            {
                if (this.CourtesyPayCommentCodeValueSpecified)
                {
                    return this.CourtesyPayCommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayCommentCodeValue = value.GetValueOrDefault();
                this.CourtesyPayCommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CourtesyPayFeeDescription", Order=65, Form=XmlSchemaForm.Unqualified)]
        public string CourtesyPayFeeDescription { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayFeeGlCode", Order=66, Form=XmlSchemaForm.Unqualified)]
        public short CourtesyPayFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CourtesyPayFeeGlCode
        {
            get
            {
                if (this.CourtesyPayFeeGlCodeValueSpecified)
                {
                    return this.CourtesyPayFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayFeeGlCodeValue = value.GetValueOrDefault();
                this.CourtesyPayFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateMemoExceptionItems", Order=67, Form=XmlSchemaForm.Unqualified)]
        public bool CreateMemoExceptionItemsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateMemoExceptionItems property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateMemoExceptionItemsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateMemoExceptionItems
        {
            get
            {
                if (this.CreateMemoExceptionItemsValueSpecified)
                {
                    return this.CreateMemoExceptionItemsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateMemoExceptionItemsValue = value.GetValueOrDefault();
                this.CreateMemoExceptionItemsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateRateChangeComment", Order=68, Form=XmlSchemaForm.Unqualified)]
        public bool CreateRateChangeCommentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateRateChangeComment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateRateChangeCommentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateRateChangeComment
        {
            get
            {
                if (this.CreateRateChangeCommentValueSpecified)
                {
                    return this.CreateRateChangeCommentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateRateChangeCommentValue = value.GetValueOrDefault();
                this.CreateRateChangeCommentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredRepSys", Order=69, Form=XmlSchemaForm.Unqualified)]
        public bool CredRepSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredRepSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredRepSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CredRepSys
        {
            get
            {
                if (this.CredRepSysValueSpecified)
                {
                    return this.CredRepSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredRepSysValue = value.GetValueOrDefault();
                this.CredRepSysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditCardLocAvailable", Order=70, Form=XmlSchemaForm.Unqualified)]
        public short CreditCardLocAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditCardLocAvailable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditCardLocAvailableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreditCardLocAvailable
        {
            get
            {
                if (this.CreditCardLocAvailableValueSpecified)
                {
                    return this.CreditCardLocAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditCardLocAvailableValue = value.GetValueOrDefault();
                this.CreditCardLocAvailableValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CreditDebitCardTypeList", Order=71, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CreditDebitCardTypeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CsTtInquiries", Order=72, Form=XmlSchemaForm.Unqualified)]
        public bool CsTtInquiriesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CsTtInquiries property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CsTtInquiriesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CsTtInquiries
        {
            get
            {
                if (this.CsTtInquiriesValueSpecified)
                {
                    return this.CsTtInquiriesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CsTtInquiriesValue = value.GetValueOrDefault();
                this.CsTtInquiriesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ctr", Order=73, Form=XmlSchemaForm.Unqualified)]
        public bool CtrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ctr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CtrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Ctr
        {
            get
            {
                if (this.CtrValueSpecified)
                {
                    return this.CtrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CtrValue = value.GetValueOrDefault();
                this.CtrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CuType", Order=74, Form=XmlSchemaForm.Unqualified)]
        public short CuTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CuType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CuTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CuType
        {
            get
            {
                if (this.CuTypeValueSpecified)
                {
                    return this.CuTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CuTypeValue = value.GetValueOrDefault();
                this.CuTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CusoInstitution", Order=75, Form=XmlSchemaForm.Unqualified)]
        public short CusoInstitutionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CusoInstitution property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CusoInstitutionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CusoInstitution
        {
            get
            {
                if (this.CusoInstitutionValueSpecified)
                {
                    return this.CusoInstitutionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CusoInstitutionValue = value.GetValueOrDefault();
                this.CusoInstitutionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DatabaseEncryption", Order=76, Form=XmlSchemaForm.Unqualified)]
        public short DatabaseEncryptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DatabaseEncryption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DatabaseEncryptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DatabaseEncryption
        {
            get
            {
                if (this.DatabaseEncryptionValueSpecified)
                {
                    return this.DatabaseEncryptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DatabaseEncryptionValue = value.GetValueOrDefault();
                this.DatabaseEncryptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscDbEvolution_2> _dbEvolution;
        
        [XmlElementAttribute("DbEvolution", Order=77, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscDbEvolution_2> DbEvolution
        {
            get
            {
                return _dbEvolution;
            }
            set
            {
                _dbEvolution = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DbEvolution collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DbEvolutionSpecified
        {
            get
            {
                return ((this.DbEvolution != null) 
                            && (this.DbEvolution.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Misc_2" /> class.</para>
        /// </summary>
        public Misc_2()
        {
            this._dbEvolution = new Collection<MiscDbEvolution_2>();
            this._dbEvolutionReport = new Collection<MiscDbEvolutionReport_2>();
            this._draftPreauthorized = new Collection<MiscDraftPreauthorized_2>();
            this._employeePayroll = new Collection<MiscEmployeePayroll_2>();
            this._paymentHistoryDayCutoff = new Collection<MiscPaymentHistoryDayCutoff_2>();
            this._relAltCourtesyPayFee1 = new Collection<MiscRelAltCourtesyPayFee1_2>();
            this._relAltCourtesyPayFee2 = new Collection<MiscRelAltCourtesyPayFee2_2>();
            this._relAltCourtesyPayFee3 = new Collection<MiscRelAltCourtesyPayFee3_2>();
            this._relAltCourtesyPayFee4 = new Collection<MiscRelAltCourtesyPayFee4_2>();
            this._relAltCourtesyPayFee5 = new Collection<MiscRelAltCourtesyPayFee5_2>();
            this._relAltCourtesyPayFee6 = new Collection<MiscRelAltCourtesyPayFee6_2>();
            this._relAltCourtesyPayTier1 = new Collection<MiscRelAltCourtesyPayTier1_2>();
            this._relAltCourtesyPayTier2 = new Collection<MiscRelAltCourtesyPayTier2_2>();
            this._relAltCourtesyPayTier3 = new Collection<MiscRelAltCourtesyPayTier3_2>();
            this._relAltCourtesyPayTier4 = new Collection<MiscRelAltCourtesyPayTier4_2>();
            this._relAltCourtesyPayTier5 = new Collection<MiscRelAltCourtesyPayTier5_2>();
            this._relAltCourtesyPayTier6 = new Collection<MiscRelAltCourtesyPayTier6_2>();
            this._relCodeList = new Collection<MiscRelCodeList_2>();
            this._relCourtesyPayFee1 = new Collection<MiscRelCourtesyPayFee1_2>();
            this._relCourtesyPayFee2 = new Collection<MiscRelCourtesyPayFee2_2>();
            this._relCourtesyPayFee3 = new Collection<MiscRelCourtesyPayFee3_2>();
            this._relCourtesyPayFee4 = new Collection<MiscRelCourtesyPayFee4_2>();
            this._relCourtesyPayFee5 = new Collection<MiscRelCourtesyPayFee5_2>();
            this._relCourtesyPayFee6 = new Collection<MiscRelCourtesyPayFee6_2>();
            this._relCourtesyPayTier1 = new Collection<MiscRelCourtesyPayTier1_2>();
            this._relCourtesyPayTier2 = new Collection<MiscRelCourtesyPayTier2_2>();
            this._relCourtesyPayTier3 = new Collection<MiscRelCourtesyPayTier3_2>();
            this._relCourtesyPayTier4 = new Collection<MiscRelCourtesyPayTier4_2>();
            this._relCourtesyPayTier5 = new Collection<MiscRelCourtesyPayTier5_2>();
            this._relCourtesyPayTier6 = new Collection<MiscRelCourtesyPayTier6_2>();
            this._relOverdrawAddonXfrFee = new Collection<MiscRelOverdrawAddonXfrFee_2>();
            this._relOverdrawComboXfrFee = new Collection<MiscRelOverdrawComboXfrFee_2>();
            this._relOverdrawWdXfrFee = new Collection<MiscRelOverdrawWdXfrFee_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscDbEvolutionReport_2> _dbEvolutionReport;
        
        [XmlElementAttribute("DbEvolutionReport", Order=78, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscDbEvolutionReport_2> DbEvolutionReport
        {
            get
            {
                return _dbEvolutionReport;
            }
            set
            {
                _dbEvolutionReport = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DbEvolutionReport collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DbEvolutionReportSpecified
        {
            get
            {
                return ((this.DbEvolutionReport != null) 
                            && (this.DbEvolutionReport.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DealerReserveAccounting", Order=79, Form=XmlSchemaForm.Unqualified)]
        public bool DealerReserveAccountingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DealerReserveAccounting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DealerReserveAccountingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DealerReserveAccounting
        {
            get
            {
                if (this.DealerReserveAccountingValueSpecified)
                {
                    return this.DealerReserveAccountingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DealerReserveAccountingValue = value.GetValueOrDefault();
                this.DealerReserveAccountingValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DemandTranCheckReference", Order=80, Form=XmlSchemaForm.Unqualified)]
        public string DemandTranCheckReference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DemandTranMaxLookbackDays", Order=81, Form=XmlSchemaForm.Unqualified)]
        public short DemandTranMaxLookbackDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DemandTranMaxLookbackDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DemandTranMaxLookbackDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DemandTranMaxLookbackDays
        {
            get
            {
                if (this.DemandTranMaxLookbackDaysValueSpecified)
                {
                    return this.DemandTranMaxLookbackDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DemandTranMaxLookbackDaysValue = value.GetValueOrDefault();
                this.DemandTranMaxLookbackDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DemandTranMerchVerHoldDays", Order=82, Form=XmlSchemaForm.Unqualified)]
        public short DemandTranMerchVerHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DemandTranMerchVerHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DemandTranMerchVerHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DemandTranMerchVerHoldDays
        {
            get
            {
                if (this.DemandTranMerchVerHoldDaysValueSpecified)
                {
                    return this.DemandTranMerchVerHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DemandTranMerchVerHoldDaysValue = value.GetValueOrDefault();
                this.DemandTranMerchVerHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DisbursalTransactionTypes", Order=83, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap DisbursalTransactionTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayAcctMgrFmHistory", Order=84, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayAcctMgrFmHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayAcctMgrFmHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayAcctMgrFmHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayAcctMgrFmHistory
        {
            get
            {
                if (this.DisplayAcctMgrFmHistoryValueSpecified)
                {
                    return this.DisplayAcctMgrFmHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayAcctMgrFmHistoryValue = value.GetValueOrDefault();
                this.DisplayAcctMgrFmHistoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayMemberMgrFmHistory", Order=85, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayMemberMgrFmHistoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayMemberMgrFmHistory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayMemberMgrFmHistoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayMemberMgrFmHistory
        {
            get
            {
                if (this.DisplayMemberMgrFmHistoryValueSpecified)
                {
                    return this.DisplayMemberMgrFmHistoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayMemberMgrFmHistoryValue = value.GetValueOrDefault();
                this.DisplayMemberMgrFmHistoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayRmtOvrAckMsg", Order=86, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayRmtOvrAckMsgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayRmtOvrAckMsg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayRmtOvrAckMsgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayRmtOvrAckMsg
        {
            get
            {
                if (this.DisplayRmtOvrAckMsgValueSpecified)
                {
                    return this.DisplayRmtOvrAckMsgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayRmtOvrAckMsgValue = value.GetValueOrDefault();
                this.DisplayRmtOvrAckMsgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayRmtOvrAlertMsg", Order=87, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayRmtOvrAlertMsgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayRmtOvrAlertMsg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayRmtOvrAlertMsgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayRmtOvrAlertMsg
        {
            get
            {
                if (this.DisplayRmtOvrAlertMsgValueSpecified)
                {
                    return this.DisplayRmtOvrAlertMsgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayRmtOvrAlertMsgValue = value.GetValueOrDefault();
                this.DisplayRmtOvrAlertMsgValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DisplayRmtOvrPrivBrList", Order=88, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap DisplayRmtOvrPrivBrList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayRmtOvrPrivList", Order=89, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayRmtOvrPrivListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayRmtOvrPrivList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayRmtOvrPrivListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayRmtOvrPrivList
        {
            get
            {
                if (this.DisplayRmtOvrPrivListValueSpecified)
                {
                    return this.DisplayRmtOvrPrivListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayRmtOvrPrivListValue = value.GetValueOrDefault();
                this.DisplayRmtOvrPrivListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DivPeriodStartMethod", Order=90, Form=XmlSchemaForm.Unqualified)]
        public short DivPeriodStartMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DivPeriodStartMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DivPeriodStartMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DivPeriodStartMethod
        {
            get
            {
                if (this.DivPeriodStartMethodValueSpecified)
                {
                    return this.DivPeriodStartMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DivPeriodStartMethodValue = value.GetValueOrDefault();
                this.DivPeriodStartMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DividendName", Order=91, Form=XmlSchemaForm.Unqualified)]
        public string DividendName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DividendRoundingMethod", Order=92, Form=XmlSchemaForm.Unqualified)]
        public short DividendRoundingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendRoundingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DividendRoundingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DividendRoundingMethod
        {
            get
            {
                if (this.DividendRoundingMethodValueSpecified)
                {
                    return this.DividendRoundingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendRoundingMethodValue = value.GetValueOrDefault();
                this.DividendRoundingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DormancyDays", Order=93, Form=XmlSchemaForm.Unqualified)]
        public short DormancyDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DormancyDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DormancyDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DormancyDays
        {
            get
            {
                if (this.DormancyDaysValueSpecified)
                {
                    return this.DormancyDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DormancyDaysValue = value.GetValueOrDefault();
                this.DormancyDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DormancyUseCorrespondDate", Order=94, Form=XmlSchemaForm.Unqualified)]
        public bool DormancyUseCorrespondDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DormancyUseCorrespondDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DormancyUseCorrespondDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DormancyUseCorrespondDate
        {
            get
            {
                if (this.DormancyUseCorrespondDateValueSpecified)
                {
                    return this.DormancyUseCorrespondDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DormancyUseCorrespondDateValue = value.GetValueOrDefault();
                this.DormancyUseCorrespondDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqCardNoticeNumber", Order=95, Form=XmlSchemaForm.Unqualified)]
        public short DqCardNoticeNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqCardNoticeNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqCardNoticeNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqCardNoticeNumber
        {
            get
            {
                if (this.DqCardNoticeNumberValueSpecified)
                {
                    return this.DqCardNoticeNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqCardNoticeNumberValue = value.GetValueOrDefault();
                this.DqCardNoticeNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DraftNumberofLookBackDays", Order=96, Form=XmlSchemaForm.Unqualified)]
        public short DraftNumberofLookBackDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DraftNumberofLookBackDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DraftNumberofLookBackDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DraftNumberofLookBackDays
        {
            get
            {
                if (this.DraftNumberofLookBackDaysValueSpecified)
                {
                    return this.DraftNumberofLookBackDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DraftNumberofLookBackDaysValue = value.GetValueOrDefault();
                this.DraftNumberofLookBackDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscDraftPreauthorized_2> _draftPreauthorized;
        
        [XmlElementAttribute("DraftPreauthorized", Order=97, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscDraftPreauthorized_2> DraftPreauthorized
        {
            get
            {
                return _draftPreauthorized;
            }
            set
            {
                _draftPreauthorized = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DraftPreauthorized collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DraftPreauthorizedSpecified
        {
            get
            {
                return ((this.DraftPreauthorized != null) 
                            && (this.DraftPreauthorized.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DraftStopDuplicates", Order=98, Form=XmlSchemaForm.Unqualified)]
        public short DraftStopDuplicatesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DraftStopDuplicates property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DraftStopDuplicatesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DraftStopDuplicates
        {
            get
            {
                if (this.DraftStopDuplicatesValueSpecified)
                {
                    return this.DraftStopDuplicatesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DraftStopDuplicatesValue = value.GetValueOrDefault();
                this.DraftStopDuplicatesValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DriversLcnsSwipeAuditFile", Order=99, Form=XmlSchemaForm.Unqualified)]
        public string DriversLcnsSwipeAuditFile { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscEmployeePayroll_2> _employeePayroll;
        
        [XmlElementAttribute("EmployeePayroll", Order=100, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscEmployeePayroll_2> EmployeePayroll
        {
            get
            {
                return _employeePayroll;
            }
            set
            {
                _employeePayroll = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EmployeePayroll collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool EmployeePayrollSpecified
        {
            get
            {
                return ((this.EmployeePayroll != null) 
                            && (this.EmployeePayroll.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EnableTextMode", Order=101, Form=XmlSchemaForm.Unqualified)]
        public bool EnableTextModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnableTextMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EnableTextModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EnableTextMode
        {
            get
            {
                if (this.EnableTextModeValueSpecified)
                {
                    return this.EnableTextModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnableTextModeValue = value.GetValueOrDefault();
                this.EnableTextModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Escrow", Order=102, Form=XmlSchemaForm.Unqualified)]
        public bool EscrowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Escrow property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Escrow
        {
            get
            {
                if (this.EscrowValueSpecified)
                {
                    return this.EscrowValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowValue = value.GetValueOrDefault();
                this.EscrowValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("EscrowShareTypeList", Order=103, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap EscrowShareTypeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExcessiveCheck", Order=104, Form=XmlSchemaForm.Unqualified)]
        public decimal ExcessiveCheckValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExcessiveCheck property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExcessiveCheckValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ExcessiveCheck
        {
            get
            {
                if (this.ExcessiveCheckValueSpecified)
                {
                    return this.ExcessiveCheckValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExcessiveCheckValue = value.GetValueOrDefault();
                this.ExcessiveCheckValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpandWarningCodes", Order=105, Form=XmlSchemaForm.Unqualified)]
        public bool ExpandWarningCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpandWarningCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpandWarningCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpandWarningCodes
        {
            get
            {
                if (this.ExpandWarningCodesValueSpecified)
                {
                    return this.ExpandWarningCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpandWarningCodesValue = value.GetValueOrDefault();
                this.ExpandWarningCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExternalAcct", Order=106, Form=XmlSchemaForm.Unqualified)]
        public bool ExternalAcctValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExternalAcct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExternalAcctValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExternalAcct
        {
            get
            {
                if (this.ExternalAcctValueSpecified)
                {
                    return this.ExternalAcctValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExternalAcctValue = value.GetValueOrDefault();
                this.ExternalAcctValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExternalLoan", Order=107, Form=XmlSchemaForm.Unqualified)]
        public bool ExternalLoanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExternalLoan property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExternalLoanValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExternalLoan
        {
            get
            {
                if (this.ExternalLoanValueSpecified)
                {
                    return this.ExternalLoanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExternalLoanValue = value.GetValueOrDefault();
                this.ExternalLoanValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("FeeTypesToCapList", Order=108, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap FeeTypesToCapList { get; set; }
        
        [XmlElementAttribute("FileRevision", Order=109, Form=XmlSchemaForm.Unqualified)]
        public string FileRevision { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FinRepSequence", Order=110, Form=XmlSchemaForm.Unqualified)]
        public int FinRepSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FinRepSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FinRepSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> FinRepSequence
        {
            get
            {
                if (this.FinRepSequenceValueSpecified)
                {
                    return this.FinRepSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FinRepSequenceValue = value.GetValueOrDefault();
                this.FinRepSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Floats", Order=111, Form=XmlSchemaForm.Unqualified)]
        public bool FloatsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Floats property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FloatsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Floats
        {
            get
            {
                if (this.FloatsValueSpecified)
                {
                    return this.FloatsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloatsValue = value.GetValueOrDefault();
                this.FloatsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmHistoryControl", Order=112, Form=XmlSchemaForm.Unqualified)]
        public short FmHistoryControlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmHistoryControl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmHistoryControlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FmHistoryControl
        {
            get
            {
                if (this.FmHistoryControlValueSpecified)
                {
                    return this.FmHistoryControlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmHistoryControlValue = value.GetValueOrDefault();
                this.FmHistoryControlValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ForcedCommentFormatList", Order=113, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ForcedCommentFormatList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlAccountantPreference", Order=114, Form=XmlSchemaForm.Unqualified)]
        public short GlAccountantPreferenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlAccountantPreference property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlAccountantPreferenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlAccountantPreference
        {
            get
            {
                if (this.GlAccountantPreferenceValueSpecified)
                {
                    return this.GlAccountantPreferenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlAccountantPreferenceValue = value.GetValueOrDefault();
                this.GlAccountantPreferenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCheckDisbursedPrompt", Order=115, Form=XmlSchemaForm.Unqualified)]
        public bool GlCheckDisbursedPromptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCheckDisbursedPrompt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCheckDisbursedPromptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCheckDisbursedPrompt
        {
            get
            {
                if (this.GlCheckDisbursedPromptValueSpecified)
                {
                    return this.GlCheckDisbursedPromptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCheckDisbursedPromptValue = value.GetValueOrDefault();
                this.GlCheckDisbursedPromptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCommentByPowerOn", Order=116, Form=XmlSchemaForm.Unqualified)]
        public bool GlCommentByPowerOnValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCommentByPowerOn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCommentByPowerOnValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCommentByPowerOn
        {
            get
            {
                if (this.GlCommentByPowerOnValueSpecified)
                {
                    return this.GlCommentByPowerOnValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCommentByPowerOnValue = value.GetValueOrDefault();
                this.GlCommentByPowerOnValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlDailyAccrual", Order=117, Form=XmlSchemaForm.Unqualified)]
        public bool GlDailyAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlDailyAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlDailyAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlDailyAccrual
        {
            get
            {
                if (this.GlDailyAccrualValueSpecified)
                {
                    return this.GlDailyAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlDailyAccrualValue = value.GetValueOrDefault();
                this.GlDailyAccrualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlMonth", Order=118, Form=XmlSchemaForm.Unqualified)]
        public short GlMonthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlMonth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlMonthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlMonth
        {
            get
            {
                if (this.GlMonthValueSpecified)
                {
                    return this.GlMonthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlMonthValue = value.GetValueOrDefault();
                this.GlMonthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlTranslationBranchAcctIng", Order=119, Form=XmlSchemaForm.Unqualified)]
        public short GlTranslationBranchAcctIngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlTranslationBranchAcctIng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlTranslationBranchAcctIngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlTranslationBranchAcctIng
        {
            get
            {
                if (this.GlTranslationBranchAcctIngValueSpecified)
                {
                    return this.GlTranslationBranchAcctIngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlTranslationBranchAcctIngValue = value.GetValueOrDefault();
                this.GlTranslationBranchAcctIngValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlTranslationBranchLevel", Order=120, Form=XmlSchemaForm.Unqualified)]
        public short GlTranslationBranchLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlTranslationBranchLevel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlTranslationBranchLevelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlTranslationBranchLevel
        {
            get
            {
                if (this.GlTranslationBranchLevelValueSpecified)
                {
                    return this.GlTranslationBranchLevelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlTranslationBranchLevelValue = value.GetValueOrDefault();
                this.GlTranslationBranchLevelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlTranslationMaxBranch", Order=121, Form=XmlSchemaForm.Unqualified)]
        public short GlTranslationMaxBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlTranslationMaxBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlTranslationMaxBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlTranslationMaxBranch
        {
            get
            {
                if (this.GlTranslationMaxBranchValueSpecified)
                {
                    return this.GlTranslationMaxBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlTranslationMaxBranchValue = value.GetValueOrDefault();
                this.GlTranslationMaxBranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlTranslationMaxUser", Order=122, Form=XmlSchemaForm.Unqualified)]
        public short GlTranslationMaxUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlTranslationMaxUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlTranslationMaxUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlTranslationMaxUser
        {
            get
            {
                if (this.GlTranslationMaxUserValueSpecified)
                {
                    return this.GlTranslationMaxUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlTranslationMaxUserValue = value.GetValueOrDefault();
                this.GlTranslationMaxUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlYearStartMonth", Order=123, Form=XmlSchemaForm.Unqualified)]
        public short GlYearStartMonthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlYearStartMonth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlYearStartMonthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> GlYearStartMonth
        {
            get
            {
                if (this.GlYearStartMonthValueSpecified)
                {
                    return this.GlYearStartMonthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlYearStartMonthValue = value.GetValueOrDefault();
                this.GlYearStartMonthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequence", Order=124, Form=XmlSchemaForm.Unqualified)]
        public int GlobalSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlobalSequence
        {
            get
            {
                if (this.GlobalSequenceValueSpecified)
                {
                    return this.GlobalSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceValue = value.GetValueOrDefault();
                this.GlobalSequenceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("GuaranteedHoldTypeList", Order=125, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap GuaranteedHoldTypeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbAudioPasswordHashCode", Order=126, Form=XmlSchemaForm.Unqualified)]
        public short HbAudioPasswordHashCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbAudioPasswordHashCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbAudioPasswordHashCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbAudioPasswordHashCode
        {
            get
            {
                if (this.HbAudioPasswordHashCodeValueSpecified)
                {
                    return this.HbAudioPasswordHashCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbAudioPasswordHashCodeValue = value.GetValueOrDefault();
                this.HbAudioPasswordHashCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordEnforceMixedCase", Order=127, Form=XmlSchemaForm.Unqualified)]
        public bool HbPasswordEnforceMixedCaseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordEnforceMixedCase property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordEnforceMixedCaseValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HbPasswordEnforceMixedCase
        {
            get
            {
                if (this.HbPasswordEnforceMixedCaseValueSpecified)
                {
                    return this.HbPasswordEnforceMixedCaseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordEnforceMixedCaseValue = value.GetValueOrDefault();
                this.HbPasswordEnforceMixedCaseValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMaxAge", Order=128, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMaxAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMaxAge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMaxAgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMaxAge
        {
            get
            {
                if (this.HbPasswordMaxAgeValueSpecified)
                {
                    return this.HbPasswordMaxAgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMaxAgeValue = value.GetValueOrDefault();
                this.HbPasswordMaxAgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMaxRepeatChars", Order=129, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMaxRepeatCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMaxRepeatChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMaxRepeatCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMaxRepeatChars
        {
            get
            {
                if (this.HbPasswordMaxRepeatCharsValueSpecified)
                {
                    return this.HbPasswordMaxRepeatCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMaxRepeatCharsValue = value.GetValueOrDefault();
                this.HbPasswordMaxRepeatCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMaximumLength", Order=130, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMaximumLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMaximumLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMaximumLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMaximumLength
        {
            get
            {
                if (this.HbPasswordMaximumLengthValueSpecified)
                {
                    return this.HbPasswordMaximumLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMaximumLengthValue = value.GetValueOrDefault();
                this.HbPasswordMaximumLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinAge", Order=131, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinAge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinAgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinAge
        {
            get
            {
                if (this.HbPasswordMinAgeValueSpecified)
                {
                    return this.HbPasswordMinAgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinAgeValue = value.GetValueOrDefault();
                this.HbPasswordMinAgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinAlphaChars", Order=132, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinAlphaCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinAlphaChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinAlphaCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinAlphaChars
        {
            get
            {
                if (this.HbPasswordMinAlphaCharsValueSpecified)
                {
                    return this.HbPasswordMinAlphaCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinAlphaCharsValue = value.GetValueOrDefault();
                this.HbPasswordMinAlphaCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinDiffChars", Order=133, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinDiffCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinDiffChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinDiffCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinDiffChars
        {
            get
            {
                if (this.HbPasswordMinDiffCharsValueSpecified)
                {
                    return this.HbPasswordMinDiffCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinDiffCharsValue = value.GetValueOrDefault();
                this.HbPasswordMinDiffCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinNumericChars", Order=134, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinNumericCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinNumericChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinNumericCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinNumericChars
        {
            get
            {
                if (this.HbPasswordMinNumericCharsValueSpecified)
                {
                    return this.HbPasswordMinNumericCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinNumericCharsValue = value.GetValueOrDefault();
                this.HbPasswordMinNumericCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinOtherChars", Order=135, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinOtherCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinOtherChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinOtherCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinOtherChars
        {
            get
            {
                if (this.HbPasswordMinOtherCharsValueSpecified)
                {
                    return this.HbPasswordMinOtherCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinOtherCharsValue = value.GetValueOrDefault();
                this.HbPasswordMinOtherCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinSpecialChars", Order=136, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinSpecialCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinSpecialChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinSpecialCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinSpecialChars
        {
            get
            {
                if (this.HbPasswordMinSpecialCharsValueSpecified)
                {
                    return this.HbPasswordMinSpecialCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinSpecialCharsValue = value.GetValueOrDefault();
                this.HbPasswordMinSpecialCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMinimumLength", Order=137, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordMinimumLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMinimumLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordMinimumLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMinimumLength
        {
            get
            {
                if (this.HbPasswordMinimumLengthValueSpecified)
                {
                    return this.HbPasswordMinimumLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordMinimumLengthValue = value.GetValueOrDefault();
                this.HbPasswordMinimumLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordMode", Order=138, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordMode
        {
            get
            {
                if (this.HbPasswordModeValueSpecified)
                {
                    return this.HbPasswordModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordModeValue = value.GetValueOrDefault();
                this.HbPasswordModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbPasswordRecycleTimes", Order=139, Form=XmlSchemaForm.Unqualified)]
        public short HbPasswordRecycleTimesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbPasswordRecycleTimes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbPasswordRecycleTimesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbPasswordRecycleTimes
        {
            get
            {
                if (this.HbPasswordRecycleTimesValueSpecified)
                {
                    return this.HbPasswordRecycleTimesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbPasswordRecycleTimesValue = value.GetValueOrDefault();
                this.HbPasswordRecycleTimesValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("HbPwSpecialCharsAllowed", Order=140, Form=XmlSchemaForm.Unqualified)]
        public string HbPwSpecialCharsAllowed { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbUsernameMaximumLength", Order=141, Form=XmlSchemaForm.Unqualified)]
        public short HbUsernameMaximumLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbUsernameMaximumLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbUsernameMaximumLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbUsernameMaximumLength
        {
            get
            {
                if (this.HbUsernameMaximumLengthValueSpecified)
                {
                    return this.HbUsernameMaximumLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbUsernameMaximumLengthValue = value.GetValueOrDefault();
                this.HbUsernameMaximumLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbUsernameMinimumLength", Order=142, Form=XmlSchemaForm.Unqualified)]
        public short HbUsernameMinimumLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbUsernameMinimumLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbUsernameMinimumLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbUsernameMinimumLength
        {
            get
            {
                if (this.HbUsernameMinimumLengthValueSpecified)
                {
                    return this.HbUsernameMinimumLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbUsernameMinimumLengthValue = value.GetValueOrDefault();
                this.HbUsernameMinimumLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldReuseDays", Order=143, Form=XmlSchemaForm.Unqualified)]
        public short HoldReuseDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldReuseDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldReuseDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HoldReuseDays
        {
            get
            {
                if (this.HoldReuseDaysValueSpecified)
                {
                    return this.HoldReuseDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldReuseDaysValue = value.GetValueOrDefault();
                this.HoldReuseDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldReuseMethod", Order=144, Form=XmlSchemaForm.Unqualified)]
        public short HoldReuseMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldReuseMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldReuseMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HoldReuseMethod
        {
            get
            {
                if (this.HoldReuseMethodValueSpecified)
                {
                    return this.HoldReuseMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldReuseMethodValue = value.GetValueOrDefault();
                this.HoldReuseMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("IdNumberMask", Order=145, Form=XmlSchemaForm.Unqualified)]
        public string IdNumberMask { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdentificationLine", Order=146, Form=XmlSchemaForm.Unqualified)]
        public short IdentificationLineValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdentificationLine property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdentificationLineValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdentificationLine
        {
            get
            {
                if (this.IdentificationLineValueSpecified)
                {
                    return this.IdentificationLineValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdentificationLineValue = value.GetValueOrDefault();
                this.IdentificationLineValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Institution", Order=147, Form=XmlSchemaForm.Unqualified)]
        public short InstitutionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Institution property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InstitutionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Institution
        {
            get
            {
                if (this.InstitutionValueSpecified)
                {
                    return this.InstitutionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InstitutionValue = value.GetValueOrDefault();
                this.InstitutionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceUpdtsActivityDate", Order=148, Form=XmlSchemaForm.Unqualified)]
        public bool InsuranceUpdtsActivityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceUpdtsActivityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceUpdtsActivityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InsuranceUpdtsActivityDate
        {
            get
            {
                if (this.InsuranceUpdtsActivityDateValueSpecified)
                {
                    return this.InsuranceUpdtsActivityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceUpdtsActivityDateValue = value.GetValueOrDefault();
                this.InsuranceUpdtsActivityDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("IntAccrCmtLnTypes", Order=149, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap IntAccrCmtLnTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Irs1042SUfidLastUsed", Order=150, Form=XmlSchemaForm.Unqualified)]
        public int Irs1042SUfidLastUsedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Irs1042SUfidLastUsed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Irs1042SUfidLastUsedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Irs1042SUfidLastUsed
        {
            get
            {
                if (this.Irs1042SUfidLastUsedValueSpecified)
                {
                    return this.Irs1042SUfidLastUsedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Irs1042SUfidLastUsedValue = value.GetValueOrDefault();
                this.Irs1042SUfidLastUsedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcAutoAcceptOnPrompts", Order=151, Form=XmlSchemaForm.Unqualified)]
        public bool ItcAutoAcceptOnPromptsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcAutoAcceptOnPrompts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcAutoAcceptOnPromptsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ItcAutoAcceptOnPrompts
        {
            get
            {
                if (this.ItcAutoAcceptOnPromptsValueSpecified)
                {
                    return this.ItcAutoAcceptOnPromptsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcAutoAcceptOnPromptsValue = value.GetValueOrDefault();
                this.ItcAutoAcceptOnPromptsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcAutomatedOnPosting", Order=152, Form=XmlSchemaForm.Unqualified)]
        public bool ItcAutomatedOnPostingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcAutomatedOnPosting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcAutomatedOnPostingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ItcAutomatedOnPosting
        {
            get
            {
                if (this.ItcAutomatedOnPostingValueSpecified)
                {
                    return this.ItcAutomatedOnPostingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcAutomatedOnPostingValue = value.GetValueOrDefault();
                this.ItcAutomatedOnPostingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcDefaultCheckHoldDays", Order=153, Form=XmlSchemaForm.Unqualified)]
        public short ItcDefaultCheckHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcDefaultCheckHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcDefaultCheckHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ItcDefaultCheckHoldDays
        {
            get
            {
                if (this.ItcDefaultCheckHoldDaysValueSpecified)
                {
                    return this.ItcDefaultCheckHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcDefaultCheckHoldDaysValue = value.GetValueOrDefault();
                this.ItcDefaultCheckHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcDeviceEnabled", Order=154, Form=XmlSchemaForm.Unqualified)]
        public bool ItcDeviceEnabledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcDeviceEnabled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcDeviceEnabledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ItcDeviceEnabled
        {
            get
            {
                if (this.ItcDeviceEnabledValueSpecified)
                {
                    return this.ItcDeviceEnabledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcDeviceEnabledValue = value.GetValueOrDefault();
                this.ItcDeviceEnabledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcEndorsement", Order=155, Form=XmlSchemaForm.Unqualified)]
        public short ItcEndorsementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcEndorsement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcEndorsementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ItcEndorsement
        {
            get
            {
                if (this.ItcEndorsementValueSpecified)
                {
                    return this.ItcEndorsementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcEndorsementValue = value.GetValueOrDefault();
                this.ItcEndorsementValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ItcMicrLookupTypeList", Order=156, Form=XmlSchemaForm.Unqualified)]
        public string ItcMicrLookupTypeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcModuleEnabled", Order=157, Form=XmlSchemaForm.Unqualified)]
        public bool ItcModuleEnabledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcModuleEnabled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcModuleEnabledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ItcModuleEnabled
        {
            get
            {
                if (this.ItcModuleEnabledValueSpecified)
                {
                    return this.ItcModuleEnabledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcModuleEnabledValue = value.GetValueOrDefault();
                this.ItcModuleEnabledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KitingSuspectAmt", Order=158, Form=XmlSchemaForm.Unqualified)]
        public decimal KitingSuspectAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KitingSuspectAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KitingSuspectAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> KitingSuspectAmt
        {
            get
            {
                if (this.KitingSuspectAmtValueSpecified)
                {
                    return this.KitingSuspectAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KitingSuspectAmtValue = value.GetValueOrDefault();
                this.KitingSuspectAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KitingSuspectDepositCount", Order=159, Form=XmlSchemaForm.Unqualified)]
        public short KitingSuspectDepositCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KitingSuspectDepositCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KitingSuspectDepositCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> KitingSuspectDepositCount
        {
            get
            {
                if (this.KitingSuspectDepositCountValueSpecified)
                {
                    return this.KitingSuspectDepositCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KitingSuspectDepositCountValue = value.GetValueOrDefault();
                this.KitingSuspectDepositCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KitingSuspectDepositDays", Order=160, Form=XmlSchemaForm.Unqualified)]
        public short KitingSuspectDepositDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KitingSuspectDepositDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KitingSuspectDepositDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> KitingSuspectDepositDays
        {
            get
            {
                if (this.KitingSuspectDepositDaysValueSpecified)
                {
                    return this.KitingSuspectDepositDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KitingSuspectDepositDaysValue = value.GetValueOrDefault();
                this.KitingSuspectDepositDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("KitingSuspectWaiveWarning", Order=161, Form=XmlSchemaForm.Unqualified)]
        public short KitingSuspectWaiveWarningValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KitingSuspectWaiveWarning property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool KitingSuspectWaiveWarningValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> KitingSuspectWaiveWarning
        {
            get
            {
                if (this.KitingSuspectWaiveWarningValueSpecified)
                {
                    return this.KitingSuspectWaiveWarningValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KitingSuspectWaiveWarningValue = value.GetValueOrDefault();
                this.KitingSuspectWaiveWarningValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastSystemDate", Order=162, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LastSystemDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastSystemDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastSystemDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastSystemDate
        {
            get
            {
                if (this.LastSystemDateValueSpecified)
                {
                    return this.LastSystemDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastSystemDateValue = value.GetValueOrDefault();
                this.LastSystemDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LateChgAccrCmtLnTypes", Order=163, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LateChgAccrCmtLnTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LeaseSys", Order=164, Form=XmlSchemaForm.Unqualified)]
        public bool LeaseSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LeaseSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LeaseSys
        {
            get
            {
                if (this.LeaseSysValueSpecified)
                {
                    return this.LeaseSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseSysValue = value.GetValueOrDefault();
                this.LeaseSysValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LegalEntityIdentifier", Order=165, Form=XmlSchemaForm.Unqualified)]
        public string LegalEntityIdentifier { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitDeclChkAxsFeeChgDt", Order=166, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LimitDeclChkAxsFeeChgDtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitDeclChkAxsFeeChgDt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitDeclChkAxsFeeChgDtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LimitDeclChkAxsFeeChgDt
        {
            get
            {
                if (this.LimitDeclChkAxsFeeChgDtValueSpecified)
                {
                    return this.LimitDeclChkAxsFeeChgDtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitDeclChkAxsFeeChgDtValue = value.GetValueOrDefault();
                this.LimitDeclChkAxsFeeChgDtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitDeclChkAxsFeeFirst", Order=167, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitDeclChkAxsFeeFirstValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitDeclChkAxsFeeFirst property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitDeclChkAxsFeeFirstValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitDeclChkAxsFeeFirst
        {
            get
            {
                if (this.LimitDeclChkAxsFeeFirstValueSpecified)
                {
                    return this.LimitDeclChkAxsFeeFirstValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitDeclChkAxsFeeFirstValue = value.GetValueOrDefault();
                this.LimitDeclChkAxsFeeFirstValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitDeclChkAxsFeeFolowng", Order=168, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitDeclChkAxsFeeFolowngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitDeclChkAxsFeeFolowng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitDeclChkAxsFeeFolowngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitDeclChkAxsFeeFolowng
        {
            get
            {
                if (this.LimitDeclChkAxsFeeFolowngValueSpecified)
                {
                    return this.LimitDeclChkAxsFeeFolowngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitDeclChkAxsFeeFolowngValue = value.GetValueOrDefault();
                this.LimitDeclChkAxsFeeFolowngValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitLateFeeFirst", Order=169, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitLateFeeFirstValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitLateFeeFirst property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitLateFeeFirstValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitLateFeeFirst
        {
            get
            {
                if (this.LimitLateFeeFirstValueSpecified)
                {
                    return this.LimitLateFeeFirstValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitLateFeeFirstValue = value.GetValueOrDefault();
                this.LimitLateFeeFirstValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitLateFeeFollowing", Order=170, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitLateFeeFollowingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitLateFeeFollowing property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitLateFeeFollowingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitLateFeeFollowing
        {
            get
            {
                if (this.LimitLateFeeFollowingValueSpecified)
                {
                    return this.LimitLateFeeFollowingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitLateFeeFollowingValue = value.GetValueOrDefault();
                this.LimitLateFeeFollowingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitLateFeeMethodChgDate", Order=171, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LimitLateFeeMethodChgDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitLateFeeMethodChgDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitLateFeeMethodChgDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LimitLateFeeMethodChgDate
        {
            get
            {
                if (this.LimitLateFeeMethodChgDateValueSpecified)
                {
                    return this.LimitLateFeeMethodChgDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitLateFeeMethodChgDateValue = value.GetValueOrDefault();
                this.LimitLateFeeMethodChgDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitOvlFeeFirst", Order=172, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitOvlFeeFirstValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitOvlFeeFirst property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitOvlFeeFirstValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitOvlFeeFirst
        {
            get
            {
                if (this.LimitOvlFeeFirstValueSpecified)
                {
                    return this.LimitOvlFeeFirstValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitOvlFeeFirstValue = value.GetValueOrDefault();
                this.LimitOvlFeeFirstValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitOvlFeeFollowing", Order=173, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitOvlFeeFollowingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitOvlFeeFollowing property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitOvlFeeFollowingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitOvlFeeFollowing
        {
            get
            {
                if (this.LimitOvlFeeFollowingValueSpecified)
                {
                    return this.LimitOvlFeeFollowingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitOvlFeeFollowingValue = value.GetValueOrDefault();
                this.LimitOvlFeeFollowingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitOvlFeeMethodChgDate", Order=174, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> LimitOvlFeeMethodChgDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitOvlFeeMethodChgDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitOvlFeeMethodChgDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LimitOvlFeeMethodChgDate
        {
            get
            {
                if (this.LimitOvlFeeMethodChgDateValueSpecified)
                {
                    return this.LimitOvlFeeMethodChgDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitOvlFeeMethodChgDateValue = value.GetValueOrDefault();
                this.LimitOvlFeeMethodChgDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LnPmtHoldinAvailAmtCalc", Order=175, Form=XmlSchemaForm.Unqualified)]
        public short LnPmtHoldinAvailAmtCalcValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LnPmtHoldinAvailAmtCalc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LnPmtHoldinAvailAmtCalcValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LnPmtHoldinAvailAmtCalc
        {
            get
            {
                if (this.LnPmtHoldinAvailAmtCalcValueSpecified)
                {
                    return this.LnPmtHoldinAvailAmtCalcValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LnPmtHoldinAvailAmtCalcValue = value.GetValueOrDefault();
                this.LnPmtHoldinAvailAmtCalcValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanAppSys", Order=176, Form=XmlSchemaForm.Unqualified)]
        public bool LoanAppSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanAppSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanAppSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanAppSys
        {
            get
            {
                if (this.LoanAppSysValueSpecified)
                {
                    return this.LoanAppSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanAppSysValue = value.GetValueOrDefault();
                this.LoanAppSysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCommentbyPowerOn", Order=177, Form=XmlSchemaForm.Unqualified)]
        public bool LoanCommentbyPowerOnValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCommentbyPowerOn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCommentbyPowerOnValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanCommentbyPowerOn
        {
            get
            {
                if (this.LoanCommentbyPowerOnValueSpecified)
                {
                    return this.LoanCommentbyPowerOnValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCommentbyPowerOnValue = value.GetValueOrDefault();
                this.LoanCommentbyPowerOnValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanExclusionWarnCodeList", Order=178, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LoanExclusionWarnCodeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanInterestAccrual", Order=179, Form=XmlSchemaForm.Unqualified)]
        public bool LoanInterestAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanInterestAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanInterestAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanInterestAccrual
        {
            get
            {
                if (this.LoanInterestAccrualValueSpecified)
                {
                    return this.LoanInterestAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanInterestAccrualValue = value.GetValueOrDefault();
                this.LoanInterestAccrualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanPayoffIncludesInsurance", Order=180, Form=XmlSchemaForm.Unqualified)]
        public bool LoanPayoffIncludesInsuranceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanPayoffIncludesInsurance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanPayoffIncludesInsuranceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LoanPayoffIncludesInsurance
        {
            get
            {
                if (this.LoanPayoffIncludesInsuranceValueSpecified)
                {
                    return this.LoanPayoffIncludesInsuranceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanPayoffIncludesInsuranceValue = value.GetValueOrDefault();
                this.LoanPayoffIncludesInsuranceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanTypeList", Order=181, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LoanTypeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LogAccessEvents", Order=182, Form=XmlSchemaForm.Unqualified)]
        public bool LogAccessEventsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogAccessEvents property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LogAccessEventsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LogAccessEvents
        {
            get
            {
                if (this.LogAccessEventsValueSpecified)
                {
                    return this.LogAccessEventsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LogAccessEventsValue = value.GetValueOrDefault();
                this.LogAccessEventsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MaprCreditCardFeeTypes", Order=183, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MaprCreditCardFeeTypes { get; set; }
        
        [XmlElementAttribute("MaprNonBonaFideFeeTypes", Order=184, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MaprNonBonaFideFeeTypes { get; set; }
        
        [XmlElementAttribute("MaskCardTypes", Order=185, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MaskCardTypes { get; set; }
        
        [XmlElementAttribute("MaskLoanTypes", Order=186, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MaskLoanTypes { get; set; }
        
        [XmlElementAttribute("MaskLoanappFinanceTypes", Order=187, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MaskLoanappFinanceTypes { get; set; }
        
        [XmlElementAttribute("MaskLookupTypes", Order=188, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MaskLookupTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumFutureEffectiveDays", Order=189, Form=XmlSchemaForm.Unqualified)]
        public short MaximumFutureEffectiveDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumFutureEffectiveDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumFutureEffectiveDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaximumFutureEffectiveDays
        {
            get
            {
                if (this.MaximumFutureEffectiveDaysValueSpecified)
                {
                    return this.MaximumFutureEffectiveDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumFutureEffectiveDaysValue = value.GetValueOrDefault();
                this.MaximumFutureEffectiveDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumWdBelowAvailable", Order=190, Form=XmlSchemaForm.Unqualified)]
        public decimal MaximumWdBelowAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumWdBelowAvailable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumWdBelowAvailableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MaximumWdBelowAvailable
        {
            get
            {
                if (this.MaximumWdBelowAvailableValueSpecified)
                {
                    return this.MaximumWdBelowAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumWdBelowAvailableValue = value.GetValueOrDefault();
                this.MaximumWdBelowAvailableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrInstLogins", Order=191, Form=XmlSchemaForm.Unqualified)]
        public bool MbrInstLoginsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrInstLogins property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrInstLoginsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MbrInstLogins
        {
            get
            {
                if (this.MbrInstLoginsValueSpecified)
                {
                    return this.MbrInstLoginsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrInstLoginsValue = value.GetValueOrDefault();
                this.MbrInstLoginsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MilitaryAprFeeTypes", Order=192, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MilitaryAprFeeTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumRetentionPercent", Order=193, Form=XmlSchemaForm.Unqualified)]
        public decimal MinimumRetentionPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumRetentionPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumRetentionPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MinimumRetentionPercent
        {
            get
            {
                if (this.MinimumRetentionPercentValueSpecified)
                {
                    return this.MinimumRetentionPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumRetentionPercentValue = value.GetValueOrDefault();
                this.MinimumRetentionPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MoneyPrintFormat", Order=194, Form=XmlSchemaForm.Unqualified)]
        public short MoneyPrintFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MoneyPrintFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MoneyPrintFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MoneyPrintFormat
        {
            get
            {
                if (this.MoneyPrintFormatValueSpecified)
                {
                    return this.MoneyPrintFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MoneyPrintFormatValue = value.GetValueOrDefault();
                this.MoneyPrintFormatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameKeyExpansion", Order=195, Form=XmlSchemaForm.Unqualified)]
        public short NameKeyExpansionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameKeyExpansion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameKeyExpansionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NameKeyExpansion
        {
            get
            {
                if (this.NameKeyExpansionValueSpecified)
                {
                    return this.NameKeyExpansionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameKeyExpansionValue = value.GetValueOrDefault();
                this.NameKeyExpansionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameMerge", Order=196, Form=XmlSchemaForm.Unqualified)]
        public bool NameMergeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameMerge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameMergeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NameMerge
        {
            get
            {
                if (this.NameMergeValueSpecified)
                {
                    return this.NameMergeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameMergeValue = value.GetValueOrDefault();
                this.NameMergeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewBillingCalculations", Order=197, Form=XmlSchemaForm.Unqualified)]
        public bool NewBillingCalculationsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewBillingCalculations property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewBillingCalculationsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NewBillingCalculations
        {
            get
            {
                if (this.NewBillingCalculationsValueSpecified)
                {
                    return this.NewBillingCalculationsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewBillingCalculationsValue = value.GetValueOrDefault();
                this.NewBillingCalculationsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewWireUscExtractCutoffTi", Order=198, Form=XmlSchemaForm.Unqualified)]
        public short NewWireUscExtractCutoffTiValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewWireUscExtractCutoffTi property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewWireUscExtractCutoffTiValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NewWireUscExtractCutoffTi
        {
            get
            {
                if (this.NewWireUscExtractCutoffTiValueSpecified)
                {
                    return this.NewWireUscExtractCutoffTiValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewWireUscExtractCutoffTiValue = value.GetValueOrDefault();
                this.NewWireUscExtractCutoffTiValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NextAccountNumber", Order=199, Form=XmlSchemaForm.Unqualified)]
        public string NextAccountNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextAccountPrefix", Order=200, Form=XmlSchemaForm.Unqualified)]
        public short NextAccountPrefixValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextAccountPrefix property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextAccountPrefixValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextAccountPrefix
        {
            get
            {
                if (this.NextAccountPrefixValueSpecified)
                {
                    return this.NextAccountPrefixValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextAccountPrefixValue = value.GetValueOrDefault();
                this.NextAccountPrefixValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextAccountStep", Order=201, Form=XmlSchemaForm.Unqualified)]
        public short NextAccountStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextAccountStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextAccountStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextAccountStep
        {
            get
            {
                if (this.NextAccountStepValueSpecified)
                {
                    return this.NextAccountStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextAccountStepValue = value.GetValueOrDefault();
                this.NextAccountStepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextBatchId", Order=202, Form=XmlSchemaForm.Unqualified)]
        public int NextBatchIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextBatchId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextBatchIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> NextBatchId
        {
            get
            {
                if (this.NextBatchIdValueSpecified)
                {
                    return this.NextBatchIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextBatchIdValue = value.GetValueOrDefault();
                this.NextBatchIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NextCollateralNumber", Order=203, Form=XmlSchemaForm.Unqualified)]
        public string NextCollateralNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextCollateralStep", Order=204, Form=XmlSchemaForm.Unqualified)]
        public short NextCollateralStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextCollateralStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextCollateralStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextCollateralStep
        {
            get
            {
                if (this.NextCollateralStepValueSpecified)
                {
                    return this.NextCollateralStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextCollateralStepValue = value.GetValueOrDefault();
                this.NextCollateralStepValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NextDocumentNumber", Order=205, Form=XmlSchemaForm.Unqualified)]
        public string NextDocumentNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextDocumentStep", Order=206, Form=XmlSchemaForm.Unqualified)]
        public short NextDocumentStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextDocumentStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextDocumentStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextDocumentStep
        {
            get
            {
                if (this.NextDocumentStepValueSpecified)
                {
                    return this.NextDocumentStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextDocumentStepValue = value.GetValueOrDefault();
                this.NextDocumentStepValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("NextNoteNumber", Order=207, Form=XmlSchemaForm.Unqualified)]
        public string NextNoteNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextNoteStep", Order=208, Form=XmlSchemaForm.Unqualified)]
        public short NextNoteStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextNoteStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextNoteStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextNoteStep
        {
            get
            {
                if (this.NextNoteStepValueSpecified)
                {
                    return this.NextNoteStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextNoteStepValue = value.GetValueOrDefault();
                this.NextNoteStepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticeFormat", Order=209, Form=XmlSchemaForm.Unqualified)]
        public short NoticeFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticeFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticeFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NoticeFormat
        {
            get
            {
                if (this.NoticeFormatValueSpecified)
                {
                    return this.NoticeFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticeFormatValue = value.GetValueOrDefault();
                this.NoticeFormatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NumberOfInvalidPinAttempts", Order=210, Form=XmlSchemaForm.Unqualified)]
        public short NumberOfInvalidPinAttemptsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfInvalidPinAttempts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberOfInvalidPinAttemptsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NumberOfInvalidPinAttempts
        {
            get
            {
                if (this.NumberOfInvalidPinAttemptsValueSpecified)
                {
                    return this.NumberOfInvalidPinAttemptsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfInvalidPinAttemptsValue = value.GetValueOrDefault();
                this.NumberOfInvalidPinAttemptsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdsProcessCount", Order=211, Form=XmlSchemaForm.Unqualified)]
        public short OdsProcessCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdsProcessCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdsProcessCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OdsProcessCount
        {
            get
            {
                if (this.OdsProcessCountValueSpecified)
                {
                    return this.OdsProcessCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdsProcessCountValue = value.GetValueOrDefault();
                this.OdsProcessCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OdtAuthFeeOvrSrcCodes", Order=212, Form=XmlSchemaForm.Unqualified)]
        public string OdtAuthFeeOvrSrcCodes { get; set; }
        
        [XmlElementAttribute("OdtAuthFeeRecurSrcCodes", Order=213, Form=XmlSchemaForm.Unqualified)]
        public string OdtAuthFeeRecurSrcCodes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OfacChecking", Order=214, Form=XmlSchemaForm.Unqualified)]
        public bool OfacCheckingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OfacChecking property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OfacCheckingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OfacChecking
        {
            get
            {
                if (this.OfacCheckingValueSpecified)
                {
                    return this.OfacCheckingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OfacCheckingValue = value.GetValueOrDefault();
                this.OfacCheckingValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OfacCorpCheckSpecfile", Order=215, Form=XmlSchemaForm.Unqualified)]
        public string OfacCorpCheckSpecfile { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OfacMatchAcceptedWoPriv", Order=216, Form=XmlSchemaForm.Unqualified)]
        public short OfacMatchAcceptedWoPrivValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OfacMatchAcceptedWoPriv property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OfacMatchAcceptedWoPrivValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OfacMatchAcceptedWoPriv
        {
            get
            {
                if (this.OfacMatchAcceptedWoPrivValueSpecified)
                {
                    return this.OfacMatchAcceptedWoPrivValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OfacMatchAcceptedWoPrivValue = value.GetValueOrDefault();
                this.OfacMatchAcceptedWoPrivValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnUsDraftCommentCode", Order=217, Form=XmlSchemaForm.Unqualified)]
        public short OnUsDraftCommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnUsDraftCommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnUsDraftCommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnUsDraftCommentCode
        {
            get
            {
                if (this.OnUsDraftCommentCodeValueSpecified)
                {
                    return this.OnUsDraftCommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnUsDraftCommentCodeValue = value.GetValueOrDefault();
                this.OnUsDraftCommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnUsOverdrawOption", Order=218, Form=XmlSchemaForm.Unqualified)]
        public short OnUsOverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnUsOverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnUsOverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnUsOverdrawOption
        {
            get
            {
                if (this.OnUsOverdrawOptionValueSpecified)
                {
                    return this.OnUsOverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnUsOverdrawOptionValue = value.GetValueOrDefault();
                this.OnUsOverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineParameterOption", Order=219, Form=XmlSchemaForm.Unqualified)]
        public short OnlineParameterOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineParameterOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineParameterOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineParameterOption
        {
            get
            {
                if (this.OnlineParameterOptionValueSpecified)
                {
                    return this.OnlineParameterOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineParameterOptionValue = value.GetValueOrDefault();
                this.OnlineParameterOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdraftTol", Order=220, Form=XmlSchemaForm.Unqualified)]
        public bool OverdraftTolValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdraftTol property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdraftTolValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdraftTol
        {
            get
            {
                if (this.OverdraftTolValueSpecified)
                {
                    return this.OverdraftTolValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdraftTolValue = value.GetValueOrDefault();
                this.OverdraftTolValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonDqGraceDays", Order=221, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawAddonDqGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonDqGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonDqGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawAddonDqGraceDays
        {
            get
            {
                if (this.OverdrawAddonDqGraceDaysValueSpecified)
                {
                    return this.OverdrawAddonDqGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonDqGraceDaysValue = value.GetValueOrDefault();
                this.OverdrawAddonDqGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonIncrement", Order=222, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawAddonIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawAddonIncrement
        {
            get
            {
                if (this.OverdrawAddonIncrementValueSpecified)
                {
                    return this.OverdrawAddonIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonIncrementValue = value.GetValueOrDefault();
                this.OverdrawAddonIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonMaxOverLoc", Order=223, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawAddonMaxOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonMaxOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonMaxOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawAddonMaxOverLoc
        {
            get
            {
                if (this.OverdrawAddonMaxOverLocValueSpecified)
                {
                    return this.OverdrawAddonMaxOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonMaxOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonMaxOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonPctOverLoc", Order=224, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawAddonPctOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonPctOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonPctOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawAddonPctOverLoc
        {
            get
            {
                if (this.OverdrawAddonPctOverLocValueSpecified)
                {
                    return this.OverdrawAddonPctOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonPctOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonPctOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawFeeOption", Order=225, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawFeeOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawFeeOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawFeeOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawFeeOption
        {
            get
            {
                if (this.OverdrawFeeOptionValueSpecified)
                {
                    return this.OverdrawFeeOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawFeeOptionValue = value.GetValueOrDefault();
                this.OverdrawFeeOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawIncrementOverride", Order=226, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawIncrementOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawIncrementOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawIncrementOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawIncrementOverride
        {
            get
            {
                if (this.OverdrawIncrementOverrideValueSpecified)
                {
                    return this.OverdrawIncrementOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawIncrementOverrideValue = value.GetValueOrDefault();
                this.OverdrawIncrementOverrideValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OverdrawNoticeSpecfile", Order=227, Form=XmlSchemaForm.Unqualified)]
        public string OverdrawNoticeSpecfile { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawRegDLimiting", Order=228, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawRegDLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawRegDLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawRegDLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawRegDLimiting
        {
            get
            {
                if (this.OverdrawRegDLimitingValueSpecified)
                {
                    return this.OverdrawRegDLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawRegDLimitingValue = value.GetValueOrDefault();
                this.OverdrawRegDLimitingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTierOption", Order=229, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawTierOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTierOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTierOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawTierOption
        {
            get
            {
                if (this.OverdrawTierOptionValueSpecified)
                {
                    return this.OverdrawTierOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTierOptionValue = value.GetValueOrDefault();
                this.OverdrawTierOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferFeeGlCode", Order=230, Form=XmlSchemaForm.Unqualified)]
        public short OverdrawTransferFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OverdrawTransferFeeGlCode
        {
            get
            {
                if (this.OverdrawTransferFeeGlCodeValueSpecified)
                {
                    return this.OverdrawTransferFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferFeeGlCodeValue = value.GetValueOrDefault();
                this.OverdrawTransferFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawWithdrawalIncrement", Order=231, Form=XmlSchemaForm.Unqualified)]
        public decimal OverdrawWithdrawalIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawWithdrawalIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawWithdrawalIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverdrawWithdrawalIncrement
        {
            get
            {
                if (this.OverdrawWithdrawalIncrementValueSpecified)
                {
                    return this.OverdrawWithdrawalIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawWithdrawalIncrementValue = value.GetValueOrDefault();
                this.OverdrawWithdrawalIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordExpWarningDays", Order=232, Form=XmlSchemaForm.Unqualified)]
        public short PasswordExpWarningDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordExpWarningDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordExpWarningDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordExpWarningDays
        {
            get
            {
                if (this.PasswordExpWarningDaysValueSpecified)
                {
                    return this.PasswordExpWarningDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordExpWarningDaysValue = value.GetValueOrDefault();
                this.PasswordExpWarningDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordHashing", Order=233, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordHashingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordHashing property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordHashingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordHashing
        {
            get
            {
                if (this.PasswordHashingValueSpecified)
                {
                    return this.PasswordHashingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordHashingValue = value.GetValueOrDefault();
                this.PasswordHashingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMaxInvalidAttempts", Order=234, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMaxInvalidAttemptsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMaxInvalidAttempts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMaxInvalidAttemptsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMaxInvalidAttempts
        {
            get
            {
                if (this.PasswordMaxInvalidAttemptsValueSpecified)
                {
                    return this.PasswordMaxInvalidAttemptsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMaxInvalidAttemptsValue = value.GetValueOrDefault();
                this.PasswordMaxInvalidAttemptsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMaximumAge", Order=235, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMaximumAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMaximumAge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMaximumAgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMaximumAge
        {
            get
            {
                if (this.PasswordMaximumAgeValueSpecified)
                {
                    return this.PasswordMaximumAgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMaximumAgeValue = value.GetValueOrDefault();
                this.PasswordMaximumAgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMaximumRepeatChars", Order=236, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMaximumRepeatCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMaximumRepeatChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMaximumRepeatCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMaximumRepeatChars
        {
            get
            {
                if (this.PasswordMaximumRepeatCharsValueSpecified)
                {
                    return this.PasswordMaximumRepeatCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMaximumRepeatCharsValue = value.GetValueOrDefault();
                this.PasswordMaximumRepeatCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMinimumAge", Order=237, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMinimumAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMinimumAge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMinimumAgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMinimumAge
        {
            get
            {
                if (this.PasswordMinimumAgeValueSpecified)
                {
                    return this.PasswordMinimumAgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMinimumAgeValue = value.GetValueOrDefault();
                this.PasswordMinimumAgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMinimumAlphaChars", Order=238, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMinimumAlphaCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMinimumAlphaChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMinimumAlphaCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMinimumAlphaChars
        {
            get
            {
                if (this.PasswordMinimumAlphaCharsValueSpecified)
                {
                    return this.PasswordMinimumAlphaCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMinimumAlphaCharsValue = value.GetValueOrDefault();
                this.PasswordMinimumAlphaCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMinimumDiffChars", Order=239, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMinimumDiffCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMinimumDiffChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMinimumDiffCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMinimumDiffChars
        {
            get
            {
                if (this.PasswordMinimumDiffCharsValueSpecified)
                {
                    return this.PasswordMinimumDiffCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMinimumDiffCharsValue = value.GetValueOrDefault();
                this.PasswordMinimumDiffCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMinimumLength", Order=240, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMinimumLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMinimumLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMinimumLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMinimumLength
        {
            get
            {
                if (this.PasswordMinimumLengthValueSpecified)
                {
                    return this.PasswordMinimumLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMinimumLengthValue = value.GetValueOrDefault();
                this.PasswordMinimumLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMinimumNumChars", Order=241, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMinimumNumCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMinimumNumChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMinimumNumCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMinimumNumChars
        {
            get
            {
                if (this.PasswordMinimumNumCharsValueSpecified)
                {
                    return this.PasswordMinimumNumCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMinimumNumCharsValue = value.GetValueOrDefault();
                this.PasswordMinimumNumCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMinimumOtherChars", Order=242, Form=XmlSchemaForm.Unqualified)]
        public short PasswordMinimumOtherCharsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMinimumOtherChars property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordMinimumOtherCharsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordMinimumOtherChars
        {
            get
            {
                if (this.PasswordMinimumOtherCharsValueSpecified)
                {
                    return this.PasswordMinimumOtherCharsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordMinimumOtherCharsValue = value.GetValueOrDefault();
                this.PasswordMinimumOtherCharsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordRecycleTimes", Order=243, Form=XmlSchemaForm.Unqualified)]
        public short PasswordRecycleTimesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordRecycleTimes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordRecycleTimesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PasswordRecycleTimes
        {
            get
            {
                if (this.PasswordRecycleTimesValueSpecified)
                {
                    return this.PasswordRecycleTimesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordRecycleTimesValue = value.GetValueOrDefault();
                this.PasswordRecycleTimesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordsCaseSensitive", Order=244, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordsCaseSensitiveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordsCaseSensitive property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordsCaseSensitiveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordsCaseSensitive
        {
            get
            {
                if (this.PasswordsCaseSensitiveValueSpecified)
                {
                    return this.PasswordsCaseSensitiveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordsCaseSensitiveValue = value.GetValueOrDefault();
                this.PasswordsCaseSensitiveValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscPaymentHistoryDayCutoff_2> _paymentHistoryDayCutoff;
        
        [XmlElementAttribute("PaymentHistoryDayCutoff", Order=245, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscPaymentHistoryDayCutoff_2> PaymentHistoryDayCutoff
        {
            get
            {
                return _paymentHistoryDayCutoff;
            }
            set
            {
                _paymentHistoryDayCutoff = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PaymentHistoryDayCutoff collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PaymentHistoryDayCutoffSpecified
        {
            get
            {
                return ((this.PaymentHistoryDayCutoff != null) 
                            && (this.PaymentHistoryDayCutoff.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinChangeDays", Order=246, Form=XmlSchemaForm.Unqualified)]
        public short PinChangeDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinChangeDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinChangeDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PinChangeDays
        {
            get
            {
                if (this.PinChangeDaysValueSpecified)
                {
                    return this.PinChangeDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinChangeDaysValue = value.GetValueOrDefault();
                this.PinChangeDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PinMask", Order=247, Form=XmlSchemaForm.Unqualified)]
        public string PinMask { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PositivePayDraft", Order=248, Form=XmlSchemaForm.Unqualified)]
        public bool PositivePayDraftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PositivePayDraft property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PositivePayDraftValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PositivePayDraft
        {
            get
            {
                if (this.PositivePayDraftValueSpecified)
                {
                    return this.PositivePayDraftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PositivePayDraftValue = value.GetValueOrDefault();
                this.PositivePayDraftValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PowerOnControlDeluxeEditor", Order=249, Form=XmlSchemaForm.Unqualified)]
        public bool PowerOnControlDeluxeEditorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PowerOnControlDeluxeEditor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PowerOnControlDeluxeEditorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PowerOnControlDeluxeEditor
        {
            get
            {
                if (this.PowerOnControlDeluxeEditorValueSpecified)
                {
                    return this.PowerOnControlDeluxeEditorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PowerOnControlDeluxeEditorValue = value.GetValueOrDefault();
                this.PowerOnControlDeluxeEditorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreAuthWireUscExtractCuto", Order=250, Form=XmlSchemaForm.Unqualified)]
        public short PreAuthWireUscExtractCutoValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreAuthWireUscExtractCuto property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreAuthWireUscExtractCutoValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreAuthWireUscExtractCuto
        {
            get
            {
                if (this.PreAuthWireUscExtractCutoValueSpecified)
                {
                    return this.PreAuthWireUscExtractCutoValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreAuthWireUscExtractCutoValue = value.GetValueOrDefault();
                this.PreAuthWireUscExtractCutoValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PrimeShareTypeList", Order=251, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap PrimeShareTypeList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrintInstitutiononNotice", Order=252, Form=XmlSchemaForm.Unqualified)]
        public short PrintInstitutiononNoticeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintInstitutiononNotice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrintInstitutiononNoticeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrintInstitutiononNotice
        {
            get
            {
                if (this.PrintInstitutiononNoticeValueSpecified)
                {
                    return this.PrintInstitutiononNoticeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrintInstitutiononNoticeValue = value.GetValueOrDefault();
                this.PrintInstitutiononNoticeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrintInstitutiononReceipt", Order=253, Form=XmlSchemaForm.Unqualified)]
        public short PrintInstitutiononReceiptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintInstitutiononReceipt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrintInstitutiononReceiptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrintInstitutiononReceipt
        {
            get
            {
                if (this.PrintInstitutiononReceiptValueSpecified)
                {
                    return this.PrintInstitutiononReceiptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrintInstitutiononReceiptValue = value.GetValueOrDefault();
                this.PrintInstitutiononReceiptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrintItcImages", Order=254, Form=XmlSchemaForm.Unqualified)]
        public short PrintItcImagesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintItcImages property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrintItcImagesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrintItcImages
        {
            get
            {
                if (this.PrintItcImagesValueSpecified)
                {
                    return this.PrintItcImagesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrintItcImagesValue = value.GetValueOrDefault();
                this.PrintItcImagesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PromptForMicrInfoInDrOn", Order=255, Form=XmlSchemaForm.Unqualified)]
        public short PromptForMicrInfoInDrOnValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PromptForMicrInfoInDrOn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PromptForMicrInfoInDrOnValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PromptForMicrInfoInDrOn
        {
            get
            {
                if (this.PromptForMicrInfoInDrOnValueSpecified)
                {
                    return this.PromptForMicrInfoInDrOnValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PromptForMicrInfoInDrOnValue = value.GetValueOrDefault();
                this.PromptForMicrInfoInDrOnValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Promptfor000CrtsyPayFee", Order=256, Form=XmlSchemaForm.Unqualified)]
        public bool Promptfor000CrtsyPayFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Promptfor000CrtsyPayFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Promptfor000CrtsyPayFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Promptfor000CrtsyPayFee
        {
            get
            {
                if (this.Promptfor000CrtsyPayFeeValueSpecified)
                {
                    return this.Promptfor000CrtsyPayFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Promptfor000CrtsyPayFeeValue = value.GetValueOrDefault();
                this.Promptfor000CrtsyPayFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Promptfor000TransferFee", Order=257, Form=XmlSchemaForm.Unqualified)]
        public bool Promptfor000TransferFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Promptfor000TransferFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Promptfor000TransferFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Promptfor000TransferFee
        {
            get
            {
                if (this.Promptfor000TransferFeeValueSpecified)
                {
                    return this.Promptfor000TransferFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Promptfor000TransferFeeValue = value.GetValueOrDefault();
                this.Promptfor000TransferFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RateDecimalDigits", Order=258, Form=XmlSchemaForm.Unqualified)]
        public short RateDecimalDigitsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RateDecimalDigits property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RateDecimalDigitsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RateDecimalDigits
        {
            get
            {
                if (this.RateDecimalDigitsValueSpecified)
                {
                    return this.RateDecimalDigitsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RateDecimalDigitsValue = value.GetValueOrDefault();
                this.RateDecimalDigitsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RcntTellerActWaiveWarning", Order=259, Form=XmlSchemaForm.Unqualified)]
        public short RcntTellerActWaiveWarningValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RcntTellerActWaiveWarning property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RcntTellerActWaiveWarningValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RcntTellerActWaiveWarning
        {
            get
            {
                if (this.RcntTellerActWaiveWarningValueSpecified)
                {
                    return this.RcntTellerActWaiveWarningValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RcntTellerActWaiveWarningValue = value.GetValueOrDefault();
                this.RcntTellerActWaiveWarningValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("RcntTllrActvtyCnslsList", Order=260, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap RcntTllrActvtyCnslsList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RcntTllrActvtyCriteria", Order=261, Form=XmlSchemaForm.Unqualified)]
        public short RcntTllrActvtyCriteriaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RcntTllrActvtyCriteria property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RcntTllrActvtyCriteriaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RcntTllrActvtyCriteria
        {
            get
            {
                if (this.RcntTllrActvtyCriteriaValueSpecified)
                {
                    return this.RcntTllrActvtyCriteriaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RcntTllrActvtyCriteriaValue = value.GetValueOrDefault();
                this.RcntTllrActvtyCriteriaValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RcntTllrActvtyIncludeTllr", Order=262, Form=XmlSchemaForm.Unqualified)]
        public bool RcntTllrActvtyIncludeTllrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RcntTllrActvtyIncludeTllr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RcntTllrActvtyIncludeTllrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RcntTllrActvtyIncludeTllr
        {
            get
            {
                if (this.RcntTllrActvtyIncludeTllrValueSpecified)
                {
                    return this.RcntTllrActvtyIncludeTllrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RcntTllrActvtyIncludeTllrValue = value.GetValueOrDefault();
                this.RcntTllrActvtyIncludeTllrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RcntTllrActvtyReqMultTllr", Order=263, Form=XmlSchemaForm.Unqualified)]
        public bool RcntTllrActvtyReqMultTllrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RcntTllrActvtyReqMultTllr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RcntTllrActvtyReqMultTllrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RcntTllrActvtyReqMultTllr
        {
            get
            {
                if (this.RcntTllrActvtyReqMultTllrValueSpecified)
                {
                    return this.RcntTllrActvtyReqMultTllrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RcntTllrActvtyReqMultTllrValue = value.GetValueOrDefault();
                this.RcntTllrActvtyReqMultTllrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReactivateSecurityOvrMsg", Order=264, Form=XmlSchemaForm.Unqualified)]
        public short ReactivateSecurityOvrMsgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReactivateSecurityOvrMsg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReactivateSecurityOvrMsgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReactivateSecurityOvrMsg
        {
            get
            {
                if (this.ReactivateSecurityOvrMsgValueSpecified)
                {
                    return this.ReactivateSecurityOvrMsgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReactivateSecurityOvrMsgValue = value.GetValueOrDefault();
                this.ReactivateSecurityOvrMsgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptAddressPrint", Order=265, Form=XmlSchemaForm.Unqualified)]
        public short ReceiptAddressPrintValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptAddressPrint property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptAddressPrintValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReceiptAddressPrint
        {
            get
            {
                if (this.ReceiptAddressPrintValueSpecified)
                {
                    return this.ReceiptAddressPrintValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptAddressPrintValue = value.GetValueOrDefault();
                this.ReceiptAddressPrintValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptAlternateAddress", Order=266, Form=XmlSchemaForm.Unqualified)]
        public short ReceiptAlternateAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptAlternateAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptAlternateAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReceiptAlternateAddress
        {
            get
            {
                if (this.ReceiptAlternateAddressValueSpecified)
                {
                    return this.ReceiptAlternateAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptAlternateAddressValue = value.GetValueOrDefault();
                this.ReceiptAlternateAddressValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptBalancePrint", Order=267, Form=XmlSchemaForm.Unqualified)]
        public short ReceiptBalancePrintValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptBalancePrint property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptBalancePrintValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReceiptBalancePrint
        {
            get
            {
                if (this.ReceiptBalancePrintValueSpecified)
                {
                    return this.ReceiptBalancePrintValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptBalancePrintValue = value.GetValueOrDefault();
                this.ReceiptBalancePrintValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptOtherAccountOption", Order=268, Form=XmlSchemaForm.Unqualified)]
        public short ReceiptOtherAccountOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptOtherAccountOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptOtherAccountOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReceiptOtherAccountOption
        {
            get
            {
                if (this.ReceiptOtherAccountOptionValueSpecified)
                {
                    return this.ReceiptOtherAccountOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptOtherAccountOptionValue = value.GetValueOrDefault();
                this.ReceiptOtherAccountOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptPreviousBalance", Order=269, Form=XmlSchemaForm.Unqualified)]
        public bool ReceiptPreviousBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptPreviousBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptPreviousBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReceiptPreviousBalance
        {
            get
            {
                if (this.ReceiptPreviousBalanceValueSpecified)
                {
                    return this.ReceiptPreviousBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptPreviousBalanceValue = value.GetValueOrDefault();
                this.ReceiptPreviousBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptPrint", Order=270, Form=XmlSchemaForm.Unqualified)]
        public short ReceiptPrintValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptPrint property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptPrintValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReceiptPrint
        {
            get
            {
                if (this.ReceiptPrintValueSpecified)
                {
                    return this.ReceiptPrintValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptPrintValue = value.GetValueOrDefault();
                this.ReceiptPrintValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptReprintEnable", Order=271, Form=XmlSchemaForm.Unqualified)]
        public bool ReceiptReprintEnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptReprintEnable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptReprintEnableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReceiptReprintEnable
        {
            get
            {
                if (this.ReceiptReprintEnableValueSpecified)
                {
                    return this.ReceiptReprintEnableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptReprintEnableValue = value.GetValueOrDefault();
                this.ReceiptReprintEnableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReceiptSuppressXferAcct", Order=272, Form=XmlSchemaForm.Unqualified)]
        public bool ReceiptSuppressXferAcctValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceiptSuppressXferAcct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReceiptSuppressXferAcctValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReceiptSuppressXferAcct
        {
            get
            {
                if (this.ReceiptSuppressXferAcctValueSpecified)
                {
                    return this.ReceiptSuppressXferAcctValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceiptSuppressXferAcctValue = value.GetValueOrDefault();
                this.ReceiptSuppressXferAcctValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecentTellerActivityDays", Order=273, Form=XmlSchemaForm.Unqualified)]
        public short RecentTellerActivityDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecentTellerActivityDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecentTellerActivityDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RecentTellerActivityDays
        {
            get
            {
                if (this.RecentTellerActivityDaysValueSpecified)
                {
                    return this.RecentTellerActivityDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecentTellerActivityDaysValue = value.GetValueOrDefault();
                this.RecentTellerActivityDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDLimitingMethod", Order=274, Form=XmlSchemaForm.Unqualified)]
        public short RegDLimitingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDLimitingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDLimitingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDLimitingMethod
        {
            get
            {
                if (this.RegDLimitingMethodValueSpecified)
                {
                    return this.RegDLimitingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDLimitingMethodValue = value.GetValueOrDefault();
                this.RegDLimitingMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("RegDLimitingTypeList", Order=275, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap RegDLimitingTypeList { get; set; }
        
        [XmlElementAttribute("RegulationZFeeTypes", Order=276, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap RegulationZFeeTypes { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayFee1_2> _relAltCourtesyPayFee1;
        
        [XmlElementAttribute("RelAltCourtesyPayFee1", Order=277, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayFee1_2> RelAltCourtesyPayFee1
        {
            get
            {
                return _relAltCourtesyPayFee1;
            }
            set
            {
                _relAltCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee1 != null) 
                            && (this.RelAltCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayFee2_2> _relAltCourtesyPayFee2;
        
        [XmlElementAttribute("RelAltCourtesyPayFee2", Order=278, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayFee2_2> RelAltCourtesyPayFee2
        {
            get
            {
                return _relAltCourtesyPayFee2;
            }
            set
            {
                _relAltCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee2 != null) 
                            && (this.RelAltCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayFee3_2> _relAltCourtesyPayFee3;
        
        [XmlElementAttribute("RelAltCourtesyPayFee3", Order=279, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayFee3_2> RelAltCourtesyPayFee3
        {
            get
            {
                return _relAltCourtesyPayFee3;
            }
            set
            {
                _relAltCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee3 != null) 
                            && (this.RelAltCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayFee4_2> _relAltCourtesyPayFee4;
        
        [XmlElementAttribute("RelAltCourtesyPayFee4", Order=280, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayFee4_2> RelAltCourtesyPayFee4
        {
            get
            {
                return _relAltCourtesyPayFee4;
            }
            set
            {
                _relAltCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee4 != null) 
                            && (this.RelAltCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayFee5_2> _relAltCourtesyPayFee5;
        
        [XmlElementAttribute("RelAltCourtesyPayFee5", Order=281, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayFee5_2> RelAltCourtesyPayFee5
        {
            get
            {
                return _relAltCourtesyPayFee5;
            }
            set
            {
                _relAltCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee5 != null) 
                            && (this.RelAltCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayFee6_2> _relAltCourtesyPayFee6;
        
        [XmlElementAttribute("RelAltCourtesyPayFee6", Order=282, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayFee6_2> RelAltCourtesyPayFee6
        {
            get
            {
                return _relAltCourtesyPayFee6;
            }
            set
            {
                _relAltCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee6 != null) 
                            && (this.RelAltCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayTier1_2> _relAltCourtesyPayTier1;
        
        [XmlElementAttribute("RelAltCourtesyPayTier1", Order=283, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayTier1_2> RelAltCourtesyPayTier1
        {
            get
            {
                return _relAltCourtesyPayTier1;
            }
            set
            {
                _relAltCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier1 != null) 
                            && (this.RelAltCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayTier2_2> _relAltCourtesyPayTier2;
        
        [XmlElementAttribute("RelAltCourtesyPayTier2", Order=284, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayTier2_2> RelAltCourtesyPayTier2
        {
            get
            {
                return _relAltCourtesyPayTier2;
            }
            set
            {
                _relAltCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier2 != null) 
                            && (this.RelAltCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayTier3_2> _relAltCourtesyPayTier3;
        
        [XmlElementAttribute("RelAltCourtesyPayTier3", Order=285, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayTier3_2> RelAltCourtesyPayTier3
        {
            get
            {
                return _relAltCourtesyPayTier3;
            }
            set
            {
                _relAltCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier3 != null) 
                            && (this.RelAltCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayTier4_2> _relAltCourtesyPayTier4;
        
        [XmlElementAttribute("RelAltCourtesyPayTier4", Order=286, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayTier4_2> RelAltCourtesyPayTier4
        {
            get
            {
                return _relAltCourtesyPayTier4;
            }
            set
            {
                _relAltCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier4 != null) 
                            && (this.RelAltCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayTier5_2> _relAltCourtesyPayTier5;
        
        [XmlElementAttribute("RelAltCourtesyPayTier5", Order=287, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayTier5_2> RelAltCourtesyPayTier5
        {
            get
            {
                return _relAltCourtesyPayTier5;
            }
            set
            {
                _relAltCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier5 != null) 
                            && (this.RelAltCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelAltCourtesyPayTier6_2> _relAltCourtesyPayTier6;
        
        [XmlElementAttribute("RelAltCourtesyPayTier6", Order=288, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelAltCourtesyPayTier6_2> RelAltCourtesyPayTier6
        {
            get
            {
                return _relAltCourtesyPayTier6;
            }
            set
            {
                _relAltCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier6 != null) 
                            && (this.RelAltCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCodeList_2> _relCodeList;
        
        [XmlElementAttribute("RelCodeList", Order=289, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCodeList_2> RelCodeList
        {
            get
            {
                return _relCodeList;
            }
            set
            {
                _relCodeList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCodeList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCodeListSpecified
        {
            get
            {
                return ((this.RelCodeList != null) 
                            && (this.RelCodeList.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayFee1_2> _relCourtesyPayFee1;
        
        [XmlElementAttribute("RelCourtesyPayFee1", Order=290, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayFee1_2> RelCourtesyPayFee1
        {
            get
            {
                return _relCourtesyPayFee1;
            }
            set
            {
                _relCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee1 != null) 
                            && (this.RelCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayFee2_2> _relCourtesyPayFee2;
        
        [XmlElementAttribute("RelCourtesyPayFee2", Order=291, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayFee2_2> RelCourtesyPayFee2
        {
            get
            {
                return _relCourtesyPayFee2;
            }
            set
            {
                _relCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee2 != null) 
                            && (this.RelCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayFee3_2> _relCourtesyPayFee3;
        
        [XmlElementAttribute("RelCourtesyPayFee3", Order=292, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayFee3_2> RelCourtesyPayFee3
        {
            get
            {
                return _relCourtesyPayFee3;
            }
            set
            {
                _relCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee3 != null) 
                            && (this.RelCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayFee4_2> _relCourtesyPayFee4;
        
        [XmlElementAttribute("RelCourtesyPayFee4", Order=293, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayFee4_2> RelCourtesyPayFee4
        {
            get
            {
                return _relCourtesyPayFee4;
            }
            set
            {
                _relCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee4 != null) 
                            && (this.RelCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayFee5_2> _relCourtesyPayFee5;
        
        [XmlElementAttribute("RelCourtesyPayFee5", Order=294, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayFee5_2> RelCourtesyPayFee5
        {
            get
            {
                return _relCourtesyPayFee5;
            }
            set
            {
                _relCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee5 != null) 
                            && (this.RelCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayFee6_2> _relCourtesyPayFee6;
        
        [XmlElementAttribute("RelCourtesyPayFee6", Order=295, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayFee6_2> RelCourtesyPayFee6
        {
            get
            {
                return _relCourtesyPayFee6;
            }
            set
            {
                _relCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee6 != null) 
                            && (this.RelCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayTier1_2> _relCourtesyPayTier1;
        
        [XmlElementAttribute("RelCourtesyPayTier1", Order=296, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayTier1_2> RelCourtesyPayTier1
        {
            get
            {
                return _relCourtesyPayTier1;
            }
            set
            {
                _relCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier1 != null) 
                            && (this.RelCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayTier2_2> _relCourtesyPayTier2;
        
        [XmlElementAttribute("RelCourtesyPayTier2", Order=297, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayTier2_2> RelCourtesyPayTier2
        {
            get
            {
                return _relCourtesyPayTier2;
            }
            set
            {
                _relCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier2 != null) 
                            && (this.RelCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayTier3_2> _relCourtesyPayTier3;
        
        [XmlElementAttribute("RelCourtesyPayTier3", Order=298, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayTier3_2> RelCourtesyPayTier3
        {
            get
            {
                return _relCourtesyPayTier3;
            }
            set
            {
                _relCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier3 != null) 
                            && (this.RelCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayTier4_2> _relCourtesyPayTier4;
        
        [XmlElementAttribute("RelCourtesyPayTier4", Order=299, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayTier4_2> RelCourtesyPayTier4
        {
            get
            {
                return _relCourtesyPayTier4;
            }
            set
            {
                _relCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier4 != null) 
                            && (this.RelCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayTier5_2> _relCourtesyPayTier5;
        
        [XmlElementAttribute("RelCourtesyPayTier5", Order=300, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayTier5_2> RelCourtesyPayTier5
        {
            get
            {
                return _relCourtesyPayTier5;
            }
            set
            {
                _relCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier5 != null) 
                            && (this.RelCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelCourtesyPayTier6_2> _relCourtesyPayTier6;
        
        [XmlElementAttribute("RelCourtesyPayTier6", Order=301, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelCourtesyPayTier6_2> RelCourtesyPayTier6
        {
            get
            {
                return _relCourtesyPayTier6;
            }
            set
            {
                _relCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier6 != null) 
                            && (this.RelCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelOverdrawAddonXfrFee_2> _relOverdrawAddonXfrFee;
        
        [XmlElementAttribute("RelOverdrawAddonXfrFee", Order=302, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelOverdrawAddonXfrFee_2> RelOverdrawAddonXfrFee
        {
            get
            {
                return _relOverdrawAddonXfrFee;
            }
            set
            {
                _relOverdrawAddonXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawAddonXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawAddonXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawAddonXfrFee != null) 
                            && (this.RelOverdrawAddonXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelOverdrawComboXfrFee_2> _relOverdrawComboXfrFee;
        
        [XmlElementAttribute("RelOverdrawComboXfrFee", Order=303, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelOverdrawComboXfrFee_2> RelOverdrawComboXfrFee
        {
            get
            {
                return _relOverdrawComboXfrFee;
            }
            set
            {
                _relOverdrawComboXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawComboXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawComboXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawComboXfrFee != null) 
                            && (this.RelOverdrawComboXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<MiscRelOverdrawWdXfrFee_2> _relOverdrawWdXfrFee;
        
        [XmlElementAttribute("RelOverdrawWdXfrFee", Order=304, Form=XmlSchemaForm.Unqualified)]
        public Collection<MiscRelOverdrawWdXfrFee_2> RelOverdrawWdXfrFee
        {
            get
            {
                return _relOverdrawWdXfrFee;
            }
            set
            {
                _relOverdrawWdXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawWdXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawWdXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawWdXfrFee != null) 
                            && (this.RelOverdrawWdXfrFee.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReportSequenceNumberLength", Order=305, Form=XmlSchemaForm.Unqualified)]
        public short ReportSequenceNumberLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReportSequenceNumberLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReportSequenceNumberLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReportSequenceNumberLength
        {
            get
            {
                if (this.ReportSequenceNumberLengthValueSpecified)
                {
                    return this.ReportSequenceNumberLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReportSequenceNumberLengthValue = value.GetValueOrDefault();
                this.ReportSequenceNumberLengthValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("RsaFiId", Order=306, Form=XmlSchemaForm.Unqualified)]
        public string RsaFiId { get; set; }
        
        [XmlElementAttribute("RtNumber", Order=307, Form=XmlSchemaForm.Unqualified)]
        public string RtNumber { get; set; }
        
        [XmlElementAttribute("SavingsName", Order=308, Form=XmlSchemaForm.Unqualified)]
        public string SavingsName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SbaDistrRoundingMethod", Order=309, Form=XmlSchemaForm.Unqualified)]
        public short SbaDistrRoundingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SbaDistrRoundingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SbaDistrRoundingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SbaDistrRoundingMethod
        {
            get
            {
                if (this.SbaDistrRoundingMethodValueSpecified)
                {
                    return this.SbaDistrRoundingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SbaDistrRoundingMethodValue = value.GetValueOrDefault();
                this.SbaDistrRoundingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SbaLoans", Order=310, Form=XmlSchemaForm.Unqualified)]
        public bool SbaLoansValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SbaLoans property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SbaLoansValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SbaLoans
        {
            get
            {
                if (this.SbaLoansValueSpecified)
                {
                    return this.SbaLoansValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SbaLoansValue = value.GetValueOrDefault();
                this.SbaLoansValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ScopeofMembership", Order=311, Form=XmlSchemaForm.Unqualified)]
        public short ScopeofMembershipValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ScopeofMembership property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ScopeofMembershipValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ScopeofMembership
        {
            get
            {
                if (this.ScopeofMembershipValueSpecified)
                {
                    return this.ScopeofMembershipValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ScopeofMembershipValue = value.GetValueOrDefault();
                this.ScopeofMembershipValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecureCardPins", Order=312, Form=XmlSchemaForm.Unqualified)]
        public bool SecureCardPinsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecureCardPins property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecureCardPinsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SecureCardPins
        {
            get
            {
                if (this.SecureCardPinsValueSpecified)
                {
                    return this.SecureCardPinsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecureCardPinsValue = value.GetValueOrDefault();
                this.SecureCardPinsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareApyEarnedDisclosure", Order=313, Form=XmlSchemaForm.Unqualified)]
        public short ShareApyEarnedDisclosureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareApyEarnedDisclosure property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareApyEarnedDisclosureValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ShareApyEarnedDisclosure
        {
            get
            {
                if (this.ShareApyEarnedDisclosureValueSpecified)
                {
                    return this.ShareApyEarnedDisclosureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareApyEarnedDisclosureValue = value.GetValueOrDefault();
                this.ShareApyEarnedDisclosureValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareCloseOption", Order=314, Form=XmlSchemaForm.Unqualified)]
        public short ShareCloseOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareCloseOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareCloseOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ShareCloseOption
        {
            get
            {
                if (this.ShareCloseOptionValueSpecified)
                {
                    return this.ShareCloseOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareCloseOptionValue = value.GetValueOrDefault();
                this.ShareCloseOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareCommentbyPowerOn", Order=315, Form=XmlSchemaForm.Unqualified)]
        public bool ShareCommentbyPowerOnValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareCommentbyPowerOn property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareCommentbyPowerOnValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShareCommentbyPowerOn
        {
            get
            {
                if (this.ShareCommentbyPowerOnValueSpecified)
                {
                    return this.ShareCommentbyPowerOnValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareCommentbyPowerOnValue = value.GetValueOrDefault();
                this.ShareCommentbyPowerOnValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShareDividendAccrual", Order=316, Form=XmlSchemaForm.Unqualified)]
        public bool ShareDividendAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShareDividendAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShareDividendAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShareDividendAccrual
        {
            get
            {
                if (this.ShareDividendAccrualValueSpecified)
                {
                    return this.ShareDividendAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShareDividendAccrualValue = value.GetValueOrDefault();
                this.ShareDividendAccrualValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ShareExclusionWarnCodeList", Order=317, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ShareExclusionWarnCodeList { get; set; }
        
        [XmlElementAttribute("ShareTypesForOnList", Order=318, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ShareTypesForOnList { get; set; }
        
        [XmlElementAttribute("ShareTypesForSwList", Order=319, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ShareTypesForSwList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SignatureLine", Order=320, Form=XmlSchemaForm.Unqualified)]
        public short SignatureLineValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SignatureLine property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SignatureLineValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SignatureLine
        {
            get
            {
                if (this.SignatureLineValueSpecified)
                {
                    return this.SignatureLineValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SignatureLineValue = value.GetValueOrDefault();
                this.SignatureLineValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceCodeOptionAch", Order=321, Form=XmlSchemaForm.Unqualified)]
        public short SourceCodeOptionAchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceCodeOptionAch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceCodeOptionAchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceCodeOptionAch
        {
            get
            {
                if (this.SourceCodeOptionAchValueSpecified)
                {
                    return this.SourceCodeOptionAchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceCodeOptionAchValue = value.GetValueOrDefault();
                this.SourceCodeOptionAchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceCodeOptionBillPay", Order=322, Form=XmlSchemaForm.Unqualified)]
        public short SourceCodeOptionBillPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceCodeOptionBillPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceCodeOptionBillPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceCodeOptionBillPay
        {
            get
            {
                if (this.SourceCodeOptionBillPayValueSpecified)
                {
                    return this.SourceCodeOptionBillPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceCodeOptionBillPayValue = value.GetValueOrDefault();
                this.SourceCodeOptionBillPayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceCodeOptionCard", Order=323, Form=XmlSchemaForm.Unqualified)]
        public short SourceCodeOptionCardValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceCodeOptionCard property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceCodeOptionCardValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceCodeOptionCard
        {
            get
            {
                if (this.SourceCodeOptionCardValueSpecified)
                {
                    return this.SourceCodeOptionCardValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceCodeOptionCardValue = value.GetValueOrDefault();
                this.SourceCodeOptionCardValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceCodeOptionHomeBank", Order=324, Form=XmlSchemaForm.Unqualified)]
        public short SourceCodeOptionHomeBankValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceCodeOptionHomeBank property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceCodeOptionHomeBankValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceCodeOptionHomeBank
        {
            get
            {
                if (this.SourceCodeOptionHomeBankValueSpecified)
                {
                    return this.SourceCodeOptionHomeBankValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceCodeOptionHomeBankValue = value.GetValueOrDefault();
                this.SourceCodeOptionHomeBankValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceCodeOptionPos", Order=325, Form=XmlSchemaForm.Unqualified)]
        public short SourceCodeOptionPosValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceCodeOptionPos property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceCodeOptionPosValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceCodeOptionPos
        {
            get
            {
                if (this.SourceCodeOptionPosValueSpecified)
                {
                    return this.SourceCodeOptionPosValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceCodeOptionPosValue = value.GetValueOrDefault();
                this.SourceCodeOptionPosValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceCodeOptionSharedBr", Order=326, Form=XmlSchemaForm.Unqualified)]
        public short SourceCodeOptionSharedBrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceCodeOptionSharedBr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceCodeOptionSharedBrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceCodeOptionSharedBr
        {
            get
            {
                if (this.SourceCodeOptionSharedBrValueSpecified)
                {
                    return this.SourceCodeOptionSharedBrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceCodeOptionSharedBrValue = value.GetValueOrDefault();
                this.SourceCodeOptionSharedBrValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SsnTinMask", Order=327, Form=XmlSchemaForm.Unqualified)]
        public string SsnTinMask { get; set; }
        
        [XmlElementAttribute("StateReporting", Order=328, Form=XmlSchemaForm.Unqualified)]
        public string StateReporting { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StopPayExpirationDays", Order=329, Form=XmlSchemaForm.Unqualified)]
        public short StopPayExpirationDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopPayExpirationDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StopPayExpirationDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StopPayExpirationDays
        {
            get
            {
                if (this.StopPayExpirationDaysValueSpecified)
                {
                    return this.StopPayExpirationDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StopPayExpirationDaysValue = value.GetValueOrDefault();
                this.StopPayExpirationDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StopPayExpirationMonths", Order=330, Form=XmlSchemaForm.Unqualified)]
        public short StopPayExpirationMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopPayExpirationMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StopPayExpirationMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StopPayExpirationMonths
        {
            get
            {
                if (this.StopPayExpirationMonthsValueSpecified)
                {
                    return this.StopPayExpirationMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StopPayExpirationMonthsValue = value.GetValueOrDefault();
                this.StopPayExpirationMonthsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("StopPayTrancodeTypes", Order=331, Form=XmlSchemaForm.Unqualified)]
        public string StopPayTrancodeTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StopPreviousOverdrafts", Order=332, Form=XmlSchemaForm.Unqualified)]
        public short StopPreviousOverdraftsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StopPreviousOverdrafts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StopPreviousOverdraftsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StopPreviousOverdrafts
        {
            get
            {
                if (this.StopPreviousOverdraftsValueSpecified)
                {
                    return this.StopPreviousOverdraftsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StopPreviousOverdraftsValue = value.GetValueOrDefault();
                this.StopPreviousOverdraftsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StoreFwdMode", Order=333, Form=XmlSchemaForm.Unqualified)]
        public short StoreFwdModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StoreFwdMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StoreFwdModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StoreFwdMode
        {
            get
            {
                if (this.StoreFwdModeValueSpecified)
                {
                    return this.StoreFwdModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StoreFwdModeValue = value.GetValueOrDefault();
                this.StoreFwdModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SvAnalysisSys", Order=334, Form=XmlSchemaForm.Unqualified)]
        public bool SvAnalysisSysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SvAnalysisSys property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SvAnalysisSysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SvAnalysisSys
        {
            get
            {
                if (this.SvAnalysisSysValueSpecified)
                {
                    return this.SvAnalysisSysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SvAnalysisSysValue = value.GetValueOrDefault();
                this.SvAnalysisSysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SymConnectDialog", Order=335, Form=XmlSchemaForm.Unqualified)]
        public bool SymConnectDialogValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SymConnectDialog property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SymConnectDialogValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SymConnectDialog
        {
            get
            {
                if (this.SymConnectDialogValueSpecified)
                {
                    return this.SymConnectDialogValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SymConnectDialogValue = value.GetValueOrDefault();
                this.SymConnectDialogValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SymFormEmailFormat", Order=336, Form=XmlSchemaForm.Unqualified)]
        public short SymFormEmailFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SymFormEmailFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SymFormEmailFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SymFormEmailFormat
        {
            get
            {
                if (this.SymFormEmailFormatValueSpecified)
                {
                    return this.SymFormEmailFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SymFormEmailFormatValue = value.GetValueOrDefault();
                this.SymFormEmailFormatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SymFormImagingFormat", Order=337, Form=XmlSchemaForm.Unqualified)]
        public short SymFormImagingFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SymFormImagingFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SymFormImagingFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SymFormImagingFormat
        {
            get
            {
                if (this.SymFormImagingFormatValueSpecified)
                {
                    return this.SymFormImagingFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SymFormImagingFormatValue = value.GetValueOrDefault();
                this.SymFormImagingFormatValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SymFormRegLev", Order=338, Form=XmlSchemaForm.Unqualified)]
        public short SymFormRegLevValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SymFormRegLev property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SymFormRegLevValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SymFormRegLev
        {
            get
            {
                if (this.SymFormRegLevValueSpecified)
                {
                    return this.SymFormRegLevValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SymFormRegLevValue = value.GetValueOrDefault();
                this.SymFormRegLevValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SystemDate", Order=339, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> SystemDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SystemDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SystemDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SystemDate
        {
            get
            {
                if (this.SystemDateValueSpecified)
                {
                    return this.SystemDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SystemDateValue = value.GetValueOrDefault();
                this.SystemDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TellerFeDecrOccurrenceCt", Order=340, Form=XmlSchemaForm.Unqualified)]
        public short TellerFeDecrOccurrenceCtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TellerFeDecrOccurrenceCt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TellerFeDecrOccurrenceCtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TellerFeDecrOccurrenceCt
        {
            get
            {
                if (this.TellerFeDecrOccurrenceCtValueSpecified)
                {
                    return this.TellerFeDecrOccurrenceCtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TellerFeDecrOccurrenceCtValue = value.GetValueOrDefault();
                this.TellerFeDecrOccurrenceCtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TellerFeDecreaseFeeCt", Order=341, Form=XmlSchemaForm.Unqualified)]
        public short TellerFeDecreaseFeeCtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TellerFeDecreaseFeeCt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TellerFeDecreaseFeeCtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TellerFeDecreaseFeeCt
        {
            get
            {
                if (this.TellerFeDecreaseFeeCtValueSpecified)
                {
                    return this.TellerFeDecreaseFeeCtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TellerFeDecreaseFeeCtValue = value.GetValueOrDefault();
                this.TellerFeDecreaseFeeCtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TellerFePromptFeeType", Order=342, Form=XmlSchemaForm.Unqualified)]
        public bool TellerFePromptFeeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TellerFePromptFeeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TellerFePromptFeeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TellerFePromptFeeType
        {
            get
            {
                if (this.TellerFePromptFeeTypeValueSpecified)
                {
                    return this.TellerFePromptFeeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TellerFePromptFeeTypeValue = value.GetValueOrDefault();
                this.TellerFePromptFeeTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TellerTranRecapSlDesc", Order=343, Form=XmlSchemaForm.Unqualified)]
        public bool TellerTranRecapSlDescValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TellerTranRecapSlDesc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TellerTranRecapSlDescValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TellerTranRecapSlDesc
        {
            get
            {
                if (this.TellerTranRecapSlDescValueSpecified)
                {
                    return this.TellerTranRecapSlDescValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TellerTranRecapSlDescValue = value.GetValueOrDefault();
                this.TellerTranRecapSlDescValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("TellerTranSpecfile", Order=344, Form=XmlSchemaForm.Unqualified)]
        public string TellerTranSpecfile { get; set; }
        
        [XmlElementAttribute("TellerTrnNameDisplay", Order=345, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap TellerTrnNameDisplay { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ThirdPartyMfa", Order=346, Form=XmlSchemaForm.Unqualified)]
        public bool ThirdPartyMfaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThirdPartyMfa property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ThirdPartyMfaValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ThirdPartyMfa
        {
            get
            {
                if (this.ThirdPartyMfaValueSpecified)
                {
                    return this.ThirdPartyMfaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThirdPartyMfaValue = value.GetValueOrDefault();
                this.ThirdPartyMfaValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("TllrActvtyUsersList", Order=347, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap TllrActvtyUsersList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TllrTranAnalysisUpdateOpt", Order=348, Form=XmlSchemaForm.Unqualified)]
        public short TllrTranAnalysisUpdateOptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TllrTranAnalysisUpdateOpt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TllrTranAnalysisUpdateOptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TllrTranAnalysisUpdateOpt
        {
            get
            {
                if (this.TllrTranAnalysisUpdateOptValueSpecified)
                {
                    return this.TllrTranAnalysisUpdateOptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TllrTranAnalysisUpdateOptValue = value.GetValueOrDefault();
                this.TllrTranAnalysisUpdateOptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranPostLockMethod", Order=349, Form=XmlSchemaForm.Unqualified)]
        public short TranPostLockMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranPostLockMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranPostLockMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TranPostLockMethod
        {
            get
            {
                if (this.TranPostLockMethodValueSpecified)
                {
                    return this.TranPostLockMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranPostLockMethodValue = value.GetValueOrDefault();
                this.TranPostLockMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranSequence", Order=350, Form=XmlSchemaForm.Unqualified)]
        public int TranSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> TranSequence
        {
            get
            {
                if (this.TranSequenceValueSpecified)
                {
                    return this.TranSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranSequenceValue = value.GetValueOrDefault();
                this.TranSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtValidRg", Order=351, Form=XmlSchemaForm.Unqualified)]
        public short TtValidRgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtValidRg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtValidRgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TtValidRg
        {
            get
            {
                if (this.TtValidRgValueSpecified)
                {
                    return this.TtValidRgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtValidRgValue = value.GetValueOrDefault();
                this.TtValidRgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TypeLength", Order=352, Form=XmlSchemaForm.Unqualified)]
        public short TypeLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TypeLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TypeLength
        {
            get
            {
                if (this.TypeLengthValueSpecified)
                {
                    return this.TypeLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeLengthValue = value.GetValueOrDefault();
                this.TypeLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UiMaxRecsPerResponse", Order=353, Form=XmlSchemaForm.Unqualified)]
        public int UiMaxRecsPerResponseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UiMaxRecsPerResponse property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UiMaxRecsPerResponseValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> UiMaxRecsPerResponse
        {
            get
            {
                if (this.UiMaxRecsPerResponseValueSpecified)
                {
                    return this.UiMaxRecsPerResponseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UiMaxRecsPerResponseValue = value.GetValueOrDefault();
                this.UiMaxRecsPerResponseValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UncollectedFeeOption", Order=354, Form=XmlSchemaForm.Unqualified)]
        public short UncollectedFeeOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UncollectedFeeOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UncollectedFeeOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UncollectedFeeOption
        {
            get
            {
                if (this.UncollectedFeeOptionValueSpecified)
                {
                    return this.UncollectedFeeOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UncollectedFeeOptionValue = value.GetValueOrDefault();
                this.UncollectedFeeOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UpdateExtLoanAddrRealTime", Order=355, Form=XmlSchemaForm.Unqualified)]
        public short UpdateExtLoanAddrRealTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UpdateExtLoanAddrRealTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UpdateExtLoanAddrRealTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UpdateExtLoanAddrRealTime
        {
            get
            {
                if (this.UpdateExtLoanAddrRealTimeValueSpecified)
                {
                    return this.UpdateExtLoanAddrRealTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UpdateExtLoanAddrRealTimeValue = value.GetValueOrDefault();
                this.UpdateExtLoanAddrRealTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsCentralExtct", Order=356, Form=XmlSchemaForm.Unqualified)]
        public bool UsCentralExtctValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsCentralExtct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsCentralExtctValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UsCentralExtct
        {
            get
            {
                if (this.UsCentralExtctValueSpecified)
                {
                    return this.UsCentralExtctValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsCentralExtctValue = value.GetValueOrDefault();
                this.UsCentralExtctValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseBondRedemptionTable", Order=357, Form=XmlSchemaForm.Unqualified)]
        public bool UseBondRedemptionTableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseBondRedemptionTable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseBondRedemptionTableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseBondRedemptionTable
        {
            get
            {
                if (this.UseBondRedemptionTableValueSpecified)
                {
                    return this.UseBondRedemptionTableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseBondRedemptionTableValue = value.GetValueOrDefault();
                this.UseBondRedemptionTableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseCdmForRecyclerVoid", Order=358, Form=XmlSchemaForm.Unqualified)]
        public bool UseCdmForRecyclerVoidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseCdmForRecyclerVoid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseCdmForRecyclerVoidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseCdmForRecyclerVoid
        {
            get
            {
                if (this.UseCdmForRecyclerVoidValueSpecified)
                {
                    return this.UseCdmForRecyclerVoidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseCdmForRecyclerVoidValue = value.GetValueOrDefault();
                this.UseCdmForRecyclerVoidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseLrScreenDefinitions", Order=359, Form=XmlSchemaForm.Unqualified)]
        public bool UseLrScreenDefinitionsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseLrScreenDefinitions property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseLrScreenDefinitionsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseLrScreenDefinitions
        {
            get
            {
                if (this.UseLrScreenDefinitionsValueSpecified)
                {
                    return this.UseLrScreenDefinitionsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseLrScreenDefinitionsValue = value.GetValueOrDefault();
                this.UseLrScreenDefinitionsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserActivityControl", Order=360, Form=XmlSchemaForm.Unqualified)]
        public short UserActivityControlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserActivityControl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserActivityControlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserActivityControl
        {
            get
            {
                if (this.UserActivityControlValueSpecified)
                {
                    return this.UserActivityControlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserActivityControlValue = value.GetValueOrDefault();
                this.UserActivityControlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDormancyDays", Order=361, Form=XmlSchemaForm.Unqualified)]
        public short UserDormancyDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDormancyDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDormancyDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserDormancyDays
        {
            get
            {
                if (this.UserDormancyDaysValueSpecified)
                {
                    return this.UserDormancyDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDormancyDaysValue = value.GetValueOrDefault();
                this.UserDormancyDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserTempPasswordExpHours", Order=362, Form=XmlSchemaForm.Unqualified)]
        public short UserTempPasswordExpHoursValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserTempPasswordExpHours property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserTempPasswordExpHoursValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserTempPasswordExpHours
        {
            get
            {
                if (this.UserTempPasswordExpHoursValueSpecified)
                {
                    return this.UserTempPasswordExpHoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserTempPasswordExpHoursValue = value.GetValueOrDefault();
                this.UserTempPasswordExpHoursValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerbalStopExpirationDays", Order=363, Form=XmlSchemaForm.Unqualified)]
        public short VerbalStopExpirationDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerbalStopExpirationDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerbalStopExpirationDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> VerbalStopExpirationDays
        {
            get
            {
                if (this.VerbalStopExpirationDaysValueSpecified)
                {
                    return this.VerbalStopExpirationDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerbalStopExpirationDaysValue = value.GetValueOrDefault();
                this.VerbalStopExpirationDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("WaiveLateChargeLnTypes", Order=364, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap WaiveLateChargeLnTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdBelowAvailableOption", Order=365, Form=XmlSchemaForm.Unqualified)]
        public short WdBelowAvailableOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdBelowAvailableOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdBelowAvailableOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WdBelowAvailableOption
        {
            get
            {
                if (this.WdBelowAvailableOptionValueSpecified)
                {
                    return this.WdBelowAvailableOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdBelowAvailableOptionValue = value.GetValueOrDefault();
                this.WdBelowAvailableOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("WdCountSourceList", Order=366, Form=XmlSchemaForm.Unqualified)]
        public string WdCountSourceList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Wire", Order=367, Form=XmlSchemaForm.Unqualified)]
        public bool WireValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Wire property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WireValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Wire
        {
            get
            {
                if (this.WireValueSpecified)
                {
                    return this.WireValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WireValue = value.GetValueOrDefault();
                this.WireValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WireBatchDate", Order=368, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> WireBatchDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WireBatchDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WireBatchDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> WireBatchDate
        {
            get
            {
                if (this.WireBatchDateValueSpecified)
                {
                    return this.WireBatchDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WireBatchDateValue = value.GetValueOrDefault();
                this.WireBatchDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WireBatchNbr", Order=369, Form=XmlSchemaForm.Unqualified)]
        public int WireBatchNbrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WireBatchNbr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WireBatchNbrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> WireBatchNbr
        {
            get
            {
                if (this.WireBatchNbrValueSpecified)
                {
                    return this.WireBatchNbrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WireBatchNbrValue = value.GetValueOrDefault();
                this.WireBatchNbrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WireHoldDays", Order=370, Form=XmlSchemaForm.Unqualified)]
        public short WireHoldDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WireHoldDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WireHoldDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WireHoldDays
        {
            get
            {
                if (this.WireHoldDaysValueSpecified)
                {
                    return this.WireHoldDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WireHoldDaysValue = value.GetValueOrDefault();
                this.WireHoldDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WithdrawalOverdrawOption", Order=371, Form=XmlSchemaForm.Unqualified)]
        public short WithdrawalOverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawalOverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WithdrawalOverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WithdrawalOverdrawOption
        {
            get
            {
                if (this.WithdrawalOverdrawOptionValueSpecified)
                {
                    return this.WithdrawalOverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WithdrawalOverdrawOptionValue = value.GetValueOrDefault();
                this.WithdrawalOverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("YellowHammer", Order=372, Form=XmlSchemaForm.Unqualified)]
        public bool YellowHammerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the YellowHammer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool YellowHammerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> YellowHammer
        {
            get
            {
                if (this.YellowHammerValueSpecified)
                {
                    return this.YellowHammerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.YellowHammerValue = value.GetValueOrDefault();
                this.YellowHammerValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=373, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MisModuleEnableD", Order=374, Form=XmlSchemaForm.Unqualified)]
        public bool MisModuleEnableDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MisModuleEnableD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MisModuleEnableDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MisModuleEnableD
        {
            get
            {
                if (this.MisModuleEnableDValueSpecified)
                {
                    return this.MisModuleEnableDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MisModuleEnableDValue = value.GetValueOrDefault();
                this.MisModuleEnableDValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_2", Order=375, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version2 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=376)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
