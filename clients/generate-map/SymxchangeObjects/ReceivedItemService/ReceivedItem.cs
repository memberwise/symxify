//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ReceivedItemService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ReceivedItemService\generated-output -n ReceivedItemService
namespace ReceivedItemService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ReceivedItem", Namespace="http://www.symxchange.generated.symitar.com/crud/receiveditem/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("ReceivedItem", Namespace="http://www.symxchange.generated.symitar.com/crud/receiveditem/dto/retrieve")]
    public partial class ReceivedItem
    {
        
        [XmlElementAttribute("AssocAccountNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AssocAccountNumber { get; set; }
        
        [XmlElementAttribute("AssocId", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string AssocId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AssocIdType", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short AssocIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AssocIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AssocIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AssocIdType
        {
            get
            {
                if (this.AssocIdTypeValueSpecified)
                {
                    return this.AssocIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AssocIdTypeValue = value.GetValueOrDefault();
                this.AssocIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondDenomination", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal BondDenominationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondDenomination property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondDenominationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BondDenomination
        {
            get
            {
                if (this.BondDenominationValueSpecified)
                {
                    return this.BondDenominationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondDenominationValue = value.GetValueOrDefault();
                this.BondDenominationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondInterest", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal BondInterestValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondInterest property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondInterestValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BondInterest
        {
            get
            {
                if (this.BondInterestValueSpecified)
                {
                    return this.BondInterestValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondInterestValue = value.GetValueOrDefault();
                this.BondInterestValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BondPrincipal", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal BondPrincipalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BondPrincipal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BondPrincipalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BondPrincipal
        {
            get
            {
                if (this.BondPrincipalValueSpecified)
                {
                    return this.BondPrincipalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BondPrincipalValue = value.GetValueOrDefault();
                this.BondPrincipalValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BondRecpCity", Order=6, Form=XmlSchemaForm.Unqualified)]
        public string BondRecpCity { get; set; }
        
        [XmlElementAttribute("BondRecpName", Order=7, Form=XmlSchemaForm.Unqualified)]
        public string BondRecpName { get; set; }
        
        [XmlElementAttribute("BondRecpSsn", Order=8, Form=XmlSchemaForm.Unqualified)]
        public string BondRecpSsn { get; set; }
        
        [XmlElementAttribute("BondRecpState", Order=9, Form=XmlSchemaForm.Unqualified)]
        public string BondRecpState { get; set; }
        
        [XmlElementAttribute("BondRecpStreet", Order=10, Form=XmlSchemaForm.Unqualified)]
        public string BondRecpStreet { get; set; }
        
        [XmlElementAttribute("BondRecpZipCode", Order=11, Form=XmlSchemaForm.Unqualified)]
        public string BondRecpZipCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffDate", Order=13, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ChargeOffDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ChargeOffDate
        {
            get
            {
                if (this.ChargeOffDateValueSpecified)
                {
                    return this.ChargeOffDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffDateValue = value.GetValueOrDefault();
                this.ChargeOffDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollectedDate", Order=14, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CollectedDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollectedDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollectedDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CollectedDate
        {
            get
            {
                if (this.CollectedDateValueSpecified)
                {
                    return this.CollectedDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollectedDateValue = value.GetValueOrDefault();
                this.CollectedDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CollectionDate", Order=15, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CollectionDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CollectionDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CollectionDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CollectionDate
        {
            get
            {
                if (this.CollectionDateValueSpecified)
                {
                    return this.CollectionDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CollectionDateValue = value.GetValueOrDefault();
                this.CollectionDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConsoleNumber", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short ConsoleNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsoleNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConsoleNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ConsoleNumber
        {
            get
            {
                if (this.ConsoleNumberValueSpecified)
                {
                    return this.ConsoleNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConsoleNumberValue = value.GetValueOrDefault();
                this.ConsoleNumberValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemDisposition> _disposition;
        
        [XmlElementAttribute("Disposition", Order=17, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemDisposition> Disposition
        {
            get
            {
                return _disposition;
            }
            set
            {
                _disposition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Disposition collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DispositionSpecified
        {
            get
            {
                return ((this.Disposition != null) 
                            && (this.Disposition.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ReceivedItem" /> class.</para>
        /// </summary>
        public ReceivedItem()
        {
            this._disposition = new Collection<ReceivedItemDisposition>();
            this._fraudCode = new Collection<ReceivedItemFraudCode>();
            this._fraudDescription = new Collection<ReceivedItemFraudDescription>();
            this._fraudSeverity = new Collection<ReceivedItemFraudSeverity>();
            this._fraudVendor = new Collection<ReceivedItemFraudVendor>();
            this._resubmitDate = new Collection<ReceivedItemResubmitDate>();
            this._returnDate = new Collection<ReceivedItemReturnDate>();
            this._returnReason = new Collection<ReceivedItemReturnReason>();
            this._tranSeqNumberAll = new Collection<ReceivedItemTranSeqNumberAll>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemFraudCode> _fraudCode;
        
        [XmlElementAttribute("FraudCode", Order=18, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemFraudCode> FraudCode
        {
            get
            {
                return _fraudCode;
            }
            set
            {
                _fraudCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FraudCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FraudCodeSpecified
        {
            get
            {
                return ((this.FraudCode != null) 
                            && (this.FraudCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemFraudDescription> _fraudDescription;
        
        [XmlElementAttribute("FraudDescription", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemFraudDescription> FraudDescription
        {
            get
            {
                return _fraudDescription;
            }
            set
            {
                _fraudDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FraudDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FraudDescriptionSpecified
        {
            get
            {
                return ((this.FraudDescription != null) 
                            && (this.FraudDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemFraudSeverity> _fraudSeverity;
        
        [XmlElementAttribute("FraudSeverity", Order=20, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemFraudSeverity> FraudSeverity
        {
            get
            {
                return _fraudSeverity;
            }
            set
            {
                _fraudSeverity = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FraudSeverity collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FraudSeveritySpecified
        {
            get
            {
                return ((this.FraudSeverity != null) 
                            && (this.FraudSeverity.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemFraudVendor> _fraudVendor;
        
        [XmlElementAttribute("FraudVendor", Order=21, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemFraudVendor> FraudVendor
        {
            get
            {
                return _fraudVendor;
            }
            set
            {
                _fraudVendor = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FraudVendor collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FraudVendorSpecified
        {
            get
            {
                return ((this.FraudVendor != null) 
                            && (this.FraudVendor.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequence", Order=22, Form=XmlSchemaForm.Unqualified)]
        public int GlobalSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> GlobalSequence
        {
            get
            {
                if (this.GlobalSequenceValueSpecified)
                {
                    return this.GlobalSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceValue = value.GetValueOrDefault();
                this.GlobalSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlobalSequenceDate", Order=23, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime GlobalSequenceDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlobalSequenceDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlobalSequenceDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> GlobalSequenceDate
        {
            get
            {
                if (this.GlobalSequenceDateValueSpecified)
                {
                    return this.GlobalSequenceDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlobalSequenceDateValue = value.GetValueOrDefault();
                this.GlobalSequenceDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InputSource", Order=24, Form=XmlSchemaForm.Unqualified)]
        public short InputSourceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InputSource property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InputSourceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InputSource
        {
            get
            {
                if (this.InputSourceValueSpecified)
                {
                    return this.InputSourceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InputSourceValue = value.GetValueOrDefault();
                this.InputSourceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcForeignItem", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short ItcForeignItemValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcForeignItem property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcForeignItemValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ItcForeignItem
        {
            get
            {
                if (this.ItcForeignItemValueSpecified)
                {
                    return this.ItcForeignItemValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcForeignItemValue = value.GetValueOrDefault();
                this.ItcForeignItemValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcReported", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short ItcReportedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcReported property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcReportedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ItcReported
        {
            get
            {
                if (this.ItcReportedValueSpecified)
                {
                    return this.ItcReportedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcReportedValue = value.GetValueOrDefault();
                this.ItcReportedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItcStatusCode", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short ItcStatusCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItcStatusCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItcStatusCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ItcStatusCode
        {
            get
            {
                if (this.ItcStatusCodeValueSpecified)
                {
                    return this.ItcStatusCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItcStatusCodeValue = value.GetValueOrDefault();
                this.ItcStatusCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ItemAcctNumber", Order=28, Form=XmlSchemaForm.Unqualified)]
        public string ItemAcctNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ItemAmount", Order=29, Form=XmlSchemaForm.Unqualified)]
        public decimal ItemAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ItemAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ItemAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ItemAmount
        {
            get
            {
                if (this.ItemAmountValueSpecified)
                {
                    return this.ItemAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ItemAmountValue = value.GetValueOrDefault();
                this.ItemAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ItemCheckNumber", Order=30, Form=XmlSchemaForm.Unqualified)]
        public string ItemCheckNumber { get; set; }
        
        [XmlElementAttribute("ItemId", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string ItemId { get; set; }
        
        [XmlElementAttribute("Micr1", Order=32, Form=XmlSchemaForm.Unqualified)]
        public string Micr1 { get; set; }
        
        [XmlElementAttribute("Micr2", Order=33, Form=XmlSchemaForm.Unqualified)]
        public string Micr2 { get; set; }
        
        [XmlElementAttribute("MicrAmount", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string MicrAmount { get; set; }
        
        [XmlElementAttribute("MicrAuxOnUs", Order=35, Form=XmlSchemaForm.Unqualified)]
        public string MicrAuxOnUs { get; set; }
        
        [XmlElementAttribute("MicrEpc", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string MicrEpc { get; set; }
        
        [XmlElementAttribute("MicrOnUs", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string MicrOnUs { get; set; }
        
        [XmlElementAttribute("MicrTransit", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string MicrTransit { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnUs", Order=39, Form=XmlSchemaForm.Unqualified)]
        public short OnUsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnUs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnUsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnUs
        {
            get
            {
                if (this.OnUsValueSpecified)
                {
                    return this.OnUsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnUsValue = value.GetValueOrDefault();
                this.OnUsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OnUsAcctNumber", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string OnUsAcctNumber { get; set; }
        
        [XmlElementAttribute("OnUsId", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string OnUsId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnUsIdType", Order=42, Form=XmlSchemaForm.Unqualified)]
        public short OnUsIdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnUsIdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnUsIdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnUsIdType
        {
            get
            {
                if (this.OnUsIdTypeValueSpecified)
                {
                    return this.OnUsIdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnUsIdTypeValue = value.GetValueOrDefault();
                this.OnUsIdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostDate", Order=43, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PostDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PostDate
        {
            get
            {
                if (this.PostDateValueSpecified)
                {
                    return this.PostDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostDateValue = value.GetValueOrDefault();
                this.PostDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostTime", Order=44, Form=XmlSchemaForm.Unqualified)]
        public short PostTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PostTime
        {
            get
            {
                if (this.PostTimeValueSpecified)
                {
                    return this.PostTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostTimeValue = value.GetValueOrDefault();
                this.PostTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=45, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RejectDate", Order=46, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RejectDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RejectDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RejectDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RejectDate
        {
            get
            {
                if (this.RejectDateValueSpecified)
                {
                    return this.RejectDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RejectDateValue = value.GetValueOrDefault();
                this.RejectDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReportDate", Order=47, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ReportDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReportDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReportDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ReportDate
        {
            get
            {
                if (this.ReportDateValueSpecified)
                {
                    return this.ReportDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReportDateValue = value.GetValueOrDefault();
                this.ReportDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemResubmitDate> _resubmitDate;
        
        [XmlElementAttribute("ResubmitDate", Order=48, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemResubmitDate> ResubmitDate
        {
            get
            {
                return _resubmitDate;
            }
            set
            {
                _resubmitDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ResubmitDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ResubmitDateSpecified
        {
            get
            {
                return ((this.ResubmitDate != null) 
                            && (this.ResubmitDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemReturnDate> _returnDate;
        
        [XmlElementAttribute("ReturnDate", Order=49, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemReturnDate> ReturnDate
        {
            get
            {
                return _returnDate;
            }
            set
            {
                _returnDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ReturnDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ReturnDateSpecified
        {
            get
            {
                return ((this.ReturnDate != null) 
                            && (this.ReturnDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemReturnReason> _returnReason;
        
        [XmlElementAttribute("ReturnReason", Order=50, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemReturnReason> ReturnReason
        {
            get
            {
                return _returnReason;
            }
            set
            {
                _returnReason = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ReturnReason collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ReturnReasonSpecified
        {
            get
            {
                return ((this.ReturnReason != null) 
                            && (this.ReturnReason.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SbFlag", Order=51, Form=XmlSchemaForm.Unqualified)]
        public short SbFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SbFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SbFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SbFlag
        {
            get
            {
                if (this.SbFlagValueSpecified)
                {
                    return this.SbFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SbFlagValue = value.GetValueOrDefault();
                this.SbFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SbTranSequenceNumber", Order=52, Form=XmlSchemaForm.Unqualified)]
        public int SbTranSequenceNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SbTranSequenceNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SbTranSequenceNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> SbTranSequenceNumber
        {
            get
            {
                if (this.SbTranSequenceNumberValueSpecified)
                {
                    return this.SbTranSequenceNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SbTranSequenceNumberValue = value.GetValueOrDefault();
                this.SbTranSequenceNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SequenceNumber", Order=53, Form=XmlSchemaForm.Unqualified)]
        public int SequenceNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SequenceNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SequenceNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> SequenceNumber
        {
            get
            {
                if (this.SequenceNumberValueSpecified)
                {
                    return this.SequenceNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SequenceNumberValue = value.GetValueOrDefault();
                this.SequenceNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=54, Form=XmlSchemaForm.Unqualified)]
        public short StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ReceivedItemTranSeqNumberAll> _tranSeqNumberAll;
        
        [XmlElementAttribute("TranSeqNumberAll", Order=55, Form=XmlSchemaForm.Unqualified)]
        public Collection<ReceivedItemTranSeqNumberAll> TranSeqNumberAll
        {
            get
            {
                return _tranSeqNumberAll;
            }
            set
            {
                _tranSeqNumberAll = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TranSeqNumberAll collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TranSeqNumberAllSpecified
        {
            get
            {
                return ((this.TranSeqNumberAll != null) 
                            && (this.TranSeqNumberAll.Count != 0));
            }
        }
        
        [XmlElementAttribute("TranSetId", Order=56, Form=XmlSchemaForm.Unqualified)]
        public string TranSetId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short UserNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserNumber
        {
            get
            {
                if (this.UserNumberValueSpecified)
                {
                    return this.UserNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumberValue = value.GetValueOrDefault();
                this.UserNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VoidDate", Order=59, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime VoidDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VoidDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VoidDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> VoidDate
        {
            get
            {
                if (this.VoidDateValueSpecified)
                {
                    return this.VoidDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VoidDateValue = value.GetValueOrDefault();
                this.VoidDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=60, Form=XmlSchemaForm.Unqualified)]
        public ReceivedItemService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=61)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
