//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\FinrepService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\FinrepService\generated-output -n FinrepService
namespace FinrepService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CtrFields", Namespace="http://www.symxchange.generated.symitar.com/crud/finrep/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CtrFields", Namespace="http://www.symxchange.generated.symitar.com/crud/finrep/dto/retrieve")]
    public partial class CtrFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AckByUser", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AckByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AckByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AckByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AckByUser
        {
            get
            {
                if (this.AckByUserValueSpecified)
                {
                    return this.AckByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AckByUserValue = value.GetValueOrDefault();
                this.AckByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AckDate", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AckDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AckDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AckDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AckDate
        {
            get
            {
                if (this.AckDateValueSpecified)
                {
                    return this.AckDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AckDateValue = value.GetValueOrDefault();
                this.AckDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AckErrorByUser", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AckErrorByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AckErrorByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AckErrorByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AckErrorByUser
        {
            get
            {
                if (this.AckErrorByUserValueSpecified)
                {
                    return this.AckErrorByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AckErrorByUserValue = value.GetValueOrDefault();
                this.AckErrorByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AckErrorDate", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AckErrorDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AckErrorDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AckErrorDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AckErrorDate
        {
            get
            {
                if (this.AckErrorDateValueSpecified)
                {
                    return this.AckErrorDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AckErrorDateValue = value.GetValueOrDefault();
                this.AckErrorDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproveAmendByUser", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool ApproveAmendByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproveAmendByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproveAmendByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApproveAmendByUser
        {
            get
            {
                if (this.ApproveAmendByUserValueSpecified)
                {
                    return this.ApproveAmendByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproveAmendByUserValue = value.GetValueOrDefault();
                this.ApproveAmendByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproveAmendDate", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool ApproveAmendDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproveAmendDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproveAmendDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApproveAmendDate
        {
            get
            {
                if (this.ApproveAmendDateValueSpecified)
                {
                    return this.ApproveAmendDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproveAmendDateValue = value.GetValueOrDefault();
                this.ApproveAmendDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproveByUser", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool ApproveByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproveByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproveByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApproveByUser
        {
            get
            {
                if (this.ApproveByUserValueSpecified)
                {
                    return this.ApproveByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproveByUserValue = value.GetValueOrDefault();
                this.ApproveByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproveDate", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool ApproveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApproveDate
        {
            get
            {
                if (this.ApproveDateValueSpecified)
                {
                    return this.ApproveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproveDateValue = value.GetValueOrDefault();
                this.ApproveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Approver", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool ApproverValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Approver property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproverValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Approver
        {
            get
            {
                if (this.ApproverValueSpecified)
                {
                    return this.ApproverValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproverValue = value.GetValueOrDefault();
                this.ApproverValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApproverTitle", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool ApproverTitleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApproverTitle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApproverTitleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApproverTitle
        {
            get
            {
                if (this.ApproverTitleValueSpecified)
                {
                    return this.ApproverTitleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApproverTitleValue = value.GetValueOrDefault();
                this.ApproverTitleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BackFileFlag", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool BackFileFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BackFileFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BackFileFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BackFileFlag
        {
            get
            {
                if (this.BackFileFlagValueSpecified)
                {
                    return this.BackFileFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BackFileFlagValue = value.GetValueOrDefault();
                this.BackFileFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchSequence", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool BatchSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BatchSequence
        {
            get
            {
                if (this.BatchSequenceValueSpecified)
                {
                    return this.BatchSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchSequenceValue = value.GetValueOrDefault();
                this.BatchSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BranchRouting", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool BranchRoutingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BranchRouting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchRoutingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BranchRouting
        {
            get
            {
                if (this.BranchRoutingValueSpecified)
                {
                    return this.BranchRoutingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchRoutingValue = value.GetValueOrDefault();
                this.BranchRoutingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinBillsInsert", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool CashinBillsInsertValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinBillsInsert property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinBillsInsertValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinBillsInsert
        {
            get
            {
                if (this.CashinBillsInsertValueSpecified)
                {
                    return this.CashinBillsInsertValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinBillsInsertValue = value.GetValueOrDefault();
                this.CashinBillsInsertValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinCurrWager", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool CashinCurrWagerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinCurrWager property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinCurrWagerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinCurrWager
        {
            get
            {
                if (this.CashinCurrWagerValueSpecified)
                {
                    return this.CashinCurrWagerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinCurrWagerValue = value.GetValueOrDefault();
                this.CashinCurrWagerValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinCurrXchng", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool CashinCurrXchngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinCurrXchng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinCurrXchngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinCurrXchng
        {
            get
            {
                if (this.CashinCurrXchngValueSpecified)
                {
                    return this.CashinCurrXchngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinCurrXchngValue = value.GetValueOrDefault();
                this.CashinCurrXchngValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinDeposit", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool CashinDepositValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinDeposit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinDepositValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinDeposit
        {
            get
            {
                if (this.CashinDepositValueSpecified)
                {
                    return this.CashinDepositValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinDepositValue = value.GetValueOrDefault();
                this.CashinDepositValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinFundsXfer", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool CashinFundsXferValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinFundsXfer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinFundsXferValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinFundsXfer
        {
            get
            {
                if (this.CashinFundsXferValueSpecified)
                {
                    return this.CashinFundsXferValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinFundsXferValue = value.GetValueOrDefault();
                this.CashinFundsXferValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinGamingIns", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool CashinGamingInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinGamingIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinGamingInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinGamingIns
        {
            get
            {
                if (this.CashinGamingInsValueSpecified)
                {
                    return this.CashinGamingInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinGamingInsValue = value.GetValueOrDefault();
                this.CashinGamingInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinNegIns", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool CashinNegInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinNegIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinNegInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinNegIns
        {
            get
            {
                if (this.CashinNegInsValueSpecified)
                {
                    return this.CashinNegInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinNegInsValue = value.GetValueOrDefault();
                this.CashinNegInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinOther", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool CashinOtherValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinOther property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinOtherValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinOther
        {
            get
            {
                if (this.CashinOtherValueSpecified)
                {
                    return this.CashinOtherValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinOtherValue = value.GetValueOrDefault();
                this.CashinOtherValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinOtherDesc", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool CashinOtherDescValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinOtherDesc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinOtherDescValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinOtherDesc
        {
            get
            {
                if (this.CashinOtherDescValueSpecified)
                {
                    return this.CashinOtherDescValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinOtherDescValue = value.GetValueOrDefault();
                this.CashinOtherDescValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinPayment", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool CashinPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinPayment
        {
            get
            {
                if (this.CashinPaymentValueSpecified)
                {
                    return this.CashinPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinPaymentValue = value.GetValueOrDefault();
                this.CashinPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinPrepaid", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool CashinPrepaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinPrepaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinPrepaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinPrepaid
        {
            get
            {
                if (this.CashinPrepaidValueSpecified)
                {
                    return this.CashinPrepaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinPrepaidValue = value.GetValueOrDefault();
                this.CashinPrepaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashinTotal", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool CashinTotalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashinTotal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashinTotalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashinTotal
        {
            get
            {
                if (this.CashinTotalValueSpecified)
                {
                    return this.CashinTotalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashinTotalValue = value.GetValueOrDefault();
                this.CashinTotalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutAdvOnCred", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutAdvOnCredValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutAdvOnCred property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutAdvOnCredValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutAdvOnCred
        {
            get
            {
                if (this.CashoutAdvOnCredValueSpecified)
                {
                    return this.CashoutAdvOnCredValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutAdvOnCredValue = value.GetValueOrDefault();
                this.CashoutAdvOnCredValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutCurrXchng", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutCurrXchngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutCurrXchng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutCurrXchngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutCurrXchng
        {
            get
            {
                if (this.CashoutCurrXchngValueSpecified)
                {
                    return this.CashoutCurrXchngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutCurrXchngValue = value.GetValueOrDefault();
                this.CashoutCurrXchngValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutFundsXfer", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutFundsXferValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutFundsXfer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutFundsXferValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutFundsXfer
        {
            get
            {
                if (this.CashoutFundsXferValueSpecified)
                {
                    return this.CashoutFundsXferValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutFundsXferValue = value.GetValueOrDefault();
                this.CashoutFundsXferValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutGamingIns", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutGamingInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutGamingIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutGamingInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutGamingIns
        {
            get
            {
                if (this.CashoutGamingInsValueSpecified)
                {
                    return this.CashoutGamingInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutGamingInsValue = value.GetValueOrDefault();
                this.CashoutGamingInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutNegIns", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutNegInsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutNegIns property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutNegInsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutNegIns
        {
            get
            {
                if (this.CashoutNegInsValueSpecified)
                {
                    return this.CashoutNegInsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutNegInsValue = value.GetValueOrDefault();
                this.CashoutNegInsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutOther", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutOtherValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutOther property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutOtherValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutOther
        {
            get
            {
                if (this.CashoutOtherValueSpecified)
                {
                    return this.CashoutOtherValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutOtherValue = value.GetValueOrDefault();
                this.CashoutOtherValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutOtherDesc", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutOtherDescValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutOtherDesc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutOtherDescValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutOtherDesc
        {
            get
            {
                if (this.CashoutOtherDescValueSpecified)
                {
                    return this.CashoutOtherDescValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutOtherDescValue = value.GetValueOrDefault();
                this.CashoutOtherDescValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutPayOnWagers", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutPayOnWagersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutPayOnWagers property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutPayOnWagersValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutPayOnWagers
        {
            get
            {
                if (this.CashoutPayOnWagersValueSpecified)
                {
                    return this.CashoutPayOnWagersValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutPayOnWagersValue = value.GetValueOrDefault();
                this.CashoutPayOnWagersValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutPrepaid", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutPrepaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutPrepaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutPrepaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutPrepaid
        {
            get
            {
                if (this.CashoutPrepaidValueSpecified)
                {
                    return this.CashoutPrepaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutPrepaidValue = value.GetValueOrDefault();
                this.CashoutPrepaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutPromo", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutPromoValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutPromo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutPromoValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutPromo
        {
            get
            {
                if (this.CashoutPromoValueSpecified)
                {
                    return this.CashoutPromoValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutPromoValue = value.GetValueOrDefault();
                this.CashoutPromoValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutTotal", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutTotalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutTotal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutTotalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutTotal
        {
            get
            {
                if (this.CashoutTotalValueSpecified)
                {
                    return this.CashoutTotalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutTotalValue = value.GetValueOrDefault();
                this.CashoutTotalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutTravel", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutTravelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutTravel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutTravelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutTravel
        {
            get
            {
                if (this.CashoutTravelValueSpecified)
                {
                    return this.CashoutTravelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutTravelValue = value.GetValueOrDefault();
                this.CashoutTravelValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CashoutWithdraw", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool CashoutWithdrawValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CashoutWithdraw property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CashoutWithdrawValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CashoutWithdraw
        {
            get
            {
                if (this.CashoutWithdrawValueSpecified)
                {
                    return this.CashoutWithdrawValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CashoutWithdrawValue = value.GetValueOrDefault();
                this.CashoutWithdrawValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ContactOffice", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool ContactOfficeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContactOffice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ContactOfficeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ContactOffice
        {
            get
            {
                if (this.ContactOfficeValueSpecified)
                {
                    return this.ContactOfficeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ContactOfficeValue = value.GetValueOrDefault();
                this.ContactOfficeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ContactPhone", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool ContactPhoneValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContactPhone property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ContactPhoneValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ContactPhone
        {
            get
            {
                if (this.ContactPhoneValueSpecified)
                {
                    return this.ContactPhoneValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ContactPhoneValue = value.GetValueOrDefault();
                this.ContactPhoneValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ContactPhoneExt", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool ContactPhoneExtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContactPhoneExt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ContactPhoneExtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ContactPhoneExt
        {
            get
            {
                if (this.ContactPhoneExtValueSpecified)
                {
                    return this.ContactPhoneExtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ContactPhoneExtValue = value.GetValueOrDefault();
                this.ContactPhoneExtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateByUser", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool CreateByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateByUser
        {
            get
            {
                if (this.CreateByUserValueSpecified)
                {
                    return this.CreateByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateByUserValue = value.GetValueOrDefault();
                this.CreateByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateDate", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool CreateDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateDate
        {
            get
            {
                if (this.CreateDateValueSpecified)
                {
                    return this.CreateDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateDateValue = value.GetValueOrDefault();
                this.CreateDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DcNumber", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool DcNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DcNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DcNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DcNumber
        {
            get
            {
                if (this.DcNumberValueSpecified)
                {
                    return this.DcNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DcNumberValue = value.GetValueOrDefault();
                this.DcNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExemptByUser", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool ExemptByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExemptByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExemptByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExemptByUser
        {
            get
            {
                if (this.ExemptByUserValueSpecified)
                {
                    return this.ExemptByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExemptByUserValue = value.GetValueOrDefault();
                this.ExemptByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExemptDate", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool ExemptDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExemptDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExemptDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExemptDate
        {
            get
            {
                if (this.ExemptDateValueSpecified)
                {
                    return this.ExemptDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExemptDateValue = value.GetValueOrDefault();
                this.ExemptDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FederalRegulator", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool FederalRegulatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FederalRegulator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FederalRegulatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FederalRegulator
        {
            get
            {
                if (this.FederalRegulatorValueSpecified)
                {
                    return this.FederalRegulatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FederalRegulatorValue = value.GetValueOrDefault();
                this.FederalRegulatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FiIdNumber", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool FiIdNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FiIdNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FiIdNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FiIdNumber
        {
            get
            {
                if (this.FiIdNumberValueSpecified)
                {
                    return this.FiIdNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FiIdNumberValue = value.GetValueOrDefault();
                this.FiIdNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FiIdNumberType", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool FiIdNumberTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FiIdNumberType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FiIdNumberTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FiIdNumberType
        {
            get
            {
                if (this.FiIdNumberTypeValueSpecified)
                {
                    return this.FiIdNumberTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FiIdNumberTypeValue = value.GetValueOrDefault();
                this.FiIdNumberTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FiOtherType", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool FiOtherTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FiOtherType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FiOtherTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FiOtherType
        {
            get
            {
                if (this.FiOtherTypeValueSpecified)
                {
                    return this.FiOtherTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FiOtherTypeValue = value.GetValueOrDefault();
                this.FiOtherTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FiType", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool FiTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FiType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FiTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FiType
        {
            get
            {
                if (this.FiTypeValueSpecified)
                {
                    return this.FiTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FiTypeValue = value.GetValueOrDefault();
                this.FiTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FilingDate", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool FilingDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FilingDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FilingDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FilingDate
        {
            get
            {
                if (this.FilingDateValueSpecified)
                {
                    return this.FilingDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FilingDateValue = value.GetValueOrDefault();
                this.FilingDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FilingType", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool FilingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FilingType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FilingTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FilingType
        {
            get
            {
                if (this.FilingTypeValueSpecified)
                {
                    return this.FilingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FilingTypeValue = value.GetValueOrDefault();
                this.FilingTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmPurgeDate", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool FmPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FmPurgeDate
        {
            get
            {
                if (this.FmPurgeDateValueSpecified)
                {
                    return this.FmPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmPurgeDateValue = value.GetValueOrDefault();
                this.FmPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncompleteByUser", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool IncompleteByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncompleteByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncompleteByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncompleteByUser
        {
            get
            {
                if (this.IncompleteByUserValueSpecified)
                {
                    return this.IncompleteByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncompleteByUserValue = value.GetValueOrDefault();
                this.IncompleteByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncompleteDate", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool IncompleteDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncompleteDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncompleteDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncompleteDate
        {
            get
            {
                if (this.IncompleteDateValueSpecified)
                {
                    return this.IncompleteDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncompleteDateValue = value.GetValueOrDefault();
                this.IncompleteDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastSubmitDate", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool LastSubmitDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastSubmitDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastSubmitDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastSubmitDate
        {
            get
            {
                if (this.LastSubmitDateValueSpecified)
                {
                    return this.LastSubmitDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastSubmitDateValue = value.GetValueOrDefault();
                this.LastSubmitDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonReportByUser", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool NonReportByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonReportByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonReportByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NonReportByUser
        {
            get
            {
                if (this.NonReportByUserValueSpecified)
                {
                    return this.NonReportByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonReportByUserValue = value.GetValueOrDefault();
                this.NonReportByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NonReportDate", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool NonReportDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonReportDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonReportDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NonReportDate
        {
            get
            {
                if (this.NonReportDateValueSpecified)
                {
                    return this.NonReportDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonReportDateValue = value.GetValueOrDefault();
                this.NonReportDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Number", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool NumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Number
        {
            get
            {
                if (this.NumberValueSpecified)
                {
                    return this.NumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberValue = value.GetValueOrDefault();
                this.NumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Preparer", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool PreparerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Preparer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreparerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Preparer
        {
            get
            {
                if (this.PreparerValueSpecified)
                {
                    return this.PreparerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreparerValue = value.GetValueOrDefault();
                this.PreparerValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReSubAmendByUser", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool ReSubAmendByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReSubAmendByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReSubAmendByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReSubAmendByUser
        {
            get
            {
                if (this.ReSubAmendByUserValueSpecified)
                {
                    return this.ReSubAmendByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReSubAmendByUserValue = value.GetValueOrDefault();
                this.ReSubAmendByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReSubAmendDate", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool ReSubAmendDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReSubAmendDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReSubAmendDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReSubAmendDate
        {
            get
            {
                if (this.ReSubAmendDateValueSpecified)
                {
                    return this.ReSubAmendDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReSubAmendDateValue = value.GetValueOrDefault();
                this.ReSubAmendDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnAggregateFlag", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool RsnAggregateFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnAggregateFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnAggregateFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsnAggregateFlag
        {
            get
            {
                if (this.RsnAggregateFlagValueSpecified)
                {
                    return this.RsnAggregateFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnAggregateFlagValue = value.GetValueOrDefault();
                this.RsnAggregateFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnArmCarFlag", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool RsnArmCarFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnArmCarFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnArmCarFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsnArmCarFlag
        {
            get
            {
                if (this.RsnArmCarFlagValueSpecified)
                {
                    return this.RsnArmCarFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnArmCarFlagValue = value.GetValueOrDefault();
                this.RsnArmCarFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnAtmFlag", Order=67, Form=XmlSchemaForm.Unqualified)]
        public bool RsnAtmFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnAtmFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnAtmFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsnAtmFlag
        {
            get
            {
                if (this.RsnAtmFlagValueSpecified)
                {
                    return this.RsnAtmFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnAtmFlagValue = value.GetValueOrDefault();
                this.RsnAtmFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnMailShipFlag", Order=68, Form=XmlSchemaForm.Unqualified)]
        public bool RsnMailShipFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnMailShipFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnMailShipFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsnMailShipFlag
        {
            get
            {
                if (this.RsnMailShipFlagValueSpecified)
                {
                    return this.RsnMailShipFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnMailShipFlagValue = value.GetValueOrDefault();
                this.RsnMailShipFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnNgtDepFlag", Order=69, Form=XmlSchemaForm.Unqualified)]
        public bool RsnNgtDepFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnNgtDepFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnNgtDepFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsnNgtDepFlag
        {
            get
            {
                if (this.RsnNgtDepFlagValueSpecified)
                {
                    return this.RsnNgtDepFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnNgtDepFlagValue = value.GetValueOrDefault();
                this.RsnNgtDepFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RsnShBRFlag", Order=70, Form=XmlSchemaForm.Unqualified)]
        public bool RsnShBrFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RsnShBrFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RsnShBrFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RsnShBrFlag
        {
            get
            {
                if (this.RsnShBrFlagValueSpecified)
                {
                    return this.RsnShBrFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RsnShBrFlagValue = value.GetValueOrDefault();
                this.RsnShBrFlagValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=71, Form=XmlSchemaForm.Unqualified)]
        public bool StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatusDate", Order=72, Form=XmlSchemaForm.Unqualified)]
        public bool StatusDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatusDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StatusDate
        {
            get
            {
                if (this.StatusDateValueSpecified)
                {
                    return this.StatusDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusDateValue = value.GetValueOrDefault();
                this.StatusDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubmitByUser", Order=73, Form=XmlSchemaForm.Unqualified)]
        public bool SubmitByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubmitByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubmitByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SubmitByUser
        {
            get
            {
                if (this.SubmitByUserValueSpecified)
                {
                    return this.SubmitByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubmitByUserValue = value.GetValueOrDefault();
                this.SubmitByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubmitDate", Order=74, Form=XmlSchemaForm.Unqualified)]
        public bool SubmitDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubmitDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubmitDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SubmitDate
        {
            get
            {
                if (this.SubmitDateValueSpecified)
                {
                    return this.SubmitDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubmitDateValue = value.GetValueOrDefault();
                this.SubmitDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Tcc", Order=75, Form=XmlSchemaForm.Unqualified)]
        public bool TccValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tcc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TccValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Tcc
        {
            get
            {
                if (this.TccValueSpecified)
                {
                    return this.TccValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TccValue = value.GetValueOrDefault();
                this.TccValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranDate", Order=76, Form=XmlSchemaForm.Unqualified)]
        public bool TranDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TranDate
        {
            get
            {
                if (this.TranDateValueSpecified)
                {
                    return this.TranDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranDateValue = value.GetValueOrDefault();
                this.TranDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranSeq", Order=77, Form=XmlSchemaForm.Unqualified)]
        public bool TranSeqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranSeq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranSeqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TranSeq
        {
            get
            {
                if (this.TranSeqValueSpecified)
                {
                    return this.TranSeqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranSeqValue = value.GetValueOrDefault();
                this.TranSeqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerifyAmendByUser", Order=78, Form=XmlSchemaForm.Unqualified)]
        public bool VerifyAmendByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerifyAmendByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerifyAmendByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerifyAmendByUser
        {
            get
            {
                if (this.VerifyAmendByUserValueSpecified)
                {
                    return this.VerifyAmendByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerifyAmendByUserValue = value.GetValueOrDefault();
                this.VerifyAmendByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerifyAmendDate", Order=79, Form=XmlSchemaForm.Unqualified)]
        public bool VerifyAmendDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerifyAmendDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerifyAmendDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerifyAmendDate
        {
            get
            {
                if (this.VerifyAmendDateValueSpecified)
                {
                    return this.VerifyAmendDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerifyAmendDateValue = value.GetValueOrDefault();
                this.VerifyAmendDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerifyByUser", Order=80, Form=XmlSchemaForm.Unqualified)]
        public bool VerifyByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerifyByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerifyByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerifyByUser
        {
            get
            {
                if (this.VerifyByUserValueSpecified)
                {
                    return this.VerifyByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerifyByUserValue = value.GetValueOrDefault();
                this.VerifyByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VerifyDate", Order=81, Form=XmlSchemaForm.Unqualified)]
        public bool VerifyDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerifyDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VerifyDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> VerifyDate
        {
            get
            {
                if (this.VerifyDateValueSpecified)
                {
                    return this.VerifyDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VerifyDateValue = value.GetValueOrDefault();
                this.VerifyDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=82, Form=XmlSchemaForm.Unqualified)]
        public FinrepService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=83)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CtrFields" /> class.</para>
        /// </summary>
        public CtrFields()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
