//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\BalancingService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\BalancingService\generated-output -n BalancingService
namespace BalancingService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("BalanceDispenserType", Namespace="http://www.symxchange.generated.symitar.com/noncrud/balancing/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class BalanceDispenserType
    {
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 10.</para>
        /// </summary>
        [RangeAttribute(typeof(short), "1", "10")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DispenserId", Order=0)]
        public short DispenserIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DispenserId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DispenserIdValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 10.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<short> DispenserId
        {
            get
            {
                if (this.DispenserIdValueSpecified)
                {
                    return this.DispenserIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DispenserIdValue = value.GetValueOrDefault();
                this.DispenserIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranGlCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short TranGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TranGlCode
        {
            get
            {
                if (this.TranGlCodeValueSpecified)
                {
                    return this.TranGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranGlCodeValue = value.GetValueOrDefault();
                this.TranGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SourceGlCode", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short SourceGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SourceGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SourceGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SourceGlCode
        {
            get
            {
                if (this.SourceGlCodeValueSpecified)
                {
                    return this.SourceGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SourceGlCodeValue = value.GetValueOrDefault();
                this.SourceGlCodeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Denomination", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal DenominationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Denomination property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DenominationValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Denomination
        {
            get
            {
                if (this.DenominationValueSpecified)
                {
                    return this.DenominationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DenominationValue = value.GetValueOrDefault();
                this.DenominationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BeginAmount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal BeginAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeginAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BeginAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BeginAmount
        {
            get
            {
                if (this.BeginAmountValueSpecified)
                {
                    return this.BeginAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BeginAmountValue = value.GetValueOrDefault();
                this.BeginAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DispenseAmount", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal DispenseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DispenseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DispenseAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DispenseAmount
        {
            get
            {
                if (this.DispenseAmountValueSpecified)
                {
                    return this.DispenseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DispenseAmountValue = value.GetValueOrDefault();
                this.DispenseAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReverseAmount", Order=6, Form=XmlSchemaForm.Unqualified)]
        public decimal ReverseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReverseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReverseAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ReverseAmount
        {
            get
            {
                if (this.ReverseAmountValueSpecified)
                {
                    return this.ReverseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReverseAmountValue = value.GetValueOrDefault();
                this.ReverseAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustAmount", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal AdjustAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AdjustAmount
        {
            get
            {
                if (this.AdjustAmountValueSpecified)
                {
                    return this.AdjustAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustAmountValue = value.GetValueOrDefault();
                this.AdjustAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReplenishAmount", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal ReplenishAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReplenishAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReplenishAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ReplenishAmount
        {
            get
            {
                if (this.ReplenishAmountValueSpecified)
                {
                    return this.ReplenishAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReplenishAmountValue = value.GetValueOrDefault();
                this.ReplenishAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RevTotalAmount", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal RevTotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RevTotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RevTotalAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RevTotalAmount
        {
            get
            {
                if (this.RevTotalAmountValueSpecified)
                {
                    return this.RevTotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RevTotalAmountValue = value.GetValueOrDefault();
                this.RevTotalAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentAmount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrentAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrentAmount
        {
            get
            {
                if (this.CurrentAmountValueSpecified)
                {
                    return this.CurrentAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentAmountValue = value.GetValueOrDefault();
                this.CurrentAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WarningAmount", Order=11, Form=XmlSchemaForm.Unqualified)]
        public decimal WarningAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WarningAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WarningAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WarningAmount
        {
            get
            {
                if (this.WarningAmountValueSpecified)
                {
                    return this.WarningAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WarningAmountValue = value.GetValueOrDefault();
                this.WarningAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=12, Form=XmlSchemaForm.Unqualified)]
        public BalancingService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=13)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BalanceDispenserType" /> class.</para>
        /// </summary>
        public BalanceDispenserType()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
