//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\TransactionsService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\TransactionsService\generated-output -n TransactionsService
namespace TransactionsService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ShareDepositRequest", Namespace="http://www.symxchange.generated.symitar.com/noncrud/transactions/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class ShareDepositRequest : TransactionsBaseRequest
    {
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// </summary>
        [MaxLengthAttribute(10)]
        [XmlElementAttribute("AccountNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccountNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [MaxLengthAttribute(20)]
        [XmlElementAttribute("ShareId", Order=1)]
        public string ShareId { get; set; }
        
        [XmlElementAttribute("DepositAmounts", Order=2, Form=XmlSchemaForm.Unqualified)]
        public AmountInfo DepositAmounts { get; set; }
        
        [XmlElementAttribute("GLAccounts", Order=3)]
        public GlAccounts GlAccounts { get; set; }
        
        [XmlElementAttribute("GLCodes", Order=4)]
        public GlCodes GlCodes { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 132.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(132)]
        [XmlElementAttribute("Comment", Order=5)]
        public string Comment { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [RangeAttribute(typeof(DateTime), "1900-01-01", "2078-12-31")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=6, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [RangeAttribute(typeof(short), "0", "9999")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=7)]
        public short CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TaxDeferredContributionCode", Order=8, Form=XmlSchemaForm.Unqualified)]
        public TaxDeferredContributionCode TaxDeferredContributionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TaxDeferredContributionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TaxDeferredContributionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<TaxDeferredContributionCode> TaxDeferredContributionCode
        {
            get
            {
                if (this.TaxDeferredContributionCodeValueSpecified)
                {
                    return this.TaxDeferredContributionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TaxDeferredContributionCodeValue = value.GetValueOrDefault();
                this.TaxDeferredContributionCodeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 2.</para>
        /// </summary>
        [MaxLengthAttribute(2)]
        [XmlElementAttribute("SourceCode", Order=9)]
        public string SourceCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurrenceRequested", Order=10)]
        public bool RecurrenceRequestedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurrenceRequested property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurrenceRequestedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecurrenceRequested
        {
            get
            {
                if (this.RecurrenceRequestedValueSpecified)
                {
                    return this.RecurrenceRequestedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurrenceRequestedValue = value.GetValueOrDefault();
                this.RecurrenceRequestedValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CashDevice", Order=11, Form=XmlSchemaForm.Unqualified)]
        public CashDeviceType CashDevice { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(40)]
        [XmlElementAttribute("GLComment", Order=12)]
        public string GlComment { get; set; }
        
        [XmlElementAttribute("Reversal", Order=13, Form=XmlSchemaForm.Unqualified)]
        public ReversalType Reversal { get; set; }
    }
}
