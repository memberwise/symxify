//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\TransactionsService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\TransactionsService\generated-output -n TransactionsService
namespace TransactionsService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("NewLoanRequest", Namespace="http://www.symxchange.generated.symitar.com/noncrud/transactions/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class NewLoanRequest : TransactionsBaseRequest
    {
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// </summary>
        [MaxLengthAttribute(10)]
        [XmlElementAttribute("AccountNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccountNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [MaxLengthAttribute(20)]
        [XmlElementAttribute("LoanId", Order=1)]
        public string LoanId { get; set; }
        
        [XmlElementAttribute("LoanAmounts", Order=2, Form=XmlSchemaForm.Unqualified)]
        public AmountInformation LoanAmounts { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// <para xml:lang="en">Pattern: [0-9]+.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(10)]
        [RegularExpressionAttribute("[0-9]+")]
        [XmlElementAttribute("CheckNumber", Order=3)]
        public string CheckNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckIssuer", Order=4)]
        public CheckIssuerType CheckIssuerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckIssuer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckIssuerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<CheckIssuerType> CheckIssuer
        {
            get
            {
                if (this.CheckIssuerValueSpecified)
                {
                    return this.CheckIssuerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckIssuerValue = value.GetValueOrDefault();
                this.CheckIssuerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 132.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(132)]
        [XmlElementAttribute("Comment", Order=5)]
        public string Comment { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [RangeAttribute(typeof(int), "0", "99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckAccountCode", Order=6)]
        public int CheckAccountCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckAccountCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckAccountCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<int> CheckAccountCode
        {
            get
            {
                if (this.CheckAccountCodeValueSpecified)
                {
                    return this.CheckAccountCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckAccountCodeValue = value.GetValueOrDefault();
                this.CheckAccountCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("GLAccounts", Order=7)]
        public GlAccounts GlAccounts { get; set; }
        
        [XmlElementAttribute("GLCodes", Order=8)]
        public GlCodes GlCodes { get; set; }
        
        [XmlElementAttribute("Payee", Order=9)]
        public PayeeInformation Payee { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthorizationType", Order=10)]
        public AuthorizationType AuthorizationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthorizationType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthorizationTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<AuthorizationType> AuthorizationType
        {
            get
            {
                if (this.AuthorizationTypeValueSpecified)
                {
                    return this.AuthorizationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthorizationTypeValue = value.GetValueOrDefault();
                this.AuthorizationTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 2.</para>
        /// </summary>
        [MaxLengthAttribute(2)]
        [XmlElementAttribute("SourceCode", Order=11)]
        public string SourceCode { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [RangeAttribute(typeof(DateTime), "1900-01-01", "2078-12-31")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=12, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [RangeAttribute(typeof(short), "0", "9999")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=13)]
        public short CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [MaxLengthAttribute(100)]
        [XmlElementAttribute("CheckReference", Order=14)]
        public string CheckReference { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurrenceRequested", Order=15)]
        public bool RecurrenceRequestedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurrenceRequested property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurrenceRequestedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecurrenceRequested
        {
            get
            {
                if (this.RecurrenceRequestedValueSpecified)
                {
                    return this.RecurrenceRequestedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurrenceRequestedValue = value.GetValueOrDefault();
                this.RecurrenceRequestedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForcePostRequested", Order=16)]
        public bool ForcePostRequestedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForcePostRequested property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForcePostRequestedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ForcePostRequested
        {
            get
            {
                if (this.ForcePostRequestedValueSpecified)
                {
                    return this.ForcePostRequestedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForcePostRequestedValue = value.GetValueOrDefault();
                this.ForcePostRequestedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 15.</para>
        /// </summary>
        [MaxLengthAttribute(15)]
        [XmlElementAttribute("TracerNumber", Order=17)]
        public string TracerNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// </summary>
        [MaxLengthAttribute(10)]
        [XmlElementAttribute("DraftNumber", Order=18)]
        public string DraftNumber { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<Printer> _printer;
        
        [XmlElementAttribute("Printer", Order=19)]
        public Collection<Printer> Printer
        {
            get
            {
                return _printer;
            }
            set
            {
                _printer = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Printer collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrinterSpecified
        {
            get
            {
                return ((this.Printer != null) 
                            && (this.Printer.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NewLoanRequest" /> class.</para>
        /// </summary>
        public NewLoanRequest()
        {
            this._printer = new Collection<Printer>();
            this._dispenser = new Collection<Dispenser>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<Dispenser> _dispenser;
        
        [XmlElementAttribute("Dispenser", Order=20)]
        public Collection<Dispenser> Dispenser
        {
            get
            {
                return _dispenser;
            }
            set
            {
                _dispenser = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Dispenser collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DispenserSpecified
        {
            get
            {
                return ((this.Dispenser != null) 
                            && (this.Dispenser.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CalculateCheck", Order=21)]
        public bool CalculateCheckValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CalculateCheck property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CalculateCheckValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CalculateCheck
        {
            get
            {
                if (this.CalculateCheckValueSpecified)
                {
                    return this.CalculateCheckValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CalculateCheckValue = value.GetValueOrDefault();
                this.CalculateCheckValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(40)]
        [XmlElementAttribute("GLComment", Order=22)]
        public string GlComment { get; set; }
    }
}
