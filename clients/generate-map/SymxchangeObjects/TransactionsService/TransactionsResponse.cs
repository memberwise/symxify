//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\TransactionsService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\TransactionsService\generated-output -n TransactionsService
namespace TransactionsService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("TransactionsResponse", Namespace="http://www.symxchange.generated.symitar.com/noncrud/transactions/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class TransactionsResponse : TransactionsService.BaseResponse
    {
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// <para xml:lang="en">Pattern: [0-9]+.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(10)]
        [RegularExpressionAttribute("[0-9]+")]
        [XmlElementAttribute("CheckNumber", Order=0)]
        public string CheckNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [RangeAttribute(typeof(int), "0", "99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckAccountCode", Order=1)]
        public int CheckAccountCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckAccountCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckAccountCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<int> CheckAccountCode
        {
            get
            {
                if (this.CheckAccountCodeValueSpecified)
                {
                    return this.CheckAccountCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckAccountCodeValue = value.GetValueOrDefault();
                this.CheckAccountCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<TransactionFee> _transactionFees;
        
        [XmlElementAttribute("TransactionFees", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<TransactionFee> TransactionFees
        {
            get
            {
                return _transactionFees;
            }
            set
            {
                _transactionFees = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TransactionFees collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TransactionFeesSpecified
        {
            get
            {
                return ((this.TransactionFees != null) 
                            && (this.TransactionFees.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TransactionsResponse" /> class.</para>
        /// </summary>
        public TransactionsResponse()
        {
            this._transactionFees = new Collection<TransactionFee>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlElementAttribute("OverdrawInformation", Order=3)]
        public OverdrawInformation OverdrawInformation { get; set; }
        
        [XmlElementAttribute("Version_1", Order=4, Form=XmlSchemaForm.Unqualified)]
        public TransactionsService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=5)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        [XmlAttributeAttribute("Confirmation")]
        public string Confirmation { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlAttributeAttribute("SequenceFrom")]
        public int SequenceFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SequenceFrom property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SequenceFromValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> SequenceFrom
        {
            get
            {
                if (this.SequenceFromValueSpecified)
                {
                    return this.SequenceFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SequenceFromValue = value.GetValueOrDefault();
                this.SequenceFromValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlAttributeAttribute("SequenceTo")]
        public int SequenceToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SequenceTo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SequenceToValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> SequenceTo
        {
            get
            {
                if (this.SequenceToValueSpecified)
                {
                    return this.SequenceToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SequenceToValue = value.GetValueOrDefault();
                this.SequenceToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [RangeAttribute(typeof(DateTime), "1900-01-01", "2078-12-31")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlAttributeAttribute("TransactionPostDate", DataType="date")]
        public DateTime TransactionPostDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransactionPostDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransactionPostDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> TransactionPostDate
        {
            get
            {
                if (this.TransactionPostDateValueSpecified)
                {
                    return this.TransactionPostDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransactionPostDateValue = value.GetValueOrDefault();
                this.TransactionPostDateValueSpecified = value.HasValue;
            }
        }
    }
}
