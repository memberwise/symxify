//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanEscrowAnalysis", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LoanEscrowAnalysis", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/update")]
    [XmlIncludeAttribute(typeof(LoanEscrowAnalysisFields_2))]
    public partial class LoanEscrowAnalysis_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActionDeficiency", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short ActionDeficiencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActionDeficiency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActionDeficiencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ActionDeficiency
        {
            get
            {
                if (this.ActionDeficiencyValueSpecified)
                {
                    return this.ActionDeficiencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActionDeficiencyValue = value.GetValueOrDefault();
                this.ActionDeficiencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActionShortage", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short ActionShortageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActionShortage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActionShortageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ActionShortage
        {
            get
            {
                if (this.ActionShortageValueSpecified)
                {
                    return this.ActionShortageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActionShortageValue = value.GetValueOrDefault();
                this.ActionShortageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActualInitialDiscl", Order=2, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> ActualInitialDisclValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActualInitialDiscl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActualInitialDisclValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActualInitialDiscl
        {
            get
            {
                if (this.ActualInitialDisclValueSpecified)
                {
                    return this.ActualInitialDisclValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActualInitialDisclValue = value.GetValueOrDefault();
                this.ActualInitialDisclValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmtAddedRounding", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal AmtAddedRoundingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmtAddedRounding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmtAddedRoundingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AmtAddedRounding
        {
            get
            {
                if (this.AmtAddedRoundingValueSpecified)
                {
                    return this.AmtAddedRoundingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmtAddedRoundingValue = value.GetValueOrDefault();
                this.AmtAddedRoundingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmtCoverDeficiency", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal AmtCoverDeficiencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmtCoverDeficiency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmtCoverDeficiencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AmtCoverDeficiency
        {
            get
            {
                if (this.AmtCoverDeficiencyValueSpecified)
                {
                    return this.AmtCoverDeficiencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmtCoverDeficiencyValue = value.GetValueOrDefault();
                this.AmtCoverDeficiencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmtCoverShortage", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal AmtCoverShortageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmtCoverShortage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmtCoverShortageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AmtCoverShortage
        {
            get
            {
                if (this.AmtCoverShortageValueSpecified)
                {
                    return this.AmtCoverShortageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmtCoverShortageValue = value.GetValueOrDefault();
                this.AmtCoverShortageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AnalysisGroup", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short AnalysisGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AnalysisGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AnalysisGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AnalysisGroup
        {
            get
            {
                if (this.AnalysisGroupValueSpecified)
                {
                    return this.AnalysisGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AnalysisGroupValue = value.GetValueOrDefault();
                this.AnalysisGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AnalysisThruDate", Order=7, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> AnalysisThruDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AnalysisThruDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AnalysisThruDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> AnalysisThruDate
        {
            get
            {
                if (this.AnalysisThruDateValueSpecified)
                {
                    return this.AnalysisThruDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AnalysisThruDateValue = value.GetValueOrDefault();
                this.AnalysisThruDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChangeEscrowPmt", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal ChangeEscrowPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChangeEscrowPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChangeEscrowPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChangeEscrowPmt
        {
            get
            {
                if (this.ChangeEscrowPmtValueSpecified)
                {
                    return this.ChangeEscrowPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChangeEscrowPmtValue = value.GetValueOrDefault();
                this.ChangeEscrowPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClosingRequest", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short ClosingRequestValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClosingRequest property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClosingRequestValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ClosingRequest
        {
            get
            {
                if (this.ClosingRequestValueSpecified)
                {
                    return this.ClosingRequestValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClosingRequestValue = value.GetValueOrDefault();
                this.ClosingRequestValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentBalance", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrentBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrentBalance
        {
            get
            {
                if (this.CurrentBalanceValueSpecified)
                {
                    return this.CurrentBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentBalanceValue = value.GetValueOrDefault();
                this.CurrentBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentDueDay1", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short CurrentDueDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentDueDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentDueDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CurrentDueDay1
        {
            get
            {
                if (this.CurrentDueDay1ValueSpecified)
                {
                    return this.CurrentDueDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentDueDay1Value = value.GetValueOrDefault();
                this.CurrentDueDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentDueDay2", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short CurrentDueDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentDueDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentDueDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CurrentDueDay2
        {
            get
            {
                if (this.CurrentDueDay2ValueSpecified)
                {
                    return this.CurrentDueDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentDueDay2Value = value.GetValueOrDefault();
                this.CurrentDueDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentPayment", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrentPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrentPayment
        {
            get
            {
                if (this.CurrentPaymentValueSpecified)
                {
                    return this.CurrentPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentPaymentValue = value.GetValueOrDefault();
                this.CurrentPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrentPaymentFreq", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short CurrentPaymentFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentPaymentFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrentPaymentFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CurrentPaymentFreq
        {
            get
            {
                if (this.CurrentPaymentFreqValueSpecified)
                {
                    return this.CurrentPaymentFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrentPaymentFreqValue = value.GetValueOrDefault();
                this.CurrentPaymentFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cushion", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal CushionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cushion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CushionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cushion
        {
            get
            {
                if (this.CushionValueSpecified)
                {
                    return this.CushionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CushionValue = value.GetValueOrDefault();
                this.CushionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DateAnalysisCalc", Order=16, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> DateAnalysisCalcValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateAnalysisCalc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DateAnalysisCalcValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DateAnalysisCalc
        {
            get
            {
                if (this.DateAnalysisCalcValueSpecified)
                {
                    return this.DateAnalysisCalcValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DateAnalysisCalcValue = value.GetValueOrDefault();
                this.DateAnalysisCalcValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DateInitDisclNeed", Order=17, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> DateInitDisclNeedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateInitDisclNeed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DateInitDisclNeedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> DateInitDisclNeed
        {
            get
            {
                if (this.DateInitDisclNeedValueSpecified)
                {
                    return this.DateInitDisclNeedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DateInitDisclNeedValue = value.GetValueOrDefault();
                this.DateInitDisclNeedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Deficiency", Order=18, Form=XmlSchemaForm.Unqualified)]
        public decimal DeficiencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deficiency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeficiencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Deficiency
        {
            get
            {
                if (this.DeficiencyValueSpecified)
                {
                    return this.DeficiencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeficiencyValue = value.GetValueOrDefault();
                this.DeficiencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpectedBegStmtBal", Order=19, Form=XmlSchemaForm.Unqualified)]
        public decimal ExpectedBegStmtBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpectedBegStmtBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpectedBegStmtBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ExpectedBegStmtBal
        {
            get
            {
                if (this.ExpectedBegStmtBalValueSpecified)
                {
                    return this.ExpectedBegStmtBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpectedBegStmtBalValue = value.GetValueOrDefault();
                this.ExpectedBegStmtBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FinalAnalysisDate", Order=20, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> FinalAnalysisDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FinalAnalysisDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FinalAnalysisDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FinalAnalysisDate
        {
            get
            {
                if (this.FinalAnalysisDateValueSpecified)
                {
                    return this.FinalAnalysisDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FinalAnalysisDateValue = value.GetValueOrDefault();
                this.FinalAnalysisDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForecastBegStmtBal", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal ForecastBegStmtBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForecastBegStmtBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForecastBegStmtBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ForecastBegStmtBal
        {
            get
            {
                if (this.ForecastBegStmtBalValueSpecified)
                {
                    return this.ForecastBegStmtBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForecastBegStmtBalValue = value.GetValueOrDefault();
                this.ForecastBegStmtBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InitialDisclThird", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short InitialDisclThirdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InitialDisclThird property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InitialDisclThirdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InitialDisclThird
        {
            get
            {
                if (this.InitialDisclThirdValueSpecified)
                {
                    return this.InitialDisclThirdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InitialDisclThirdValue = value.GetValueOrDefault();
                this.InitialDisclThirdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastAnalysisProcessed", Order=23, Form=XmlSchemaForm.Unqualified)]
        public short LastAnalysisProcessedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastAnalysisProcessed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastAnalysisProcessedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LastAnalysisProcessed
        {
            get
            {
                if (this.LastAnalysisProcessedValueSpecified)
                {
                    return this.LastAnalysisProcessedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastAnalysisProcessedValue = value.GetValueOrDefault();
                this.LastAnalysisProcessedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=24, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanEscrowAnalysisNewEscrowPayment_2> _newEscrowPayment;
        
        [XmlElementAttribute("NewEscrowPayment", Order=25, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanEscrowAnalysisNewEscrowPayment_2> NewEscrowPayment
        {
            get
            {
                return _newEscrowPayment;
            }
            set
            {
                _newEscrowPayment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NewEscrowPayment collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NewEscrowPaymentSpecified
        {
            get
            {
                return ((this.NewEscrowPayment != null) 
                            && (this.NewEscrowPayment.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanEscrowAnalysis_2" /> class.</para>
        /// </summary>
        public LoanEscrowAnalysis_2()
        {
            this._newEscrowPayment = new Collection<LoanEscrowAnalysisNewEscrowPayment_2>();
            this._newPaymentDate = new Collection<LoanEscrowAnalysisNewPaymentDate_2>();
            this._prevNewEscrowPmt = new Collection<LoanEscrowAnalysisPrevNewEscrowPmt_2>();
            this._prevNewPmtDate = new Collection<LoanEscrowAnalysisPrevNewPmtDate_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanEscrowAnalysisNewPaymentDate_2> _newPaymentDate;
        
        [XmlElementAttribute("NewPaymentDate", Order=26, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanEscrowAnalysisNewPaymentDate_2> NewPaymentDate
        {
            get
            {
                return _newPaymentDate;
            }
            set
            {
                _newPaymentDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NewPaymentDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NewPaymentDateSpecified
        {
            get
            {
                return ((this.NewPaymentDate != null) 
                            && (this.NewPaymentDate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextAnalysisDate", Order=27, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NextAnalysisDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextAnalysisDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextAnalysisDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NextAnalysisDate
        {
            get
            {
                if (this.NextAnalysisDateValueSpecified)
                {
                    return this.NextAnalysisDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextAnalysisDateValue = value.GetValueOrDefault();
                this.NextAnalysisDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextPaymentDueDate", Order=28, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NextPaymentDueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextPaymentDueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextPaymentDueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NextPaymentDueDate
        {
            get
            {
                if (this.NextPaymentDueDateValueSpecified)
                {
                    return this.NextPaymentDueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextPaymentDueDateValue = value.GetValueOrDefault();
                this.NextPaymentDueDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticeClosingDate", Order=29, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NoticeClosingDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticeClosingDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticeClosingDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NoticeClosingDate
        {
            get
            {
                if (this.NoticeClosingDateValueSpecified)
                {
                    return this.NoticeClosingDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticeClosingDateValue = value.GetValueOrDefault();
                this.NoticeClosingDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticeClosingFee", Order=30, Form=XmlSchemaForm.Unqualified)]
        public decimal NoticeClosingFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticeClosingFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticeClosingFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NoticeClosingFee
        {
            get
            {
                if (this.NoticeClosingFeeValueSpecified)
                {
                    return this.NoticeClosingFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticeClosingFeeValue = value.GetValueOrDefault();
                this.NoticeClosingFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticeDate", Order=31, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> NoticeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> NoticeDate
        {
            get
            {
                if (this.NoticeDateValueSpecified)
                {
                    return this.NoticeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticeDateValue = value.GetValueOrDefault();
                this.NoticeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Overage", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal OverageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Overage
        {
            get
            {
                if (this.OverageValueSpecified)
                {
                    return this.OverageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverageValue = value.GetValueOrDefault();
                this.OverageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverageRefunded", Order=33, Form=XmlSchemaForm.Unqualified)]
        public decimal OverageRefundedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverageRefunded property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverageRefundedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> OverageRefunded
        {
            get
            {
                if (this.OverageRefundedValueSpecified)
                {
                    return this.OverageRefundedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverageRefundedValue = value.GetValueOrDefault();
                this.OverageRefundedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PmtReducedOverage", Order=34, Form=XmlSchemaForm.Unqualified)]
        public decimal PmtReducedOverageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PmtReducedOverage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PmtReducedOverageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PmtReducedOverage
        {
            get
            {
                if (this.PmtReducedOverageValueSpecified)
                {
                    return this.PmtReducedOverageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PmtReducedOverageValue = value.GetValueOrDefault();
                this.PmtReducedOverageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevActionDefic", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short PrevActionDeficValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevActionDefic property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevActionDeficValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevActionDefic
        {
            get
            {
                if (this.PrevActionDeficValueSpecified)
                {
                    return this.PrevActionDeficValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevActionDeficValue = value.GetValueOrDefault();
                this.PrevActionDeficValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevActionShortage", Order=36, Form=XmlSchemaForm.Unqualified)]
        public short PrevActionShortageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevActionShortage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevActionShortageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevActionShortage
        {
            get
            {
                if (this.PrevActionShortageValueSpecified)
                {
                    return this.PrevActionShortageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevActionShortageValue = value.GetValueOrDefault();
                this.PrevActionShortageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevAmtAddedRound", Order=37, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevAmtAddedRoundValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevAmtAddedRound property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevAmtAddedRoundValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevAmtAddedRound
        {
            get
            {
                if (this.PrevAmtAddedRoundValueSpecified)
                {
                    return this.PrevAmtAddedRoundValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevAmtAddedRoundValue = value.GetValueOrDefault();
                this.PrevAmtAddedRoundValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevAmtCoverDef", Order=38, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevAmtCoverDefValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevAmtCoverDef property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevAmtCoverDefValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevAmtCoverDef
        {
            get
            {
                if (this.PrevAmtCoverDefValueSpecified)
                {
                    return this.PrevAmtCoverDefValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevAmtCoverDefValue = value.GetValueOrDefault();
                this.PrevAmtCoverDefValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevAmtCoverShort", Order=39, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevAmtCoverShortValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevAmtCoverShort property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevAmtCoverShortValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevAmtCoverShort
        {
            get
            {
                if (this.PrevAmtCoverShortValueSpecified)
                {
                    return this.PrevAmtCoverShortValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevAmtCoverShortValue = value.GetValueOrDefault();
                this.PrevAmtCoverShortValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevAnalyThruDate", Order=40, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> PrevAnalyThruDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevAnalyThruDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevAnalyThruDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevAnalyThruDate
        {
            get
            {
                if (this.PrevAnalyThruDateValueSpecified)
                {
                    return this.PrevAnalyThruDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevAnalyThruDateValue = value.GetValueOrDefault();
                this.PrevAnalyThruDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevAnalysisDate", Order=41, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> PrevAnalysisDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevAnalysisDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevAnalysisDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevAnalysisDate
        {
            get
            {
                if (this.PrevAnalysisDateValueSpecified)
                {
                    return this.PrevAnalysisDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevAnalysisDateValue = value.GetValueOrDefault();
                this.PrevAnalysisDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevBalance", Order=42, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevBalance
        {
            get
            {
                if (this.PrevBalanceValueSpecified)
                {
                    return this.PrevBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevBalanceValue = value.GetValueOrDefault();
                this.PrevBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevChgEscrowPmt", Order=43, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevChgEscrowPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevChgEscrowPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevChgEscrowPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevChgEscrowPmt
        {
            get
            {
                if (this.PrevChgEscrowPmtValueSpecified)
                {
                    return this.PrevChgEscrowPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevChgEscrowPmtValue = value.GetValueOrDefault();
                this.PrevChgEscrowPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevCushion", Order=44, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevCushionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevCushion property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevCushionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevCushion
        {
            get
            {
                if (this.PrevCushionValueSpecified)
                {
                    return this.PrevCushionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevCushionValue = value.GetValueOrDefault();
                this.PrevCushionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevDateAnalyCalc", Order=45, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> PrevDateAnalyCalcValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevDateAnalyCalc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevDateAnalyCalcValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevDateAnalyCalc
        {
            get
            {
                if (this.PrevDateAnalyCalcValueSpecified)
                {
                    return this.PrevDateAnalyCalcValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevDateAnalyCalcValue = value.GetValueOrDefault();
                this.PrevDateAnalyCalcValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevDeficiency", Order=46, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevDeficiencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevDeficiency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevDeficiencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevDeficiency
        {
            get
            {
                if (this.PrevDeficiencyValueSpecified)
                {
                    return this.PrevDeficiencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevDeficiencyValue = value.GetValueOrDefault();
                this.PrevDeficiencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevDueDay1", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short PrevDueDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevDueDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevDueDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevDueDay1
        {
            get
            {
                if (this.PrevDueDay1ValueSpecified)
                {
                    return this.PrevDueDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevDueDay1Value = value.GetValueOrDefault();
                this.PrevDueDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevDueDay2", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short PrevDueDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevDueDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevDueDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevDueDay2
        {
            get
            {
                if (this.PrevDueDay2ValueSpecified)
                {
                    return this.PrevDueDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevDueDay2Value = value.GetValueOrDefault();
                this.PrevDueDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevExpBegStmtBal", Order=49, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevExpBegStmtBalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevExpBegStmtBal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevExpBegStmtBalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevExpBegStmtBal
        {
            get
            {
                if (this.PrevExpBegStmtBalValueSpecified)
                {
                    return this.PrevExpBegStmtBalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevExpBegStmtBalValue = value.GetValueOrDefault();
                this.PrevExpBegStmtBalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevFcastBegStmtBl", Order=50, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevFcastBegStmtBlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevFcastBegStmtBl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevFcastBegStmtBlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevFcastBegStmtBl
        {
            get
            {
                if (this.PrevFcastBegStmtBlValueSpecified)
                {
                    return this.PrevFcastBegStmtBlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevFcastBegStmtBlValue = value.GetValueOrDefault();
                this.PrevFcastBegStmtBlValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanEscrowAnalysisPrevNewEscrowPmt_2> _prevNewEscrowPmt;
        
        [XmlElementAttribute("PrevNewEscrowPmt", Order=51, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanEscrowAnalysisPrevNewEscrowPmt_2> PrevNewEscrowPmt
        {
            get
            {
                return _prevNewEscrowPmt;
            }
            set
            {
                _prevNewEscrowPmt = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PrevNewEscrowPmt collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrevNewEscrowPmtSpecified
        {
            get
            {
                return ((this.PrevNewEscrowPmt != null) 
                            && (this.PrevNewEscrowPmt.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanEscrowAnalysisPrevNewPmtDate_2> _prevNewPmtDate;
        
        [XmlElementAttribute("PrevNewPmtDate", Order=52, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanEscrowAnalysisPrevNewPmtDate_2> PrevNewPmtDate
        {
            get
            {
                return _prevNewPmtDate;
            }
            set
            {
                _prevNewPmtDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PrevNewPmtDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrevNewPmtDateSpecified
        {
            get
            {
                return ((this.PrevNewPmtDate != null) 
                            && (this.PrevNewPmtDate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevOverRefunded", Order=53, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevOverRefundedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevOverRefunded property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevOverRefundedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevOverRefunded
        {
            get
            {
                if (this.PrevOverRefundedValueSpecified)
                {
                    return this.PrevOverRefundedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevOverRefundedValue = value.GetValueOrDefault();
                this.PrevOverRefundedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevOverage", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevOverageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevOverage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevOverageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevOverage
        {
            get
            {
                if (this.PrevOverageValueSpecified)
                {
                    return this.PrevOverageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevOverageValue = value.GetValueOrDefault();
                this.PrevOverageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevPayment", Order=55, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevPayment
        {
            get
            {
                if (this.PrevPaymentValueSpecified)
                {
                    return this.PrevPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevPaymentValue = value.GetValueOrDefault();
                this.PrevPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevPaymentDueDate", Order=56, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> PrevPaymentDueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevPaymentDueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevPaymentDueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevPaymentDueDate
        {
            get
            {
                if (this.PrevPaymentDueDateValueSpecified)
                {
                    return this.PrevPaymentDueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevPaymentDueDateValue = value.GetValueOrDefault();
                this.PrevPaymentDueDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevPaymentFreq", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short PrevPaymentFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevPaymentFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevPaymentFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevPaymentFreq
        {
            get
            {
                if (this.PrevPaymentFreqValueSpecified)
                {
                    return this.PrevPaymentFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevPaymentFreqValue = value.GetValueOrDefault();
                this.PrevPaymentFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevPmtReducedOver", Order=58, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevPmtReducedOverValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevPmtReducedOver property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevPmtReducedOverValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevPmtReducedOver
        {
            get
            {
                if (this.PrevPmtReducedOverValueSpecified)
                {
                    return this.PrevPmtReducedOverValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevPmtReducedOverValue = value.GetValueOrDefault();
                this.PrevPmtReducedOverValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevRequiredPmt", Order=59, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevRequiredPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevRequiredPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevRequiredPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevRequiredPmt
        {
            get
            {
                if (this.PrevRequiredPmtValueSpecified)
                {
                    return this.PrevRequiredPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevRequiredPmtValue = value.GetValueOrDefault();
                this.PrevRequiredPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevShortage", Order=60, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevShortageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevShortage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevShortageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevShortage
        {
            get
            {
                if (this.PrevShortageValueSpecified)
                {
                    return this.PrevShortageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevShortageValue = value.GetValueOrDefault();
                this.PrevShortageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PriorAnalysisSource", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short PriorAnalysisSourceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PriorAnalysisSource property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PriorAnalysisSourceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PriorAnalysisSource
        {
            get
            {
                if (this.PriorAnalysisSourceValueSpecified)
                {
                    return this.PriorAnalysisSourceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PriorAnalysisSourceValue = value.GetValueOrDefault();
                this.PriorAnalysisSourceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=62, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RemainOpenOption", Order=63, Form=XmlSchemaForm.Unqualified)]
        public short RemainOpenOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RemainOpenOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RemainOpenOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RemainOpenOption
        {
            get
            {
                if (this.RemainOpenOptionValueSpecified)
                {
                    return this.RemainOpenOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RemainOpenOptionValue = value.GetValueOrDefault();
                this.RemainOpenOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RequiredNewPayment", Order=64, Form=XmlSchemaForm.Unqualified)]
        public decimal RequiredNewPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequiredNewPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RequiredNewPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RequiredNewPayment
        {
            get
            {
                if (this.RequiredNewPaymentValueSpecified)
                {
                    return this.RequiredNewPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RequiredNewPaymentValue = value.GetValueOrDefault();
                this.RequiredNewPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Shortage", Order=65, Form=XmlSchemaForm.Unqualified)]
        public decimal ShortageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Shortage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShortageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Shortage
        {
            get
            {
                if (this.ShortageValueSpecified)
                {
                    return this.ShortageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShortageValue = value.GetValueOrDefault();
                this.ShortageValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=66, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=67)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
