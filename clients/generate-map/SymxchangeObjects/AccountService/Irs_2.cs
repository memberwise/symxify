//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Irs", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Irs", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/update")]
    [XmlIncludeAttribute(typeof(IrsFields_2))]
    public partial class Irs_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActualMaxContribution", Order=0, Form=XmlSchemaForm.Unqualified)]
        public decimal ActualMaxContributionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActualMaxContribution property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActualMaxContributionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ActualMaxContribution
        {
            get
            {
                if (this.ActualMaxContributionValueSpecified)
                {
                    return this.ActualMaxContributionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActualMaxContributionValue = value.GetValueOrDefault();
                this.ActualMaxContributionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<IrsContrLastYear_2> _contrLastYear;
        
        [XmlElementAttribute("ContrLastYear", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<IrsContrLastYear_2> ContrLastYear
        {
            get
            {
                return _contrLastYear;
            }
            set
            {
                _contrLastYear = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ContrLastYear collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ContrLastYearSpecified
        {
            get
            {
                return ((this.ContrLastYear != null) 
                            && (this.ContrLastYear.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Irs_2" /> class.</para>
        /// </summary>
        public Irs_2()
        {
            this._contrLastYear = new Collection<IrsContrLastYear_2>();
            this._contrThisYear = new Collection<IrsContrThisYear_2>();
            this._distrLastYear = new Collection<IrsDistrLastYear_2>();
            this._distrThisYear = new Collection<IrsDistrThisYear_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<IrsContrThisYear_2> _contrThisYear;
        
        [XmlElementAttribute("ContrThisYear", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<IrsContrThisYear_2> ContrThisYear
        {
            get
            {
                return _contrThisYear;
            }
            set
            {
                _contrThisYear = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ContrThisYear collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ContrThisYearSpecified
        {
            get
            {
                return ((this.ContrThisYear != null) 
                            && (this.ContrThisYear.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ContributionYear", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short ContributionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContributionYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ContributionYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ContributionYear
        {
            get
            {
                if (this.ContributionYearValueSpecified)
                {
                    return this.ContributionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ContributionYearValue = value.GetValueOrDefault();
                this.ContributionYearValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<IrsDistrLastYear_2> _distrLastYear;
        
        [XmlElementAttribute("DistrLastYear", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<IrsDistrLastYear_2> DistrLastYear
        {
            get
            {
                return _distrLastYear;
            }
            set
            {
                _distrLastYear = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DistrLastYear collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DistrLastYearSpecified
        {
            get
            {
                return ((this.DistrLastYear != null) 
                            && (this.DistrLastYear.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<IrsDistrThisYear_2> _distrThisYear;
        
        [XmlElementAttribute("DistrThisYear", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<IrsDistrThisYear_2> DistrThisYear
        {
            get
            {
                return _distrThisYear;
            }
            set
            {
                _distrThisYear = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DistrThisYear collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DistrThisYearSpecified
        {
            get
            {
                return ((this.DistrThisYear != null) 
                            && (this.DistrThisYear.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FairMarketValueDeath", Order=6, Form=XmlSchemaForm.Unqualified)]
        public decimal FairMarketValueDeathValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FairMarketValueDeath property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FairMarketValueDeathValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FairMarketValueDeath
        {
            get
            {
                if (this.FairMarketValueDeathValueSpecified)
                {
                    return this.FairMarketValueDeathValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FairMarketValueDeathValue = value.GetValueOrDefault();
                this.FairMarketValueDeathValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FairMarketValueLastYear", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal FairMarketValueLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FairMarketValueLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FairMarketValueLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FairMarketValueLastYear
        {
            get
            {
                if (this.FairMarketValueLastYearValueSpecified)
                {
                    return this.FairMarketValueLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FairMarketValueLastYearValue = value.GetValueOrDefault();
                this.FairMarketValueLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IraRmd", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal IraRmdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IraRmd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IraRmdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> IraRmd
        {
            get
            {
                if (this.IraRmdValueSpecified)
                {
                    return this.IraRmdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IraRmdValue = value.GetValueOrDefault();
                this.IraRmdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsCode", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short IrsCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IrsCode
        {
            get
            {
                if (this.IrsCodeValueSpecified)
                {
                    return this.IrsCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsCodeValue = value.GetValueOrDefault();
                this.IrsCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsHolderBirthDate", Order=10, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> IrsHolderBirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsHolderBirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsHolderBirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> IrsHolderBirthDate
        {
            get
            {
                if (this.IrsHolderBirthDateValueSpecified)
                {
                    return this.IrsHolderBirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsHolderBirthDateValue = value.GetValueOrDefault();
                this.IrsHolderBirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsHolderSpouseBirthDate", Order=11, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> IrsHolderSpouseBirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsHolderSpouseBirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsHolderSpouseBirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> IrsHolderSpouseBirthDate
        {
            get
            {
                if (this.IrsHolderSpouseBirthDateValueSpecified)
                {
                    return this.IrsHolderSpouseBirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsHolderSpouseBirthDateValue = value.GetValueOrDefault();
                this.IrsHolderSpouseBirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IrsPlan", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short IrsPlanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IrsPlan property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IrsPlanValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IrsPlan
        {
            get
            {
                if (this.IrsPlanValueSpecified)
                {
                    return this.IrsPlanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IrsPlanValue = value.GetValueOrDefault();
                this.IrsPlanValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDistribType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short LastDistribTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDistribType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDistribTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LastDistribType
        {
            get
            {
                if (this.LastDistribTypeValueSpecified)
                {
                    return this.LastDistribTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDistribTypeValue = value.GetValueOrDefault();
                this.LastDistribTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=14, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxContribution", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal MaxContributionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxContribution property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxContributionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MaxContribution
        {
            get
            {
                if (this.MaxContributionValueSpecified)
                {
                    return this.MaxContributionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxContributionValue = value.GetValueOrDefault();
                this.MaxContributionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MsaHolderCode", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short MsaHolderCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MsaHolderCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MsaHolderCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MsaHolderCode
        {
            get
            {
                if (this.MsaHolderCodeValueSpecified)
                {
                    return this.MsaHolderCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MsaHolderCodeValue = value.GetValueOrDefault();
                this.MsaHolderCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenDate", Order=17, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> OpenDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> OpenDate
        {
            get
            {
                if (this.OpenDateValueSpecified)
                {
                    return this.OpenDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenDateValue = value.GetValueOrDefault();
                this.OpenDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=18, Form=XmlSchemaForm.Unqualified, IsNullable=true, DataType="date")]
        public Nullable<DateTime> RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RmdTableOption", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short RmdTableOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RmdTableOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RmdTableOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RmdTableOption
        {
            get
            {
                if (this.RmdTableOptionValueSpecified)
                {
                    return this.RmdTableOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RmdTableOptionValue = value.GetValueOrDefault();
                this.RmdTableOptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Ssn", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string Ssn { get; set; }
        
        [XmlElementAttribute("Version_1", Order=21, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=22)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
