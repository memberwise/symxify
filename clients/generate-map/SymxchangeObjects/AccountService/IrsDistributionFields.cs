//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("IrsDistributionFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("IrsDistributionFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class IrsDistributionFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Amount", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Amount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Amount
        {
            get
            {
                if (this.AmountValueSpecified)
                {
                    return this.AmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmountValue = value.GetValueOrDefault();
                this.AmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DestinationAccount", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool DestinationAccountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DestinationAccount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DestinationAccountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DestinationAccount
        {
            get
            {
                if (this.DestinationAccountValueSpecified)
                {
                    return this.DestinationAccountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DestinationAccountValue = value.GetValueOrDefault();
                this.DestinationAccountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DestinationId", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool DestinationIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DestinationId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DestinationIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DestinationId
        {
            get
            {
                if (this.DestinationIdValueSpecified)
                {
                    return this.DestinationIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DestinationIdValue = value.GetValueOrDefault();
                this.DestinationIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool DistributionCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DistributionCode
        {
            get
            {
                if (this.DistributionCodeValueSpecified)
                {
                    return this.DistributionCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionCodeValue = value.GetValueOrDefault();
                this.DistributionCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionDay1", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool DistributionDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DistributionDay1
        {
            get
            {
                if (this.DistributionDay1ValueSpecified)
                {
                    return this.DistributionDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionDay1Value = value.GetValueOrDefault();
                this.DistributionDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionDay2", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool DistributionDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DistributionDay2
        {
            get
            {
                if (this.DistributionDay2ValueSpecified)
                {
                    return this.DistributionDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionDay2Value = value.GetValueOrDefault();
                this.DistributionDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionFreq", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool DistributionFreqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionFreq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionFreqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DistributionFreq
        {
            get
            {
                if (this.DistributionFreqValueSpecified)
                {
                    return this.DistributionFreqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionFreqValue = value.GetValueOrDefault();
                this.DistributionFreqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DistributionMethod", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool DistributionMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistributionMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DistributionMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DistributionMethod
        {
            get
            {
                if (this.DistributionMethodValueSpecified)
                {
                    return this.DistributionMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistributionMethodValue = value.GetValueOrDefault();
                this.DistributionMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FedWholdAmount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool FedWholdAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FedWholdAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FedWholdAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FedWholdAmount
        {
            get
            {
                if (this.FedWholdAmountValueSpecified)
                {
                    return this.FedWholdAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FedWholdAmountValue = value.GetValueOrDefault();
                this.FedWholdAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FedWholdCode", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool FedWholdCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FedWholdCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FedWholdCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FedWholdCode
        {
            get
            {
                if (this.FedWholdCodeValueSpecified)
                {
                    return this.FedWholdCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FedWholdCodeValue = value.GetValueOrDefault();
                this.FedWholdCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FedWholdPercent", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool FedWholdPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FedWholdPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FedWholdPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FedWholdPercent
        {
            get
            {
                if (this.FedWholdPercentValueSpecified)
                {
                    return this.FedWholdPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FedWholdPercentValue = value.GetValueOrDefault();
                this.FedWholdPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDistributnAmt", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool LastDistributnAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDistributnAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDistributnAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastDistributnAmt
        {
            get
            {
                if (this.LastDistributnAmtValueSpecified)
                {
                    return this.LastDistributnAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDistributnAmtValue = value.GetValueOrDefault();
                this.LastDistributnAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDistributnDate", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool LastDistributnDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDistributnDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDistributnDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastDistributnDate
        {
            get
            {
                if (this.LastDistributnDateValueSpecified)
                {
                    return this.LastDistributnDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDistributnDateValue = value.GetValueOrDefault();
                this.LastDistributnDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextDistributnDate", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool NextDistributnDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextDistributnDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextDistributnDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NextDistributnDate
        {
            get
            {
                if (this.NextDistributnDateValueSpecified)
                {
                    return this.NextDistributnDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextDistributnDateValue = value.GetValueOrDefault();
                this.NextDistributnDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegE", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool RegEValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegE property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegEValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RegE
        {
            get
            {
                if (this.RegEValueSpecified)
                {
                    return this.RegEValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegEValue = value.GetValueOrDefault();
                this.RegEValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _sourceId;
        
        [XmlElementAttribute("SourceId", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> SourceId
        {
            get
            {
                return _sourceId;
            }
            set
            {
                _sourceId = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SourceId collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SourceIdSpecified
        {
            get
            {
                return ((this.SourceId != null) 
                            && (this.SourceId.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="IrsDistributionFields" /> class.</para>
        /// </summary>
        public IrsDistributionFields()
        {
            this._sourceId = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWholdAmount", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool StateWholdAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWholdAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWholdAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StateWholdAmount
        {
            get
            {
                if (this.StateWholdAmountValueSpecified)
                {
                    return this.StateWholdAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWholdAmountValue = value.GetValueOrDefault();
                this.StateWholdAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWholdCode", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool StateWholdCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWholdCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWholdCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StateWholdCode
        {
            get
            {
                if (this.StateWholdCodeValueSpecified)
                {
                    return this.StateWholdCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWholdCodeValue = value.GetValueOrDefault();
                this.StateWholdCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StateWholdPercent", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool StateWholdPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateWholdPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StateWholdPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StateWholdPercent
        {
            get
            {
                if (this.StateWholdPercentValueSpecified)
                {
                    return this.StateWholdPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StateWholdPercentValue = value.GetValueOrDefault();
                this.StateWholdPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=24, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=25)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
