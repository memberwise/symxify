//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Card", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Card", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class Card
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDate", Order=0, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDate
        {
            get
            {
                if (this.ActiveDateValueSpecified)
                {
                    return this.ActiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDateValue = value.GetValueOrDefault();
                this.ActiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmCount", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short AtmCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AtmCount
        {
            get
            {
                if (this.AtmCountValueSpecified)
                {
                    return this.AtmCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmCountValue = value.GetValueOrDefault();
                this.AtmCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmCountLimit", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short AtmCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AtmCountLimit
        {
            get
            {
                if (this.AtmCountLimitValueSpecified)
                {
                    return this.AtmCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmCountLimitValue = value.GetValueOrDefault();
                this.AtmCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmTempLimit", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal AtmTempLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmTempLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmTempLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AtmTempLimit
        {
            get
            {
                if (this.AtmTempLimitValueSpecified)
                {
                    return this.AtmTempLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmTempLimitValue = value.GetValueOrDefault();
                this.AtmTempLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthAmount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal AuthAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AuthAmount
        {
            get
            {
                if (this.AuthAmountValueSpecified)
                {
                    return this.AuthAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthAmountValue = value.GetValueOrDefault();
                this.AuthAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthCount", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short AuthCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AuthCount
        {
            get
            {
                if (this.AuthCountValueSpecified)
                {
                    return this.AuthCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthCountValue = value.GetValueOrDefault();
                this.AuthCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthCountLimit", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short AuthCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AuthCountLimit
        {
            get
            {
                if (this.AuthCountLimitValueSpecified)
                {
                    return this.AuthCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthCountLimitValue = value.GetValueOrDefault();
                this.AuthCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthLimit", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal AuthLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AuthLimit
        {
            get
            {
                if (this.AuthLimitValueSpecified)
                {
                    return this.AuthLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthLimitValue = value.GetValueOrDefault();
                this.AuthLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthTempLimit", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal AuthTempLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthTempLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthTempLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AuthTempLimit
        {
            get
            {
                if (this.AuthTempLimitValueSpecified)
                {
                    return this.AuthTempLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthTempLimitValue = value.GetValueOrDefault();
                this.AuthTempLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayAmount", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal BillPayAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillPayAmount
        {
            get
            {
                if (this.BillPayAmountValueSpecified)
                {
                    return this.BillPayAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayAmountValue = value.GetValueOrDefault();
                this.BillPayAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayCount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short BillPayCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillPayCount
        {
            get
            {
                if (this.BillPayCountValueSpecified)
                {
                    return this.BillPayCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayCountValue = value.GetValueOrDefault();
                this.BillPayCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayCountLimit", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short BillPayCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillPayCountLimit
        {
            get
            {
                if (this.BillPayCountLimitValueSpecified)
                {
                    return this.BillPayCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayCountLimitValue = value.GetValueOrDefault();
                this.BillPayCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayLimit", Order=12, Form=XmlSchemaForm.Unqualified)]
        public decimal BillPayLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillPayLimit
        {
            get
            {
                if (this.BillPayLimitValueSpecified)
                {
                    return this.BillPayLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayLimitValue = value.GetValueOrDefault();
                this.BillPayLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayMax", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal BillPayMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillPayMax
        {
            get
            {
                if (this.BillPayMaxValueSpecified)
                {
                    return this.BillPayMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayMaxValue = value.GetValueOrDefault();
                this.BillPayMaxValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("BlockCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string BlockCode { get; set; }
        
        [XmlElementAttribute("CardAccessList", Order=15, Form=XmlSchemaForm.Unqualified)]
        public CardAccessList CardAccessList { get; set; }
        
        [XmlElementAttribute("CardNameList", Order=16, Form=XmlSchemaForm.Unqualified)]
        public CardNameList CardNameList { get; set; }
        
        [XmlElementAttribute("CardNoteList", Order=17, Form=XmlSchemaForm.Unqualified)]
        public CardNoteList CardNoteList { get; set; }
        
        [XmlElementAttribute("ChkId", Order=18, Form=XmlSchemaForm.Unqualified)]
        public string ChkId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=19, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardCountLimit> _countLimit;
        
        [XmlElementAttribute("CountLimit", Order=20, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardCountLimit> CountLimit
        {
            get
            {
                return _countLimit;
            }
            set
            {
                _countLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CountLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CountLimitSpecified
        {
            get
            {
                return ((this.CountLimit != null) 
                            && (this.CountLimit.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Card" /> class.</para>
        /// </summary>
        public Card()
        {
            this._countLimit = new Collection<CardCountLimit>();
            this._feeCount = new Collection<CardFeeCount>();
            this._limit = new Collection<CardLimit>();
            this._limitCount = new Collection<CardLimitCount>();
            this._limitDescription = new Collection<CardLimitDescription>();
            this._limitUsageAmount = new Collection<CardLimitUsageAmount>();
            this._miscId = new Collection<CardMiscId>();
            this._perItemLimit = new Collection<CardPerItemLimit>();
            this._service = new Collection<CardService>();
            this._warningCode = new Collection<CardWarningCode>();
            this._warningExpiration = new Collection<CardWarningExpiration>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreatedAtBranch", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short CreatedAtBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedAtBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreatedAtBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreatedAtBranch
        {
            get
            {
                if (this.CreatedAtBranchValueSpecified)
                {
                    return this.CreatedAtBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreatedAtBranchValue = value.GetValueOrDefault();
                this.CreatedAtBranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreatedByUser", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short CreatedByUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedByUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreatedByUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CreatedByUser
        {
            get
            {
                if (this.CreatedByUserValueSpecified)
                {
                    return this.CreatedByUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreatedByUserValue = value.GetValueOrDefault();
                this.CreatedByUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredDebAmount", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal CredDebAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredDebAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredDebAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CredDebAmount
        {
            get
            {
                if (this.CredDebAmountValueSpecified)
                {
                    return this.CredDebAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredDebAmountValue = value.GetValueOrDefault();
                this.CredDebAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredDebCount", Order=24, Form=XmlSchemaForm.Unqualified)]
        public short CredDebCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredDebCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredDebCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CredDebCount
        {
            get
            {
                if (this.CredDebCountValueSpecified)
                {
                    return this.CredDebCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredDebCountValue = value.GetValueOrDefault();
                this.CredDebCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredDebCountLimit", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short CredDebCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredDebCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredDebCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CredDebCountLimit
        {
            get
            {
                if (this.CredDebCountLimitValueSpecified)
                {
                    return this.CredDebCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredDebCountLimitValue = value.GetValueOrDefault();
                this.CredDebCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredDebLimit", Order=26, Form=XmlSchemaForm.Unqualified)]
        public decimal CredDebLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredDebLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredDebLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CredDebLimit
        {
            get
            {
                if (this.CredDebLimitValueSpecified)
                {
                    return this.CredDebLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredDebLimitValue = value.GetValueOrDefault();
                this.CredDebLimitValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CreditCardId", Order=27, Form=XmlSchemaForm.Unqualified)]
        public string CreditCardId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepAmount", Order=28, Form=XmlSchemaForm.Unqualified)]
        public decimal DepAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DepAmount
        {
            get
            {
                if (this.DepAmountValueSpecified)
                {
                    return this.DepAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepAmountValue = value.GetValueOrDefault();
                this.DepAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepCount", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short DepCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DepCount
        {
            get
            {
                if (this.DepCountValueSpecified)
                {
                    return this.DepCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepCountValue = value.GetValueOrDefault();
                this.DepCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepCountLimit", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short DepCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DepCountLimit
        {
            get
            {
                if (this.DepCountLimitValueSpecified)
                {
                    return this.DepCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepCountLimitValue = value.GetValueOrDefault();
                this.DepCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepLimit", Order=31, Form=XmlSchemaForm.Unqualified)]
        public decimal DepLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DepLimit
        {
            get
            {
                if (this.DepLimitValueSpecified)
                {
                    return this.DepLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepLimitValue = value.GetValueOrDefault();
                this.DepLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepMax", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal DepMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DepMax
        {
            get
            {
                if (this.DepMaxValueSpecified)
                {
                    return this.DepMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepMaxValue = value.GetValueOrDefault();
                this.DepMaxValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=33, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [XmlElementAttribute("DigitalIssueExcept", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string DigitalIssueExcept { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DigitalIssueStatus", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short DigitalIssueStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DigitalIssueStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DigitalIssueStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DigitalIssueStatus
        {
            get
            {
                if (this.DigitalIssueStatusValueSpecified)
                {
                    return this.DigitalIssueStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DigitalIssueStatusValue = value.GetValueOrDefault();
                this.DigitalIssueStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=36, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("EmvChipProfile", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string EmvChipProfile { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=38, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ExtraEmboss", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string ExtraEmboss { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CardFeeCount> _feeCount;
        
        [XmlElementAttribute("FeeCount", Order=40, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardFeeCount> FeeCount
        {
            get
            {
                return _feeCount;
            }
            set
            {
                _feeCount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FeeCount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FeeCountSpecified
        {
            get
            {
                return ((this.FeeCount != null) 
                            && (this.FeeCount.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FileUpdateManagerException", Order=41, Form=XmlSchemaForm.Unqualified)]
        public short FileUpdateManagerExceptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FileUpdateManagerException property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FileUpdateManagerExceptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FileUpdateManagerException
        {
            get
            {
                if (this.FileUpdateManagerExceptionValueSpecified)
                {
                    return this.FileUpdateManagerExceptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FileUpdateManagerExceptionValue = value.GetValueOrDefault();
                this.FileUpdateManagerExceptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImageRefDate", Order=42, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ImageRefDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImageRefDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImageRefDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ImageRefDate
        {
            get
            {
                if (this.ImageRefDateValueSpecified)
                {
                    return this.ImageRefDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImageRefDateValue = value.GetValueOrDefault();
                this.ImageRefDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImageRefIssueCount", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short ImageRefIssueCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImageRefIssueCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImageRefIssueCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ImageRefIssueCount
        {
            get
            {
                if (this.ImageRefIssueCountValueSpecified)
                {
                    return this.ImageRefIssueCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImageRefIssueCountValue = value.GetValueOrDefault();
                this.ImageRefIssueCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ImageRefNumber", Order=44, Form=XmlSchemaForm.Unqualified)]
        public string ImageRefNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InstantIssue", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short InstantIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InstantIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InstantIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InstantIssue
        {
            get
            {
                if (this.InstantIssueValueSpecified)
                {
                    return this.InstantIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InstantIssueValue = value.GetValueOrDefault();
                this.InstantIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IssueCode", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short IssueCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IssueCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IssueCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IssueCode
        {
            get
            {
                if (this.IssueCodeValueSpecified)
                {
                    return this.IssueCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IssueCodeValue = value.GetValueOrDefault();
                this.IssueCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IssueDate", Order=47, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime IssueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IssueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IssueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> IssueDate
        {
            get
            {
                if (this.IssueDateValueSpecified)
                {
                    return this.IssueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IssueDateValue = value.GetValueOrDefault();
                this.IssueDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastAddrChgDate", Order=48, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastAddrChgDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastAddrChgDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastAddrChgDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastAddrChgDate
        {
            get
            {
                if (this.LastAddrChgDateValueSpecified)
                {
                    return this.LastAddrChgDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastAddrChgDateValue = value.GetValueOrDefault();
                this.LastAddrChgDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardLimit> _limit;
        
        [XmlElementAttribute("Limit", Order=49, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardLimit> Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _limit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Limit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitSpecified
        {
            get
            {
                return ((this.Limit != null) 
                            && (this.Limit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitAmount", Order=50, Form=XmlSchemaForm.Unqualified)]
        public decimal LimitAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LimitAmount
        {
            get
            {
                if (this.LimitAmountValueSpecified)
                {
                    return this.LimitAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitAmountValue = value.GetValueOrDefault();
                this.LimitAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardLimitCount> _limitCount;
        
        [XmlElementAttribute("LimitCount", Order=51, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardLimitCount> LimitCount
        {
            get
            {
                return _limitCount;
            }
            set
            {
                _limitCount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitCount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitCountSpecified
        {
            get
            {
                return ((this.LimitCount != null) 
                            && (this.LimitCount.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitDays", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short LimitDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LimitDays
        {
            get
            {
                if (this.LimitDaysValueSpecified)
                {
                    return this.LimitDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitDaysValue = value.GetValueOrDefault();
                this.LimitDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardLimitDescription> _limitDescription;
        
        [XmlElementAttribute("LimitDescription", Order=53, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardLimitDescription> LimitDescription
        {
            get
            {
                return _limitDescription;
            }
            set
            {
                _limitDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitDescriptionSpecified
        {
            get
            {
                return ((this.LimitDescription != null) 
                            && (this.LimitDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardLimitUsageAmount> _limitUsageAmount;
        
        [XmlElementAttribute("LimitUsageAmount", Order=54, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardLimitUsageAmount> LimitUsageAmount
        {
            get
            {
                return _limitUsageAmount;
            }
            set
            {
                _limitUsageAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LimitUsageAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitUsageAmountSpecified
        {
            get
            {
                return ((this.LimitUsageAmount != null) 
                            && (this.LimitUsageAmount.Count != 0));
            }
        }
        
        [XmlElementAttribute("LocId", Order=55, Form=XmlSchemaForm.Unqualified)]
        public string LocId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=56, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscAmount", Order=57, Form=XmlSchemaForm.Unqualified)]
        public decimal MiscAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MiscAmount
        {
            get
            {
                if (this.MiscAmountValueSpecified)
                {
                    return this.MiscAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscAmountValue = value.GetValueOrDefault();
                this.MiscAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscCount", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short MiscCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MiscCount
        {
            get
            {
                if (this.MiscCountValueSpecified)
                {
                    return this.MiscCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscCountValue = value.GetValueOrDefault();
                this.MiscCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscCountLimit", Order=59, Form=XmlSchemaForm.Unqualified)]
        public short MiscCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MiscCountLimit
        {
            get
            {
                if (this.MiscCountLimitValueSpecified)
                {
                    return this.MiscCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscCountLimitValue = value.GetValueOrDefault();
                this.MiscCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardMiscId> _miscId;
        
        [XmlElementAttribute("MiscId", Order=60, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardMiscId> MiscId
        {
            get
            {
                return _miscId;
            }
            set
            {
                _miscId = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MiscId collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MiscIdSpecified
        {
            get
            {
                return ((this.MiscId != null) 
                            && (this.MiscId.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscLimit", Order=61, Form=XmlSchemaForm.Unqualified)]
        public decimal MiscLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MiscLimit
        {
            get
            {
                if (this.MiscLimitValueSpecified)
                {
                    return this.MiscLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscLimitValue = value.GetValueOrDefault();
                this.MiscLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameType", Order=62, Form=XmlSchemaForm.Unqualified)]
        public short NameTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NameType
        {
            get
            {
                if (this.NameTypeValueSpecified)
                {
                    return this.NameTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameTypeValue = value.GetValueOrDefault();
                this.NameTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Number", Order=63, Form=XmlSchemaForm.Unqualified)]
        public string Number { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineCardIssue", Order=64, Form=XmlSchemaForm.Unqualified)]
        public short OnlineCardIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineCardIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineCardIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineCardIssue
        {
            get
            {
                if (this.OnlineCardIssueValueSpecified)
                {
                    return this.OnlineCardIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineCardIssueValue = value.GetValueOrDefault();
                this.OnlineCardIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineRushIssue", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short OnlineRushIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineRushIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineRushIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineRushIssue
        {
            get
            {
                if (this.OnlineRushIssueValueSpecified)
                {
                    return this.OnlineRushIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineRushIssueValue = value.GetValueOrDefault();
                this.OnlineRushIssueValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardPerItemLimit> _perItemLimit;
        
        [XmlElementAttribute("PerItemLimit", Order=66, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardPerItemLimit> PerItemLimit
        {
            get
            {
                return _perItemLimit;
            }
            set
            {
                _perItemLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PerItemLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PerItemLimitSpecified
        {
            get
            {
                return ((this.PerItemLimit != null) 
                            && (this.PerItemLimit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinActual", Order=67, Form=XmlSchemaForm.Unqualified)]
        public int PinActualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinActual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinActualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> PinActual
        {
            get
            {
                if (this.PinActualValueSpecified)
                {
                    return this.PinActualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinActualValue = value.GetValueOrDefault();
                this.PinActualValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PinEncrypted", Order=68, Form=XmlSchemaForm.Unqualified)]
        public string PinEncrypted { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinOffset", Order=69, Form=XmlSchemaForm.Unqualified)]
        public int PinOffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinOffset property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinOffsetValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> PinOffset
        {
            get
            {
                if (this.PinOffsetValueSpecified)
                {
                    return this.PinOffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinOffsetValue = value.GetValueOrDefault();
                this.PinOffsetValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinOrderDate", Order=70, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PinOrderDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinOrderDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinOrderDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PinOrderDate
        {
            get
            {
                if (this.PinOrderDateValueSpecified)
                {
                    return this.PinOrderDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinOrderDateValue = value.GetValueOrDefault();
                this.PinOrderDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinRetries", Order=71, Form=XmlSchemaForm.Unqualified)]
        public short PinRetriesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinRetries property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinRetriesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PinRetries
        {
            get
            {
                if (this.PinRetriesValueSpecified)
                {
                    return this.PinRetriesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinRetriesValue = value.GetValueOrDefault();
                this.PinRetriesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosAmount", Order=72, Form=XmlSchemaForm.Unqualified)]
        public decimal PosAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PosAmount
        {
            get
            {
                if (this.PosAmountValueSpecified)
                {
                    return this.PosAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosAmountValue = value.GetValueOrDefault();
                this.PosAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosCount", Order=73, Form=XmlSchemaForm.Unqualified)]
        public short PosCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PosCount
        {
            get
            {
                if (this.PosCountValueSpecified)
                {
                    return this.PosCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosCountValue = value.GetValueOrDefault();
                this.PosCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosCountLimit", Order=74, Form=XmlSchemaForm.Unqualified)]
        public short PosCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PosCountLimit
        {
            get
            {
                if (this.PosCountLimitValueSpecified)
                {
                    return this.PosCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosCountLimitValue = value.GetValueOrDefault();
                this.PosCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosLimit", Order=75, Form=XmlSchemaForm.Unqualified)]
        public decimal PosLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PosLimit
        {
            get
            {
                if (this.PosLimitValueSpecified)
                {
                    return this.PosLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosLimitValue = value.GetValueOrDefault();
                this.PosLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosTempLimit", Order=76, Form=XmlSchemaForm.Unqualified)]
        public decimal PosTempLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosTempLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosTempLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PosTempLimit
        {
            get
            {
                if (this.PosTempLimitValueSpecified)
                {
                    return this.PosTempLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosTempLimitValue = value.GetValueOrDefault();
                this.PosTempLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevActivationDate", Order=77, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PrevActivationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevActivationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevActivationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevActivationDate
        {
            get
            {
                if (this.PrevActivationDateValueSpecified)
                {
                    return this.PrevActivationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevActivationDateValue = value.GetValueOrDefault();
                this.PrevActivationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevExpirationDate", Order=78, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PrevExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevExpirationDate
        {
            get
            {
                if (this.PrevExpirationDateValueSpecified)
                {
                    return this.PrevExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevExpirationDateValue = value.GetValueOrDefault();
                this.PrevExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PrevNumber", Order=79, Form=XmlSchemaForm.Unqualified)]
        public string PrevNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevPinActual", Order=80, Form=XmlSchemaForm.Unqualified)]
        public int PrevPinActualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevPinActual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevPinActualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> PrevPinActual
        {
            get
            {
                if (this.PrevPinActualValueSpecified)
                {
                    return this.PrevPinActualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevPinActualValue = value.GetValueOrDefault();
                this.PrevPinActualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevPinOffset", Order=81, Form=XmlSchemaForm.Unqualified)]
        public int PrevPinOffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevPinOffset property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevPinOffsetValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> PrevPinOffset
        {
            get
            {
                if (this.PrevPinOffsetValueSpecified)
                {
                    return this.PrevPinOffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevPinOffsetValue = value.GetValueOrDefault();
                this.PrevPinOffsetValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PrevSuffix", Order=82, Form=XmlSchemaForm.Unqualified)]
        public string PrevSuffix { get; set; }
        
        [XmlElementAttribute("ReclassCode", Order=83, Form=XmlSchemaForm.Unqualified)]
        public string ReclassCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=84, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReissueCode", Order=85, Form=XmlSchemaForm.Unqualified)]
        public short ReissueCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReissueCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReissueCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReissueCode
        {
            get
            {
                if (this.ReissueCodeValueSpecified)
                {
                    return this.ReissueCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReissueCodeValue = value.GetValueOrDefault();
                this.ReissueCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReissueMonths", Order=86, Form=XmlSchemaForm.Unqualified)]
        public short ReissueMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReissueMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReissueMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReissueMonths
        {
            get
            {
                if (this.ReissueMonthsValueSpecified)
                {
                    return this.ReissueMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReissueMonthsValue = value.GetValueOrDefault();
                this.ReissueMonthsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SavId", Order=87, Form=XmlSchemaForm.Unqualified)]
        public string SavId { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<CardService> _service;
        
        [XmlElementAttribute("Service", Order=88, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardService> Service
        {
            get
            {
                return _service;
            }
            set
            {
                _service = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Service collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ServiceSpecified
        {
            get
            {
                return ((this.Service != null) 
                            && (this.Service.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SingleUsageMax", Order=89, Form=XmlSchemaForm.Unqualified)]
        public decimal SingleUsageMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SingleUsageMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SingleUsageMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SingleUsageMax
        {
            get
            {
                if (this.SingleUsageMaxValueSpecified)
                {
                    return this.SingleUsageMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SingleUsageMaxValue = value.GetValueOrDefault();
                this.SingleUsageMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=90, Form=XmlSchemaForm.Unqualified)]
        public short StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatusReason", Order=91, Form=XmlSchemaForm.Unqualified)]
        public short StatusReasonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatusReason property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusReasonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatusReason
        {
            get
            {
                if (this.StatusReasonValueSpecified)
                {
                    return this.StatusReasonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusReasonValue = value.GetValueOrDefault();
                this.StatusReasonValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Suffix", Order=92, Form=XmlSchemaForm.Unqualified)]
        public string Suffix { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TempLimitEndDate", Order=93, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime TempLimitEndDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TempLimitEndDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TempLimitEndDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> TempLimitEndDate
        {
            get
            {
                if (this.TempLimitEndDateValueSpecified)
                {
                    return this.TempLimitEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TempLimitEndDateValue = value.GetValueOrDefault();
                this.TempLimitEndDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TempLimitStartDate", Order=94, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime TempLimitStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TempLimitStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TempLimitStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> TempLimitStartDate
        {
            get
            {
                if (this.TempLimitStartDateValueSpecified)
                {
                    return this.TempLimitStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TempLimitStartDateValue = value.GetValueOrDefault();
                this.TempLimitStartDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=95, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsageAmount", Order=96, Form=XmlSchemaForm.Unqualified)]
        public decimal UsageAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsageAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsageAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UsageAmount
        {
            get
            {
                if (this.UsageAmountValueSpecified)
                {
                    return this.UsageAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsageAmountValue = value.GetValueOrDefault();
                this.UsageAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsageDate", Order=97, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UsageDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsageDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsageDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UsageDate
        {
            get
            {
                if (this.UsageDateValueSpecified)
                {
                    return this.UsageDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsageDateValue = value.GetValueOrDefault();
                this.UsageDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsageLimit", Order=98, Form=XmlSchemaForm.Unqualified)]
        public decimal UsageLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsageLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsageLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UsageLimit
        {
            get
            {
                if (this.UsageLimitValueSpecified)
                {
                    return this.UsageLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsageLimitValue = value.GetValueOrDefault();
                this.UsageLimitValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWarningCode> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=99, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWarningCode> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWarningExpiration> _warningExpiration;
        
        [XmlElementAttribute("WarningExpiration", Order=100, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWarningExpiration> WarningExpiration
        {
            get
            {
                return _warningExpiration;
            }
            set
            {
                _warningExpiration = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningExpiration collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningExpirationSpecified
        {
            get
            {
                return ((this.WarningExpiration != null) 
                            && (this.WarningExpiration.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckAmount", Order=101, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCheckAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCheckAmount
        {
            get
            {
                if (this.WdCheckAmountValueSpecified)
                {
                    return this.WdCheckAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckAmountValue = value.GetValueOrDefault();
                this.WdCheckAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckCount", Order=102, Form=XmlSchemaForm.Unqualified)]
        public short WdCheckCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WdCheckCount
        {
            get
            {
                if (this.WdCheckCountValueSpecified)
                {
                    return this.WdCheckCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckCountValue = value.GetValueOrDefault();
                this.WdCheckCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckCountLimit", Order=103, Form=XmlSchemaForm.Unqualified)]
        public short WdCheckCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WdCheckCountLimit
        {
            get
            {
                if (this.WdCheckCountLimitValueSpecified)
                {
                    return this.WdCheckCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckCountLimitValue = value.GetValueOrDefault();
                this.WdCheckCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckLimit", Order=104, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCheckLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCheckLimit
        {
            get
            {
                if (this.WdCheckLimitValueSpecified)
                {
                    return this.WdCheckLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckLimitValue = value.GetValueOrDefault();
                this.WdCheckLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckMax", Order=105, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCheckMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCheckMax
        {
            get
            {
                if (this.WdCheckMaxValueSpecified)
                {
                    return this.WdCheckMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckMaxValue = value.GetValueOrDefault();
                this.WdCheckMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferAmount", Order=106, Form=XmlSchemaForm.Unqualified)]
        public decimal XferAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> XferAmount
        {
            get
            {
                if (this.XferAmountValueSpecified)
                {
                    return this.XferAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferAmountValue = value.GetValueOrDefault();
                this.XferAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferCount", Order=107, Form=XmlSchemaForm.Unqualified)]
        public short XferCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> XferCount
        {
            get
            {
                if (this.XferCountValueSpecified)
                {
                    return this.XferCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferCountValue = value.GetValueOrDefault();
                this.XferCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferCountLimit", Order=108, Form=XmlSchemaForm.Unqualified)]
        public short XferCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> XferCountLimit
        {
            get
            {
                if (this.XferCountLimitValueSpecified)
                {
                    return this.XferCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferCountLimitValue = value.GetValueOrDefault();
                this.XferCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferLimit", Order=109, Form=XmlSchemaForm.Unqualified)]
        public decimal XferLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> XferLimit
        {
            get
            {
                if (this.XferLimitValueSpecified)
                {
                    return this.XferLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferLimitValue = value.GetValueOrDefault();
                this.XferLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferMax", Order=110, Form=XmlSchemaForm.Unqualified)]
        public decimal XferMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> XferMax
        {
            get
            {
                if (this.XferMaxValueSpecified)
                {
                    return this.XferMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferMaxValue = value.GetValueOrDefault();
                this.XferMaxValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=111, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=112)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
