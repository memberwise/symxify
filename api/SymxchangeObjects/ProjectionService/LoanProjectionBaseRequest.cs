//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ProjectionService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ProjectionService\generated-output -n ProjectionService
namespace ProjectionService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanProjectionBaseRequest", Namespace="http://www.symxchange.generated.symitar.com/noncrud/projection/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(CalculateLoanAmountRequest))]
    [XmlIncludeAttribute(typeof(CalculateLoanTermRequest))]
    [XmlIncludeAttribute(typeof(CalculatePaymentAmountRequest))]
    public partial class LoanProjectionBaseRequest
    {
        
        [XmlElementAttribute("Credentials", Order=0, Form=XmlSchemaForm.Unqualified)]
        public ProjectionService.CredentialsChoice Credentials { get; set; }
        
        [XmlElementAttribute("DeviceInformation", Order=1, Form=XmlSchemaForm.Unqualified)]
        public ProjectionService.DeviceInformation DeviceInformation { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestRate", Order=2, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestRateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> InterestRate
        {
            get
            {
                if (this.InterestRateValueSpecified)
                {
                    return this.InterestRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestRateValue = value.GetValueOrDefault();
                this.InterestRateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestType", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short InterestTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InterestType
        {
            get
            {
                if (this.InterestTypeValueSpecified)
                {
                    return this.InterestTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestTypeValue = value.GetValueOrDefault();
                this.InterestTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentFrequency", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short PaymentFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentFrequency
        {
            get
            {
                if (this.PaymentFrequencyValueSpecified)
                {
                    return this.PaymentFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentFrequencyValue = value.GetValueOrDefault();
                this.PaymentFrequencyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MAprPrepaidFinanceChg", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal MAprPrepaidFinanceChgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MAprPrepaidFinanceChg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MAprPrepaidFinanceChgValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MAprPrepaidFinanceChg
        {
            get
            {
                if (this.MAprPrepaidFinanceChgValueSpecified)
                {
                    return this.MAprPrepaidFinanceChgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MAprPrepaidFinanceChgValue = value.GetValueOrDefault();
                this.MAprPrepaidFinanceChgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MilitaryAprLoan", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool MilitaryAprLoanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MilitaryAprLoan property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MilitaryAprLoanValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MilitaryAprLoan
        {
            get
            {
                if (this.MilitaryAprLoanValueSpecified)
                {
                    return this.MilitaryAprLoanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MilitaryAprLoanValue = value.GetValueOrDefault();
                this.MilitaryAprLoanValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqCalculationMethod", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short DqCalculationMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqCalculationMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqCalculationMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DqCalculationMethod
        {
            get
            {
                if (this.DqCalculationMethodValueSpecified)
                {
                    return this.DqCalculationMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqCalculationMethodValue = value.GetValueOrDefault();
                this.DqCalculationMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDateAdvanceCode", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short DueDateAdvanceCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDateAdvanceCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDateAdvanceCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDateAdvanceCode
        {
            get
            {
                if (this.DueDateAdvanceCodeValueSpecified)
                {
                    return this.DueDateAdvanceCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDateAdvanceCodeValue = value.GetValueOrDefault();
                this.DueDateAdvanceCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanDate", Order=9, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LoanDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LoanDate
        {
            get
            {
                if (this.LoanDateValueSpecified)
                {
                    return this.LoanDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanDateValue = value.GetValueOrDefault();
                this.LoanDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentType", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short PaymentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentType
        {
            get
            {
                if (this.PaymentTypeValueSpecified)
                {
                    return this.PaymentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentTypeValue = value.GetValueOrDefault();
                this.PaymentTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalculationType", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short PaymentCalculationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalculationType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalculationTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentCalculationType
        {
            get
            {
                if (this.PaymentCalculationTypeValueSpecified)
                {
                    return this.PaymentCalculationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalculationTypeValue = value.GetValueOrDefault();
                this.PaymentCalculationTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizeSchedule", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short AmortizeScheduleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizeSchedule property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizeScheduleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizeSchedule
        {
            get
            {
                if (this.AmortizeScheduleValueSpecified)
                {
                    return this.AmortizeScheduleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizeScheduleValue = value.GetValueOrDefault();
                this.AmortizeScheduleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AmortizeScheduleType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short AmortizeScheduleTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmortizeScheduleType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AmortizeScheduleTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AmortizeScheduleType
        {
            get
            {
                if (this.AmortizeScheduleTypeValueSpecified)
                {
                    return this.AmortizeScheduleTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmortizeScheduleTypeValue = value.GetValueOrDefault();
                this.AmortizeScheduleTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentSkips", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short PaymentSkipsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentSkips property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentSkipsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentSkips
        {
            get
            {
                if (this.PaymentSkipsValueSpecified)
                {
                    return this.PaymentSkipsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentSkipsValue = value.GetValueOrDefault();
                this.PaymentSkipsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentSkipStartDay", Order=15, Form=XmlSchemaForm.Unqualified)]
        public short PaymentSkipStartDayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentSkipStartDay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentSkipStartDayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentSkipStartDay
        {
            get
            {
                if (this.PaymentSkipStartDayValueSpecified)
                {
                    return this.PaymentSkipStartDayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentSkipStartDayValue = value.GetValueOrDefault();
                this.PaymentSkipStartDayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay1", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short DueDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDay1
        {
            get
            {
                if (this.DueDay1ValueSpecified)
                {
                    return this.DueDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay1Value = value.GetValueOrDefault();
                this.DueDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay2", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short DueDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DueDay2
        {
            get
            {
                if (this.DueDay2ValueSpecified)
                {
                    return this.DueDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay2Value = value.GetValueOrDefault();
                this.DueDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FirstDueDate", Order=18, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime FirstDueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstDueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FirstDueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FirstDueDate
        {
            get
            {
                if (this.FirstDueDateValueSpecified)
                {
                    return this.FirstDueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstDueDateValue = value.GetValueOrDefault();
                this.FirstDueDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalloonDate", Order=19, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime BalloonDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalloonDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalloonDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BalloonDate
        {
            get
            {
                if (this.BalloonDateValueSpecified)
                {
                    return this.BalloonDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalloonDateValue = value.GetValueOrDefault();
                this.BalloonDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalloonAmount", Order=20, Form=XmlSchemaForm.Unqualified)]
        public decimal BalloonAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalloonAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalloonAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BalloonAmount
        {
            get
            {
                if (this.BalloonAmountValueSpecified)
                {
                    return this.BalloonAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalloonAmountValue = value.GetValueOrDefault();
                this.BalloonAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FirstInsuredBirthDate", Order=21, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime FirstInsuredBirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstInsuredBirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FirstInsuredBirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FirstInsuredBirthDate
        {
            get
            {
                if (this.FirstInsuredBirthDateValueSpecified)
                {
                    return this.FirstInsuredBirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstInsuredBirthDateValue = value.GetValueOrDefault();
                this.FirstInsuredBirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecondInsuredBirthDate", Order=22, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime SecondInsuredBirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondInsuredBirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecondInsuredBirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SecondInsuredBirthDate
        {
            get
            {
                if (this.SecondInsuredBirthDateValueSpecified)
                {
                    return this.SecondInsuredBirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecondInsuredBirthDateValue = value.GetValueOrDefault();
                this.SecondInsuredBirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InsuranceType", Order=23, Form=XmlSchemaForm.Unqualified)]
        public short InsuranceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InsuranceType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InsuranceTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InsuranceType
        {
            get
            {
                if (this.InsuranceTypeValueSpecified)
                {
                    return this.InsuranceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InsuranceTypeValue = value.GetValueOrDefault();
                this.InsuranceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowAmount", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal EscrowAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EscrowAmount
        {
            get
            {
                if (this.EscrowAmountValueSpecified)
                {
                    return this.EscrowAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowAmountValue = value.GetValueOrDefault();
                this.EscrowAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrepaidFinanceChg", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal PrepaidFinanceChgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrepaidFinanceChg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrepaidFinanceChgValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrepaidFinanceChg
        {
            get
            {
                if (this.PrepaidFinanceChgValueSpecified)
                {
                    return this.PrepaidFinanceChgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrepaidFinanceChgValue = value.GetValueOrDefault();
                this.PrepaidFinanceChgValueSpecified = value.HasValue;
            }
        }
        
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("MessageId", Namespace="http://www.symxchange.generated.symitar.com/symxcommon", Form=XmlSchemaForm.Qualified)]
        public string MessageId { get; set; }
    }
}
