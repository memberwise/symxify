//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\TransactionsService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\TransactionsService\generated-output -n TransactionsService
namespace TransactionsService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("StopCheckPaymentRequest", Namespace="http://www.symxchange.generated.symitar.com/noncrud/transactions/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class StopCheckPaymentRequest : TransactionsBaseRequest
    {
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// </summary>
        [MaxLengthAttribute(10)]
        [XmlElementAttribute("AccountNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccountNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [MaxLengthAttribute(20)]
        [XmlElementAttribute("DonorId", Order=1)]
        public string DonorId { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DonorType", Order=2)]
        public DonorIdType DonorTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DonorType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DonorTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DonorIdType> DonorType
        {
            get
            {
                if (this.DonorTypeValueSpecified)
                {
                    return this.DonorTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DonorTypeValue = value.GetValueOrDefault();
                this.DonorTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90000000000000.00.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "0.01", "90000000000000.00")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalAmount", Order=3)]
        public decimal TotalAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 90000000000000.00.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalAmount
        {
            get
            {
                if (this.TotalAmountValueSpecified)
                {
                    return this.TotalAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalAmountValue = value.GetValueOrDefault();
                this.TotalAmountValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 132.</para>
        /// </summary>
        [MinLengthAttribute(1)]
        [MaxLengthAttribute(132)]
        [XmlElementAttribute("Comment", Order=4)]
        public string Comment { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [RangeAttribute(typeof(short), "0", "9999")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=5)]
        public short CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [RangeAttribute(typeof(DateTime), "1900-01-01", "2078-12-31")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=6, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Payee", Order=7)]
        public PayeeInformation Payee { get; set; }
        
        [XmlElementAttribute("DraftNumbers", Order=8, Form=XmlSchemaForm.Unqualified)]
        public DraftNumbers DraftNumbers { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 2.</para>
        /// </summary>
        [MaxLengthAttribute(2)]
        [XmlElementAttribute("SourceCode", Order=9)]
        public string SourceCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurrenceRequested", Order=10)]
        public bool RecurrenceRequestedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurrenceRequested property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurrenceRequestedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecurrenceRequested
        {
            get
            {
                if (this.RecurrenceRequestedValueSpecified)
                {
                    return this.RecurrenceRequestedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurrenceRequestedValue = value.GetValueOrDefault();
                this.RecurrenceRequestedValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=11, Form=XmlSchemaForm.Unqualified)]
        public TransactionsService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=12)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StopCheckPaymentRequest" /> class.</para>
        /// </summary>
        public StopCheckPaymentRequest()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
