//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\PoweronService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\PoweronService\generated-output -n PowerOnService
namespace PowerOnService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("PromptResponse", Namespace="http://www.symxchange.generated.symitar.com/noncrud/poweron/dto")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class PromptResponse
    {
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 132.</para>
        /// </summary>
        [MaxLengthAttribute(132)]
        [XmlElementAttribute("RGAnsText", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string RgAnsText { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 3.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.999.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "0", "999.999")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RGAnsRate", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal RgAnsRateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RgAnsRate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RgAnsRateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 3.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.999.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RgAnsRate
        {
            get
            {
                if (this.RgAnsRateValueSpecified)
                {
                    return this.RgAnsRateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RgAnsRateValue = value.GetValueOrDefault();
                this.RgAnsRateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [RangeAttribute(typeof(DateTime), "1900-01-01", "2078-12-31")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RGAnsDate", Order=2, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RgAnsDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RgAnsDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RgAnsDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 1900-01-01.</para>
        /// <para xml:lang="en">Maximum inclusive value: 2078-12-31.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RgAnsDate
        {
            get
            {
                if (this.RgAnsDateValueSpecified)
                {
                    return this.RgAnsDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RgAnsDateValue = value.GetValueOrDefault();
                this.RgAnsDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RGAnsNum", Order=3, Form=XmlSchemaForm.Unqualified)]
        public int RgAnsNumValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RgAnsNum property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RgAnsNumValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> RgAnsNum
        {
            get
            {
                if (this.RgAnsNumValueSpecified)
                {
                    return this.RgAnsNumValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RgAnsNumValue = value.GetValueOrDefault();
                this.RgAnsNumValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "-999999999999.99", "999999999999.99")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RGAnsAmount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal RgAnsAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RgAnsAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RgAnsAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999.99.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RgAnsAmount
        {
            get
            {
                if (this.RgAnsAmountValueSpecified)
                {
                    return this.RgAnsAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RgAnsAmountValue = value.GetValueOrDefault();
                this.RgAnsAmountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=5, Form=XmlSchemaForm.Unqualified)]
        public PowerOnService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=6)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PromptResponse" /> class.</para>
        /// </summary>
        public PromptResponse()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
