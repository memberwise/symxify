//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\DealerService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\DealerService\generated-output -n DealerService
namespace DealerService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ReservePlan", Namespace="http://www.symxchange.generated.symitar.com/crud/dealer/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class ReservePlan
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Active", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short ActiveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Active property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Active
        {
            get
            {
                if (this.ActiveValueSpecified)
                {
                    return this.ActiveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveValue = value.GetValueOrDefault();
                this.ActiveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Balance", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal BalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Balance
        {
            get
            {
                if (this.BalanceValueSpecified)
                {
                    return this.BalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceValue = value.GetValueOrDefault();
                this.BalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffBalance", Order=2, Form=XmlSchemaForm.Unqualified)]
        public decimal ChargeOffBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChargeOffBalance
        {
            get
            {
                if (this.ChargeOffBalanceValueSpecified)
                {
                    return this.ChargeOffBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffBalanceValue = value.GetValueOrDefault();
                this.ChargeOffBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffDays", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short ChargeOffDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargeOffDays
        {
            get
            {
                if (this.ChargeOffDaysValueSpecified)
                {
                    return this.ChargeOffDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffDaysValue = value.GetValueOrDefault();
                this.ChargeOffDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffLoanCount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public int ChargeOffLoanCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffLoanCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffLoanCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ChargeOffLoanCount
        {
            get
            {
                if (this.ChargeOffLoanCountValueSpecified)
                {
                    return this.ChargeOffLoanCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffLoanCountValue = value.GetValueOrDefault();
                this.ChargeOffLoanCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffPmts", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short ChargeOffPmtsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffPmts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffPmtsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargeOffPmts
        {
            get
            {
                if (this.ChargeOffPmtsValueSpecified)
                {
                    return this.ChargeOffPmtsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffPmtsValue = value.GetValueOrDefault();
                this.ChargeOffPmtsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargebackBalance", Order=6, Form=XmlSchemaForm.Unqualified)]
        public decimal ChargebackBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargebackBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargebackBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChargebackBalance
        {
            get
            {
                if (this.ChargebackBalanceValueSpecified)
                {
                    return this.ChargebackBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargebackBalanceValue = value.GetValueOrDefault();
                this.ChargebackBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargebackCoOption", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short ChargebackCoOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargebackCoOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargebackCoOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargebackCoOption
        {
            get
            {
                if (this.ChargebackCoOptionValueSpecified)
                {
                    return this.ChargebackCoOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargebackCoOptionValue = value.GetValueOrDefault();
                this.ChargebackCoOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargebackPoOption", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short ChargebackPoOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargebackPoOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargebackPoOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ChargebackPoOption
        {
            get
            {
                if (this.ChargebackPoOptionValueSpecified)
                {
                    return this.ChargebackPoOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargebackPoOptionValue = value.GetValueOrDefault();
                this.ChargebackPoOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=9, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=10, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EarlyPayoffDays", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short EarlyPayoffDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EarlyPayoffDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EarlyPayoffDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EarlyPayoffDays
        {
            get
            {
                if (this.EarlyPayoffDaysValueSpecified)
                {
                    return this.EarlyPayoffDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EarlyPayoffDaysValue = value.GetValueOrDefault();
                this.EarlyPayoffDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EarlyPayoffPmts", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short EarlyPayoffPmtsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EarlyPayoffPmts property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EarlyPayoffPmtsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EarlyPayoffPmts
        {
            get
            {
                if (this.EarlyPayoffPmtsValueSpecified)
                {
                    return this.EarlyPayoffPmtsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EarlyPayoffPmtsValue = value.GetValueOrDefault();
                this.EarlyPayoffPmtsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=13, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=14, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldbackAmount", Order=15, Form=XmlSchemaForm.Unqualified)]
        public decimal HoldbackAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldbackAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldbackAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> HoldbackAmount
        {
            get
            {
                if (this.HoldbackAmountValueSpecified)
                {
                    return this.HoldbackAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldbackAmountValue = value.GetValueOrDefault();
                this.HoldbackAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldbackBalance", Order=16, Form=XmlSchemaForm.Unqualified)]
        public decimal HoldbackBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldbackBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldbackBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> HoldbackBalance
        {
            get
            {
                if (this.HoldbackBalanceValueSpecified)
                {
                    return this.HoldbackBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldbackBalanceValue = value.GetValueOrDefault();
                this.HoldbackBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldbackBalanceLS", Order=17, Form=XmlSchemaForm.Unqualified)]
        public decimal HoldbackBalanceLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldbackBalanceLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldbackBalanceLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> HoldbackBalanceLs
        {
            get
            {
                if (this.HoldbackBalanceLsValueSpecified)
                {
                    return this.HoldbackBalanceLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldbackBalanceLsValue = value.GetValueOrDefault();
                this.HoldbackBalanceLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldbackPercent", Order=18, Form=XmlSchemaForm.Unqualified)]
        public decimal HoldbackPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldbackPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldbackPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> HoldbackPercent
        {
            get
            {
                if (this.HoldbackPercentValueSpecified)
                {
                    return this.HoldbackPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldbackPercentValue = value.GetValueOrDefault();
                this.HoldbackPercentValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Id", Order=19, Form=XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=20, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanBalanceSlp", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal LoanBalanceSlpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanBalanceSlp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanBalanceSlpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LoanBalanceSlp
        {
            get
            {
                if (this.LoanBalanceSlpValueSpecified)
                {
                    return this.LoanBalanceSlpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanBalanceSlpValue = value.GetValueOrDefault();
                this.LoanBalanceSlpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCount", Order=22, Form=XmlSchemaForm.Unqualified)]
        public int LoanCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> LoanCount
        {
            get
            {
                if (this.LoanCountValueSpecified)
                {
                    return this.LoanCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCountValue = value.GetValueOrDefault();
                this.LoanCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCountSlp", Order=23, Form=XmlSchemaForm.Unqualified)]
        public int LoanCountSlpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCountSlp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCountSlpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> LoanCountSlp
        {
            get
            {
                if (this.LoanCountSlpValueSpecified)
                {
                    return this.LoanCountSlpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCountSlpValue = value.GetValueOrDefault();
                this.LoanCountSlpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MbrFeeAmount", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal MbrFeeAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MbrFeeAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MbrFeeAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MbrFeeAmount
        {
            get
            {
                if (this.MbrFeeAmountValueSpecified)
                {
                    return this.MbrFeeAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MbrFeeAmountValue = value.GetValueOrDefault();
                this.MbrFeeAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MemberFee", Order=25, Form=XmlSchemaForm.Unqualified)]
        public short MemberFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MemberFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MemberFee
        {
            get
            {
                if (this.MemberFeeValueSpecified)
                {
                    return this.MemberFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MemberFeeValue = value.GetValueOrDefault();
                this.MemberFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenDate", Order=26, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime OpenDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> OpenDate
        {
            get
            {
                if (this.OpenDateValueSpecified)
                {
                    return this.OpenDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenDateValue = value.GetValueOrDefault();
                this.OpenDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PlanAvailBalance", Order=27, Form=XmlSchemaForm.Unqualified)]
        public decimal PlanAvailBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlanAvailBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PlanAvailBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PlanAvailBalance
        {
            get
            {
                if (this.PlanAvailBalanceValueSpecified)
                {
                    return this.PlanAvailBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PlanAvailBalanceValue = value.GetValueOrDefault();
                this.PlanAvailBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=28, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Recourse", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short RecourseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Recourse property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecourseValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Recourse
        {
            get
            {
                if (this.RecourseValueSpecified)
                {
                    return this.RecourseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecourseValue = value.GetValueOrDefault();
                this.RecourseValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ReservePlanLoanList", Order=30, Form=XmlSchemaForm.Unqualified)]
        public ReservePlanLoanList ReservePlanLoanList { get; set; }
        
        [XmlElementAttribute("ReservePlanTrackingList", Order=31, Form=XmlSchemaForm.Unqualified)]
        public ReservePlanTrackingList ReservePlanTrackingList { get; set; }
        
        [XmlElementAttribute("ReservePlanTransactionList", Order=32, Form=XmlSchemaForm.Unqualified)]
        public ReservePlanTransactionList ReservePlanTransactionList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalAmortReserve", Order=33, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalAmortReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalAmortReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalAmortReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalAmortReserve
        {
            get
            {
                if (this.TotalAmortReserveValueSpecified)
                {
                    return this.TotalAmortReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalAmortReserveValue = value.GetValueOrDefault();
                this.TotalAmortReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalEarnedReserve", Order=34, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalEarnedReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalEarnedReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalEarnedReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalEarnedReserve
        {
            get
            {
                if (this.TotalEarnedReserveValueSpecified)
                {
                    return this.TotalEarnedReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalEarnedReserveValue = value.GetValueOrDefault();
                this.TotalEarnedReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalLoanBalance", Order=35, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalLoanBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalLoanBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalLoanBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalLoanBalance
        {
            get
            {
                if (this.TotalLoanBalanceValueSpecified)
                {
                    return this.TotalLoanBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalLoanBalanceValue = value.GetValueOrDefault();
                this.TotalLoanBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalUnearnedReserve", Order=36, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalUnearnedReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalUnearnedReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalUnearnedReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalUnearnedReserve
        {
            get
            {
                if (this.TotalUnearnedReserveValueSpecified)
                {
                    return this.TotalUnearnedReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalUnearnedReserveValue = value.GetValueOrDefault();
                this.TotalUnearnedReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalUpFrontReserve", Order=37, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalUpFrontReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalUpFrontReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalUpFrontReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalUpFrontReserve
        {
            get
            {
                if (this.TotalUpFrontReserveValueSpecified)
                {
                    return this.TotalUpFrontReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalUpFrontReserveValue = value.GetValueOrDefault();
                this.TotalUpFrontReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranPurgeDate", Order=38, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime TranPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> TranPurgeDate
        {
            get
            {
                if (this.TranPurgeDateValueSpecified)
                {
                    return this.TranPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranPurgeDateValue = value.GetValueOrDefault();
                this.TranPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlERsvNoChgD", Order=39, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlERsvNoChgDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlERsvNoChgD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlERsvNoChgDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlERsvNoChgD
        {
            get
            {
                if (this.TtlERsvNoChgDValueSpecified)
                {
                    return this.TtlERsvNoChgDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlERsvNoChgDValue = value.GetValueOrDefault();
                this.TtlERsvNoChgDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlERsvNoClsD", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlERsvNoClsDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlERsvNoClsD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlERsvNoClsDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlERsvNoClsD
        {
            get
            {
                if (this.TtlERsvNoClsDValueSpecified)
                {
                    return this.TtlERsvNoClsDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlERsvNoClsDValue = value.GetValueOrDefault();
                this.TtlERsvNoClsDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUeRsvNoChgD", Order=41, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUeRsvNoChgDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUeRsvNoChgD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUeRsvNoChgDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUeRsvNoChgD
        {
            get
            {
                if (this.TtlUeRsvNoChgDValueSpecified)
                {
                    return this.TtlUeRsvNoChgDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUeRsvNoChgDValue = value.GetValueOrDefault();
                this.TtlUeRsvNoChgDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUeRsvNoClsD", Order=42, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUeRsvNoClsDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUeRsvNoClsD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUeRsvNoClsDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUeRsvNoClsD
        {
            get
            {
                if (this.TtlUeRsvNoClsDValueSpecified)
                {
                    return this.TtlUeRsvNoClsDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUeRsvNoClsDValue = value.GetValueOrDefault();
                this.TtlUeRsvNoClsDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUfRsvNoChgD", Order=43, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUfRsvNoChgDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUfRsvNoChgD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUfRsvNoChgDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUfRsvNoChgD
        {
            get
            {
                if (this.TtlUfRsvNoChgDValueSpecified)
                {
                    return this.TtlUfRsvNoChgDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUfRsvNoChgDValue = value.GetValueOrDefault();
                this.TtlUfRsvNoChgDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUfRsvNoClsD", Order=44, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUfRsvNoClsDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUfRsvNoClsD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUfRsvNoClsDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUfRsvNoClsD
        {
            get
            {
                if (this.TtlUfRsvNoClsDValueSpecified)
                {
                    return this.TtlUfRsvNoClsDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUfRsvNoClsDValue = value.GetValueOrDefault();
                this.TtlUfRsvNoClsDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnpaidUpFrontReserve", Order=46, Form=XmlSchemaForm.Unqualified)]
        public decimal UnpaidUpFrontReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnpaidUpFrontReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnpaidUpFrontReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnpaidUpFrontReserve
        {
            get
            {
                if (this.UnpaidUpFrontReserveValueSpecified)
                {
                    return this.UnpaidUpFrontReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnpaidUpFrontReserveValue = value.GetValueOrDefault();
                this.UnpaidUpFrontReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UpFrontReserveAmt", Order=47, Form=XmlSchemaForm.Unqualified)]
        public decimal UpFrontReserveAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UpFrontReserveAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UpFrontReserveAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UpFrontReserveAmt
        {
            get
            {
                if (this.UpFrontReserveAmtValueSpecified)
                {
                    return this.UpFrontReserveAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UpFrontReserveAmtValue = value.GetValueOrDefault();
                this.UpFrontReserveAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UpFrontReservePercent", Order=48, Form=XmlSchemaForm.Unqualified)]
        public decimal UpFrontReservePercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UpFrontReservePercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UpFrontReservePercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UpFrontReservePercent
        {
            get
            {
                if (this.UpFrontReservePercentValueSpecified)
                {
                    return this.UpFrontReservePercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UpFrontReservePercentValue = value.GetValueOrDefault();
                this.UpFrontReservePercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=49, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=50, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount3", Order=51, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount3
        {
            get
            {
                if (this.UserAmount3ValueSpecified)
                {
                    return this.UserAmount3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount3Value = value.GetValueOrDefault();
                this.UserAmount3ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=52, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=53, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=54, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode1", Order=55, Form=XmlSchemaForm.Unqualified)]
        public short UserCode1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode1
        {
            get
            {
                if (this.UserCode1ValueSpecified)
                {
                    return this.UserCode1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode1Value = value.GetValueOrDefault();
                this.UserCode1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=56, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber1", Order=57, Form=XmlSchemaForm.Unqualified)]
        public int UserNumber1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumber1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> UserNumber1
        {
            get
            {
                if (this.UserNumber1ValueSpecified)
                {
                    return this.UserNumber1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumber1Value = value.GetValueOrDefault();
                this.UserNumber1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber2", Order=58, Form=XmlSchemaForm.Unqualified)]
        public int UserNumber2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumber2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> UserNumber2
        {
            get
            {
                if (this.UserNumber2ValueSpecified)
                {
                    return this.UserNumber2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumber2Value = value.GetValueOrDefault();
                this.UserNumber2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserRate1", Order=59, Form=XmlSchemaForm.Unqualified)]
        public decimal UserRate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserRate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserRate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserRate1
        {
            get
            {
                if (this.UserRate1ValueSpecified)
                {
                    return this.UserRate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserRate1Value = value.GetValueOrDefault();
                this.UserRate1ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=60, Form=XmlSchemaForm.Unqualified)]
        public DealerService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=61)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ReservePlan" /> class.</para>
        /// </summary>
        public ReservePlan()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
