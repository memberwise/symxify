//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("InventoryDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("InventoryDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(InventoryDefaultFields_2))]
    public partial class InventoryDefault_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Cost", Order=0, Form=XmlSchemaForm.Unqualified)]
        public decimal CostValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cost property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CostValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Cost
        {
            get
            {
                if (this.CostValueSpecified)
                {
                    return this.CostValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CostValue = value.GetValueOrDefault();
                this.CostValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FaceValue", Order=1, Form=XmlSchemaForm.Unqualified)]
        public decimal FaceValueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FaceValue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FaceValueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FaceValue
        {
            get
            {
                if (this.FaceValueValueSpecified)
                {
                    return this.FaceValueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FaceValueValue = value.GetValueOrDefault();
                this.FaceValueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InventoryType", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short InventoryTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InventoryType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InventoryTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InventoryType
        {
            get
            {
                if (this.InventoryTypeValueSpecified)
                {
                    return this.InventoryTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InventoryTypeValue = value.GetValueOrDefault();
                this.InventoryTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LocationCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public string LocationCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Price", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal PriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Price property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PriceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Price
        {
            get
            {
                if (this.PriceValueSpecified)
                {
                    return this.PriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PriceValue = value.GetValueOrDefault();
                this.PriceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Quantity", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short QuantityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Quantity property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QuantityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Quantity
        {
            get
            {
                if (this.QuantityValueSpecified)
                {
                    return this.QuantityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QuantityValue = value.GetValueOrDefault();
                this.QuantityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StandardFee", Order=6, Form=XmlSchemaForm.Unqualified)]
        public decimal StandardFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StandardFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StandardFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> StandardFee
        {
            get
            {
                if (this.StandardFeeValueSpecified)
                {
                    return this.StandardFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StandardFeeValue = value.GetValueOrDefault();
                this.StandardFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermFrequency", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short TermFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermFrequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermFrequencyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermFrequency
        {
            get
            {
                if (this.TermFrequencyValueSpecified)
                {
                    return this.TermFrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermFrequencyValue = value.GetValueOrDefault();
                this.TermFrequencyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TermPeriod", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short TermPeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TermPeriod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TermPeriodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TermPeriod
        {
            get
            {
                if (this.TermPeriodValueSpecified)
                {
                    return this.TermPeriodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TermPeriodValue = value.GetValueOrDefault();
                this.TermPeriodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=11, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=12)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InventoryDefault_2" /> class.</para>
        /// </summary>
        public InventoryDefault_2()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
