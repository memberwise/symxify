//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CardWiz", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CardWiz", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(CardWizFields_2))]
    public partial class CardWiz_2
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivateCardNoteCode", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short ActivateCardNoteCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivateCardNoteCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivateCardNoteCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ActivateCardNoteCode
        {
            get
            {
                if (this.ActivateCardNoteCodeValueSpecified)
                {
                    return this.ActivateCardNoteCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivateCardNoteCodeValue = value.GetValueOrDefault();
                this.ActivateCardNoteCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivateCardRestrctnLvl", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short ActivateCardRestrctnLvlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivateCardRestrctnLvl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivateCardRestrctnLvlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ActivateCardRestrctnLvl
        {
            get
            {
                if (this.ActivateCardRestrctnLvlValueSpecified)
                {
                    return this.ActivateCardRestrctnLvlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivateCardRestrctnLvlValue = value.GetValueOrDefault();
                this.ActivateCardRestrctnLvlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowCardActivation", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AllowCardActivationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowCardActivation property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowCardActivationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowCardActivation
        {
            get
            {
                if (this.AllowCardActivationValueSpecified)
                {
                    return this.AllowCardActivationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowCardActivationValue = value.GetValueOrDefault();
                this.AllowCardActivationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowCardCreation", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AllowCardCreationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowCardCreation property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowCardCreationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowCardCreation
        {
            get
            {
                if (this.AllowCardCreationValueSpecified)
                {
                    return this.AllowCardCreationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowCardCreationValue = value.GetValueOrDefault();
                this.AllowCardCreationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowCrossAccountAccess", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool AllowCrossAccountAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowCrossAccountAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowCrossAccountAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowCrossAccountAccess
        {
            get
            {
                if (this.AllowCrossAccountAccessValueSpecified)
                {
                    return this.AllowCrossAccountAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowCrossAccountAccessValue = value.GetValueOrDefault();
                this.AllowCrossAccountAccessValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowNewName", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool AllowNewNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowNewName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowNewNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowNewName
        {
            get
            {
                if (this.AllowNewNameValueSpecified)
                {
                    return this.AllowNewNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowNewNameValue = value.GetValueOrDefault();
                this.AllowNewNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AllowNonIndividualName", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AllowNonIndividualNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowNonIndividualName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AllowNonIndividualNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AllowNonIndividualName
        {
            get
            {
                if (this.AllowNonIndividualNameValueSpecified)
                {
                    return this.AllowNonIndividualNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AllowNonIndividualNameValue = value.GetValueOrDefault();
                this.AllowNonIndividualNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AutomaticallySetAccess", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool AutomaticallySetAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutomaticallySetAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AutomaticallySetAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AutomaticallySetAccess
        {
            get
            {
                if (this.AutomaticallySetAccessValueSpecified)
                {
                    return this.AutomaticallySetAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutomaticallySetAccessValue = value.GetValueOrDefault();
                this.AutomaticallySetAccessValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CaptureBlockCardNoteCode", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short CaptureBlockCardNoteCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CaptureBlockCardNoteCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CaptureBlockCardNoteCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CaptureBlockCardNoteCode
        {
            get
            {
                if (this.CaptureBlockCardNoteCodeValueSpecified)
                {
                    return this.CaptureBlockCardNoteCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CaptureBlockCardNoteCodeValue = value.GetValueOrDefault();
                this.CaptureBlockCardNoteCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CaptureBlockCardOptions", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short CaptureBlockCardOptionsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CaptureBlockCardOptions property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CaptureBlockCardOptionsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CaptureBlockCardOptions
        {
            get
            {
                if (this.CaptureBlockCardOptionsValueSpecified)
                {
                    return this.CaptureBlockCardOptionsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CaptureBlockCardOptionsValue = value.GetValueOrDefault();
                this.CaptureBlockCardOptionsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CardBlockCodes", Order=10, Form=XmlSchemaForm.Unqualified)]
        public string CardBlockCodes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardBlockRestrctnLvl", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short CardBlockRestrctnLvlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardBlockRestrctnLvl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardBlockRestrctnLvlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardBlockRestrctnLvl
        {
            get
            {
                if (this.CardBlockRestrctnLvlValueSpecified)
                {
                    return this.CardBlockRestrctnLvlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardBlockRestrctnLvlValue = value.GetValueOrDefault();
                this.CardBlockRestrctnLvlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardCreateRestrctnLvl", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short CardCreateRestrctnLvlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardCreateRestrctnLvl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardCreateRestrctnLvlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardCreateRestrctnLvl
        {
            get
            {
                if (this.CardCreateRestrctnLvlValueSpecified)
                {
                    return this.CardCreateRestrctnLvlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardCreateRestrctnLvlValue = value.GetValueOrDefault();
                this.CardCreateRestrctnLvlValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CardCreateRestrictWarnList", Order=13, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CardCreateRestrictWarnList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardCreationNoteCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short CardCreationNoteCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardCreationNoteCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardCreationNoteCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardCreationNoteCode
        {
            get
            {
                if (this.CardCreationNoteCodeValueSpecified)
                {
                    return this.CardCreationNoteCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardCreationNoteCodeValue = value.GetValueOrDefault();
                this.CardCreationNoteCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CardNumberFormat", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string CardNumberFormat { get; set; }
        
        [XmlElementAttribute("CardStatusReasonCodes", Order=16, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CardStatusReasonCodes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardSuffixHigh", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short CardSuffixHighValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardSuffixHigh property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardSuffixHighValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardSuffixHigh
        {
            get
            {
                if (this.CardSuffixHighValueSpecified)
                {
                    return this.CardSuffixHighValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardSuffixHighValue = value.GetValueOrDefault();
                this.CardSuffixHighValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardSuffixLow", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short CardSuffixLowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardSuffixLow property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardSuffixLowValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardSuffixLow
        {
            get
            {
                if (this.CardSuffixLowValueSpecified)
                {
                    return this.CardSuffixLowValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardSuffixLowValue = value.GetValueOrDefault();
                this.CardSuffixLowValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardType", Order=19, Form=XmlSchemaForm.Unqualified)]
        public short CardTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CardType
        {
            get
            {
                if (this.CardTypeValueSpecified)
                {
                    return this.CardTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardTypeValue = value.GetValueOrDefault();
                this.CardTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ChkTypes", Order=20, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ChkTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CopyShareLoanAccess", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short CopyShareLoanAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CopyShareLoanAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CopyShareLoanAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CopyShareLoanAccess
        {
            get
            {
                if (this.CopyShareLoanAccessValueSpecified)
                {
                    return this.CopyShareLoanAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CopyShareLoanAccessValue = value.GetValueOrDefault();
                this.CopyShareLoanAccessValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CreditCardTypes", Order=22, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap CreditCardTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Defined", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool DefinedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Defined property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DefinedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Defined
        {
            get
            {
                if (this.DefinedValueSpecified)
                {
                    return this.DefinedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DefinedValue = value.GetValueOrDefault();
                this.DefinedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DigitalIssue", Order=24, Form=XmlSchemaForm.Unqualified)]
        public short DigitalIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DigitalIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DigitalIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DigitalIssue
        {
            get
            {
                if (this.DigitalIssueValueSpecified)
                {
                    return this.DigitalIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DigitalIssueValue = value.GetValueOrDefault();
                this.DigitalIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayCardFields", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayCardFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayCardFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayCardFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayCardFields
        {
            get
            {
                if (this.DisplayCardFieldsValueSpecified)
                {
                    return this.DisplayCardFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayCardFieldsValue = value.GetValueOrDefault();
                this.DisplayCardFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayIssueCode", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayIssueCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayIssueCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayIssueCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayIssueCode
        {
            get
            {
                if (this.DisplayIssueCodeValueSpecified)
                {
                    return this.DisplayIssueCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayIssueCodeValue = value.GetValueOrDefault();
                this.DisplayIssueCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayNameFields", Order=27, Form=XmlSchemaForm.Unqualified)]
        public short DisplayNameFieldsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayNameFields property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayNameFieldsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DisplayNameFields
        {
            get
            {
                if (this.DisplayNameFieldsValueSpecified)
                {
                    return this.DisplayNameFieldsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayNameFieldsValue = value.GetValueOrDefault();
                this.DisplayNameFieldsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DisplayNewCardNumber", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool DisplayNewCardNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayNewCardNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DisplayNewCardNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DisplayNewCardNumber
        {
            get
            {
                if (this.DisplayNewCardNumberValueSpecified)
                {
                    return this.DisplayNewCardNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DisplayNewCardNumberValue = value.GetValueOrDefault();
                this.DisplayNewCardNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationMonths", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short ExpirationMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExpirationMonths
        {
            get
            {
                if (this.ExpirationMonthsValueSpecified)
                {
                    return this.ExpirationMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationMonthsValue = value.GetValueOrDefault();
                this.ExpirationMonthsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationMonthsHigh", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short ExpirationMonthsHighValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationMonthsHigh property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationMonthsHighValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExpirationMonthsHigh
        {
            get
            {
                if (this.ExpirationMonthsHighValueSpecified)
                {
                    return this.ExpirationMonthsHighValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationMonthsHighValue = value.GetValueOrDefault();
                this.ExpirationMonthsHighValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationMonthsLow", Order=31, Form=XmlSchemaForm.Unqualified)]
        public short ExpirationMonthsLowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationMonthsLow property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationMonthsLowValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ExpirationMonthsLow
        {
            get
            {
                if (this.ExpirationMonthsLowValueSpecified)
                {
                    return this.ExpirationMonthsLowValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationMonthsLowValue = value.GetValueOrDefault();
                this.ExpirationMonthsLowValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmLoanReferenceField", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool FmLoanReferenceFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmLoanReferenceField property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmLoanReferenceFieldValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FmLoanReferenceField
        {
            get
            {
                if (this.FmLoanReferenceFieldValueSpecified)
                {
                    return this.FmLoanReferenceFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmLoanReferenceFieldValue = value.GetValueOrDefault();
                this.FmLoanReferenceFieldValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ForceReissRestrictWarnList", Order=33, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap ForceReissRestrictWarnList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForceReissueCardNoteCode", Order=34, Form=XmlSchemaForm.Unqualified)]
        public short ForceReissueCardNoteCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForceReissueCardNoteCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForceReissueCardNoteCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ForceReissueCardNoteCode
        {
            get
            {
                if (this.ForceReissueCardNoteCodeValueSpecified)
                {
                    return this.ForceReissueCardNoteCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForceReissueCardNoteCodeValue = value.GetValueOrDefault();
                this.ForceReissueCardNoteCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForceReissueOptions", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short ForceReissueOptionsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForceReissueOptions property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForceReissueOptionsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ForceReissueOptions
        {
            get
            {
                if (this.ForceReissueOptionsValueSpecified)
                {
                    return this.ForceReissueOptionsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForceReissueOptionsValue = value.GetValueOrDefault();
                this.ForceReissueOptionsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ForceReissueRestrctnLvl", Order=36, Form=XmlSchemaForm.Unqualified)]
        public short ForceReissueRestrctnLvlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForceReissueRestrctnLvl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForceReissueRestrctnLvlValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ForceReissueRestrctnLvl
        {
            get
            {
                if (this.ForceReissueRestrctnLvlValueSpecified)
                {
                    return this.ForceReissueRestrctnLvlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForceReissueRestrctnLvlValue = value.GetValueOrDefault();
                this.ForceReissueRestrctnLvlValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InstantIssue", Order=37, Form=XmlSchemaForm.Unqualified)]
        public short InstantIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InstantIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InstantIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InstantIssue
        {
            get
            {
                if (this.InstantIssueValueSpecified)
                {
                    return this.InstantIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InstantIssueValue = value.GetValueOrDefault();
                this.InstantIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InstantIssueExpMonths", Order=38, Form=XmlSchemaForm.Unqualified)]
        public short InstantIssueExpMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InstantIssueExpMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InstantIssueExpMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InstantIssueExpMonths
        {
            get
            {
                if (this.InstantIssueExpMonthsValueSpecified)
                {
                    return this.InstantIssueExpMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InstantIssueExpMonthsValue = value.GetValueOrDefault();
                this.InstantIssueExpMonthsValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWizJointNameFields_2> _jointNameFields;
        
        [XmlElementAttribute("JointNameFields", Order=39, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWizJointNameFields_2> JointNameFields
        {
            get
            {
                return _jointNameFields;
            }
            set
            {
                _jointNameFields = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the JointNameFields collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool JointNameFieldsSpecified
        {
            get
            {
                return ((this.JointNameFields != null) 
                            && (this.JointNameFields.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CardWiz_2" /> class.</para>
        /// </summary>
        public CardWiz_2()
        {
            this._jointNameFields = new Collection<CardWizJointNameFields_2>();
            this._maxAllowedUserDef = new Collection<CardWizMaxAllowedUserDef_2>();
            this._userDefAccessType = new Collection<CardWizUserDefAccessType_2>();
            this._userDefAllowedTypes = new Collection<CardWizUserDefAllowedTypes_2>();
            this._userDefIdType = new Collection<CardWizUserDefIdType_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlElementAttribute("JointNameTypes", Order=40, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap JointNameTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LinkSharesLoans", Order=41, Form=XmlSchemaForm.Unqualified)]
        public short LinkSharesLoansValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LinkSharesLoans property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LinkSharesLoansValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LinkSharesLoans
        {
            get
            {
                if (this.LinkSharesLoansValueSpecified)
                {
                    return this.LinkSharesLoansValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LinkSharesLoansValue = value.GetValueOrDefault();
                this.LinkSharesLoansValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LoanTypes", Order=42, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LoanTypes { get; set; }
        
        [XmlElementAttribute("LocTypes", Order=43, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap LocTypes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAllowableChkIds", Order=44, Form=XmlSchemaForm.Unqualified)]
        public short MaxAllowableChkIdsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAllowableChkIds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAllowableChkIdsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxAllowableChkIds
        {
            get
            {
                if (this.MaxAllowableChkIdsValueSpecified)
                {
                    return this.MaxAllowableChkIdsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAllowableChkIdsValue = value.GetValueOrDefault();
                this.MaxAllowableChkIdsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAllowableCreditCardIds", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short MaxAllowableCreditCardIdsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAllowableCreditCardIds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAllowableCreditCardIdsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxAllowableCreditCardIds
        {
            get
            {
                if (this.MaxAllowableCreditCardIdsValueSpecified)
                {
                    return this.MaxAllowableCreditCardIdsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAllowableCreditCardIdsValue = value.GetValueOrDefault();
                this.MaxAllowableCreditCardIdsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAllowableLoanIds", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short MaxAllowableLoanIdsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAllowableLoanIds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAllowableLoanIdsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxAllowableLoanIds
        {
            get
            {
                if (this.MaxAllowableLoanIdsValueSpecified)
                {
                    return this.MaxAllowableLoanIdsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAllowableLoanIdsValue = value.GetValueOrDefault();
                this.MaxAllowableLoanIdsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAllowableLocIds", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short MaxAllowableLocIdsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAllowableLocIds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAllowableLocIdsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxAllowableLocIds
        {
            get
            {
                if (this.MaxAllowableLocIdsValueSpecified)
                {
                    return this.MaxAllowableLocIdsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAllowableLocIdsValue = value.GetValueOrDefault();
                this.MaxAllowableLocIdsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxAllowableSavIds", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short MaxAllowableSavIdsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAllowableSavIds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAllowableSavIdsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxAllowableSavIds
        {
            get
            {
                if (this.MaxAllowableSavIdsValueSpecified)
                {
                    return this.MaxAllowableSavIdsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAllowableSavIdsValue = value.GetValueOrDefault();
                this.MaxAllowableSavIdsValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWizMaxAllowedUserDef_2> _maxAllowedUserDef;
        
        [XmlElementAttribute("MaxAllowedUserDef", Order=49, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWizMaxAllowedUserDef_2> MaxAllowedUserDef
        {
            get
            {
                return _maxAllowedUserDef;
            }
            set
            {
                _maxAllowedUserDef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MaxAllowedUserDef collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MaxAllowedUserDefSpecified
        {
            get
            {
                return ((this.MaxAllowedUserDef != null) 
                            && (this.MaxAllowedUserDef.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxExtraEmbossLineLength", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short MaxExtraEmbossLineLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxExtraEmbossLineLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxExtraEmbossLineLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxExtraEmbossLineLength
        {
            get
            {
                if (this.MaxExtraEmbossLineLengthValueSpecified)
                {
                    return this.MaxExtraEmbossLineLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxExtraEmbossLineLengthValue = value.GetValueOrDefault();
                this.MaxExtraEmbossLineLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaxNameLength", Order=51, Form=XmlSchemaForm.Unqualified)]
        public short MaxNameLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNameLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxNameLengthValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaxNameLength
        {
            get
            {
                if (this.MaxNameLengthValueSpecified)
                {
                    return this.MaxNameLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxNameLengthValue = value.GetValueOrDefault();
                this.MaxNameLengthValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscId1Access", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short MiscId1AccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscId1Access property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscId1AccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MiscId1Access
        {
            get
            {
                if (this.MiscId1AccessValueSpecified)
                {
                    return this.MiscId1AccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscId1AccessValue = value.GetValueOrDefault();
                this.MiscId1AccessValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MiscId1Types", Order=53, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MiscId1Types { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscId2Access", Order=54, Form=XmlSchemaForm.Unqualified)]
        public short MiscId2AccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscId2Access property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscId2AccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MiscId2Access
        {
            get
            {
                if (this.MiscId2AccessValueSpecified)
                {
                    return this.MiscId2AccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscId2AccessValue = value.GetValueOrDefault();
                this.MiscId2AccessValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MiscId2Types", Order=55, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MiscId2Types { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscId3Access", Order=56, Form=XmlSchemaForm.Unqualified)]
        public short MiscId3AccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscId3Access property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscId3AccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MiscId3Access
        {
            get
            {
                if (this.MiscId3AccessValueSpecified)
                {
                    return this.MiscId3AccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscId3AccessValue = value.GetValueOrDefault();
                this.MiscId3AccessValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MiscId3Types", Order=57, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap MiscId3Types { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameRecordCopyOption", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short NameRecordCopyOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameRecordCopyOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameRecordCopyOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NameRecordCopyOption
        {
            get
            {
                if (this.NameRecordCopyOptionValueSpecified)
                {
                    return this.NameRecordCopyOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameRecordCopyOptionValue = value.GetValueOrDefault();
                this.NameRecordCopyOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextSequentialNumber", Order=59, Form=XmlSchemaForm.Unqualified)]
        public decimal NextSequentialNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextSequentialNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextSequentialNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NextSequentialNumber
        {
            get
            {
                if (this.NextSequentialNumberValueSpecified)
                {
                    return this.NextSequentialNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextSequentialNumberValue = value.GetValueOrDefault();
                this.NextSequentialNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextSequentialStep", Order=60, Form=XmlSchemaForm.Unqualified)]
        public short NextSequentialStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextSequentialStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextSequentialStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextSequentialStep
        {
            get
            {
                if (this.NextSequentialStepValueSpecified)
                {
                    return this.NextSequentialStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextSequentialStepValue = value.GetValueOrDefault();
                this.NextSequentialStepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextSuffixStep", Order=61, Form=XmlSchemaForm.Unqualified)]
        public short NextSuffixStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextSuffixStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextSuffixStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextSuffixStep
        {
            get
            {
                if (this.NextSuffixStepValueSpecified)
                {
                    return this.NextSuffixStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextSuffixStepValue = value.GetValueOrDefault();
                this.NextSuffixStepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NextSuffixinCardNumStep", Order=62, Form=XmlSchemaForm.Unqualified)]
        public short NextSuffixinCardNumStepValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NextSuffixinCardNumStep property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NextSuffixinCardNumStepValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NextSuffixinCardNumStep
        {
            get
            {
                if (this.NextSuffixinCardNumStepValueSpecified)
                {
                    return this.NextSuffixinCardNumStepValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NextSuffixinCardNumStepValue = value.GetValueOrDefault();
                this.NextSuffixinCardNumStepValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlExpDaysforForceReissue", Order=63, Form=XmlSchemaForm.Unqualified)]
        public short OnlExpDaysforForceReissueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlExpDaysforForceReissue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlExpDaysforForceReissueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlExpDaysforForceReissue
        {
            get
            {
                if (this.OnlExpDaysforForceReissueValueSpecified)
                {
                    return this.OnlExpDaysforForceReissueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlExpDaysforForceReissueValue = value.GetValueOrDefault();
                this.OnlExpDaysforForceReissueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineCardIssue", Order=64, Form=XmlSchemaForm.Unqualified)]
        public short OnlineCardIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineCardIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineCardIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineCardIssue
        {
            get
            {
                if (this.OnlineCardIssueValueSpecified)
                {
                    return this.OnlineCardIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineCardIssueValue = value.GetValueOrDefault();
                this.OnlineCardIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineReissueExpDateHigh", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short OnlineReissueExpDateHighValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineReissueExpDateHigh property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineReissueExpDateHighValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineReissueExpDateHigh
        {
            get
            {
                if (this.OnlineReissueExpDateHighValueSpecified)
                {
                    return this.OnlineReissueExpDateHighValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineReissueExpDateHighValue = value.GetValueOrDefault();
                this.OnlineReissueExpDateHighValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineReissueExpDateLow", Order=66, Form=XmlSchemaForm.Unqualified)]
        public short OnlineReissueExpDateLowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineReissueExpDateLow property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineReissueExpDateLowValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineReissueExpDateLow
        {
            get
            {
                if (this.OnlineReissueExpDateLowValueSpecified)
                {
                    return this.OnlineReissueExpDateLowValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineReissueExpDateLowValue = value.GetValueOrDefault();
                this.OnlineReissueExpDateLowValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineReissueMonths", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short OnlineReissueMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineReissueMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineReissueMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OnlineReissueMonths
        {
            get
            {
                if (this.OnlineReissueMonthsValueSpecified)
                {
                    return this.OnlineReissueMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineReissueMonthsValue = value.GetValueOrDefault();
                this.OnlineReissueMonthsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OnlineRushCardOptions", Order=68, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap OnlineRushCardOptions { get; set; }
        
        [XmlElementAttribute("OptionalSpecfile", Order=69, Form=XmlSchemaForm.Unqualified)]
        public string OptionalSpecfile { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinOffsetRandomGeneration", Order=70, Form=XmlSchemaForm.Unqualified)]
        public bool PinOffsetRandomGenerationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinOffsetRandomGeneration property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinOffsetRandomGenerationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinOffsetRandomGeneration
        {
            get
            {
                if (this.PinOffsetRandomGenerationValueSpecified)
                {
                    return this.PinOffsetRandomGenerationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinOffsetRandomGenerationValue = value.GetValueOrDefault();
                this.PinOffsetRandomGenerationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RandomNumberHigh", Order=71, Form=XmlSchemaForm.Unqualified)]
        public decimal RandomNumberHighValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RandomNumberHigh property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RandomNumberHighValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RandomNumberHigh
        {
            get
            {
                if (this.RandomNumberHighValueSpecified)
                {
                    return this.RandomNumberHighValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RandomNumberHighValue = value.GetValueOrDefault();
                this.RandomNumberHighValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RandomNumberLow", Order=72, Form=XmlSchemaForm.Unqualified)]
        public decimal RandomNumberLowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RandomNumberLow property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RandomNumberLowValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> RandomNumberLow
        {
            get
            {
                if (this.RandomNumberLowValueSpecified)
                {
                    return this.RandomNumberLowValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RandomNumberLowValue = value.GetValueOrDefault();
                this.RandomNumberLowValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReissueCardsWithSameNbr", Order=73, Form=XmlSchemaForm.Unqualified)]
        public short ReissueCardsWithSameNbrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReissueCardsWithSameNbr property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReissueCardsWithSameNbrValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReissueCardsWithSameNbr
        {
            get
            {
                if (this.ReissueCardsWithSameNbrValueSpecified)
                {
                    return this.ReissueCardsWithSameNbrValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReissueCardsWithSameNbrValue = value.GetValueOrDefault();
                this.ReissueCardsWithSameNbrValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RequiredFundingType", Order=74, Form=XmlSchemaForm.Unqualified)]
        public short RequiredFundingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequiredFundingType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RequiredFundingTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RequiredFundingType
        {
            get
            {
                if (this.RequiredFundingTypeValueSpecified)
                {
                    return this.RequiredFundingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RequiredFundingTypeValue = value.GetValueOrDefault();
                this.RequiredFundingTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RestorePrevExpActiveDate", Order=75, Form=XmlSchemaForm.Unqualified)]
        public short RestorePrevExpActiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestorePrevExpActiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RestorePrevExpActiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RestorePrevExpActiveDate
        {
            get
            {
                if (this.RestorePrevExpActiveDateValueSpecified)
                {
                    return this.RestorePrevExpActiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestorePrevExpActiveDateValue = value.GetValueOrDefault();
                this.RestorePrevExpActiveDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SavTypes", Order=76, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap SavTypes { get; set; }
        
        [XmlElementAttribute("SelectNamesFrom", Order=77, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.BitMap SelectNamesFrom { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServiceCode", Order=78, Form=XmlSchemaForm.Unqualified)]
        public short ServiceCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServiceCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ServiceCode
        {
            get
            {
                if (this.ServiceCodeValueSpecified)
                {
                    return this.ServiceCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceCodeValue = value.GetValueOrDefault();
                this.ServiceCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SetActivationDate", Order=79, Form=XmlSchemaForm.Unqualified)]
        public bool SetActivationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SetActivationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SetActivationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SetActivationDate
        {
            get
            {
                if (this.SetActivationDateValueSpecified)
                {
                    return this.SetActivationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SetActivationDateValue = value.GetValueOrDefault();
                this.SetActivationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SetCardStatustoIssued", Order=80, Form=XmlSchemaForm.Unqualified)]
        public bool SetCardStatustoIssuedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SetCardStatustoIssued property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SetCardStatustoIssuedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SetCardStatustoIssued
        {
            get
            {
                if (this.SetCardStatustoIssuedValueSpecified)
                {
                    return this.SetCardStatustoIssuedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SetCardStatustoIssuedValue = value.GetValueOrDefault();
                this.SetCardStatustoIssuedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SetCloseDate", Order=81, Form=XmlSchemaForm.Unqualified)]
        public bool SetCloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SetCloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SetCloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SetCloseDate
        {
            get
            {
                if (this.SetCloseDateValueSpecified)
                {
                    return this.SetCloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SetCloseDateValue = value.GetValueOrDefault();
                this.SetCloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SetEffectiveDate", Order=82, Form=XmlSchemaForm.Unqualified)]
        public bool SetEffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SetEffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SetEffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SetEffectiveDate
        {
            get
            {
                if (this.SetEffectiveDateValueSpecified)
                {
                    return this.SetEffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SetEffectiveDateValue = value.GetValueOrDefault();
                this.SetEffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SetEffectiveDateField", Order=83, Form=XmlSchemaForm.Unqualified)]
        public bool SetEffectiveDateFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SetEffectiveDateField property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SetEffectiveDateFieldValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SetEffectiveDateField
        {
            get
            {
                if (this.SetEffectiveDateFieldValueSpecified)
                {
                    return this.SetEffectiveDateFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SetEffectiveDateFieldValue = value.GetValueOrDefault();
                this.SetEffectiveDateFieldValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SetInstantIssueField", Order=84, Form=XmlSchemaForm.Unqualified)]
        public bool SetInstantIssueFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SetInstantIssueField property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SetInstantIssueFieldValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SetInstantIssueField
        {
            get
            {
                if (this.SetInstantIssueFieldValueSpecified)
                {
                    return this.SetInstantIssueFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SetInstantIssueFieldValue = value.GetValueOrDefault();
                this.SetInstantIssueFieldValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SuffixinCardNumberHigh", Order=85, Form=XmlSchemaForm.Unqualified)]
        public short SuffixinCardNumberHighValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SuffixinCardNumberHigh property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SuffixinCardNumberHighValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SuffixinCardNumberHigh
        {
            get
            {
                if (this.SuffixinCardNumberHighValueSpecified)
                {
                    return this.SuffixinCardNumberHighValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SuffixinCardNumberHighValue = value.GetValueOrDefault();
                this.SuffixinCardNumberHighValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SuffixinCardNumberLow", Order=86, Form=XmlSchemaForm.Unqualified)]
        public short SuffixinCardNumberLowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SuffixinCardNumberLow property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SuffixinCardNumberLowValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SuffixinCardNumberLow
        {
            get
            {
                if (this.SuffixinCardNumberLowValueSpecified)
                {
                    return this.SuffixinCardNumberLowValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SuffixinCardNumberLowValue = value.GetValueOrDefault();
                this.SuffixinCardNumberLowValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UniqueCardNumber", Order=87, Form=XmlSchemaForm.Unqualified)]
        public bool UniqueCardNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UniqueCardNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UniqueCardNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UniqueCardNumber
        {
            get
            {
                if (this.UniqueCardNumberValueSpecified)
                {
                    return this.UniqueCardNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UniqueCardNumberValue = value.GetValueOrDefault();
                this.UniqueCardNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseCardSuffixField", Order=88, Form=XmlSchemaForm.Unqualified)]
        public bool UseCardSuffixFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseCardSuffixField property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseCardSuffixFieldValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseCardSuffixField
        {
            get
            {
                if (this.UseCardSuffixFieldValueSpecified)
                {
                    return this.UseCardSuffixFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseCardSuffixFieldValue = value.GetValueOrDefault();
                this.UseCardSuffixFieldValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWizUserDefAccessType_2> _userDefAccessType;
        
        [XmlElementAttribute("UserDefAccessType", Order=89, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWizUserDefAccessType_2> UserDefAccessType
        {
            get
            {
                return _userDefAccessType;
            }
            set
            {
                _userDefAccessType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UserDefAccessType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UserDefAccessTypeSpecified
        {
            get
            {
                return ((this.UserDefAccessType != null) 
                            && (this.UserDefAccessType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWizUserDefAllowedTypes_2> _userDefAllowedTypes;
        
        [XmlElementAttribute("UserDefAllowedTypes", Order=90, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWizUserDefAllowedTypes_2> UserDefAllowedTypes
        {
            get
            {
                return _userDefAllowedTypes;
            }
            set
            {
                _userDefAllowedTypes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UserDefAllowedTypes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UserDefAllowedTypesSpecified
        {
            get
            {
                return ((this.UserDefAllowedTypes != null) 
                            && (this.UserDefAllowedTypes.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<CardWizUserDefIdType_2> _userDefIdType;
        
        [XmlElementAttribute("UserDefIdType", Order=91, Form=XmlSchemaForm.Unqualified)]
        public Collection<CardWizUserDefIdType_2> UserDefIdType
        {
            get
            {
                return _userDefIdType;
            }
            set
            {
                _userDefIdType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UserDefIdType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UserDefIdTypeSpecified
        {
            get
            {
                return ((this.UserDefIdType != null) 
                            && (this.UserDefIdType.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ValidateShareLoanAccess", Order=92, Form=XmlSchemaForm.Unqualified)]
        public bool ValidateShareLoanAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidateShareLoanAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValidateShareLoanAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ValidateShareLoanAccess
        {
            get
            {
                if (this.ValidateShareLoanAccessValueSpecified)
                {
                    return this.ValidateShareLoanAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValidateShareLoanAccessValue = value.GetValueOrDefault();
                this.ValidateShareLoanAccessValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=93, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=94)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
