//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CrsFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CrsFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class CrsFields
    {
        
        [XmlIgnoreAttribute()]
        private Collection<short> _bureauInfo;
        
        [XmlElementAttribute("BureauInfo", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> BureauInfo
        {
            get
            {
                return _bureauInfo;
            }
            set
            {
                _bureauInfo = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BureauInfo collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BureauInfoSpecified
        {
            get
            {
                return ((this.BureauInfo != null) 
                            && (this.BureauInfo.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CrsFields" /> class.</para>
        /// </summary>
        public CrsFields()
        {
            this._bureauInfo = new Collection<short>();
            this._chexSystemsVersion = new Collection<short>();
            this._dpBureauInfo = new Collection<short>();
            this._dpPassword = new Collection<short>();
            this._dpPasswordExpiration = new Collection<short>();
            this._dpSubscriberCode = new Collection<short>();
            this._optionalFeatureCode = new Collection<short>();
            this._password = new Collection<short>();
            this._passwordExpiration = new Collection<short>();
            this._responseFormat = new Collection<short>();
            this._riskModel = new Collection<short>();
            this._scoreModel = new Collection<short>();
            this._subscriberCode = new Collection<short>();
            this._testEnvironment = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _chexSystemsVersion;
        
        [XmlElementAttribute("ChexSystemsVersion", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ChexSystemsVersion
        {
            get
            {
                return _chexSystemsVersion;
            }
            set
            {
                _chexSystemsVersion = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ChexSystemsVersion collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ChexSystemsVersionSpecified
        {
            get
            {
                return ((this.ChexSystemsVersion != null) 
                            && (this.ChexSystemsVersion.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DefaultBureau", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool DefaultBureauValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultBureau property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DefaultBureauValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DefaultBureau
        {
            get
            {
                if (this.DefaultBureauValueSpecified)
                {
                    return this.DefaultBureauValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DefaultBureauValue = value.GetValueOrDefault();
                this.DefaultBureauValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dpBureauInfo;
        
        [XmlElementAttribute("DpBureauInfo", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DpBureauInfo
        {
            get
            {
                return _dpBureauInfo;
            }
            set
            {
                _dpBureauInfo = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DpBureauInfo collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DpBureauInfoSpecified
        {
            get
            {
                return ((this.DpBureauInfo != null) 
                            && (this.DpBureauInfo.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dpPassword;
        
        [XmlElementAttribute("DpPassword", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DpPassword
        {
            get
            {
                return _dpPassword;
            }
            set
            {
                _dpPassword = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DpPassword collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DpPasswordSpecified
        {
            get
            {
                return ((this.DpPassword != null) 
                            && (this.DpPassword.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dpPasswordExpiration;
        
        [XmlElementAttribute("DpPasswordExpiration", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DpPasswordExpiration
        {
            get
            {
                return _dpPasswordExpiration;
            }
            set
            {
                _dpPasswordExpiration = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DpPasswordExpiration collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DpPasswordExpirationSpecified
        {
            get
            {
                return ((this.DpPasswordExpiration != null) 
                            && (this.DpPasswordExpiration.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _dpSubscriberCode;
        
        [XmlElementAttribute("DpSubscriberCode", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DpSubscriberCode
        {
            get
            {
                return _dpSubscriberCode;
            }
            set
            {
                _dpSubscriberCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DpSubscriberCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DpSubscriberCodeSpecified
        {
            get
            {
                return ((this.DpSubscriberCode != null) 
                            && (this.DpSubscriberCode.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HawkIndicator", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool HawkIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HawkIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HawkIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HawkIndicator
        {
            get
            {
                if (this.HawkIndicatorValueSpecified)
                {
                    return this.HawkIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HawkIndicatorValue = value.GetValueOrDefault();
                this.HawkIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeIdvReport", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeIdvReportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeIdvReport property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeIdvReportValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeIdvReport
        {
            get
            {
                if (this.IncludeIdvReportValueSpecified)
                {
                    return this.IncludeIdvReportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeIdvReportValue = value.GetValueOrDefault();
                this.IncludeIdvReportValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeNewAccountChexReport", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeNewAccountChexReportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeNewAccountChexReport property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeNewAccountChexReportValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeNewAccountChexReport
        {
            get
            {
                if (this.IncludeNewAccountChexReportValueSpecified)
                {
                    return this.IncludeNewAccountChexReportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeNewAccountChexReportValue = value.GetValueOrDefault();
                this.IncludeNewAccountChexReportValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeOfacReport", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeOfacReportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeOfacReport property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeOfacReportValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeOfacReport
        {
            get
            {
                if (this.IncludeOfacReportValueSpecified)
                {
                    return this.IncludeOfacReportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeOfacReportValue = value.GetValueOrDefault();
                this.IncludeOfacReportValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncludeQualiFileReport", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool IncludeQualiFileReportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncludeQualiFileReport property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncludeQualiFileReportValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IncludeQualiFileReport
        {
            get
            {
                if (this.IncludeQualiFileReportValueSpecified)
                {
                    return this.IncludeQualiFileReportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncludeQualiFileReportValue = value.GetValueOrDefault();
                this.IncludeQualiFileReportValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InternetPassword", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool InternetPasswordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InternetPassword property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InternetPasswordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InternetPassword
        {
            get
            {
                if (this.InternetPasswordValueSpecified)
                {
                    return this.InternetPasswordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InternetPasswordValue = value.GetValueOrDefault();
                this.InternetPasswordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InternetPasswordExpiration", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool InternetPasswordExpirationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InternetPasswordExpiration property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InternetPasswordExpirationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InternetPasswordExpiration
        {
            get
            {
                if (this.InternetPasswordExpirationValueSpecified)
                {
                    return this.InternetPasswordExpirationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InternetPasswordExpirationValue = value.GetValueOrDefault();
                this.InternetPasswordExpirationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InternetUserId", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool InternetUserIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InternetUserId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InternetUserIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InternetUserId
        {
            get
            {
                if (this.InternetUserIdValueSpecified)
                {
                    return this.InternetUserIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InternetUserIdValue = value.GetValueOrDefault();
                this.InternetUserIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IpAddress", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool IpAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IpAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IpAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IpAddress
        {
            get
            {
                if (this.IpAddressValueSpecified)
                {
                    return this.IpAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IpAddressValue = value.GetValueOrDefault();
                this.IpAddressValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LookType", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool LookTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LookType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LookTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LookType
        {
            get
            {
                if (this.LookTypeValueSpecified)
                {
                    return this.LookTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LookTypeValue = value.GetValueOrDefault();
                this.LookTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OperatorCode", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool OperatorCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OperatorCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OperatorCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OperatorCode
        {
            get
            {
                if (this.OperatorCodeValueSpecified)
                {
                    return this.OperatorCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OperatorCodeValue = value.GetValueOrDefault();
                this.OperatorCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _optionalFeatureCode;
        
        [XmlElementAttribute("OptionalFeatureCode", Order=18, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> OptionalFeatureCode
        {
            get
            {
                return _optionalFeatureCode;
            }
            set
            {
                _optionalFeatureCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OptionalFeatureCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OptionalFeatureCodeSpecified
        {
            get
            {
                return ((this.OptionalFeatureCode != null) 
                            && (this.OptionalFeatureCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _password;
        
        [XmlElementAttribute("Password", Order=19, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Password
        {
            get
            {
                return _password;
            }
            set
            {
                _password = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Password collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PasswordSpecified
        {
            get
            {
                return ((this.Password != null) 
                            && (this.Password.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _passwordExpiration;
        
        [XmlElementAttribute("PasswordExpiration", Order=20, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PasswordExpiration
        {
            get
            {
                return _passwordExpiration;
            }
            set
            {
                _passwordExpiration = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PasswordExpiration collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PasswordExpirationSpecified
        {
            get
            {
                return ((this.PasswordExpiration != null) 
                            && (this.PasswordExpiration.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _responseFormat;
        
        [XmlElementAttribute("ResponseFormat", Order=21, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ResponseFormat
        {
            get
            {
                return _responseFormat;
            }
            set
            {
                _responseFormat = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ResponseFormat collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ResponseFormatSpecified
        {
            get
            {
                return ((this.ResponseFormat != null) 
                            && (this.ResponseFormat.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _riskModel;
        
        [XmlElementAttribute("RiskModel", Order=22, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RiskModel
        {
            get
            {
                return _riskModel;
            }
            set
            {
                _riskModel = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RiskModel collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RiskModelSpecified
        {
            get
            {
                return ((this.RiskModel != null) 
                            && (this.RiskModel.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _scoreModel;
        
        [XmlElementAttribute("ScoreModel", Order=23, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ScoreModel
        {
            get
            {
                return _scoreModel;
            }
            set
            {
                _scoreModel = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ScoreModel collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ScoreModelSpecified
        {
            get
            {
                return ((this.ScoreModel != null) 
                            && (this.ScoreModel.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ServiceBureauIndicator", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool ServiceBureauIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceBureauIndicator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ServiceBureauIndicatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ServiceBureauIndicator
        {
            get
            {
                if (this.ServiceBureauIndicatorValueSpecified)
                {
                    return this.ServiceBureauIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceBureauIndicatorValue = value.GetValueOrDefault();
                this.ServiceBureauIndicatorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StrategyType", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool StrategyTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StrategyType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StrategyTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StrategyType
        {
            get
            {
                if (this.StrategyTypeValueSpecified)
                {
                    return this.StrategyTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StrategyTypeValue = value.GetValueOrDefault();
                this.StrategyTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _subscriberCode;
        
        [XmlElementAttribute("SubscriberCode", Order=26, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> SubscriberCode
        {
            get
            {
                return _subscriberCode;
            }
            set
            {
                _subscriberCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SubscriberCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SubscriberCodeSpecified
        {
            get
            {
                return ((this.SubscriberCode != null) 
                            && (this.SubscriberCode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _testEnvironment;
        
        [XmlElementAttribute("TestEnvironment", Order=27, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TestEnvironment
        {
            get
            {
                return _testEnvironment;
            }
            set
            {
                _testEnvironment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TestEnvironment collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TestEnvironmentSpecified
        {
            get
            {
                return ((this.TestEnvironment != null) 
                            && (this.TestEnvironment.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseCrsParameters", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool UseCrsParametersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseCrsParameters property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseCrsParametersValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseCrsParameters
        {
            get
            {
                if (this.UseCrsParametersValueSpecified)
                {
                    return this.UseCrsParametersValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseCrsParametersValue = value.GetValueOrDefault();
                this.UseCrsParametersValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseType", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool UseTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseType
        {
            get
            {
                if (this.UseTypeValueSpecified)
                {
                    return this.UseTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseTypeValue = value.GetValueOrDefault();
                this.UseTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserId", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool UserIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserId
        {
            get
            {
                if (this.UserIdValueSpecified)
                {
                    return this.UserIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserIdValue = value.GetValueOrDefault();
                this.UserIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XPNSelectCheckCode", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool XpnSelectCheckCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XpnSelectCheckCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XpnSelectCheckCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XpnSelectCheckCode
        {
            get
            {
                if (this.XpnSelectCheckCodeValueSpecified)
                {
                    return this.XpnSelectCheckCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XpnSelectCheckCodeValue = value.GetValueOrDefault();
                this.XpnSelectCheckCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=32, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=33)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
