//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("UserFmFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class UserFmFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AccountVerification", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AccountVerificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccountVerification property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AccountVerificationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AccountVerification
        {
            get
            {
                if (this.AccountVerificationValueSpecified)
                {
                    return this.AccountVerificationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AccountVerificationValue = value.GetValueOrDefault();
                this.AccountVerificationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivPurgeDate", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool ActivPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ActivPurgeDate
        {
            get
            {
                if (this.ActivPurgeDateValueSpecified)
                {
                    return this.ActivPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivPurgeDateValue = value.GetValueOrDefault();
                this.ActivPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveMode", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool ActiveModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ActiveMode
        {
            get
            {
                if (this.ActiveModeValueSpecified)
                {
                    return this.ActiveModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveModeValue = value.GetValueOrDefault();
                this.ActiveModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ArchiveDate", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool ArchiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ArchiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ArchiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ArchiveDate
        {
            get
            {
                if (this.ArchiveDateValueSpecified)
                {
                    return this.ArchiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ArchiveDateValue = value.GetValueOrDefault();
                this.ArchiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AssignedBranch", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool AssignedBranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AssignedBranch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AssignedBranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AssignedBranch
        {
            get
            {
                if (this.AssignedBranchValueSpecified)
                {
                    return this.AssignedBranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AssignedBranchValue = value.GetValueOrDefault();
                this.AssignedBranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CasTrackingCode", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool CasTrackingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CasTrackingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CasTrackingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CasTrackingCode
        {
            get
            {
                if (this.CasTrackingCodeValueSpecified)
                {
                    return this.CasTrackingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CasTrackingCodeValue = value.GetValueOrDefault();
                this.CasTrackingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckTapeCols", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool CheckTapeColsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckTapeCols property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckTapeColsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckTapeCols
        {
            get
            {
                if (this.CheckTapeColsValueSpecified)
                {
                    return this.CheckTapeColsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckTapeColsValue = value.GetValueOrDefault();
                this.CheckTapeColsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConfigurationGroup", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool ConfigurationGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConfigurationGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConfigurationGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ConfigurationGroup
        {
            get
            {
                if (this.ConfigurationGroupValueSpecified)
                {
                    return this.ConfigurationGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConfigurationGroupValue = value.GetValueOrDefault();
                this.ConfigurationGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DeptName", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool DeptNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeptName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeptNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DeptName
        {
            get
            {
                if (this.DeptNameValueSpecified)
                {
                    return this.DeptNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeptNameValue = value.GetValueOrDefault();
                this.DeptNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Directory", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool DirectoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Directory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DirectoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Directory
        {
            get
            {
                if (this.DirectoryValueSpecified)
                {
                    return this.DirectoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DirectoryValue = value.GetValueOrDefault();
                this.DirectoryValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _displayItem;
        
        [XmlElementAttribute("DisplayItem", Order=10, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> DisplayItem
        {
            get
            {
                return _displayItem;
            }
            set
            {
                _displayItem = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DisplayItem collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DisplayItemSpecified
        {
            get
            {
                return ((this.DisplayItem != null) 
                            && (this.DisplayItem.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="UserFmFields" /> class.</para>
        /// </summary>
        public UserFmFields()
        {
            this._displayItem = new Collection<short>();
            this._functions = new Collection<short>();
            this._note2 = new Collection<short>();
            this._previousPasswordHash1 = new Collection<short>();
            this._previousPasswordHash2 = new Collection<short>();
            this._previousPasswordHash3 = new Collection<short>();
            this._previousPasswordHash4 = new Collection<short>();
            this._previousPasswordMode = new Collection<short>();
            this._priorDayTapeTotal = new Collection<short>();
            this._privilege = new Collection<short>();
            this._privilegeGroup = new Collection<short>();
            this._restrictedAccounts = new Collection<short>();
            this._securityAmount = new Collection<short>();
            this._securityCode = new Collection<short>();
            this._tapeTotal = new Collection<short>();
            this._workList = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Email", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool EmailValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Email property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmailValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Email
        {
            get
            {
                if (this.EmailValueSpecified)
                {
                    return this.EmailValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmailValue = value.GetValueOrDefault();
                this.EmailValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Extension", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool ExtensionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Extension property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExtensionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Extension
        {
            get
            {
                if (this.ExtensionValueSpecified)
                {
                    return this.ExtensionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExtensionValue = value.GetValueOrDefault();
                this.ExtensionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _functions;
        
        [XmlElementAttribute("Functions", Order=13, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Functions
        {
            get
            {
                return _functions;
            }
            set
            {
                _functions = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Functions collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionsSpecified
        {
            get
            {
                return ((this.Functions != null) 
                            && (this.Functions.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvalidPasswordAttemptCount", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool InvalidPasswordAttemptCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvalidPasswordAttemptCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvalidPasswordAttemptCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvalidPasswordAttemptCount
        {
            get
            {
                if (this.InvalidPasswordAttemptCountValueSpecified)
                {
                    return this.InvalidPasswordAttemptCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvalidPasswordAttemptCountValue = value.GetValueOrDefault();
                this.InvalidPasswordAttemptCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InvalidPinAttemptCount", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool InvalidPinAttemptCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InvalidPinAttemptCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InvalidPinAttemptCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InvalidPinAttemptCount
        {
            get
            {
                if (this.InvalidPinAttemptCountValueSpecified)
                {
                    return this.InvalidPinAttemptCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InvalidPinAttemptCountValue = value.GetValueOrDefault();
                this.InvalidPinAttemptCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("JobFunction", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool JobFunctionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the JobFunction property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool JobFunctionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> JobFunction
        {
            get
            {
                if (this.JobFunctionValueSpecified)
                {
                    return this.JobFunctionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.JobFunctionValue = value.GetValueOrDefault();
                this.JobFunctionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("JobTitle", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool JobTitleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the JobTitle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool JobTitleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> JobTitle
        {
            get
            {
                if (this.JobTitleValueSpecified)
                {
                    return this.JobTitleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.JobTitleValue = value.GetValueOrDefault();
                this.JobTitleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastCheckSeq", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool LastCheckSeqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastCheckSeq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastCheckSeqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastCheckSeq
        {
            get
            {
                if (this.LastCheckSeqValueSpecified)
                {
                    return this.LastCheckSeqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastCheckSeqValue = value.GetValueOrDefault();
                this.LastCheckSeqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastConsole", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool LastConsoleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastConsole property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastConsoleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastConsole
        {
            get
            {
                if (this.LastConsoleValueSpecified)
                {
                    return this.LastConsoleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastConsoleValue = value.GetValueOrDefault();
                this.LastConsoleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastInvalidPasswordDate", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool LastInvalidPasswordDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastInvalidPasswordDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastInvalidPasswordDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastInvalidPasswordDate
        {
            get
            {
                if (this.LastInvalidPasswordDateValueSpecified)
                {
                    return this.LastInvalidPasswordDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastInvalidPasswordDateValue = value.GetValueOrDefault();
                this.LastInvalidPasswordDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastInvalidPasswordTime", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool LastInvalidPasswordTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastInvalidPasswordTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastInvalidPasswordTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastInvalidPasswordTime
        {
            get
            {
                if (this.LastInvalidPasswordTimeValueSpecified)
                {
                    return this.LastInvalidPasswordTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastInvalidPasswordTimeValue = value.GetValueOrDefault();
                this.LastInvalidPasswordTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastInvalidPinDate", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool LastInvalidPinDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastInvalidPinDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastInvalidPinDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastInvalidPinDate
        {
            get
            {
                if (this.LastInvalidPinDateValueSpecified)
                {
                    return this.LastInvalidPinDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastInvalidPinDateValue = value.GetValueOrDefault();
                this.LastInvalidPinDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastInvalidPinTime", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool LastInvalidPinTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastInvalidPinTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastInvalidPinTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastInvalidPinTime
        {
            get
            {
                if (this.LastInvalidPinTimeValueSpecified)
                {
                    return this.LastInvalidPinTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastInvalidPinTimeValue = value.GetValueOrDefault();
                this.LastInvalidPinTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastLogonDate", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool LastLogonDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastLogonDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastLogonDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastLogonDate
        {
            get
            {
                if (this.LastLogonDateValueSpecified)
                {
                    return this.LastLogonDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastLogonDateValue = value.GetValueOrDefault();
                this.LastLogonDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastLogonTime", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool LastLogonTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastLogonTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastLogonTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastLogonTime
        {
            get
            {
                if (this.LastLogonTimeValueSpecified)
                {
                    return this.LastLogonTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastLogonTimeValue = value.GetValueOrDefault();
                this.LastLogonTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Location", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool LocationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Location
        {
            get
            {
                if (this.LocationValueSpecified)
                {
                    return this.LocationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocationValue = value.GetValueOrDefault();
                this.LocationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ManagersName", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool ManagersNameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ManagersName property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ManagersNameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ManagersName
        {
            get
            {
                if (this.ManagersNameValueSpecified)
                {
                    return this.ManagersNameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ManagersNameValue = value.GetValueOrDefault();
                this.ManagersNameValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Name", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool NameValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Name property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Name
        {
            get
            {
                if (this.NameValueSpecified)
                {
                    return this.NameValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameValue = value.GetValueOrDefault();
                this.NameValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _note2;
        
        [XmlElementAttribute("Note2", Order=29, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Note2
        {
            get
            {
                return _note2;
            }
            set
            {
                _note2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Note2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Note2Specified
        {
            get
            {
                return ((this.Note2 != null) 
                            && (this.Note2.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Number", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool NumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Number
        {
            get
            {
                if (this.NumberValueSpecified)
                {
                    return this.NumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberValue = value.GetValueOrDefault();
                this.NumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineAccess", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool OnlineAccessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineAccess property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineAccessValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OnlineAccess
        {
            get
            {
                if (this.OnlineAccessValueSpecified)
                {
                    return this.OnlineAccessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineAccessValue = value.GetValueOrDefault();
                this.OnlineAccessValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordChgDate", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordChgDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordChgDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordChgDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordChgDate
        {
            get
            {
                if (this.PasswordChgDateValueSpecified)
                {
                    return this.PasswordChgDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordChgDateValue = value.GetValueOrDefault();
                this.PasswordChgDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordHash1", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordHash1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordHash1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordHash1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordHash1
        {
            get
            {
                if (this.PasswordHash1ValueSpecified)
                {
                    return this.PasswordHash1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordHash1Value = value.GetValueOrDefault();
                this.PasswordHash1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordHash2", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordHash2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordHash2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordHash2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordHash2
        {
            get
            {
                if (this.PasswordHash2ValueSpecified)
                {
                    return this.PasswordHash2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordHash2Value = value.GetValueOrDefault();
                this.PasswordHash2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordHash3", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordHash3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordHash3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordHash3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordHash3
        {
            get
            {
                if (this.PasswordHash3ValueSpecified)
                {
                    return this.PasswordHash3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordHash3Value = value.GetValueOrDefault();
                this.PasswordHash3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordHash4", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordHash4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordHash4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordHash4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordHash4
        {
            get
            {
                if (this.PasswordHash4ValueSpecified)
                {
                    return this.PasswordHash4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordHash4Value = value.GetValueOrDefault();
                this.PasswordHash4ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PasswordMode", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool PasswordModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PasswordMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PasswordModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PasswordMode
        {
            get
            {
                if (this.PasswordModeValueSpecified)
                {
                    return this.PasswordModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PasswordModeValue = value.GetValueOrDefault();
                this.PasswordModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Phone", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool PhoneValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Phone property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PhoneValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Phone
        {
            get
            {
                if (this.PhoneValueSpecified)
                {
                    return this.PhoneValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhoneValue = value.GetValueOrDefault();
                this.PhoneValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Pin", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool PinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Pin
        {
            get
            {
                if (this.PinValueSpecified)
                {
                    return this.PinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinValue = value.GetValueOrDefault();
                this.PinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinActiveMode", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool PinActiveModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinActiveMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinActiveModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinActiveMode
        {
            get
            {
                if (this.PinActiveModeValueSpecified)
                {
                    return this.PinActiveModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinActiveModeValue = value.GetValueOrDefault();
                this.PinActiveModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinChangeDate", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool PinChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinChangeDate
        {
            get
            {
                if (this.PinChangeDateValueSpecified)
                {
                    return this.PinChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinChangeDateValue = value.GetValueOrDefault();
                this.PinChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreviousLogOnTime", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool PreviousLogOnTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreviousLogOnTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreviousLogOnTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PreviousLogOnTime
        {
            get
            {
                if (this.PreviousLogOnTimeValueSpecified)
                {
                    return this.PreviousLogOnTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreviousLogOnTimeValue = value.GetValueOrDefault();
                this.PreviousLogOnTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreviousLogonDate", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool PreviousLogonDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreviousLogonDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreviousLogonDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PreviousLogonDate
        {
            get
            {
                if (this.PreviousLogonDateValueSpecified)
                {
                    return this.PreviousLogonDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreviousLogonDateValue = value.GetValueOrDefault();
                this.PreviousLogonDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _previousPasswordHash1;
        
        [XmlElementAttribute("PreviousPasswordHash1", Order=44, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PreviousPasswordHash1
        {
            get
            {
                return _previousPasswordHash1;
            }
            set
            {
                _previousPasswordHash1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreviousPasswordHash1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreviousPasswordHash1Specified
        {
            get
            {
                return ((this.PreviousPasswordHash1 != null) 
                            && (this.PreviousPasswordHash1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _previousPasswordHash2;
        
        [XmlElementAttribute("PreviousPasswordHash2", Order=45, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PreviousPasswordHash2
        {
            get
            {
                return _previousPasswordHash2;
            }
            set
            {
                _previousPasswordHash2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreviousPasswordHash2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreviousPasswordHash2Specified
        {
            get
            {
                return ((this.PreviousPasswordHash2 != null) 
                            && (this.PreviousPasswordHash2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _previousPasswordHash3;
        
        [XmlElementAttribute("PreviousPasswordHash3", Order=46, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PreviousPasswordHash3
        {
            get
            {
                return _previousPasswordHash3;
            }
            set
            {
                _previousPasswordHash3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreviousPasswordHash3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreviousPasswordHash3Specified
        {
            get
            {
                return ((this.PreviousPasswordHash3 != null) 
                            && (this.PreviousPasswordHash3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _previousPasswordHash4;
        
        [XmlElementAttribute("PreviousPasswordHash4", Order=47, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PreviousPasswordHash4
        {
            get
            {
                return _previousPasswordHash4;
            }
            set
            {
                _previousPasswordHash4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreviousPasswordHash4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreviousPasswordHash4Specified
        {
            get
            {
                return ((this.PreviousPasswordHash4 != null) 
                            && (this.PreviousPasswordHash4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _previousPasswordMode;
        
        [XmlElementAttribute("PreviousPasswordMode", Order=48, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PreviousPasswordMode
        {
            get
            {
                return _previousPasswordMode;
            }
            set
            {
                _previousPasswordMode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PreviousPasswordMode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PreviousPasswordModeSpecified
        {
            get
            {
                return ((this.PreviousPasswordMode != null) 
                            && (this.PreviousPasswordMode.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _priorDayTapeTotal;
        
        [XmlElementAttribute("PriorDayTapeTotal", Order=49, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PriorDayTapeTotal
        {
            get
            {
                return _priorDayTapeTotal;
            }
            set
            {
                _priorDayTapeTotal = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PriorDayTapeTotal collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PriorDayTapeTotalSpecified
        {
            get
            {
                return ((this.PriorDayTapeTotal != null) 
                            && (this.PriorDayTapeTotal.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _privilege;
        
        [XmlElementAttribute("Privilege", Order=50, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Privilege
        {
            get
            {
                return _privilege;
            }
            set
            {
                _privilege = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Privilege collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrivilegeSpecified
        {
            get
            {
                return ((this.Privilege != null) 
                            && (this.Privilege.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _privilegeGroup;
        
        [XmlElementAttribute("PrivilegeGroup", Order=51, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PrivilegeGroup
        {
            get
            {
                return _privilegeGroup;
            }
            set
            {
                _privilegeGroup = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PrivilegeGroup collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PrivilegeGroupSpecified
        {
            get
            {
                return ((this.PrivilegeGroup != null) 
                            && (this.PrivilegeGroup.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrtCheckIndex", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool PrtCheckIndexValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrtCheckIndex property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrtCheckIndexValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PrtCheckIndex
        {
            get
            {
                if (this.PrtCheckIndexValueSpecified)
                {
                    return this.PrtCheckIndexValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrtCheckIndexValue = value.GetValueOrDefault();
                this.PrtCheckIndexValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _restrictedAccounts;
        
        [XmlElementAttribute("RestrictedAccounts", Order=54, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RestrictedAccounts
        {
            get
            {
                return _restrictedAccounts;
            }
            set
            {
                _restrictedAccounts = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RestrictedAccounts collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RestrictedAccountsSpecified
        {
            get
            {
                return ((this.RestrictedAccounts != null) 
                            && (this.RestrictedAccounts.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecondaryId", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool SecondaryIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondaryId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecondaryIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SecondaryId
        {
            get
            {
                if (this.SecondaryIdValueSpecified)
                {
                    return this.SecondaryIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecondaryIdValue = value.GetValueOrDefault();
                this.SecondaryIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _securityAmount;
        
        [XmlElementAttribute("SecurityAmount", Order=56, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> SecurityAmount
        {
            get
            {
                return _securityAmount;
            }
            set
            {
                _securityAmount = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SecurityAmount collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SecurityAmountSpecified
        {
            get
            {
                return ((this.SecurityAmount != null) 
                            && (this.SecurityAmount.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _securityCode;
        
        [XmlElementAttribute("SecurityCode", Order=57, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> SecurityCode
        {
            get
            {
                return _securityCode;
            }
            set
            {
                _securityCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SecurityCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SecurityCodeSpecified
        {
            get
            {
                return ((this.SecurityCode != null) 
                            && (this.SecurityCode.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsoDomainUserSub1", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool SsoDomainUserSub1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsoDomainUserSub1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsoDomainUserSub1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsoDomainUserSub1
        {
            get
            {
                if (this.SsoDomainUserSub1ValueSpecified)
                {
                    return this.SsoDomainUserSub1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsoDomainUserSub1Value = value.GetValueOrDefault();
                this.SsoDomainUserSub1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsoDomainUserSub2", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool SsoDomainUserSub2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsoDomainUserSub2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsoDomainUserSub2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsoDomainUserSub2
        {
            get
            {
                if (this.SsoDomainUserSub2ValueSpecified)
                {
                    return this.SsoDomainUserSub2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsoDomainUserSub2Value = value.GetValueOrDefault();
                this.SsoDomainUserSub2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsoDomainUserSub3", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool SsoDomainUserSub3Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsoDomainUserSub3 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsoDomainUserSub3ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsoDomainUserSub3
        {
            get
            {
                if (this.SsoDomainUserSub3ValueSpecified)
                {
                    return this.SsoDomainUserSub3Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsoDomainUserSub3Value = value.GetValueOrDefault();
                this.SsoDomainUserSub3ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SsoDomainUserSub4", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool SsoDomainUserSub4Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SsoDomainUserSub4 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SsoDomainUserSub4ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SsoDomainUserSub4
        {
            get
            {
                if (this.SsoDomainUserSub4ValueSpecified)
                {
                    return this.SsoDomainUserSub4Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SsoDomainUserSub4Value = value.GetValueOrDefault();
                this.SsoDomainUserSub4ValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _tapeTotal;
        
        [XmlElementAttribute("TapeTotal", Order=62, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> TapeTotal
        {
            get
            {
                return _tapeTotal;
            }
            set
            {
                _tapeTotal = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TapeTotal collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TapeTotalSpecified
        {
            get
            {
                return ((this.TapeTotal != null) 
                            && (this.TapeTotal.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TempPasswordExpirationDate", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool TempPasswordExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TempPasswordExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TempPasswordExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TempPasswordExpirationDate
        {
            get
            {
                if (this.TempPasswordExpirationDateValueSpecified)
                {
                    return this.TempPasswordExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TempPasswordExpirationDateValue = value.GetValueOrDefault();
                this.TempPasswordExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TempPasswordExpirationTime", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool TempPasswordExpirationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TempPasswordExpirationTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TempPasswordExpirationTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TempPasswordExpirationTime
        {
            get
            {
                if (this.TempPasswordExpirationTimeValueSpecified)
                {
                    return this.TempPasswordExpirationTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TempPasswordExpirationTimeValue = value.GetValueOrDefault();
                this.TempPasswordExpirationTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TemporaryPassword", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool TemporaryPasswordValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TemporaryPassword property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TemporaryPasswordValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TemporaryPassword
        {
            get
            {
                if (this.TemporaryPasswordValueSpecified)
                {
                    return this.TemporaryPasswordValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TemporaryPasswordValue = value.GetValueOrDefault();
                this.TemporaryPasswordValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TemporaryPin", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool TemporaryPinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TemporaryPin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TemporaryPinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TemporaryPin
        {
            get
            {
                if (this.TemporaryPinValueSpecified)
                {
                    return this.TemporaryPinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TemporaryPinValue = value.GetValueOrDefault();
                this.TemporaryPinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=67, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _workList;
        
        [XmlElementAttribute("WorkList", Order=68, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> WorkList
        {
            get
            {
                return _workList;
            }
            set
            {
                _workList = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WorkList collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WorkListSpecified
        {
            get
            {
                return ((this.WorkList != null) 
                            && (this.WorkList.Count != 0));
            }
        }
        
        [XmlElementAttribute("Version_1", Order=69, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=70)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
