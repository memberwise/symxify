//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("DailyPost", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class DailyPost
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastRunDate", Order=0, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastRunDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRunDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastRunDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastRunDate
        {
            get
            {
                if (this.LastRunDateValueSpecified)
                {
                    return this.LastRunDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRunDateValue = value.GetValueOrDefault();
                this.LastRunDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DailyPostLnTypeSchedDue> _lnTypeSchedDue;
        
        [XmlElementAttribute("LnTypeSchedDue", Order=1, Form=XmlSchemaForm.Unqualified)]
        public Collection<DailyPostLnTypeSchedDue> LnTypeSchedDue
        {
            get
            {
                return _lnTypeSchedDue;
            }
            set
            {
                _lnTypeSchedDue = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LnTypeSchedDue collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LnTypeSchedDueSpecified
        {
            get
            {
                return ((this.LnTypeSchedDue != null) 
                            && (this.LnTypeSchedDue.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DailyPost" /> class.</para>
        /// </summary>
        public DailyPost()
        {
            this._lnTypeSchedDue = new Collection<DailyPostLnTypeSchedDue>();
            this._offCycLnTypeSchedXfr = new Collection<DailyPostOffCycLnTypeSchedXfr>();
            this._offCycXlTypeSchedXfr = new Collection<DailyPostOffCycXlTypeSchedXfr>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaturityCutoffDate", Order=2, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MaturityCutoffDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityCutoffDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaturityCutoffDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MaturityCutoffDate
        {
            get
            {
                if (this.MaturityCutoffDateValueSpecified)
                {
                    return this.MaturityCutoffDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityCutoffDateValue = value.GetValueOrDefault();
                this.MaturityCutoffDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DailyPostOffCycLnTypeSchedXfr> _offCycLnTypeSchedXfr;
        
        [XmlElementAttribute("OffCycLnTypeSchedXfr", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<DailyPostOffCycLnTypeSchedXfr> OffCycLnTypeSchedXfr
        {
            get
            {
                return _offCycLnTypeSchedXfr;
            }
            set
            {
                _offCycLnTypeSchedXfr = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OffCycLnTypeSchedXfr collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OffCycLnTypeSchedXfrSpecified
        {
            get
            {
                return ((this.OffCycLnTypeSchedXfr != null) 
                            && (this.OffCycLnTypeSchedXfr.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<DailyPostOffCycXlTypeSchedXfr> _offCycXlTypeSchedXfr;
        
        [XmlElementAttribute("OffCycXlTypeSchedXfr", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<DailyPostOffCycXlTypeSchedXfr> OffCycXlTypeSchedXfr
        {
            get
            {
                return _offCycXlTypeSchedXfr;
            }
            set
            {
                _offCycXlTypeSchedXfr = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OffCycXlTypeSchedXfr collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OffCycXlTypeSchedXfrSpecified
        {
            get
            {
                return ((this.OffCycXlTypeSchedXfr != null) 
                            && (this.OffCycXlTypeSchedXfr.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SvAutoxferGrace", Order=5, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime SvAutoxferGraceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SvAutoxferGrace property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SvAutoxferGraceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> SvAutoxferGrace
        {
            get
            {
                if (this.SvAutoxferGraceValueSpecified)
                {
                    return this.SvAutoxferGraceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SvAutoxferGraceValue = value.GetValueOrDefault();
                this.SvAutoxferGraceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=6, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=7)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
