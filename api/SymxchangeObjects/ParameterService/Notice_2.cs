//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Notice", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("Notice", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(NoticeFields_2))]
    public partial class Notice_2
    {
        
        [XmlIgnoreAttribute()]
        private Collection<NoticeDaysBetweenNotices_2> _daysBetweenNotices;
        
        [XmlElementAttribute("DaysBetweenNotices", Order=0, Form=XmlSchemaForm.Unqualified)]
        public Collection<NoticeDaysBetweenNotices_2> DaysBetweenNotices
        {
            get
            {
                return _daysBetweenNotices;
            }
            set
            {
                _daysBetweenNotices = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DaysBetweenNotices collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DaysBetweenNoticesSpecified
        {
            get
            {
                return ((this.DaysBetweenNotices != null) 
                            && (this.DaysBetweenNotices.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Notice_2" /> class.</para>
        /// </summary>
        public Notice_2()
        {
            this._daysBetweenNotices = new Collection<NoticeDaysBetweenNotices_2>();
            this._line1 = new Collection<NoticeLine1_2>();
            this._line2 = new Collection<NoticeLine2_2>();
            this._line3 = new Collection<NoticeLine3_2>();
            this._line4 = new Collection<NoticeLine4_2>();
            this._negativeInfoMessage = new Collection<NoticeNegativeInfoMessage_2>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlElementAttribute("Description", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<NoticeLine1_2> _line1;
        
        [XmlElementAttribute("Line1", Order=2, Form=XmlSchemaForm.Unqualified)]
        public Collection<NoticeLine1_2> Line1
        {
            get
            {
                return _line1;
            }
            set
            {
                _line1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Line1Specified
        {
            get
            {
                return ((this.Line1 != null) 
                            && (this.Line1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<NoticeLine2_2> _line2;
        
        [XmlElementAttribute("Line2", Order=3, Form=XmlSchemaForm.Unqualified)]
        public Collection<NoticeLine2_2> Line2
        {
            get
            {
                return _line2;
            }
            set
            {
                _line2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Line2Specified
        {
            get
            {
                return ((this.Line2 != null) 
                            && (this.Line2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<NoticeLine3_2> _line3;
        
        [XmlElementAttribute("Line3", Order=4, Form=XmlSchemaForm.Unqualified)]
        public Collection<NoticeLine3_2> Line3
        {
            get
            {
                return _line3;
            }
            set
            {
                _line3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Line3Specified
        {
            get
            {
                return ((this.Line3 != null) 
                            && (this.Line3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<NoticeLine4_2> _line4;
        
        [XmlElementAttribute("Line4", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<NoticeLine4_2> Line4
        {
            get
            {
                return _line4;
            }
            set
            {
                _line4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Line4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool Line4Specified
        {
            get
            {
                return ((this.Line4 != null) 
                            && (this.Line4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<NoticeNegativeInfoMessage_2> _negativeInfoMessage;
        
        [XmlElementAttribute("NegativeInfoMessage", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<NoticeNegativeInfoMessage_2> NegativeInfoMessage
        {
            get
            {
                return _negativeInfoMessage;
            }
            set
            {
                _negativeInfoMessage = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NegativeInfoMessage collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NegativeInfoMessageSpecified
        {
            get
            {
                return ((this.NegativeInfoMessage != null) 
                            && (this.NegativeInfoMessage.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NegativeInfoPrintPosition", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short NegativeInfoPrintPositionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NegativeInfoPrintPosition property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NegativeInfoPrintPositionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NegativeInfoPrintPosition
        {
            get
            {
                if (this.NegativeInfoPrintPositionValueSpecified)
                {
                    return this.NegativeInfoPrintPositionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NegativeInfoPrintPositionValue = value.GetValueOrDefault();
                this.NegativeInfoPrintPositionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticeDescrType", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short NoticeDescrTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticeDescrType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticeDescrTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NoticeDescrType
        {
            get
            {
                if (this.NoticeDescrTypeValueSpecified)
                {
                    return this.NoticeDescrTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticeDescrTypeValue = value.GetValueOrDefault();
                this.NoticeDescrTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticeType", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short NoticeTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticeType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticeTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NoticeType
        {
            get
            {
                if (this.NoticeTypeValueSpecified)
                {
                    return this.NoticeTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticeTypeValue = value.GetValueOrDefault();
                this.NoticeTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseWarningGraceDays", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short UseWarningGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseWarningGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseWarningGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UseWarningGraceDays
        {
            get
            {
                if (this.UseWarningGraceDaysValueSpecified)
                {
                    return this.UseWarningGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseWarningGraceDaysValue = value.GetValueOrDefault();
                this.UseWarningGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WarningGraceDays", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short WarningGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WarningGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WarningGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WarningGraceDays
        {
            get
            {
                if (this.WarningGraceDaysValueSpecified)
                {
                    return this.WarningGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WarningGraceDaysValue = value.GetValueOrDefault();
                this.WarningGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=12, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=13)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
