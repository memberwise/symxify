//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("CardDefaultFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("CardDefaultFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    public partial class CardDefaultFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmCountLimit", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AtmCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmCountLimit
        {
            get
            {
                if (this.AtmCountLimitValueSpecified)
                {
                    return this.AtmCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmCountLimitValue = value.GetValueOrDefault();
                this.AtmCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthCountLimit", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AuthCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AuthCountLimit
        {
            get
            {
                if (this.AuthCountLimitValueSpecified)
                {
                    return this.AuthCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthCountLimitValue = value.GetValueOrDefault();
                this.AuthCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AuthLimit", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AuthLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuthLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AuthLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AuthLimit
        {
            get
            {
                if (this.AuthLimitValueSpecified)
                {
                    return this.AuthLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuthLimitValue = value.GetValueOrDefault();
                this.AuthLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayCountLimit", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BillPayCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPayCountLimit
        {
            get
            {
                if (this.BillPayCountLimitValueSpecified)
                {
                    return this.BillPayCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayCountLimitValue = value.GetValueOrDefault();
                this.BillPayCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayLimit", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool BillPayLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPayLimit
        {
            get
            {
                if (this.BillPayLimitValueSpecified)
                {
                    return this.BillPayLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayLimitValue = value.GetValueOrDefault();
                this.BillPayLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayMax", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool BillPayMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPayMax
        {
            get
            {
                if (this.BillPayMaxValueSpecified)
                {
                    return this.BillPayMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayMaxValue = value.GetValueOrDefault();
                this.BillPayMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BlockCode", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool BlockCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BlockCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BlockCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BlockCode
        {
            get
            {
                if (this.BlockCodeValueSpecified)
                {
                    return this.BlockCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BlockCodeValue = value.GetValueOrDefault();
                this.BlockCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardType", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool CardTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardType
        {
            get
            {
                if (this.CardTypeValueSpecified)
                {
                    return this.CardTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardTypeValue = value.GetValueOrDefault();
                this.CardTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChkId", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool ChkIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChkId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChkIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChkId
        {
            get
            {
                if (this.ChkIdValueSpecified)
                {
                    return this.ChkIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChkIdValue = value.GetValueOrDefault();
                this.ChkIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _countLimit;
        
        [XmlElementAttribute("CountLimit", Order=9, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> CountLimit
        {
            get
            {
                return _countLimit;
            }
            set
            {
                _countLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CountLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CountLimitSpecified
        {
            get
            {
                return ((this.CountLimit != null) 
                            && (this.CountLimit.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CardDefaultFields" /> class.</para>
        /// </summary>
        public CardDefaultFields()
        {
            this._countLimit = new Collection<short>();
            this._limit = new Collection<short>();
            this._miscId = new Collection<short>();
            this._perItemLimit = new Collection<short>();
            this._service = new Collection<short>();
            this._warningCode = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredDebCountLimit", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool CredDebCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredDebCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredDebCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CredDebCountLimit
        {
            get
            {
                if (this.CredDebCountLimitValueSpecified)
                {
                    return this.CredDebCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredDebCountLimitValue = value.GetValueOrDefault();
                this.CredDebCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CredDebLimit", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool CredDebLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CredDebLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CredDebLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CredDebLimit
        {
            get
            {
                if (this.CredDebLimitValueSpecified)
                {
                    return this.CredDebLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CredDebLimitValue = value.GetValueOrDefault();
                this.CredDebLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditCardId", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool CreditCardIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditCardId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditCardIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreditCardId
        {
            get
            {
                if (this.CreditCardIdValueSpecified)
                {
                    return this.CreditCardIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditCardIdValue = value.GetValueOrDefault();
                this.CreditCardIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepCountLimit", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool DepCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepCountLimit
        {
            get
            {
                if (this.DepCountLimitValueSpecified)
                {
                    return this.DepCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepCountLimitValue = value.GetValueOrDefault();
                this.DepCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepLimit", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool DepLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepLimit
        {
            get
            {
                if (this.DepLimitValueSpecified)
                {
                    return this.DepLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepLimitValue = value.GetValueOrDefault();
                this.DepLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepMax", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool DepMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepMax
        {
            get
            {
                if (this.DepMaxValueSpecified)
                {
                    return this.DepMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepMaxValue = value.GetValueOrDefault();
                this.DepMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Description", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool DescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Description property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Description
        {
            get
            {
                if (this.DescriptionValueSpecified)
                {
                    return this.DescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DescriptionValue = value.GetValueOrDefault();
                this.DescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DigitalIssueExcept", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool DigitalIssueExceptValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DigitalIssueExcept property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DigitalIssueExceptValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DigitalIssueExcept
        {
            get
            {
                if (this.DigitalIssueExceptValueSpecified)
                {
                    return this.DigitalIssueExceptValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DigitalIssueExceptValue = value.GetValueOrDefault();
                this.DigitalIssueExceptValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DigitalIssueStatus", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool DigitalIssueStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DigitalIssueStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DigitalIssueStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DigitalIssueStatus
        {
            get
            {
                if (this.DigitalIssueStatusValueSpecified)
                {
                    return this.DigitalIssueStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DigitalIssueStatusValue = value.GetValueOrDefault();
                this.DigitalIssueStatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EmvChipProfile", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool EmvChipProfileValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmvChipProfile property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmvChipProfileValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> EmvChipProfile
        {
            get
            {
                if (this.EmvChipProfileValueSpecified)
                {
                    return this.EmvChipProfileValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmvChipProfileValue = value.GetValueOrDefault();
                this.EmvChipProfileValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExpirationDate", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool ExpirationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExpirationDate
        {
            get
            {
                if (this.ExpirationDateValueSpecified)
                {
                    return this.ExpirationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationDateValue = value.GetValueOrDefault();
                this.ExpirationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InstantIssue", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool InstantIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InstantIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InstantIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InstantIssue
        {
            get
            {
                if (this.InstantIssueValueSpecified)
                {
                    return this.InstantIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InstantIssueValue = value.GetValueOrDefault();
                this.InstantIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IssueCode", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool IssueCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IssueCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IssueCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IssueCode
        {
            get
            {
                if (this.IssueCodeValueSpecified)
                {
                    return this.IssueCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IssueCodeValue = value.GetValueOrDefault();
                this.IssueCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IssueDate", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool IssueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IssueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IssueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> IssueDate
        {
            get
            {
                if (this.IssueDateValueSpecified)
                {
                    return this.IssueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IssueDateValue = value.GetValueOrDefault();
                this.IssueDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _limit;
        
        [XmlElementAttribute("Limit", Order=25, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _limit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Limit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LimitSpecified
        {
            get
            {
                return ((this.Limit != null) 
                            && (this.Limit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitAmount", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool LimitAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LimitAmount
        {
            get
            {
                if (this.LimitAmountValueSpecified)
                {
                    return this.LimitAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitAmountValue = value.GetValueOrDefault();
                this.LimitAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LimitDays", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool LimitDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LimitDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LimitDays
        {
            get
            {
                if (this.LimitDaysValueSpecified)
                {
                    return this.LimitDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LimitDaysValue = value.GetValueOrDefault();
                this.LimitDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LocId", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool LocIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LocId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LocId
        {
            get
            {
                if (this.LocIdValueSpecified)
                {
                    return this.LocIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocIdValue = value.GetValueOrDefault();
                this.LocIdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscCountLimit", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool MiscCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MiscCountLimit
        {
            get
            {
                if (this.MiscCountLimitValueSpecified)
                {
                    return this.MiscCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscCountLimitValue = value.GetValueOrDefault();
                this.MiscCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _miscId;
        
        [XmlElementAttribute("MiscId", Order=30, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> MiscId
        {
            get
            {
                return _miscId;
            }
            set
            {
                _miscId = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MiscId collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MiscIdSpecified
        {
            get
            {
                return ((this.MiscId != null) 
                            && (this.MiscId.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscLimit", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool MiscLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MiscLimit
        {
            get
            {
                if (this.MiscLimitValueSpecified)
                {
                    return this.MiscLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscLimitValue = value.GetValueOrDefault();
                this.MiscLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameType", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool NameTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NameType
        {
            get
            {
                if (this.NameTypeValueSpecified)
                {
                    return this.NameTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameTypeValue = value.GetValueOrDefault();
                this.NameTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineCardIssue", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool OnlineCardIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineCardIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineCardIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OnlineCardIssue
        {
            get
            {
                if (this.OnlineCardIssueValueSpecified)
                {
                    return this.OnlineCardIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineCardIssueValue = value.GetValueOrDefault();
                this.OnlineCardIssueValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlineRushIssue", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool OnlineRushIssueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlineRushIssue property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlineRushIssueValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OnlineRushIssue
        {
            get
            {
                if (this.OnlineRushIssueValueSpecified)
                {
                    return this.OnlineRushIssueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlineRushIssueValue = value.GetValueOrDefault();
                this.OnlineRushIssueValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _perItemLimit;
        
        [XmlElementAttribute("PerItemLimit", Order=35, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> PerItemLimit
        {
            get
            {
                return _perItemLimit;
            }
            set
            {
                _perItemLimit = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PerItemLimit collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PerItemLimitSpecified
        {
            get
            {
                return ((this.PerItemLimit != null) 
                            && (this.PerItemLimit.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinActual", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool PinActualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinActual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinActualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinActual
        {
            get
            {
                if (this.PinActualValueSpecified)
                {
                    return this.PinActualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinActualValue = value.GetValueOrDefault();
                this.PinActualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinEncrypted", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool PinEncryptedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinEncrypted property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinEncryptedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinEncrypted
        {
            get
            {
                if (this.PinEncryptedValueSpecified)
                {
                    return this.PinEncryptedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinEncryptedValue = value.GetValueOrDefault();
                this.PinEncryptedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PinOffset", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool PinOffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PinOffset property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PinOffsetValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PinOffset
        {
            get
            {
                if (this.PinOffsetValueSpecified)
                {
                    return this.PinOffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PinOffsetValue = value.GetValueOrDefault();
                this.PinOffsetValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosCountLimit", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool PosCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosCountLimit
        {
            get
            {
                if (this.PosCountLimitValueSpecified)
                {
                    return this.PosCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosCountLimitValue = value.GetValueOrDefault();
                this.PosCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosLimit", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool PosLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosLimit
        {
            get
            {
                if (this.PosLimitValueSpecified)
                {
                    return this.PosLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosLimitValue = value.GetValueOrDefault();
                this.PosLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReclassCode", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool ReclassCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReclassCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReclassCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReclassCode
        {
            get
            {
                if (this.ReclassCodeValueSpecified)
                {
                    return this.ReclassCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReclassCodeValue = value.GetValueOrDefault();
                this.ReclassCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReissueCode", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool ReissueCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReissueCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReissueCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReissueCode
        {
            get
            {
                if (this.ReissueCodeValueSpecified)
                {
                    return this.ReissueCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReissueCodeValue = value.GetValueOrDefault();
                this.ReissueCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReissueMonths", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool ReissueMonthsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReissueMonths property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReissueMonthsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReissueMonths
        {
            get
            {
                if (this.ReissueMonthsValueSpecified)
                {
                    return this.ReissueMonthsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReissueMonthsValue = value.GetValueOrDefault();
                this.ReissueMonthsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SavId", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool SavIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SavId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SavIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SavId
        {
            get
            {
                if (this.SavIdValueSpecified)
                {
                    return this.SavIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SavIdValue = value.GetValueOrDefault();
                this.SavIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _service;
        
        [XmlElementAttribute("Service", Order=45, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Service
        {
            get
            {
                return _service;
            }
            set
            {
                _service = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Service collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ServiceSpecified
        {
            get
            {
                return ((this.Service != null) 
                            && (this.Service.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SingleUsageMax", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool SingleUsageMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SingleUsageMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SingleUsageMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SingleUsageMax
        {
            get
            {
                if (this.SingleUsageMaxValueSpecified)
                {
                    return this.SingleUsageMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SingleUsageMaxValue = value.GetValueOrDefault();
                this.SingleUsageMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Suffix", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool SuffixValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Suffix property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SuffixValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Suffix
        {
            get
            {
                if (this.SuffixValueSpecified)
                {
                    return this.SuffixValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SuffixValue = value.GetValueOrDefault();
                this.SuffixValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsageLimit", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool UsageLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsageLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsageLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UsageLimit
        {
            get
            {
                if (this.UsageLimitValueSpecified)
                {
                    return this.UsageLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsageLimitValue = value.GetValueOrDefault();
                this.UsageLimitValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _warningCode;
        
        [XmlElementAttribute("WarningCode", Order=51, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> WarningCode
        {
            get
            {
                return _warningCode;
            }
            set
            {
                _warningCode = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WarningCode collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WarningCodeSpecified
        {
            get
            {
                return ((this.WarningCode != null) 
                            && (this.WarningCode.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckCountLimit", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool WdCheckCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdCheckCountLimit
        {
            get
            {
                if (this.WdCheckCountLimitValueSpecified)
                {
                    return this.WdCheckCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckCountLimitValue = value.GetValueOrDefault();
                this.WdCheckCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckLimit", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool WdCheckLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdCheckLimit
        {
            get
            {
                if (this.WdCheckLimitValueSpecified)
                {
                    return this.WdCheckLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckLimitValue = value.GetValueOrDefault();
                this.WdCheckLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckMax", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool WdCheckMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdCheckMax
        {
            get
            {
                if (this.WdCheckMaxValueSpecified)
                {
                    return this.WdCheckMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckMaxValue = value.GetValueOrDefault();
                this.WdCheckMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferCountLimit", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool XferCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XferCountLimit
        {
            get
            {
                if (this.XferCountLimitValueSpecified)
                {
                    return this.XferCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferCountLimitValue = value.GetValueOrDefault();
                this.XferCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferLimit", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool XferLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XferLimit
        {
            get
            {
                if (this.XferLimitValueSpecified)
                {
                    return this.XferLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferLimitValue = value.GetValueOrDefault();
                this.XferLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferMax", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool XferMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XferMax
        {
            get
            {
                if (this.XferMaxValueSpecified)
                {
                    return this.XferMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferMaxValue = value.GetValueOrDefault();
                this.XferMaxValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=58, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=59)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
