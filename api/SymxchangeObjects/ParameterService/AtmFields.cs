//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("AtmFields", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class AtmFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptLoanThresholdPayment", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptLoanThresholdPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptLoanThresholdPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptLoanThresholdPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptLoanThresholdPayment
        {
            get
            {
                if (this.AcceptLoanThresholdPaymentValueSpecified)
                {
                    return this.AcceptLoanThresholdPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptLoanThresholdPaymentValue = value.GetValueOrDefault();
                this.AcceptLoanThresholdPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcceptUnappliedPartialPmt", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AcceptUnappliedPartialPmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcceptUnappliedPartialPmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcceptUnappliedPartialPmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcceptUnappliedPartialPmt
        {
            get
            {
                if (this.AcceptUnappliedPartialPmtValueSpecified)
                {
                    return this.AcceptUnappliedPartialPmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcceptUnappliedPartialPmtValue = value.GetValueOrDefault();
                this.AcceptUnappliedPartialPmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdvFeeDescription", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool AdvFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdvFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdvFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdvFeeDescription
        {
            get
            {
                if (this.AdvFeeDescriptionValueSpecified)
                {
                    return this.AdvFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdvFeeDescriptionValue = value.GetValueOrDefault();
                this.AdvFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdvFeeGlCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool AdvFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdvFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdvFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AdvFeeGlCode
        {
            get
            {
                if (this.AdvFeeGlCodeValueSpecified)
                {
                    return this.AdvFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdvFeeGlCodeValue = value.GetValueOrDefault();
                this.AdvFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmAvailBalApprExclList", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool AtmAvailBalApprExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmAvailBalApprExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmAvailBalApprExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmAvailBalApprExclList
        {
            get
            {
                if (this.AtmAvailBalApprExclListValueSpecified)
                {
                    return this.AtmAvailBalApprExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmAvailBalApprExclListValue = value.GetValueOrDefault();
                this.AtmAvailBalApprExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmAvailBalPostExclList", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool AtmAvailBalPostExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmAvailBalPostExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmAvailBalPostExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmAvailBalPostExclList
        {
            get
            {
                if (this.AtmAvailBalPostExclListValueSpecified)
                {
                    return this.AtmAvailBalPostExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmAvailBalPostExclListValue = value.GetValueOrDefault();
                this.AtmAvailBalPostExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AtmFeeDescription", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool AtmFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AtmFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AtmFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AtmFeeDescription
        {
            get
            {
                if (this.AtmFeeDescriptionValueSpecified)
                {
                    return this.AtmFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AtmFeeDescriptionValue = value.GetValueOrDefault();
                this.AtmFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayFeeDescription", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool BillPayFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillPayFeeDescription
        {
            get
            {
                if (this.BillPayFeeDescriptionValueSpecified)
                {
                    return this.BillPayFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayFeeDescriptionValue = value.GetValueOrDefault();
                this.BillPayFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BpAvailBalApprExclList", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool BpAvailBalApprExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BpAvailBalApprExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BpAvailBalApprExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BpAvailBalApprExclList
        {
            get
            {
                if (this.BpAvailBalApprExclListValueSpecified)
                {
                    return this.BpAvailBalApprExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BpAvailBalApprExclListValue = value.GetValueOrDefault();
                this.BpAvailBalApprExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BpAvailBalPostExclList", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool BpAvailBalPostExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BpAvailBalPostExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BpAvailBalPostExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BpAvailBalPostExclList
        {
            get
            {
                if (this.BpAvailBalPostExclListValueSpecified)
                {
                    return this.BpAvailBalPostExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BpAvailBalPostExclListValue = value.GetValueOrDefault();
                this.BpAvailBalPostExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardinHistoryCardTypes", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool CardinHistoryCardTypesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardinHistoryCardTypes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardinHistoryCardTypesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardinHistoryCardTypes
        {
            get
            {
                if (this.CardinHistoryCardTypesValueSpecified)
                {
                    return this.CardinHistoryCardTypesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardinHistoryCardTypesValue = value.GetValueOrDefault();
                this.CardinHistoryCardTypesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CardinHistoryDigitCount", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool CardinHistoryDigitCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CardinHistoryDigitCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CardinHistoryDigitCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CardinHistoryDigitCount
        {
            get
            {
                if (this.CardinHistoryDigitCountValueSpecified)
                {
                    return this.CardinHistoryDigitCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CardinHistoryDigitCountValue = value.GetValueOrDefault();
                this.CardinHistoryDigitCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargePartialCapFee", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool ChargePartialCapFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargePartialCapFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargePartialCapFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargePartialCapFee
        {
            get
            {
                if (this.ChargePartialCapFeeValueSpecified)
                {
                    return this.ChargePartialCapFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargePartialCapFeeValue = value.GetValueOrDefault();
                this.ChargePartialCapFeeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ClearingGlCode", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool ClearingGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ClearingGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ClearingGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ClearingGlCode
        {
            get
            {
                if (this.ClearingGlCodeValueSpecified)
                {
                    return this.ClearingGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ClearingGlCodeValue = value.GetValueOrDefault();
                this.ClearingGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyNotices", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyNotices
        {
            get
            {
                if (this.CourtesyNoticesValueSpecified)
                {
                    return this.CourtesyNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyNoticesValue = value.GetValueOrDefault();
                this.CourtesyNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayCommentCode", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyPayCommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayCommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayCommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyPayCommentCode
        {
            get
            {
                if (this.CourtesyPayCommentCodeValueSpecified)
                {
                    return this.CourtesyPayCommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayCommentCodeValue = value.GetValueOrDefault();
                this.CourtesyPayCommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayFeeDescription", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyPayFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyPayFeeDescription
        {
            get
            {
                if (this.CourtesyPayFeeDescriptionValueSpecified)
                {
                    return this.CourtesyPayFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayFeeDescriptionValue = value.GetValueOrDefault();
                this.CourtesyPayFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CourtesyPayFeeGlCode", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool CourtesyPayFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CourtesyPayFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CourtesyPayFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CourtesyPayFeeGlCode
        {
            get
            {
                if (this.CourtesyPayFeeGlCodeValueSpecified)
                {
                    return this.CourtesyPayFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CourtesyPayFeeGlCodeValue = value.GetValueOrDefault();
                this.CourtesyPayFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreateExceptionItems", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool CreateExceptionItemsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreateExceptionItems property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreateExceptionItemsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreateExceptionItems
        {
            get
            {
                if (this.CreateExceptionItemsValueSpecified)
                {
                    return this.CreateExceptionItemsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreateExceptionItemsValue = value.GetValueOrDefault();
                this.CreateExceptionItemsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CreditCardFeeDescription", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool CreditCardFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreditCardFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CreditCardFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CreditCardFeeDescription
        {
            get
            {
                if (this.CreditCardFeeDescriptionValueSpecified)
                {
                    return this.CreditCardFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreditCardFeeDescriptionValue = value.GetValueOrDefault();
                this.CreditCardFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DebitCardFeeDescription", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool DebitCardFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DebitCardFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DebitCardFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DebitCardFeeDescription
        {
            get
            {
                if (this.DebitCardFeeDescriptionValueSpecified)
                {
                    return this.DebitCardFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DebitCardFeeDescriptionValue = value.GetValueOrDefault();
                this.DebitCardFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepFeeDescription", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool DepFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepFeeDescription
        {
            get
            {
                if (this.DepFeeDescriptionValueSpecified)
                {
                    return this.DepFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepFeeDescriptionValue = value.GetValueOrDefault();
                this.DepFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepFeeGlCode", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool DepFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DepFeeGlCode
        {
            get
            {
                if (this.DepFeeGlCodeValueSpecified)
                {
                    return this.DepFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepFeeGlCodeValue = value.GetValueOrDefault();
                this.DepFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqGraceDaysForAddon", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool DqGraceDaysForAddonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqGraceDaysForAddon property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqGraceDaysForAddonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DqGraceDaysForAddon
        {
            get
            {
                if (this.DqGraceDaysForAddonValueSpecified)
                {
                    return this.DqGraceDaysForAddonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqGraceDaysForAddonValue = value.GetValueOrDefault();
                this.DqGraceDaysForAddonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqGraceDaysForWd", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool DqGraceDaysForWdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqGraceDaysForWd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqGraceDaysForWdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DqGraceDaysForWd
        {
            get
            {
                if (this.DqGraceDaysForWdValueSpecified)
                {
                    return this.DqGraceDaysForWdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqGraceDaysForWdValue = value.GetValueOrDefault();
                this.DqGraceDaysForWdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DuplicateKeyPurgeTime", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool DuplicateKeyPurgeTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DuplicateKeyPurgeTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DuplicateKeyPurgeTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DuplicateKeyPurgeTime
        {
            get
            {
                if (this.DuplicateKeyPurgeTimeValueSpecified)
                {
                    return this.DuplicateKeyPurgeTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DuplicateKeyPurgeTimeValue = value.GetValueOrDefault();
                this.DuplicateKeyPurgeTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DuplicateKeyRetentionDays", Order=26, Form=XmlSchemaForm.Unqualified)]
        public bool DuplicateKeyRetentionDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DuplicateKeyRetentionDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DuplicateKeyRetentionDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DuplicateKeyRetentionDays
        {
            get
            {
                if (this.DuplicateKeyRetentionDaysValueSpecified)
                {
                    return this.DuplicateKeyRetentionDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DuplicateKeyRetentionDaysValue = value.GetValueOrDefault();
                this.DuplicateKeyRetentionDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeTypesToCap", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool FeeTypesToCapValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeTypesToCap property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeTypesToCapValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> FeeTypesToCap
        {
            get
            {
                if (this.FeeTypesToCapValueSpecified)
                {
                    return this.FeeTypesToCapValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeTypesToCapValue = value.GetValueOrDefault();
                this.FeeTypesToCapValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GlCategory", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool GlCategoryValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GlCategory property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GlCategoryValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GlCategory
        {
            get
            {
                if (this.GlCategoryValueSpecified)
                {
                    return this.GlCategoryValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GlCategoryValue = value.GetValueOrDefault();
                this.GlCategoryValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("GraceAmountforCashPayments", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool GraceAmountforCashPaymentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GraceAmountforCashPayments property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool GraceAmountforCashPaymentsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> GraceAmountforCashPayments
        {
            get
            {
                if (this.GraceAmountforCashPaymentsValueSpecified)
                {
                    return this.GraceAmountforCashPaymentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GraceAmountforCashPaymentsValue = value.GetValueOrDefault();
                this.GraceAmountforCashPaymentsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldDaysforCashPayments", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool HoldDaysforCashPaymentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldDaysforCashPayments property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldDaysforCashPaymentsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> HoldDaysforCashPayments
        {
            get
            {
                if (this.HoldDaysforCashPaymentsValueSpecified)
                {
                    return this.HoldDaysforCashPaymentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldDaysforCashPaymentsValue = value.GetValueOrDefault();
                this.HoldDaysforCashPaymentsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumAddonOverLoc", Order=31, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumAddonOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumAddonOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumAddonOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumAddonOverLoc
        {
            get
            {
                if (this.MaximumAddonOverLocValueSpecified)
                {
                    return this.MaximumAddonOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumAddonOverLocValue = value.GetValueOrDefault();
                this.MaximumAddonOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaximumWdBelowAvailable", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool MaximumWdBelowAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaximumWdBelowAvailable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaximumWdBelowAvailableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MaximumWdBelowAvailable
        {
            get
            {
                if (this.MaximumWdBelowAvailableValueSpecified)
                {
                    return this.MaximumWdBelowAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaximumWdBelowAvailableValue = value.GetValueOrDefault();
                this.MaximumWdBelowAvailableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MccInHistoryCardTypes", Order=33, Form=XmlSchemaForm.Unqualified)]
        public bool MccInHistoryCardTypesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MccInHistoryCardTypes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MccInHistoryCardTypesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MccInHistoryCardTypes
        {
            get
            {
                if (this.MccInHistoryCardTypesValueSpecified)
                {
                    return this.MccInHistoryCardTypesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MccInHistoryCardTypesValue = value.GetValueOrDefault();
                this.MccInHistoryCardTypesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumLineofCreditAddon", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumLineofCreditAddonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumLineofCreditAddon property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumLineofCreditAddonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumLineofCreditAddon
        {
            get
            {
                if (this.MinimumLineofCreditAddonValueSpecified)
                {
                    return this.MinimumLineofCreditAddonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumLineofCreditAddonValue = value.GetValueOrDefault();
                this.MinimumLineofCreditAddonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NoticesPrinterType", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool NoticesPrinterTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoticesPrinterType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NoticesPrinterTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NoticesPrinterType
        {
            get
            {
                if (this.NoticesPrinterTypeValueSpecified)
                {
                    return this.NoticesPrinterTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NoticesPrinterTypeValue = value.GetValueOrDefault();
                this.NoticesPrinterTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeDescrIfNotPaid", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool NsfFeeDescrIfNotPaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeDescrIfNotPaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeDescrIfNotPaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfFeeDescrIfNotPaid
        {
            get
            {
                if (this.NsfFeeDescrIfNotPaidValueSpecified)
                {
                    return this.NsfFeeDescrIfNotPaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeDescrIfNotPaidValue = value.GetValueOrDefault();
                this.NsfFeeDescrIfNotPaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeDescriptionIfPaid", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool NsfFeeDescriptionIfPaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeDescriptionIfPaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeDescriptionIfPaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfFeeDescriptionIfPaid
        {
            get
            {
                if (this.NsfFeeDescriptionIfPaidValueSpecified)
                {
                    return this.NsfFeeDescriptionIfPaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeDescriptionIfPaidValue = value.GetValueOrDefault();
                this.NsfFeeDescriptionIfPaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeForUncollectedFunds", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool NsfFeeForUncollectedFundsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeForUncollectedFunds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeForUncollectedFundsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfFeeForUncollectedFunds
        {
            get
            {
                if (this.NsfFeeForUncollectedFundsValueSpecified)
                {
                    return this.NsfFeeForUncollectedFundsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeForUncollectedFundsValue = value.GetValueOrDefault();
                this.NsfFeeForUncollectedFundsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfFeeGlCode", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool NsfFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfFeeGlCode
        {
            get
            {
                if (this.NsfFeeGlCodeValueSpecified)
                {
                    return this.NsfFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfFeeGlCodeValue = value.GetValueOrDefault();
                this.NsfFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NsfNotices", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool NsfNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NsfNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NsfNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NsfNotices
        {
            get
            {
                if (this.NsfNoticesValueSpecified)
                {
                    return this.NsfNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NsfNoticesValue = value.GetValueOrDefault();
                this.NsfNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdtAuthFeeOvrSrcCodes", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool OdtAuthFeeOvrSrcCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdtAuthFeeOvrSrcCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdtAuthFeeOvrSrcCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OdtAuthFeeOvrSrcCodes
        {
            get
            {
                if (this.OdtAuthFeeOvrSrcCodesValueSpecified)
                {
                    return this.OdtAuthFeeOvrSrcCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdtAuthFeeOvrSrcCodesValue = value.GetValueOrDefault();
                this.OdtAuthFeeOvrSrcCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OdtAuthFeeRecurSrcCodes", Order=42, Form=XmlSchemaForm.Unqualified)]
        public bool OdtAuthFeeRecurSrcCodesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OdtAuthFeeRecurSrcCodes property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OdtAuthFeeRecurSrcCodesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OdtAuthFeeRecurSrcCodes
        {
            get
            {
                if (this.OdtAuthFeeRecurSrcCodesValueSpecified)
                {
                    return this.OdtAuthFeeRecurSrcCodesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OdtAuthFeeRecurSrcCodesValue = value.GetValueOrDefault();
                this.OdtAuthFeeRecurSrcCodesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OnlyLoanTransferNotices", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool OnlyLoanTransferNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OnlyLoanTransferNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OnlyLoanTransferNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OnlyLoanTransferNotices
        {
            get
            {
                if (this.OnlyLoanTransferNoticesValueSpecified)
                {
                    return this.OnlyLoanTransferNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OnlyLoanTransferNoticesValue = value.GetValueOrDefault();
                this.OnlyLoanTransferNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonDqGraceDays", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonDqGraceDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonDqGraceDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonDqGraceDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonDqGraceDays
        {
            get
            {
                if (this.OverdrawAddonDqGraceDaysValueSpecified)
                {
                    return this.OverdrawAddonDqGraceDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonDqGraceDaysValue = value.GetValueOrDefault();
                this.OverdrawAddonDqGraceDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonIncrement", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonIncrement
        {
            get
            {
                if (this.OverdrawAddonIncrementValueSpecified)
                {
                    return this.OverdrawAddonIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonIncrementValue = value.GetValueOrDefault();
                this.OverdrawAddonIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonMaxOverLoc", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonMaxOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonMaxOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonMaxOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonMaxOverLoc
        {
            get
            {
                if (this.OverdrawAddonMaxOverLocValueSpecified)
                {
                    return this.OverdrawAddonMaxOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonMaxOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonMaxOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawAddonPctOverLoc", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawAddonPctOverLocValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawAddonPctOverLoc property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawAddonPctOverLocValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawAddonPctOverLoc
        {
            get
            {
                if (this.OverdrawAddonPctOverLocValueSpecified)
                {
                    return this.OverdrawAddonPctOverLocValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawAddonPctOverLocValue = value.GetValueOrDefault();
                this.OverdrawAddonPctOverLocValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawFeeOption", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawFeeOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawFeeOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawFeeOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawFeeOption
        {
            get
            {
                if (this.OverdrawFeeOptionValueSpecified)
                {
                    return this.OverdrawFeeOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawFeeOptionValue = value.GetValueOrDefault();
                this.OverdrawFeeOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawIncrementOverride", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawIncrementOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawIncrementOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawIncrementOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawIncrementOverride
        {
            get
            {
                if (this.OverdrawIncrementOverrideValueSpecified)
                {
                    return this.OverdrawIncrementOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawIncrementOverrideValue = value.GetValueOrDefault();
                this.OverdrawIncrementOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawNoticesfor2ndAcct", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawNoticesfor2NdAcctValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawNoticesfor2NdAcct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawNoticesfor2NdAcctValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawNoticesfor2NdAcct
        {
            get
            {
                if (this.OverdrawNoticesfor2NdAcctValueSpecified)
                {
                    return this.OverdrawNoticesfor2NdAcctValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawNoticesfor2NdAcctValue = value.GetValueOrDefault();
                this.OverdrawNoticesfor2NdAcctValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawOption", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawOption
        {
            get
            {
                if (this.OverdrawOptionValueSpecified)
                {
                    return this.OverdrawOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawOptionValue = value.GetValueOrDefault();
                this.OverdrawOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawRegDLimiting", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawRegDLimitingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawRegDLimiting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawRegDLimitingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawRegDLimiting
        {
            get
            {
                if (this.OverdrawRegDLimitingValueSpecified)
                {
                    return this.OverdrawRegDLimitingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawRegDLimitingValue = value.GetValueOrDefault();
                this.OverdrawRegDLimitingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTierOption", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawTierOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTierOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTierOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawTierOption
        {
            get
            {
                if (this.OverdrawTierOptionValueSpecified)
                {
                    return this.OverdrawTierOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTierOptionValue = value.GetValueOrDefault();
                this.OverdrawTierOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferFeeGlCode", Order=54, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawTransferFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawTransferFeeGlCode
        {
            get
            {
                if (this.OverdrawTransferFeeGlCodeValueSpecified)
                {
                    return this.OverdrawTransferFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferFeeGlCodeValue = value.GetValueOrDefault();
                this.OverdrawTransferFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawTransferNotices", Order=55, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawTransferNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawTransferNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawTransferNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawTransferNotices
        {
            get
            {
                if (this.OverdrawTransferNoticesValueSpecified)
                {
                    return this.OverdrawTransferNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawTransferNoticesValue = value.GetValueOrDefault();
                this.OverdrawTransferNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverdrawWithdrawalIncrement", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool OverdrawWithdrawalIncrementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverdrawWithdrawalIncrement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverdrawWithdrawalIncrementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverdrawWithdrawalIncrement
        {
            get
            {
                if (this.OverdrawWithdrawalIncrementValueSpecified)
                {
                    return this.OverdrawWithdrawalIncrementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverdrawWithdrawalIncrementValue = value.GetValueOrDefault();
                this.OverdrawWithdrawalIncrementValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlFeeDescrIfNotPaid", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool OvlFeeDescrIfNotPaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlFeeDescrIfNotPaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlFeeDescrIfNotPaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlFeeDescrIfNotPaid
        {
            get
            {
                if (this.OvlFeeDescrIfNotPaidValueSpecified)
                {
                    return this.OvlFeeDescrIfNotPaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlFeeDescrIfNotPaidValue = value.GetValueOrDefault();
                this.OvlFeeDescrIfNotPaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlFeeDescriptionIfPaid", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool OvlFeeDescriptionIfPaidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlFeeDescriptionIfPaid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlFeeDescriptionIfPaidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlFeeDescriptionIfPaid
        {
            get
            {
                if (this.OvlFeeDescriptionIfPaidValueSpecified)
                {
                    return this.OvlFeeDescriptionIfPaidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlFeeDescriptionIfPaidValue = value.GetValueOrDefault();
                this.OvlFeeDescriptionIfPaidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlFeeForUncollectedFunds", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool OvlFeeForUncollectedFundsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlFeeForUncollectedFunds property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlFeeForUncollectedFundsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlFeeForUncollectedFunds
        {
            get
            {
                if (this.OvlFeeForUncollectedFundsValueSpecified)
                {
                    return this.OvlFeeForUncollectedFundsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlFeeForUncollectedFundsValue = value.GetValueOrDefault();
                this.OvlFeeForUncollectedFundsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlFeeGlCode", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool OvlFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlFeeGlCode
        {
            get
            {
                if (this.OvlFeeGlCodeValueSpecified)
                {
                    return this.OvlFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlFeeGlCodeValue = value.GetValueOrDefault();
                this.OvlFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OvlNotices", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool OvlNoticesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OvlNotices property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OvlNoticesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OvlNotices
        {
            get
            {
                if (this.OvlNoticesValueSpecified)
                {
                    return this.OvlNoticesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvlNoticesValue = value.GetValueOrDefault();
                this.OvlNoticesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PmtFeeDescription", Order=62, Form=XmlSchemaForm.Unqualified)]
        public bool PmtFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PmtFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PmtFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PmtFeeDescription
        {
            get
            {
                if (this.PmtFeeDescriptionValueSpecified)
                {
                    return this.PmtFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PmtFeeDescriptionValue = value.GetValueOrDefault();
                this.PmtFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PmtFeeGlCode", Order=63, Form=XmlSchemaForm.Unqualified)]
        public bool PmtFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PmtFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PmtFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PmtFeeGlCode
        {
            get
            {
                if (this.PmtFeeGlCodeValueSpecified)
                {
                    return this.PmtFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PmtFeeGlCodeValue = value.GetValueOrDefault();
                this.PmtFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosAvailBalAuthExclList", Order=64, Form=XmlSchemaForm.Unqualified)]
        public bool PosAvailBalAuthExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosAvailBalAuthExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosAvailBalAuthExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosAvailBalAuthExclList
        {
            get
            {
                if (this.PosAvailBalAuthExclListValueSpecified)
                {
                    return this.PosAvailBalAuthExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosAvailBalAuthExclListValue = value.GetValueOrDefault();
                this.PosAvailBalAuthExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosAvailBalPostExclList", Order=65, Form=XmlSchemaForm.Unqualified)]
        public bool PosAvailBalPostExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosAvailBalPostExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosAvailBalPostExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosAvailBalPostExclList
        {
            get
            {
                if (this.PosAvailBalPostExclListValueSpecified)
                {
                    return this.PosAvailBalPostExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosAvailBalPostExclListValue = value.GetValueOrDefault();
                this.PosAvailBalPostExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PosFeeDescription", Order=66, Form=XmlSchemaForm.Unqualified)]
        public bool PosFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PosFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PosFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PosFeeDescription
        {
            get
            {
                if (this.PosFeeDescriptionValueSpecified)
                {
                    return this.PosFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PosFeeDescriptionValue = value.GetValueOrDefault();
                this.PosFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAdvFee;
        
        [XmlElementAttribute("RelAdvFee", Order=67, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAdvFee
        {
            get
            {
                return _relAdvFee;
            }
            set
            {
                _relAdvFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAdvFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAdvFeeSpecified
        {
            get
            {
                return ((this.RelAdvFee != null) 
                            && (this.RelAdvFee.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AtmFields" /> class.</para>
        /// </summary>
        public AtmFields()
        {
            this._relAdvFee = new Collection<short>();
            this._relAltCourtesyPayFee1 = new Collection<short>();
            this._relAltCourtesyPayFee2 = new Collection<short>();
            this._relAltCourtesyPayFee3 = new Collection<short>();
            this._relAltCourtesyPayFee4 = new Collection<short>();
            this._relAltCourtesyPayFee5 = new Collection<short>();
            this._relAltCourtesyPayFee6 = new Collection<short>();
            this._relAltCourtesyPayTier1 = new Collection<short>();
            this._relAltCourtesyPayTier2 = new Collection<short>();
            this._relAltCourtesyPayTier3 = new Collection<short>();
            this._relAltCourtesyPayTier4 = new Collection<short>();
            this._relAltCourtesyPayTier5 = new Collection<short>();
            this._relAltCourtesyPayTier6 = new Collection<short>();
            this._relCodes = new Collection<short>();
            this._relCourtesyPayFee1 = new Collection<short>();
            this._relCourtesyPayFee2 = new Collection<short>();
            this._relCourtesyPayFee3 = new Collection<short>();
            this._relCourtesyPayFee4 = new Collection<short>();
            this._relCourtesyPayFee5 = new Collection<short>();
            this._relCourtesyPayFee6 = new Collection<short>();
            this._relCourtesyPayTier1 = new Collection<short>();
            this._relCourtesyPayTier2 = new Collection<short>();
            this._relCourtesyPayTier3 = new Collection<short>();
            this._relCourtesyPayTier4 = new Collection<short>();
            this._relCourtesyPayTier5 = new Collection<short>();
            this._relCourtesyPayTier6 = new Collection<short>();
            this._relDepFee = new Collection<short>();
            this._relNsfFee = new Collection<short>();
            this._relOverdrawAddonXfrFee = new Collection<short>();
            this._relOverdrawComboXfrFee = new Collection<short>();
            this._relOverdrawWdXfrFee = new Collection<short>();
            this._relOvlFee = new Collection<short>();
            this._relPmtFee = new Collection<short>();
            this._relWdFee = new Collection<short>();
            this._relXfrFee = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee1;
        
        [XmlElementAttribute("RelAltCourtesyPayFee1", Order=68, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee1
        {
            get
            {
                return _relAltCourtesyPayFee1;
            }
            set
            {
                _relAltCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee1 != null) 
                            && (this.RelAltCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee2;
        
        [XmlElementAttribute("RelAltCourtesyPayFee2", Order=69, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee2
        {
            get
            {
                return _relAltCourtesyPayFee2;
            }
            set
            {
                _relAltCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee2 != null) 
                            && (this.RelAltCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee3;
        
        [XmlElementAttribute("RelAltCourtesyPayFee3", Order=70, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee3
        {
            get
            {
                return _relAltCourtesyPayFee3;
            }
            set
            {
                _relAltCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee3 != null) 
                            && (this.RelAltCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee4;
        
        [XmlElementAttribute("RelAltCourtesyPayFee4", Order=71, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee4
        {
            get
            {
                return _relAltCourtesyPayFee4;
            }
            set
            {
                _relAltCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee4 != null) 
                            && (this.RelAltCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee5;
        
        [XmlElementAttribute("RelAltCourtesyPayFee5", Order=72, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee5
        {
            get
            {
                return _relAltCourtesyPayFee5;
            }
            set
            {
                _relAltCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee5 != null) 
                            && (this.RelAltCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayFee6;
        
        [XmlElementAttribute("RelAltCourtesyPayFee6", Order=73, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayFee6
        {
            get
            {
                return _relAltCourtesyPayFee6;
            }
            set
            {
                _relAltCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayFee6 != null) 
                            && (this.RelAltCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier1;
        
        [XmlElementAttribute("RelAltCourtesyPayTier1", Order=74, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier1
        {
            get
            {
                return _relAltCourtesyPayTier1;
            }
            set
            {
                _relAltCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier1 != null) 
                            && (this.RelAltCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier2;
        
        [XmlElementAttribute("RelAltCourtesyPayTier2", Order=75, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier2
        {
            get
            {
                return _relAltCourtesyPayTier2;
            }
            set
            {
                _relAltCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier2 != null) 
                            && (this.RelAltCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier3;
        
        [XmlElementAttribute("RelAltCourtesyPayTier3", Order=76, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier3
        {
            get
            {
                return _relAltCourtesyPayTier3;
            }
            set
            {
                _relAltCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier3 != null) 
                            && (this.RelAltCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier4;
        
        [XmlElementAttribute("RelAltCourtesyPayTier4", Order=77, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier4
        {
            get
            {
                return _relAltCourtesyPayTier4;
            }
            set
            {
                _relAltCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier4 != null) 
                            && (this.RelAltCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier5;
        
        [XmlElementAttribute("RelAltCourtesyPayTier5", Order=78, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier5
        {
            get
            {
                return _relAltCourtesyPayTier5;
            }
            set
            {
                _relAltCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier5 != null) 
                            && (this.RelAltCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relAltCourtesyPayTier6;
        
        [XmlElementAttribute("RelAltCourtesyPayTier6", Order=79, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelAltCourtesyPayTier6
        {
            get
            {
                return _relAltCourtesyPayTier6;
            }
            set
            {
                _relAltCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelAltCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelAltCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelAltCourtesyPayTier6 != null) 
                            && (this.RelAltCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCodes;
        
        [XmlElementAttribute("RelCodes", Order=80, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCodes
        {
            get
            {
                return _relCodes;
            }
            set
            {
                _relCodes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCodes collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCodesSpecified
        {
            get
            {
                return ((this.RelCodes != null) 
                            && (this.RelCodes.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee1;
        
        [XmlElementAttribute("RelCourtesyPayFee1", Order=81, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee1
        {
            get
            {
                return _relCourtesyPayFee1;
            }
            set
            {
                _relCourtesyPayFee1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee1Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee1 != null) 
                            && (this.RelCourtesyPayFee1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee2;
        
        [XmlElementAttribute("RelCourtesyPayFee2", Order=82, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee2
        {
            get
            {
                return _relCourtesyPayFee2;
            }
            set
            {
                _relCourtesyPayFee2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee2Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee2 != null) 
                            && (this.RelCourtesyPayFee2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee3;
        
        [XmlElementAttribute("RelCourtesyPayFee3", Order=83, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee3
        {
            get
            {
                return _relCourtesyPayFee3;
            }
            set
            {
                _relCourtesyPayFee3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee3Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee3 != null) 
                            && (this.RelCourtesyPayFee3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee4;
        
        [XmlElementAttribute("RelCourtesyPayFee4", Order=84, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee4
        {
            get
            {
                return _relCourtesyPayFee4;
            }
            set
            {
                _relCourtesyPayFee4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee4Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee4 != null) 
                            && (this.RelCourtesyPayFee4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee5;
        
        [XmlElementAttribute("RelCourtesyPayFee5", Order=85, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee5
        {
            get
            {
                return _relCourtesyPayFee5;
            }
            set
            {
                _relCourtesyPayFee5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee5Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee5 != null) 
                            && (this.RelCourtesyPayFee5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayFee6;
        
        [XmlElementAttribute("RelCourtesyPayFee6", Order=86, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayFee6
        {
            get
            {
                return _relCourtesyPayFee6;
            }
            set
            {
                _relCourtesyPayFee6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayFee6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayFee6Specified
        {
            get
            {
                return ((this.RelCourtesyPayFee6 != null) 
                            && (this.RelCourtesyPayFee6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier1;
        
        [XmlElementAttribute("RelCourtesyPayTier1", Order=87, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier1
        {
            get
            {
                return _relCourtesyPayTier1;
            }
            set
            {
                _relCourtesyPayTier1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier1Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier1 != null) 
                            && (this.RelCourtesyPayTier1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier2;
        
        [XmlElementAttribute("RelCourtesyPayTier2", Order=88, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier2
        {
            get
            {
                return _relCourtesyPayTier2;
            }
            set
            {
                _relCourtesyPayTier2 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier2 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier2Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier2 != null) 
                            && (this.RelCourtesyPayTier2.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier3;
        
        [XmlElementAttribute("RelCourtesyPayTier3", Order=89, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier3
        {
            get
            {
                return _relCourtesyPayTier3;
            }
            set
            {
                _relCourtesyPayTier3 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier3 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier3Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier3 != null) 
                            && (this.RelCourtesyPayTier3.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier4;
        
        [XmlElementAttribute("RelCourtesyPayTier4", Order=90, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier4
        {
            get
            {
                return _relCourtesyPayTier4;
            }
            set
            {
                _relCourtesyPayTier4 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier4 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier4Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier4 != null) 
                            && (this.RelCourtesyPayTier4.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier5;
        
        [XmlElementAttribute("RelCourtesyPayTier5", Order=91, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier5
        {
            get
            {
                return _relCourtesyPayTier5;
            }
            set
            {
                _relCourtesyPayTier5 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier5 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier5Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier5 != null) 
                            && (this.RelCourtesyPayTier5.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relCourtesyPayTier6;
        
        [XmlElementAttribute("RelCourtesyPayTier6", Order=92, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelCourtesyPayTier6
        {
            get
            {
                return _relCourtesyPayTier6;
            }
            set
            {
                _relCourtesyPayTier6 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelCourtesyPayTier6 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelCourtesyPayTier6Specified
        {
            get
            {
                return ((this.RelCourtesyPayTier6 != null) 
                            && (this.RelCourtesyPayTier6.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relDepFee;
        
        [XmlElementAttribute("RelDepFee", Order=93, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelDepFee
        {
            get
            {
                return _relDepFee;
            }
            set
            {
                _relDepFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelDepFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelDepFeeSpecified
        {
            get
            {
                return ((this.RelDepFee != null) 
                            && (this.RelDepFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relNsfFee;
        
        [XmlElementAttribute("RelNsfFee", Order=94, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelNsfFee
        {
            get
            {
                return _relNsfFee;
            }
            set
            {
                _relNsfFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelNsfFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelNsfFeeSpecified
        {
            get
            {
                return ((this.RelNsfFee != null) 
                            && (this.RelNsfFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOverdrawAddonXfrFee;
        
        [XmlElementAttribute("RelOverdrawAddonXfrFee", Order=95, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOverdrawAddonXfrFee
        {
            get
            {
                return _relOverdrawAddonXfrFee;
            }
            set
            {
                _relOverdrawAddonXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawAddonXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawAddonXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawAddonXfrFee != null) 
                            && (this.RelOverdrawAddonXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOverdrawComboXfrFee;
        
        [XmlElementAttribute("RelOverdrawComboXfrFee", Order=96, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOverdrawComboXfrFee
        {
            get
            {
                return _relOverdrawComboXfrFee;
            }
            set
            {
                _relOverdrawComboXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawComboXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawComboXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawComboXfrFee != null) 
                            && (this.RelOverdrawComboXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOverdrawWdXfrFee;
        
        [XmlElementAttribute("RelOverdrawWdXfrFee", Order=97, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOverdrawWdXfrFee
        {
            get
            {
                return _relOverdrawWdXfrFee;
            }
            set
            {
                _relOverdrawWdXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOverdrawWdXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOverdrawWdXfrFeeSpecified
        {
            get
            {
                return ((this.RelOverdrawWdXfrFee != null) 
                            && (this.RelOverdrawWdXfrFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relOvlFee;
        
        [XmlElementAttribute("RelOvlFee", Order=98, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelOvlFee
        {
            get
            {
                return _relOvlFee;
            }
            set
            {
                _relOvlFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelOvlFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelOvlFeeSpecified
        {
            get
            {
                return ((this.RelOvlFee != null) 
                            && (this.RelOvlFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relPmtFee;
        
        [XmlElementAttribute("RelPmtFee", Order=99, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelPmtFee
        {
            get
            {
                return _relPmtFee;
            }
            set
            {
                _relPmtFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelPmtFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelPmtFeeSpecified
        {
            get
            {
                return ((this.RelPmtFee != null) 
                            && (this.RelPmtFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relWdFee;
        
        [XmlElementAttribute("RelWdFee", Order=100, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelWdFee
        {
            get
            {
                return _relWdFee;
            }
            set
            {
                _relWdFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelWdFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelWdFeeSpecified
        {
            get
            {
                return ((this.RelWdFee != null) 
                            && (this.RelWdFee.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _relXfrFee;
        
        [XmlElementAttribute("RelXfrFee", Order=101, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> RelXfrFee
        {
            get
            {
                return _relXfrFee;
            }
            set
            {
                _relXfrFee = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the RelXfrFee collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RelXfrFeeSpecified
        {
            get
            {
                return ((this.RelXfrFee != null) 
                            && (this.RelXfrFee.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReportTitle", Order=102, Form=XmlSchemaForm.Unqualified)]
        public bool ReportTitleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReportTitle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReportTitleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ReportTitle
        {
            get
            {
                if (this.ReportTitleValueSpecified)
                {
                    return this.ReportTitleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReportTitleValue = value.GetValueOrDefault();
                this.ReportTitleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SbAvailBalApprExclList", Order=103, Form=XmlSchemaForm.Unqualified)]
        public bool SbAvailBalApprExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SbAvailBalApprExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SbAvailBalApprExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SbAvailBalApprExclList
        {
            get
            {
                if (this.SbAvailBalApprExclListValueSpecified)
                {
                    return this.SbAvailBalApprExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SbAvailBalApprExclListValue = value.GetValueOrDefault();
                this.SbAvailBalApprExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SbAvailBalPostExclList", Order=104, Form=XmlSchemaForm.Unqualified)]
        public bool SbAvailBalPostExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SbAvailBalPostExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SbAvailBalPostExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SbAvailBalPostExclList
        {
            get
            {
                if (this.SbAvailBalPostExclListValueSpecified)
                {
                    return this.SbAvailBalPostExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SbAvailBalPostExclListValue = value.GetValueOrDefault();
                this.SbAvailBalPostExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SharedBranchFeeDescription", Order=105, Form=XmlSchemaForm.Unqualified)]
        public bool SharedBranchFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SharedBranchFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SharedBranchFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SharedBranchFeeDescription
        {
            get
            {
                if (this.SharedBranchFeeDescriptionValueSpecified)
                {
                    return this.SharedBranchFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SharedBranchFeeDescriptionValue = value.GetValueOrDefault();
                this.SharedBranchFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigAvailBalAuthExclList", Order=106, Form=XmlSchemaForm.Unqualified)]
        public bool SigAvailBalAuthExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigAvailBalAuthExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigAvailBalAuthExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigAvailBalAuthExclList
        {
            get
            {
                if (this.SigAvailBalAuthExclListValueSpecified)
                {
                    return this.SigAvailBalAuthExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigAvailBalAuthExclListValue = value.GetValueOrDefault();
                this.SigAvailBalAuthExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigAvailBalPostExclList", Order=107, Form=XmlSchemaForm.Unqualified)]
        public bool SigAvailBalPostExclListValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigAvailBalPostExclList property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigAvailBalPostExclListValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigAvailBalPostExclList
        {
            get
            {
                if (this.SigAvailBalPostExclListValueSpecified)
                {
                    return this.SigAvailBalPostExclListValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigAvailBalPostExclListValue = value.GetValueOrDefault();
                this.SigAvailBalPostExclListValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdBelowAvailableOption", Order=108, Form=XmlSchemaForm.Unqualified)]
        public bool WdBelowAvailableOptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdBelowAvailableOption property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdBelowAvailableOptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdBelowAvailableOption
        {
            get
            {
                if (this.WdBelowAvailableOptionValueSpecified)
                {
                    return this.WdBelowAvailableOptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdBelowAvailableOptionValue = value.GetValueOrDefault();
                this.WdBelowAvailableOptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdFeeDescription", Order=109, Form=XmlSchemaForm.Unqualified)]
        public bool WdFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdFeeDescription
        {
            get
            {
                if (this.WdFeeDescriptionValueSpecified)
                {
                    return this.WdFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdFeeDescriptionValue = value.GetValueOrDefault();
                this.WdFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdFeeGlCode", Order=110, Form=XmlSchemaForm.Unqualified)]
        public bool WdFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> WdFeeGlCode
        {
            get
            {
                if (this.WdFeeGlCodeValueSpecified)
                {
                    return this.WdFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdFeeGlCodeValue = value.GetValueOrDefault();
                this.WdFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrFeeDescription", Order=111, Form=XmlSchemaForm.Unqualified)]
        public bool XfrFeeDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrFeeDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrFeeDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XfrFeeDescription
        {
            get
            {
                if (this.XfrFeeDescriptionValueSpecified)
                {
                    return this.XfrFeeDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrFeeDescriptionValue = value.GetValueOrDefault();
                this.XfrFeeDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XfrFeeGlCode", Order=112, Form=XmlSchemaForm.Unqualified)]
        public bool XfrFeeGlCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XfrFeeGlCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XfrFeeGlCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> XfrFeeGlCode
        {
            get
            {
                if (this.XfrFeeGlCodeValueSpecified)
                {
                    return this.XfrFeeGlCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XfrFeeGlCodeValue = value.GetValueOrDefault();
                this.XfrFeeGlCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=113, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=114)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
