//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParameterService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParameterService\generated-output -n ParameterService
namespace ParameterService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("PreferenceDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("PreferenceDefault", Namespace="http://www.symxchange.generated.symitar.com/crud/parameter/dto/update")]
    [XmlIncludeAttribute(typeof(PreferenceDefaultFields_2))]
    public partial class PreferenceDefault_2
    {
        
        [XmlElementAttribute("AudioAccess", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AudioAccess { get; set; }
        
        [XmlElementAttribute("AudioAccess2", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string AudioAccess2 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AudioEnable", Order=2, Form=XmlSchemaForm.Unqualified)]
        public short AudioEnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AudioEnable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AudioEnableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AudioEnable
        {
            get
            {
                if (this.AudioEnableValueSpecified)
                {
                    return this.AudioEnableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AudioEnableValue = value.GetValueOrDefault();
                this.AudioEnableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayCountLimit", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short BillPayCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BillPayCountLimit
        {
            get
            {
                if (this.BillPayCountLimitValueSpecified)
                {
                    return this.BillPayCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayCountLimitValue = value.GetValueOrDefault();
                this.BillPayCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayLimit", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal BillPayLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillPayLimit
        {
            get
            {
                if (this.BillPayLimitValueSpecified)
                {
                    return this.BillPayLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayLimitValue = value.GetValueOrDefault();
                this.BillPayLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillPayMax", Order=5, Form=XmlSchemaForm.Unqualified)]
        public decimal BillPayMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillPayMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillPayMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BillPayMax
        {
            get
            {
                if (this.BillPayMaxValueSpecified)
                {
                    return this.BillPayMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillPayMaxValue = value.GetValueOrDefault();
                this.BillPayMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepCountLimit", Order=6, Form=XmlSchemaForm.Unqualified)]
        public short DepCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DepCountLimit
        {
            get
            {
                if (this.DepCountLimitValueSpecified)
                {
                    return this.DepCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepCountLimitValue = value.GetValueOrDefault();
                this.DepCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepLimit", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal DepLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DepLimit
        {
            get
            {
                if (this.DepLimitValueSpecified)
                {
                    return this.DepLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepLimitValue = value.GetValueOrDefault();
                this.DepLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DepMax", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal DepMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DepMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DepMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DepMax
        {
            get
            {
                if (this.DepMaxValueSpecified)
                {
                    return this.DepMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DepMaxValue = value.GetValueOrDefault();
                this.DepMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbEnable", Order=9, Form=XmlSchemaForm.Unqualified)]
        public short HbEnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbEnable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbEnableValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbEnable
        {
            get
            {
                if (this.HbEnableValueSpecified)
                {
                    return this.HbEnableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbEnableValue = value.GetValueOrDefault();
                this.HbEnableValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HbMode", Order=10, Form=XmlSchemaForm.Unqualified)]
        public short HbModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HbMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HbModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HbMode
        {
            get
            {
                if (this.HbModeValueSpecified)
                {
                    return this.HbModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HbModeValue = value.GetValueOrDefault();
                this.HbModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InteractMode", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short InteractModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteractMode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InteractModeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> InteractMode
        {
            get
            {
                if (this.InteractModeValueSpecified)
                {
                    return this.InteractModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteractModeValue = value.GetValueOrDefault();
                this.InteractModeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Language", Order=12, Form=XmlSchemaForm.Unqualified)]
        public short LanguageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Language property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LanguageValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Language
        {
            get
            {
                if (this.LanguageValueSpecified)
                {
                    return this.LanguageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LanguageValue = value.GetValueOrDefault();
                this.LanguageValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ListTransactions", Order=13, Form=XmlSchemaForm.Unqualified)]
        public short ListTransactionsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ListTransactions property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ListTransactionsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ListTransactions
        {
            get
            {
                if (this.ListTransactionsValueSpecified)
                {
                    return this.ListTransactionsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListTransactionsValue = value.GetValueOrDefault();
                this.ListTransactionsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Reference", Order=14, Form=XmlSchemaForm.Unqualified)]
        public string Reference { get; set; }
        
        [XmlElementAttribute("TranCodes", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string TranCodes { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=16, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short UserCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode
        {
            get
            {
                if (this.UserCodeValueSpecified)
                {
                    return this.UserCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCodeValue = value.GetValueOrDefault();
                this.UserCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCashCountLimit", Order=18, Form=XmlSchemaForm.Unqualified)]
        public short WdCashCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCashCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCashCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WdCashCountLimit
        {
            get
            {
                if (this.WdCashCountLimitValueSpecified)
                {
                    return this.WdCashCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCashCountLimitValue = value.GetValueOrDefault();
                this.WdCashCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCashLimit", Order=19, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCashLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCashLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCashLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCashLimit
        {
            get
            {
                if (this.WdCashLimitValueSpecified)
                {
                    return this.WdCashLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCashLimitValue = value.GetValueOrDefault();
                this.WdCashLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCashMax", Order=20, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCashMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCashMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCashMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCashMax
        {
            get
            {
                if (this.WdCashMaxValueSpecified)
                {
                    return this.WdCashMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCashMaxValue = value.GetValueOrDefault();
                this.WdCashMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckCountLimit", Order=21, Form=XmlSchemaForm.Unqualified)]
        public short WdCheckCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> WdCheckCountLimit
        {
            get
            {
                if (this.WdCheckCountLimitValueSpecified)
                {
                    return this.WdCheckCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckCountLimitValue = value.GetValueOrDefault();
                this.WdCheckCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckLimit", Order=22, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCheckLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCheckLimit
        {
            get
            {
                if (this.WdCheckLimitValueSpecified)
                {
                    return this.WdCheckLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckLimitValue = value.GetValueOrDefault();
                this.WdCheckLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("WdCheckMax", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal WdCheckMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WdCheckMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WdCheckMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> WdCheckMax
        {
            get
            {
                if (this.WdCheckMaxValueSpecified)
                {
                    return this.WdCheckMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WdCheckMaxValue = value.GetValueOrDefault();
                this.WdCheckMaxValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferCountLimit", Order=24, Form=XmlSchemaForm.Unqualified)]
        public short XferCountLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferCountLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferCountLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> XferCountLimit
        {
            get
            {
                if (this.XferCountLimitValueSpecified)
                {
                    return this.XferCountLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferCountLimitValue = value.GetValueOrDefault();
                this.XferCountLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferLimit", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal XferLimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferLimit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferLimitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> XferLimit
        {
            get
            {
                if (this.XferLimitValueSpecified)
                {
                    return this.XferLimitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferLimitValue = value.GetValueOrDefault();
                this.XferLimitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("XferMax", Order=26, Form=XmlSchemaForm.Unqualified)]
        public decimal XferMaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the XferMax property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool XferMaxValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> XferMax
        {
            get
            {
                if (this.XferMaxValueSpecified)
                {
                    return this.XferMaxValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.XferMaxValue = value.GetValueOrDefault();
                this.XferMaxValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=27, Form=XmlSchemaForm.Unqualified)]
        public ParameterService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=28)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PreferenceDefault_2" /> class.</para>
        /// </summary>
        public PreferenceDefault_2()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
