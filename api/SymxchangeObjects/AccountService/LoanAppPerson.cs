//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanAppPerson", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LoanAppPerson", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class LoanAppPerson
    {
        
        [XmlElementAttribute("AccountNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccountNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDuty", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short ActiveDutyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDuty property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ActiveDuty
        {
            get
            {
                if (this.ActiveDutyValueSpecified)
                {
                    return this.ActiveDutyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutyValue = value.GetValueOrDefault();
                this.ActiveDutyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDutySeparationDate", Order=2, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDutySeparationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDutySeparationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutySeparationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDutySeparationDate
        {
            get
            {
                if (this.ActiveDutySeparationDateValueSpecified)
                {
                    return this.ActiveDutySeparationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutySeparationDateValue = value.GetValueOrDefault();
                this.ActiveDutySeparationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDutyStartDate", Order=3, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDutyStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDutyStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutyStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDutyStartDate
        {
            get
            {
                if (this.ActiveDutyStartDateValueSpecified)
                {
                    return this.ActiveDutyStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutyStartDateValue = value.GetValueOrDefault();
                this.ActiveDutyStartDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActiveDutyVerificationDate", Order=4, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActiveDutyVerificationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActiveDutyVerificationDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveDutyVerificationDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActiveDutyVerificationDate
        {
            get
            {
                if (this.ActiveDutyVerificationDateValueSpecified)
                {
                    return this.ActiveDutyVerificationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveDutyVerificationDateValue = value.GetValueOrDefault();
                this.ActiveDutyVerificationDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AddressType", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short AddressTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AddressType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AddressTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AddressType
        {
            get
            {
                if (this.AddressTypeValueSpecified)
                {
                    return this.AddressTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AddressTypeValue = value.GetValueOrDefault();
                this.AddressTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("AltEmail", Order=6, Form=XmlSchemaForm.Unqualified)]
        public string AltEmail { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Bankruptcy", Order=7, Form=XmlSchemaForm.Unqualified)]
        public short BankruptcyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bankruptcy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BankruptcyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Bankruptcy
        {
            get
            {
                if (this.BankruptcyValueSpecified)
                {
                    return this.BankruptcyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BankruptcyValue = value.GetValueOrDefault();
                this.BankruptcyValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BeneficialOwner", Order=8, Form=XmlSchemaForm.Unqualified)]
        public short BeneficialOwnerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeneficialOwner property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BeneficialOwnerValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BeneficialOwner
        {
            get
            {
                if (this.BeneficialOwnerValueSpecified)
                {
                    return this.BeneficialOwnerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BeneficialOwnerValue = value.GetValueOrDefault();
                this.BeneficialOwnerValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BeneficialPercent", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal BeneficialPercentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeneficialPercent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BeneficialPercentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BeneficialPercent
        {
            get
            {
                if (this.BeneficialPercentValueSpecified)
                {
                    return this.BeneficialPercentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BeneficialPercentValue = value.GetValueOrDefault();
                this.BeneficialPercentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BirthDate", Order=10, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime BirthDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BirthDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BirthDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> BirthDate
        {
            get
            {
                if (this.BirthDateValueSpecified)
                {
                    return this.BirthDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BirthDateValue = value.GetValueOrDefault();
                this.BirthDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Citizenship", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short CitizenshipValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Citizenship property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CitizenshipValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Citizenship
        {
            get
            {
                if (this.CitizenshipValueSpecified)
                {
                    return this.CitizenshipValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CitizenshipValue = value.GetValueOrDefault();
                this.CitizenshipValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("City", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string City { get; set; }
        
        [XmlElementAttribute("CosignForWhom", Order=13, Form=XmlSchemaForm.Unqualified)]
        public string CosignForWhom { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CosignOtherLoan", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short CosignOtherLoanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CosignOtherLoan property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CosignOtherLoanValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CosignOtherLoan
        {
            get
            {
                if (this.CosignOtherLoanValueSpecified)
                {
                    return this.CosignOtherLoanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CosignOtherLoanValue = value.GetValueOrDefault();
                this.CosignOtherLoanValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CosignToWhom", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string CosignToWhom { get; set; }
        
        [XmlElementAttribute("Country", Order=16, Form=XmlSchemaForm.Unqualified)]
        public string Country { get; set; }
        
        [XmlElementAttribute("CountryCode", Order=17, Form=XmlSchemaForm.Unqualified)]
        public string CountryCode { get; set; }
        
        [XmlElementAttribute("County", Order=18, Form=XmlSchemaForm.Unqualified)]
        public string County { get; set; }
        
        [XmlElementAttribute("CurrEmpAddress", Order=19, Form=XmlSchemaForm.Unqualified)]
        public string CurrEmpAddress { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrEmpEndDate", Order=20, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CurrEmpEndDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrEmpEndDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrEmpEndDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CurrEmpEndDate
        {
            get
            {
                if (this.CurrEmpEndDateValueSpecified)
                {
                    return this.CurrEmpEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrEmpEndDateValue = value.GetValueOrDefault();
                this.CurrEmpEndDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrEmpGrossMonthlyPay", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrEmpGrossMonthlyPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrEmpGrossMonthlyPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrEmpGrossMonthlyPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrEmpGrossMonthlyPay
        {
            get
            {
                if (this.CurrEmpGrossMonthlyPayValueSpecified)
                {
                    return this.CurrEmpGrossMonthlyPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrEmpGrossMonthlyPayValue = value.GetValueOrDefault();
                this.CurrEmpGrossMonthlyPayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrEmpMonthsEmp", Order=22, Form=XmlSchemaForm.Unqualified)]
        public short CurrEmpMonthsEmpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrEmpMonthsEmp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrEmpMonthsEmpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CurrEmpMonthsEmp
        {
            get
            {
                if (this.CurrEmpMonthsEmpValueSpecified)
                {
                    return this.CurrEmpMonthsEmpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrEmpMonthsEmpValue = value.GetValueOrDefault();
                this.CurrEmpMonthsEmpValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CurrEmpName", Order=23, Form=XmlSchemaForm.Unqualified)]
        public string CurrEmpName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrEmpNetMonthlyPay", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal CurrEmpNetMonthlyPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrEmpNetMonthlyPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrEmpNetMonthlyPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> CurrEmpNetMonthlyPay
        {
            get
            {
                if (this.CurrEmpNetMonthlyPayValueSpecified)
                {
                    return this.CurrEmpNetMonthlyPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrEmpNetMonthlyPayValue = value.GetValueOrDefault();
                this.CurrEmpNetMonthlyPayValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CurrEmpOccupation", Order=25, Form=XmlSchemaForm.Unqualified)]
        public string CurrEmpOccupation { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrEmpStartDate", Order=26, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CurrEmpStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrEmpStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrEmpStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CurrEmpStartDate
        {
            get
            {
                if (this.CurrEmpStartDateValueSpecified)
                {
                    return this.CurrEmpStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrEmpStartDateValue = value.GetValueOrDefault();
                this.CurrEmpStartDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CurrEmpSupervisor", Order=27, Form=XmlSchemaForm.Unqualified)]
        public string CurrEmpSupervisor { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CurrEmpYearsEmp", Order=28, Form=XmlSchemaForm.Unqualified)]
        public short CurrEmpYearsEmpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrEmpYearsEmp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CurrEmpYearsEmpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CurrEmpYearsEmp
        {
            get
            {
                if (this.CurrEmpYearsEmpValueSpecified)
                {
                    return this.CurrEmpYearsEmpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CurrEmpYearsEmpValue = value.GetValueOrDefault();
                this.CurrEmpYearsEmpValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonDependentAge> _dependentAge;
        
        [XmlElementAttribute("DependentAge", Order=29, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonDependentAge> DependentAge
        {
            get
            {
                return _dependentAge;
            }
            set
            {
                _dependentAge = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DependentAge collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DependentAgeSpecified
        {
            get
            {
                return ((this.DependentAge != null) 
                            && (this.DependentAge.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanAppPerson" /> class.</para>
        /// </summary>
        public LoanAppPerson()
        {
            this._dependentAge = new Collection<LoanAppPersonDependentAge>();
            this._derogStatus = new Collection<LoanAppPersonDerogStatus>();
            this._hmdaAppScoringModelOther = new Collection<LoanAppPersonHmdaAppScoringModelOther>();
            this._hmdaEthnicity = new Collection<LoanAppPersonHmdaEthnicity>();
            this._hmdaEthnicityOther = new Collection<LoanAppPersonHmdaEthnicityOther>();
            this._hmdaRace = new Collection<LoanAppPersonHmdaRace>();
            this._hmdaRaceOther1 = new Collection<LoanAppPersonHmdaRaceOther1>();
            this._hmdaRaceOther27 = new Collection<LoanAppPersonHmdaRaceOther27>();
            this._hmdaRaceOther44 = new Collection<LoanAppPersonHmdaRaceOther44>();
            this._identDocFlag = new Collection<LoanAppPersonIdentDocFlag>();
            this._identIdDescription = new Collection<LoanAppPersonIdentIdDescription>();
            this._identIdExpireDate = new Collection<LoanAppPersonIdentIdExpireDate>();
            this._identIdIssueDate = new Collection<LoanAppPersonIdentIdIssueDate>();
            this._identIdNumber = new Collection<LoanAppPersonIdentIdNumber>();
            this._identIdType = new Collection<LoanAppPersonIdentIdType>();
            this._identIdVerifyDate = new Collection<LoanAppPersonIdentIdVerifyDate>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DependentCount", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short DependentCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DependentCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DependentCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> DependentCount
        {
            get
            {
                if (this.DependentCountValueSpecified)
                {
                    return this.DependentCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DependentCountValue = value.GetValueOrDefault();
                this.DependentCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DerogExplanation", Order=31, Form=XmlSchemaForm.Unqualified)]
        public string DerogExplanation { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonDerogStatus> _derogStatus;
        
        [XmlElementAttribute("DerogStatus", Order=32, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonDerogStatus> DerogStatus
        {
            get
            {
                return _derogStatus;
            }
            set
            {
                _derogStatus = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DerogStatus collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DerogStatusSpecified
        {
            get
            {
                return ((this.DerogStatus != null) 
                            && (this.DerogStatus.Count != 0));
            }
        }
        
        [XmlElementAttribute("DriversLic", Order=33, Form=XmlSchemaForm.Unqualified)]
        public string DriversLic { get; set; }
        
        [XmlElementAttribute("DriversLicState", Order=34, Form=XmlSchemaForm.Unqualified)]
        public string DriversLicState { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EducationYears", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short EducationYearsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EducationYears property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EducationYearsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EducationYears
        {
            get
            {
                if (this.EducationYearsValueSpecified)
                {
                    return this.EducationYearsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EducationYearsValue = value.GetValueOrDefault();
                this.EducationYearsValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Email", Order=36, Form=XmlSchemaForm.Unqualified)]
        public string Email { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EmpHoursPerWeek", Order=37, Form=XmlSchemaForm.Unqualified)]
        public short EmpHoursPerWeekValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmpHoursPerWeek property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmpHoursPerWeekValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EmpHoursPerWeek
        {
            get
            {
                if (this.EmpHoursPerWeekValueSpecified)
                {
                    return this.EmpHoursPerWeekValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmpHoursPerWeekValue = value.GetValueOrDefault();
                this.EmpHoursPerWeekValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EmploymentReturnDate", Order=38, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EmploymentReturnDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmploymentReturnDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmploymentReturnDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EmploymentReturnDate
        {
            get
            {
                if (this.EmploymentReturnDateValueSpecified)
                {
                    return this.EmploymentReturnDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmploymentReturnDateValue = value.GetValueOrDefault();
                this.EmploymentReturnDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EmploymentStatus", Order=39, Form=XmlSchemaForm.Unqualified)]
        public short EmploymentStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmploymentStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmploymentStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> EmploymentStatus
        {
            get
            {
                if (this.EmploymentStatusValueSpecified)
                {
                    return this.EmploymentStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmploymentStatusValue = value.GetValueOrDefault();
                this.EmploymentStatusValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ExtendedName", Order=40, Form=XmlSchemaForm.Unqualified)]
        public string ExtendedName { get; set; }
        
        [XmlElementAttribute("ExtraAddress", Order=41, Form=XmlSchemaForm.Unqualified)]
        public string ExtraAddress { get; set; }
        
        [XmlElementAttribute("ExtraInfo", Order=42, Form=XmlSchemaForm.Unqualified)]
        public string ExtraInfo { get; set; }
        
        [XmlElementAttribute("First", Order=43, Form=XmlSchemaForm.Unqualified)]
        public string First { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Headquarters", Order=44, Form=XmlSchemaForm.Unqualified)]
        public short HeadquartersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Headquarters property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HeadquartersValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Headquarters
        {
            get
            {
                if (this.HeadquartersValueSpecified)
                {
                    return this.HeadquartersValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeadquartersValue = value.GetValueOrDefault();
                this.HeadquartersValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaAge", Order=45, Form=XmlSchemaForm.Unqualified)]
        public short HmdaAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaAge property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaAgeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaAge
        {
            get
            {
                if (this.HmdaAgeValueSpecified)
                {
                    return this.HmdaAgeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaAgeValue = value.GetValueOrDefault();
                this.HmdaAgeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaAppScoringModel", Order=46, Form=XmlSchemaForm.Unqualified)]
        public short HmdaAppScoringModelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaAppScoringModel property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaAppScoringModelValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaAppScoringModel
        {
            get
            {
                if (this.HmdaAppScoringModelValueSpecified)
                {
                    return this.HmdaAppScoringModelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaAppScoringModelValue = value.GetValueOrDefault();
                this.HmdaAppScoringModelValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaAppScoringModelOther> _hmdaAppScoringModelOther;
        
        [XmlElementAttribute("HmdaAppScoringModelOther", Order=47, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaAppScoringModelOther> HmdaAppScoringModelOther
        {
            get
            {
                return _hmdaAppScoringModelOther;
            }
            set
            {
                _hmdaAppScoringModelOther = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaAppScoringModelOther collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaAppScoringModelOtherSpecified
        {
            get
            {
                return ((this.HmdaAppScoringModelOther != null) 
                            && (this.HmdaAppScoringModelOther.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaCreditScore", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short HmdaCreditScoreValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaCreditScore property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaCreditScoreValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaCreditScore
        {
            get
            {
                if (this.HmdaCreditScoreValueSpecified)
                {
                    return this.HmdaCreditScoreValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaCreditScoreValue = value.GetValueOrDefault();
                this.HmdaCreditScoreValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaEthnicity> _hmdaEthnicity;
        
        [XmlElementAttribute("HmdaEthnicity", Order=49, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaEthnicity> HmdaEthnicity
        {
            get
            {
                return _hmdaEthnicity;
            }
            set
            {
                _hmdaEthnicity = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaEthnicity collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaEthnicitySpecified
        {
            get
            {
                return ((this.HmdaEthnicity != null) 
                            && (this.HmdaEthnicity.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaEthnicityOther> _hmdaEthnicityOther;
        
        [XmlElementAttribute("HmdaEthnicityOther", Order=50, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaEthnicityOther> HmdaEthnicityOther
        {
            get
            {
                return _hmdaEthnicityOther;
            }
            set
            {
                _hmdaEthnicityOther = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaEthnicityOther collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaEthnicityOtherSpecified
        {
            get
            {
                return ((this.HmdaEthnicityOther != null) 
                            && (this.HmdaEthnicityOther.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaEthnicityVisInd", Order=51, Form=XmlSchemaForm.Unqualified)]
        public short HmdaEthnicityVisIndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaEthnicityVisInd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaEthnicityVisIndValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaEthnicityVisInd
        {
            get
            {
                if (this.HmdaEthnicityVisIndValueSpecified)
                {
                    return this.HmdaEthnicityVisIndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaEthnicityVisIndValue = value.GetValueOrDefault();
                this.HmdaEthnicityVisIndValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaRace> _hmdaRace;
        
        [XmlElementAttribute("HmdaRace", Order=52, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaRace> HmdaRace
        {
            get
            {
                return _hmdaRace;
            }
            set
            {
                _hmdaRace = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaRace collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaRaceSpecified
        {
            get
            {
                return ((this.HmdaRace != null) 
                            && (this.HmdaRace.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaRaceOther1> _hmdaRaceOther1;
        
        [XmlElementAttribute("HmdaRaceOther1", Order=53, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaRaceOther1> HmdaRaceOther1
        {
            get
            {
                return _hmdaRaceOther1;
            }
            set
            {
                _hmdaRaceOther1 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaRaceOther1 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaRaceOther1Specified
        {
            get
            {
                return ((this.HmdaRaceOther1 != null) 
                            && (this.HmdaRaceOther1.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaRaceOther27> _hmdaRaceOther27;
        
        [XmlElementAttribute("HmdaRaceOther27", Order=54, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaRaceOther27> HmdaRaceOther27
        {
            get
            {
                return _hmdaRaceOther27;
            }
            set
            {
                _hmdaRaceOther27 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaRaceOther27 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaRaceOther27Specified
        {
            get
            {
                return ((this.HmdaRaceOther27 != null) 
                            && (this.HmdaRaceOther27.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonHmdaRaceOther44> _hmdaRaceOther44;
        
        [XmlElementAttribute("HmdaRaceOther44", Order=55, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonHmdaRaceOther44> HmdaRaceOther44
        {
            get
            {
                return _hmdaRaceOther44;
            }
            set
            {
                _hmdaRaceOther44 = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HmdaRaceOther44 collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool HmdaRaceOther44Specified
        {
            get
            {
                return ((this.HmdaRaceOther44 != null) 
                            && (this.HmdaRaceOther44.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaRaceVisInd", Order=56, Form=XmlSchemaForm.Unqualified)]
        public short HmdaRaceVisIndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaRaceVisInd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaRaceVisIndValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaRaceVisInd
        {
            get
            {
                if (this.HmdaRaceVisIndValueSpecified)
                {
                    return this.HmdaRaceVisIndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaRaceVisIndValue = value.GetValueOrDefault();
                this.HmdaRaceVisIndValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaSexInd", Order=57, Form=XmlSchemaForm.Unqualified)]
        public short HmdaSexIndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaSexInd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaSexIndValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaSexInd
        {
            get
            {
                if (this.HmdaSexIndValueSpecified)
                {
                    return this.HmdaSexIndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaSexIndValue = value.GetValueOrDefault();
                this.HmdaSexIndValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HmdaSexVisInd", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short HmdaSexVisIndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HmdaSexVisInd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HmdaSexVisIndValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> HmdaSexVisInd
        {
            get
            {
                if (this.HmdaSexVisIndValueSpecified)
                {
                    return this.HmdaSexVisIndValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HmdaSexVisIndValue = value.GetValueOrDefault();
                this.HmdaSexVisIndValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("HomePhone", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string HomePhone { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentDocFlag> _identDocFlag;
        
        [XmlElementAttribute("IdentDocFlag", Order=60, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentDocFlag> IdentDocFlag
        {
            get
            {
                return _identDocFlag;
            }
            set
            {
                _identDocFlag = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentDocFlag collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentDocFlagSpecified
        {
            get
            {
                return ((this.IdentDocFlag != null) 
                            && (this.IdentDocFlag.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentIdDescription> _identIdDescription;
        
        [XmlElementAttribute("IdentIdDescription", Order=61, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentIdDescription> IdentIdDescription
        {
            get
            {
                return _identIdDescription;
            }
            set
            {
                _identIdDescription = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdDescription collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdDescriptionSpecified
        {
            get
            {
                return ((this.IdentIdDescription != null) 
                            && (this.IdentIdDescription.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentIdExpireDate> _identIdExpireDate;
        
        [XmlElementAttribute("IdentIdExpireDate", Order=62, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentIdExpireDate> IdentIdExpireDate
        {
            get
            {
                return _identIdExpireDate;
            }
            set
            {
                _identIdExpireDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdExpireDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdExpireDateSpecified
        {
            get
            {
                return ((this.IdentIdExpireDate != null) 
                            && (this.IdentIdExpireDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentIdIssueDate> _identIdIssueDate;
        
        [XmlElementAttribute("IdentIdIssueDate", Order=63, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentIdIssueDate> IdentIdIssueDate
        {
            get
            {
                return _identIdIssueDate;
            }
            set
            {
                _identIdIssueDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdIssueDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdIssueDateSpecified
        {
            get
            {
                return ((this.IdentIdIssueDate != null) 
                            && (this.IdentIdIssueDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentIdNumber> _identIdNumber;
        
        [XmlElementAttribute("IdentIdNumber", Order=64, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentIdNumber> IdentIdNumber
        {
            get
            {
                return _identIdNumber;
            }
            set
            {
                _identIdNumber = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdNumber collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdNumberSpecified
        {
            get
            {
                return ((this.IdentIdNumber != null) 
                            && (this.IdentIdNumber.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentIdType> _identIdType;
        
        [XmlElementAttribute("IdentIdType", Order=65, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentIdType> IdentIdType
        {
            get
            {
                return _identIdType;
            }
            set
            {
                _identIdType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdType collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdTypeSpecified
        {
            get
            {
                return ((this.IdentIdType != null) 
                            && (this.IdentIdType.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanAppPersonIdentIdVerifyDate> _identIdVerifyDate;
        
        [XmlElementAttribute("IdentIdVerifyDate", Order=66, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanAppPersonIdentIdVerifyDate> IdentIdVerifyDate
        {
            get
            {
                return _identIdVerifyDate;
            }
            set
            {
                _identIdVerifyDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the IdentIdVerifyDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IdentIdVerifyDateSpecified
        {
            get
            {
                return ((this.IdentIdVerifyDate != null) 
                            && (this.IdentIdVerifyDate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IncomeMayDecline", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short IncomeMayDeclineValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncomeMayDecline property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IncomeMayDeclineValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IncomeMayDecline
        {
            get
            {
                if (this.IncomeMayDeclineValueSpecified)
                {
                    return this.IncomeMayDeclineValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncomeMayDeclineValue = value.GetValueOrDefault();
                this.IncomeMayDeclineValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Judgement", Order=68, Form=XmlSchemaForm.Unqualified)]
        public short JudgementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Judgement property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool JudgementValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Judgement
        {
            get
            {
                if (this.JudgementValueSpecified)
                {
                    return this.JudgementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.JudgementValue = value.GetValueOrDefault();
                this.JudgementValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Last", Order=69, Form=XmlSchemaForm.Unqualified)]
        public string Last { get; set; }
        
        [XmlElementAttribute("Lei", Order=70, Form=XmlSchemaForm.Unqualified)]
        public string Lei { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=71, Form=XmlSchemaForm.Unqualified)]
        public int LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LongName", Order=72, Form=XmlSchemaForm.Unqualified)]
        public string LongName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaritalStatus", Order=73, Form=XmlSchemaForm.Unqualified)]
        public short MaritalStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaritalStatus property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaritalStatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MaritalStatus
        {
            get
            {
                if (this.MaritalStatusValueSpecified)
                {
                    return this.MaritalStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaritalStatusValue = value.GetValueOrDefault();
                this.MaritalStatusValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Middle", Order=74, Form=XmlSchemaForm.Unqualified)]
        public string Middle { get; set; }
        
        [XmlElementAttribute("MobilePhone", Order=75, Form=XmlSchemaForm.Unqualified)]
        public string MobilePhone { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MonthsCurrAddress", Order=76, Form=XmlSchemaForm.Unqualified)]
        public short MonthsCurrAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MonthsCurrAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MonthsCurrAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MonthsCurrAddress
        {
            get
            {
                if (this.MonthsCurrAddressValueSpecified)
                {
                    return this.MonthsCurrAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MonthsCurrAddressValue = value.GetValueOrDefault();
                this.MonthsCurrAddressValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MonthsPrevAddress", Order=77, Form=XmlSchemaForm.Unqualified)]
        public short MonthsPrevAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MonthsPrevAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MonthsPrevAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> MonthsPrevAddress
        {
            get
            {
                if (this.MonthsPrevAddressValueSpecified)
                {
                    return this.MonthsPrevAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MonthsPrevAddressValue = value.GetValueOrDefault();
                this.MonthsPrevAddressValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MothersMaidenName", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string MothersMaidenName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NameFormat", Order=79, Form=XmlSchemaForm.Unqualified)]
        public short NameFormatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NameFormat property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NameFormatValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> NameFormat
        {
            get
            {
                if (this.NameFormatValueSpecified)
                {
                    return this.NameFormatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NameFormatValue = value.GetValueOrDefault();
                this.NameFormatValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("OtherCreditName", Order=80, Form=XmlSchemaForm.Unqualified)]
        public string OtherCreditName { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OwnRentCurrAddress", Order=81, Form=XmlSchemaForm.Unqualified)]
        public short OwnRentCurrAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OwnRentCurrAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OwnRentCurrAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OwnRentCurrAddress
        {
            get
            {
                if (this.OwnRentCurrAddressValueSpecified)
                {
                    return this.OwnRentCurrAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OwnRentCurrAddressValue = value.GetValueOrDefault();
                this.OwnRentCurrAddressValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OwnRentPrevAddress", Order=82, Form=XmlSchemaForm.Unqualified)]
        public short OwnRentPrevAddressValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OwnRentPrevAddress property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OwnRentPrevAddressValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> OwnRentPrevAddress
        {
            get
            {
                if (this.OwnRentPrevAddressValueSpecified)
                {
                    return this.OwnRentPrevAddressValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OwnRentPrevAddressValue = value.GetValueOrDefault();
                this.OwnRentPrevAddressValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PagerNumber", Order=83, Form=XmlSchemaForm.Unqualified)]
        public string PagerNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PartyInLawsuit", Order=84, Form=XmlSchemaForm.Unqualified)]
        public short PartyInLawsuitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PartyInLawsuit property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PartyInLawsuitValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PartyInLawsuit
        {
            get
            {
                if (this.PartyInLawsuitValueSpecified)
                {
                    return this.PartyInLawsuitValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PartyInLawsuitValue = value.GetValueOrDefault();
                this.PartyInLawsuitValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PastForeclosure", Order=85, Form=XmlSchemaForm.Unqualified)]
        public short PastForeclosureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PastForeclosure property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PastForeclosureValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PastForeclosure
        {
            get
            {
                if (this.PastForeclosureValueSpecified)
                {
                    return this.PastForeclosureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PastForeclosureValue = value.GetValueOrDefault();
                this.PastForeclosureValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PastRepossession", Order=86, Form=XmlSchemaForm.Unqualified)]
        public short PastRepossessionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PastRepossession property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PastRepossessionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PastRepossession
        {
            get
            {
                if (this.PastRepossessionValueSpecified)
                {
                    return this.PastRepossessionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PastRepossessionValue = value.GetValueOrDefault();
                this.PastRepossessionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PersonCode", Order=87, Form=XmlSchemaForm.Unqualified)]
        public short PersonCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PersonCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PersonCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PersonCode
        {
            get
            {
                if (this.PersonCodeValueSpecified)
                {
                    return this.PersonCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PersonCodeValue = value.GetValueOrDefault();
                this.PersonCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PhoneType", Order=88, Form=XmlSchemaForm.Unqualified)]
        public short PhoneTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PhoneType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PhoneTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PhoneType
        {
            get
            {
                if (this.PhoneTypeValueSpecified)
                {
                    return this.PhoneTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhoneTypeValue = value.GetValueOrDefault();
                this.PhoneTypeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PreferredContact", Order=89, Form=XmlSchemaForm.Unqualified)]
        public string PreferredContact { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PreferredContactMethod", Order=90, Form=XmlSchemaForm.Unqualified)]
        public short PreferredContactMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreferredContactMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PreferredContactMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PreferredContactMethod
        {
            get
            {
                if (this.PreferredContactMethodValueSpecified)
                {
                    return this.PreferredContactMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PreferredContactMethodValue = value.GetValueOrDefault();
                this.PreferredContactMethodValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PrevEmpAddress", Order=91, Form=XmlSchemaForm.Unqualified)]
        public string PrevEmpAddress { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevEmpEndDate", Order=92, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PrevEmpEndDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevEmpEndDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevEmpEndDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevEmpEndDate
        {
            get
            {
                if (this.PrevEmpEndDateValueSpecified)
                {
                    return this.PrevEmpEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevEmpEndDateValue = value.GetValueOrDefault();
                this.PrevEmpEndDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevEmpGrossMonthlyPay", Order=93, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevEmpGrossMonthlyPayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevEmpGrossMonthlyPay property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevEmpGrossMonthlyPayValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevEmpGrossMonthlyPay
        {
            get
            {
                if (this.PrevEmpGrossMonthlyPayValueSpecified)
                {
                    return this.PrevEmpGrossMonthlyPayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevEmpGrossMonthlyPayValue = value.GetValueOrDefault();
                this.PrevEmpGrossMonthlyPayValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevEmpMonthsEmp", Order=94, Form=XmlSchemaForm.Unqualified)]
        public short PrevEmpMonthsEmpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevEmpMonthsEmp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevEmpMonthsEmpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevEmpMonthsEmp
        {
            get
            {
                if (this.PrevEmpMonthsEmpValueSpecified)
                {
                    return this.PrevEmpMonthsEmpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevEmpMonthsEmpValue = value.GetValueOrDefault();
                this.PrevEmpMonthsEmpValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PrevEmpName", Order=95, Form=XmlSchemaForm.Unqualified)]
        public string PrevEmpName { get; set; }
        
        [XmlElementAttribute("PrevEmpOccupation", Order=96, Form=XmlSchemaForm.Unqualified)]
        public string PrevEmpOccupation { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevEmpStartDate", Order=97, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PrevEmpStartDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevEmpStartDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevEmpStartDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevEmpStartDate
        {
            get
            {
                if (this.PrevEmpStartDateValueSpecified)
                {
                    return this.PrevEmpStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevEmpStartDateValue = value.GetValueOrDefault();
                this.PrevEmpStartDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PrevEmpSupervisor", Order=98, Form=XmlSchemaForm.Unqualified)]
        public string PrevEmpSupervisor { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevEmpYearsEmp", Order=99, Form=XmlSchemaForm.Unqualified)]
        public short PrevEmpYearsEmpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevEmpYearsEmp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevEmpYearsEmpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PrevEmpYearsEmp
        {
            get
            {
                if (this.PrevEmpYearsEmpValueSpecified)
                {
                    return this.PrevEmpYearsEmpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevEmpYearsEmpValue = value.GetValueOrDefault();
                this.PrevEmpYearsEmpValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("PreviousAddress", Order=100, Form=XmlSchemaForm.Unqualified)]
        public string PreviousAddress { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=101, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Ref1Address", Order=102, Form=XmlSchemaForm.Unqualified)]
        public string Ref1Address { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ref1AddressType", Order=103, Form=XmlSchemaForm.Unqualified)]
        public short Ref1AddressTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ref1AddressType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ref1AddressTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Ref1AddressType
        {
            get
            {
                if (this.Ref1AddressTypeValueSpecified)
                {
                    return this.Ref1AddressTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ref1AddressTypeValue = value.GetValueOrDefault();
                this.Ref1AddressTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ref1Code", Order=104, Form=XmlSchemaForm.Unqualified)]
        public short Ref1CodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ref1Code property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ref1CodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Ref1Code
        {
            get
            {
                if (this.Ref1CodeValueSpecified)
                {
                    return this.Ref1CodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ref1CodeValue = value.GetValueOrDefault();
                this.Ref1CodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Ref1Name", Order=105, Form=XmlSchemaForm.Unqualified)]
        public string Ref1Name { get; set; }
        
        [XmlElementAttribute("Ref1Phone", Order=106, Form=XmlSchemaForm.Unqualified)]
        public string Ref1Phone { get; set; }
        
        [XmlElementAttribute("Ref1Relationship", Order=107, Form=XmlSchemaForm.Unqualified)]
        public string Ref1Relationship { get; set; }
        
        [XmlElementAttribute("Ref2Address", Order=108, Form=XmlSchemaForm.Unqualified)]
        public string Ref2Address { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ref2AddressType", Order=109, Form=XmlSchemaForm.Unqualified)]
        public short Ref2AddressTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ref2AddressType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ref2AddressTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Ref2AddressType
        {
            get
            {
                if (this.Ref2AddressTypeValueSpecified)
                {
                    return this.Ref2AddressTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ref2AddressTypeValue = value.GetValueOrDefault();
                this.Ref2AddressTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ref2Code", Order=110, Form=XmlSchemaForm.Unqualified)]
        public short Ref2CodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ref2Code property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ref2CodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Ref2Code
        {
            get
            {
                if (this.Ref2CodeValueSpecified)
                {
                    return this.Ref2CodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ref2CodeValue = value.GetValueOrDefault();
                this.Ref2CodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Ref2Name", Order=111, Form=XmlSchemaForm.Unqualified)]
        public string Ref2Name { get; set; }
        
        [XmlElementAttribute("Ref2Phone", Order=112, Form=XmlSchemaForm.Unqualified)]
        public string Ref2Phone { get; set; }
        
        [XmlElementAttribute("Ref2Relationship", Order=113, Form=XmlSchemaForm.Unqualified)]
        public string Ref2Relationship { get; set; }
        
        [XmlElementAttribute("Ref3Address", Order=114, Form=XmlSchemaForm.Unqualified)]
        public string Ref3Address { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ref3AddressType", Order=115, Form=XmlSchemaForm.Unqualified)]
        public short Ref3AddressTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ref3AddressType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ref3AddressTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Ref3AddressType
        {
            get
            {
                if (this.Ref3AddressTypeValueSpecified)
                {
                    return this.Ref3AddressTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ref3AddressTypeValue = value.GetValueOrDefault();
                this.Ref3AddressTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Ref3Code", Order=116, Form=XmlSchemaForm.Unqualified)]
        public short Ref3CodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ref3Code property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool Ref3CodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Ref3Code
        {
            get
            {
                if (this.Ref3CodeValueSpecified)
                {
                    return this.Ref3CodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Ref3CodeValue = value.GetValueOrDefault();
                this.Ref3CodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Ref3Name", Order=117, Form=XmlSchemaForm.Unqualified)]
        public string Ref3Name { get; set; }
        
        [XmlElementAttribute("Ref3Phone", Order=118, Form=XmlSchemaForm.Unqualified)]
        public string Ref3Phone { get; set; }
        
        [XmlElementAttribute("Ref3Relationship", Order=119, Form=XmlSchemaForm.Unqualified)]
        public string Ref3Relationship { get; set; }
        
        [XmlElementAttribute("Sex", Order=120, Form=XmlSchemaForm.Unqualified)]
        public string Sex { get; set; }
        
        [XmlElementAttribute("ShortName", Order=121, Form=XmlSchemaForm.Unqualified)]
        public string ShortName { get; set; }
        
        [XmlElementAttribute("Ssn", Order=122, Form=XmlSchemaForm.Unqualified)]
        public string Ssn { get; set; }
        
        [XmlElementAttribute("State", Order=123, Form=XmlSchemaForm.Unqualified)]
        public string State { get; set; }
        
        [XmlElementAttribute("Street", Order=124, Form=XmlSchemaForm.Unqualified)]
        public string Street { get; set; }
        
        [XmlElementAttribute("Suffix", Order=125, Form=XmlSchemaForm.Unqualified)]
        public string Suffix { get; set; }
        
        [XmlElementAttribute("Title", Order=126, Form=XmlSchemaForm.Unqualified)]
        public string Title { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=127, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UsPersonFlag", Order=128, Form=XmlSchemaForm.Unqualified)]
        public short UsPersonFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsPersonFlag property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UsPersonFlagValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UsPersonFlag
        {
            get
            {
                if (this.UsPersonFlagValueSpecified)
                {
                    return this.UsPersonFlagValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsPersonFlagValue = value.GetValueOrDefault();
                this.UsPersonFlagValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("WorkPhone", Order=129, Form=XmlSchemaForm.Unqualified)]
        public string WorkPhone { get; set; }
        
        [XmlElementAttribute("WorkPhoneExtension", Order=130, Form=XmlSchemaForm.Unqualified)]
        public string WorkPhoneExtension { get; set; }
        
        [XmlElementAttribute("ZipCode", Order=131, Form=XmlSchemaForm.Unqualified)]
        public string ZipCode { get; set; }
        
        [XmlElementAttribute("Version_1", Order=132, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=133)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
