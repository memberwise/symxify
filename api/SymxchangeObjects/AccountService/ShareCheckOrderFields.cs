//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("ShareCheckOrderFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("ShareCheckOrderFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class ShareCheckOrderFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Accent", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool AccentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AccentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Accent
        {
            get
            {
                if (this.AccentValueSpecified)
                {
                    return this.AccentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AccentValue = value.GetValueOrDefault();
                this.AccentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AcctAddrInkColor", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool AcctAddrInkColorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AcctAddrInkColor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AcctAddrInkColorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> AcctAddrInkColor
        {
            get
            {
                if (this.AcctAddrInkColorValueSpecified)
                {
                    return this.AcctAddrInkColorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AcctAddrInkColorValue = value.GetValueOrDefault();
                this.AcctAddrInkColorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingCode", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BillingCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingCode
        {
            get
            {
                if (this.BillingCodeValueSpecified)
                {
                    return this.BillingCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingCodeValue = value.GetValueOrDefault();
                this.BillingCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Binding", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BindingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Binding property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BindingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Binding
        {
            get
            {
                if (this.BindingValueSpecified)
                {
                    return this.BindingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BindingValue = value.GetValueOrDefault();
                this.BindingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusBindingStyle", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool BusBindingStyleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusBindingStyle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusBindingStyleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusBindingStyle
        {
            get
            {
                if (this.BusBindingStyleValueSpecified)
                {
                    return this.BusBindingStyleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusBindingStyleValue = value.GetValueOrDefault();
                this.BusBindingStyleValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _busCaptions;
        
        [XmlElementAttribute("BusCaptions", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> BusCaptions
        {
            get
            {
                return _busCaptions;
            }
            set
            {
                _busCaptions = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BusCaptions collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BusCaptionsSpecified
        {
            get
            {
                return ((this.BusCaptions != null) 
                            && (this.BusCaptions.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ShareCheckOrderFields" /> class.</para>
        /// </summary>
        public ShareCheckOrderFields()
        {
            this._busCaptions = new Collection<short>();
            this._imprintLine = new Collection<short>();
            this._imprintLineSize = new Collection<short>();
            this._imprintUsage = new Collection<short>();
            this._license = new Collection<short>();
            this._mailAddress = new Collection<short>();
            this._overSigLine = new Collection<short>();
            this._specialInstr = new Collection<short>();
            this._ssn = new Collection<short>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusNumCopies", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool BusNumCopiesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusNumCopies property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusNumCopiesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusNumCopies
        {
            get
            {
                if (this.BusNumCopiesValueSpecified)
                {
                    return this.BusNumCopiesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusNumCopiesValue = value.GetValueOrDefault();
                this.BusNumCopiesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusVoucherNumber", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool BusVoucherNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusVoucherNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusVoucherNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusVoucherNumber
        {
            get
            {
                if (this.BusVoucherNumberValueSpecified)
                {
                    return this.BusVoucherNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusVoucherNumberValue = value.GetValueOrDefault();
                this.BusVoucherNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BusinessSerial", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool BusinessSerialValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BusinessSerial property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BusinessSerialValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BusinessSerial
        {
            get
            {
                if (this.BusinessSerialValueSpecified)
                {
                    return this.BusinessSerialValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BusinessSerialValue = value.GetValueOrDefault();
                this.BusinessSerialValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeShipping", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool ChargeShippingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeShipping property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeShippingValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ChargeShipping
        {
            get
            {
                if (this.ChargeShippingValueSpecified)
                {
                    return this.ChargeShippingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeShippingValue = value.GetValueOrDefault();
                this.ChargeShippingValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckInitials", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool CheckInitialsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckInitials property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckInitialsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckInitials
        {
            get
            {
                if (this.CheckInitialsValueSpecified)
                {
                    return this.CheckInitialsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckInitialsValue = value.GetValueOrDefault();
                this.CheckInitialsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckStyle", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool CheckStyleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckStyle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckStyleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckStyle
        {
            get
            {
                if (this.CheckStyleValueSpecified)
                {
                    return this.CheckStyleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckStyleValue = value.GetValueOrDefault();
                this.CheckStyleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CheckType", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool CheckTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CheckType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CheckTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CheckType
        {
            get
            {
                if (this.CheckTypeValueSpecified)
                {
                    return this.CheckTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CheckTypeValue = value.GetValueOrDefault();
                this.CheckTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CoverInitials", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool CoverInitialsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoverInitials property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CoverInitialsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CoverInitials
        {
            get
            {
                if (this.CoverInitialsValueSpecified)
                {
                    return this.CoverInitialsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CoverInitialsValue = value.GetValueOrDefault();
                this.CoverInitialsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CoverStyle", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool CoverStyleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CoverStyle property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CoverStyleValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CoverStyle
        {
            get
            {
                if (this.CoverStyleValueSpecified)
                {
                    return this.CoverStyleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CoverStyleValue = value.GetValueOrDefault();
                this.CoverStyleValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CutInkColor", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool CutInkColorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CutInkColor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CutInkColorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CutInkColor
        {
            get
            {
                if (this.CutInkColorValueSpecified)
                {
                    return this.CutInkColorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CutInkColorValue = value.GetValueOrDefault();
                this.CutInkColorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CutNumber", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool CutNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CutNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CutNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> CutNumber
        {
            get
            {
                if (this.CutNumberValueSpecified)
                {
                    return this.CutNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CutNumberValue = value.GetValueOrDefault();
                this.CutNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Design", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool DesignValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Design property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DesignValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Design
        {
            get
            {
                if (this.DesignValueSpecified)
                {
                    return this.DesignValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DesignValue = value.GetValueOrDefault();
                this.DesignValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintCity", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintCityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintCity property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintCityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintCity
        {
            get
            {
                if (this.ImprintCityValueSpecified)
                {
                    return this.ImprintCityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintCityValue = value.GetValueOrDefault();
                this.ImprintCityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintFont", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintFontValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintFont property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintFontValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintFont
        {
            get
            {
                if (this.ImprintFontValueSpecified)
                {
                    return this.ImprintFontValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintFontValue = value.GetValueOrDefault();
                this.ImprintFontValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintJustify", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintJustifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintJustify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintJustifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintJustify
        {
            get
            {
                if (this.ImprintJustifyValueSpecified)
                {
                    return this.ImprintJustifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintJustifyValue = value.GetValueOrDefault();
                this.ImprintJustifyValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _imprintLine;
        
        [XmlElementAttribute("ImprintLine", Order=22, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ImprintLine
        {
            get
            {
                return _imprintLine;
            }
            set
            {
                _imprintLine = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ImprintLine collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ImprintLineSpecified
        {
            get
            {
                return ((this.ImprintLine != null) 
                            && (this.ImprintLine.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _imprintLineSize;
        
        [XmlElementAttribute("ImprintLineSize", Order=23, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ImprintLineSize
        {
            get
            {
                return _imprintLineSize;
            }
            set
            {
                _imprintLineSize = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ImprintLineSize collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ImprintLineSizeSpecified
        {
            get
            {
                return ((this.ImprintLineSize != null) 
                            && (this.ImprintLineSize.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintPhone", Order=24, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintPhoneValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintPhone property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintPhoneValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintPhone
        {
            get
            {
                if (this.ImprintPhoneValueSpecified)
                {
                    return this.ImprintPhoneValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintPhoneValue = value.GetValueOrDefault();
                this.ImprintPhoneValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintState", Order=25, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintStateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintState property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintStateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintState
        {
            get
            {
                if (this.ImprintStateValueSpecified)
                {
                    return this.ImprintStateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintStateValue = value.GetValueOrDefault();
                this.ImprintStateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _imprintUsage;
        
        [XmlElementAttribute("ImprintUsage", Order=26, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> ImprintUsage
        {
            get
            {
                return _imprintUsage;
            }
            set
            {
                _imprintUsage = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ImprintUsage collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ImprintUsageSpecified
        {
            get
            {
                return ((this.ImprintUsage != null) 
                            && (this.ImprintUsage.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ImprintZipCode", Order=27, Form=XmlSchemaForm.Unqualified)]
        public bool ImprintZipCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImprintZipCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ImprintZipCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ImprintZipCode
        {
            get
            {
                if (this.ImprintZipCodeValueSpecified)
                {
                    return this.ImprintZipCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ImprintZipCodeValue = value.GetValueOrDefault();
                this.ImprintZipCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=28, Form=XmlSchemaForm.Unqualified)]
        public bool LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFreeOrder", Order=29, Form=XmlSchemaForm.Unqualified)]
        public bool LastFreeOrderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFreeOrder property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFreeOrderValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastFreeOrder
        {
            get
            {
                if (this.LastFreeOrderValueSpecified)
                {
                    return this.LastFreeOrderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFreeOrderValue = value.GetValueOrDefault();
                this.LastFreeOrderValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastOrderDate", Order=30, Form=XmlSchemaForm.Unqualified)]
        public bool LastOrderDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastOrderDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastOrderDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LastOrderDate
        {
            get
            {
                if (this.LastOrderDateValueSpecified)
                {
                    return this.LastOrderDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastOrderDateValue = value.GetValueOrDefault();
                this.LastOrderDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _license;
        
        [XmlElementAttribute("License", Order=31, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> License
        {
            get
            {
                return _license;
            }
            set
            {
                _license = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the License collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool LicenseSpecified
        {
            get
            {
                return ((this.License != null) 
                            && (this.License.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Locator", Order=32, Form=XmlSchemaForm.Unqualified)]
        public bool LocatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Locator property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LocatorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Locator
        {
            get
            {
                if (this.LocatorValueSpecified)
                {
                    return this.LocatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocatorValue = value.GetValueOrDefault();
                this.LocatorValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _mailAddress;
        
        [XmlElementAttribute("MailAddress", Order=33, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> MailAddress
        {
            get
            {
                return _mailAddress;
            }
            set
            {
                _mailAddress = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MailAddress collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MailAddressSpecified
        {
            get
            {
                return ((this.MailAddress != null) 
                            && (this.MailAddress.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MailCity", Order=34, Form=XmlSchemaForm.Unqualified)]
        public bool MailCityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MailCity property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MailCityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MailCity
        {
            get
            {
                if (this.MailCityValueSpecified)
                {
                    return this.MailCityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MailCityValue = value.GetValueOrDefault();
                this.MailCityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MailState", Order=35, Form=XmlSchemaForm.Unqualified)]
        public bool MailStateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MailState property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MailStateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MailState
        {
            get
            {
                if (this.MailStateValueSpecified)
                {
                    return this.MailStateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MailStateValue = value.GetValueOrDefault();
                this.MailStateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MailZipCode", Order=36, Form=XmlSchemaForm.Unqualified)]
        public bool MailZipCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MailZipCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MailZipCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MailZipCode
        {
            get
            {
                if (this.MailZipCodeValueSpecified)
                {
                    return this.MailZipCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MailZipCodeValue = value.GetValueOrDefault();
                this.MailZipCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MicrLine", Order=37, Form=XmlSchemaForm.Unqualified)]
        public bool MicrLineValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MicrLine property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MicrLineValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MicrLine
        {
            get
            {
                if (this.MicrLineValueSpecified)
                {
                    return this.MicrLineValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MicrLineValue = value.GetValueOrDefault();
                this.MicrLineValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NumberSigLines", Order=38, Form=XmlSchemaForm.Unqualified)]
        public bool NumberSigLinesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberSigLines property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NumberSigLinesValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> NumberSigLines
        {
            get
            {
                if (this.NumberSigLinesValueSpecified)
                {
                    return this.NumberSigLinesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberSigLinesValue = value.GetValueOrDefault();
                this.NumberSigLinesValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenDate", Order=39, Form=XmlSchemaForm.Unqualified)]
        public bool OpenDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OpenDate
        {
            get
            {
                if (this.OpenDateValueSpecified)
                {
                    return this.OpenDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenDateValue = value.GetValueOrDefault();
                this.OpenDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverSigFont", Order=40, Form=XmlSchemaForm.Unqualified)]
        public bool OverSigFontValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverSigFont property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverSigFontValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverSigFont
        {
            get
            {
                if (this.OverSigFontValueSpecified)
                {
                    return this.OverSigFontValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverSigFontValue = value.GetValueOrDefault();
                this.OverSigFontValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverSigJustify", Order=41, Form=XmlSchemaForm.Unqualified)]
        public bool OverSigJustifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverSigJustify property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverSigJustifyValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverSigJustify
        {
            get
            {
                if (this.OverSigJustifyValueSpecified)
                {
                    return this.OverSigJustifyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverSigJustifyValue = value.GetValueOrDefault();
                this.OverSigJustifyValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _overSigLine;
        
        [XmlElementAttribute("OverSigLine", Order=42, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> OverSigLine
        {
            get
            {
                return _overSigLine;
            }
            set
            {
                _overSigLine = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OverSigLine collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OverSigLineSpecified
        {
            get
            {
                return ((this.OverSigLine != null) 
                            && (this.OverSigLine.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OverSigLineSize", Order=43, Form=XmlSchemaForm.Unqualified)]
        public bool OverSigLineSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OverSigLineSize property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OverSigLineSizeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> OverSigLineSize
        {
            get
            {
                if (this.OverSigLineSizeValueSpecified)
                {
                    return this.OverSigLineSizeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OverSigLineSizeValue = value.GetValueOrDefault();
                this.OverSigLineSizeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Phantom", Order=44, Form=XmlSchemaForm.Unqualified)]
        public bool PhantomValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Phantom property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PhantomValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Phantom
        {
            get
            {
                if (this.PhantomValueSpecified)
                {
                    return this.PhantomValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhantomValue = value.GetValueOrDefault();
                this.PhantomValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PoNumber", Order=45, Form=XmlSchemaForm.Unqualified)]
        public bool PoNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PoNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PoNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PoNumber
        {
            get
            {
                if (this.PoNumberValueSpecified)
                {
                    return this.PoNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PoNumberValue = value.GetValueOrDefault();
                this.PoNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Processor", Order=46, Form=XmlSchemaForm.Unqualified)]
        public bool ProcessorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Processor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProcessorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Processor
        {
            get
            {
                if (this.ProcessorValueSpecified)
                {
                    return this.ProcessorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProcessorValue = value.GetValueOrDefault();
                this.ProcessorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PromoNumber", Order=47, Form=XmlSchemaForm.Unqualified)]
        public bool PromoNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PromoNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PromoNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PromoNumber
        {
            get
            {
                if (this.PromoNumberValueSpecified)
                {
                    return this.PromoNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PromoNumberValue = value.GetValueOrDefault();
                this.PromoNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Quantity", Order=48, Form=XmlSchemaForm.Unqualified)]
        public bool QuantityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Quantity property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool QuantityValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Quantity
        {
            get
            {
                if (this.QuantityValueSpecified)
                {
                    return this.QuantityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.QuantityValue = value.GetValueOrDefault();
                this.QuantityValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=49, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RerunReason", Order=50, Form=XmlSchemaForm.Unqualified)]
        public bool RerunReasonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RerunReason property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RerunReasonValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RerunReason
        {
            get
            {
                if (this.RerunReasonValueSpecified)
                {
                    return this.RerunReasonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RerunReasonValue = value.GetValueOrDefault();
                this.RerunReasonValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShipMethod", Order=51, Form=XmlSchemaForm.Unqualified)]
        public bool ShipMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShipMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShipMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShipMethod
        {
            get
            {
                if (this.ShipMethodValueSpecified)
                {
                    return this.ShipMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShipMethodValue = value.GetValueOrDefault();
                this.ShipMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ShipTo", Order=52, Form=XmlSchemaForm.Unqualified)]
        public bool ShipToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShipTo property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ShipToValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ShipTo
        {
            get
            {
                if (this.ShipToValueSpecified)
                {
                    return this.ShipToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShipToValue = value.GetValueOrDefault();
                this.ShipToValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SigFigure", Order=53, Form=XmlSchemaForm.Unqualified)]
        public bool SigFigureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SigFigure property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SigFigureValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> SigFigure
        {
            get
            {
                if (this.SigFigureValueSpecified)
                {
                    return this.SigFigureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SigFigureValue = value.GetValueOrDefault();
                this.SigFigureValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _specialInstr;
        
        [XmlElementAttribute("SpecialInstr", Order=54, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> SpecialInstr
        {
            get
            {
                return _specialInstr;
            }
            set
            {
                _specialInstr = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SpecialInstr collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SpecialInstrSpecified
        {
            get
            {
                return ((this.SpecialInstr != null) 
                            && (this.SpecialInstr.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<short> _ssn;
        
        [XmlElementAttribute("Ssn", Order=55, Form=XmlSchemaForm.Unqualified)]
        public Collection<short> Ssn
        {
            get
            {
                return _ssn;
            }
            set
            {
                _ssn = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ssn collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SsnSpecified
        {
            get
            {
                return ((this.Ssn != null) 
                            && (this.Ssn.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StartNumber", Order=56, Form=XmlSchemaForm.Unqualified)]
        public bool StartNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StartNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StartNumber
        {
            get
            {
                if (this.StartNumberValueSpecified)
                {
                    return this.StartNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StartNumberValue = value.GetValueOrDefault();
                this.StartNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Status", Order=57, Form=XmlSchemaForm.Unqualified)]
        public bool StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Status
        {
            get
            {
                if (this.StatusValueSpecified)
                {
                    return this.StatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatusDate", Order=58, Form=XmlSchemaForm.Unqualified)]
        public bool StatusDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatusDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatusDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> StatusDate
        {
            get
            {
                if (this.StatusDateValueSpecified)
                {
                    return this.StatusDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatusDateValue = value.GetValueOrDefault();
                this.StatusDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TaxExemptCode", Order=59, Form=XmlSchemaForm.Unqualified)]
        public bool TaxExemptCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TaxExemptCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TaxExemptCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TaxExemptCode
        {
            get
            {
                if (this.TaxExemptCodeValueSpecified)
                {
                    return this.TaxExemptCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TaxExemptCodeValue = value.GetValueOrDefault();
                this.TaxExemptCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TitleInkColor", Order=60, Form=XmlSchemaForm.Unqualified)]
        public bool TitleInkColorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TitleInkColor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TitleInkColorValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> TitleInkColor
        {
            get
            {
                if (this.TitleInkColorValueSpecified)
                {
                    return this.TitleInkColorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TitleInkColorValue = value.GetValueOrDefault();
                this.TitleInkColorValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserId", Order=61, Form=XmlSchemaForm.Unqualified)]
        public bool UserIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserId property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserIdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UserId
        {
            get
            {
                if (this.UserIdValueSpecified)
                {
                    return this.UserIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserIdValue = value.GetValueOrDefault();
                this.UserIdValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=62, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=63)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
