//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanTransaction", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class LoanTransaction
    {
        
        [XmlElementAttribute("AccountNumber", Order=0, Form=XmlSchemaForm.Unqualified)]
        public string AccountNumber { get; set; }
        
        [XmlElementAttribute("ActionCode", Order=1, Form=XmlSchemaForm.Unqualified)]
        public string ActionCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ActivityDate", Order=2, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime ActivityDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivityDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivityDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> ActivityDate
        {
            get
            {
                if (this.ActivityDateValueSpecified)
                {
                    return this.ActivityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivityDateValue = value.GetValueOrDefault();
                this.ActivityDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjustmentCode", Order=3, Form=XmlSchemaForm.Unqualified)]
        public short AdjustmentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjustmentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjustmentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AdjustmentCode
        {
            get
            {
                if (this.AdjustmentCodeValueSpecified)
                {
                    return this.AdjustmentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjustmentCodeValue = value.GetValueOrDefault();
                this.AdjustmentCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalSegCount", Order=4, Form=XmlSchemaForm.Unqualified)]
        public short BalSegCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalSegCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalSegCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> BalSegCount
        {
            get
            {
                if (this.BalSegCountValueSpecified)
                {
                    return this.BalSegCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalSegCountValue = value.GetValueOrDefault();
                this.BalSegCountValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanTransactionBalSegId> _balSegId;
        
        [XmlElementAttribute("BalSegId", Order=5, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanTransactionBalSegId> BalSegId
        {
            get
            {
                return _balSegId;
            }
            set
            {
                _balSegId = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BalSegId collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BalSegIdSpecified
        {
            get
            {
                return ((this.BalSegId != null) 
                            && (this.BalSegId.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanTransaction" /> class.</para>
        /// </summary>
        public LoanTransaction()
        {
            this._balSegId = new Collection<LoanTransactionBalSegId>();
            this._balSegPmtChangeDate = new Collection<LoanTransactionBalSegPmtChangeDate>();
            this._balSegPrevFirstPmtDate = new Collection<LoanTransactionBalSegPrevFirstPmtDate>();
            this._stmtDesc = new Collection<LoanTransactionStmtDesc>();
            this._any = new Collection<XmlElement>();
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanTransactionBalSegPmtChangeDate> _balSegPmtChangeDate;
        
        [XmlElementAttribute("BalSegPmtChangeDate", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanTransactionBalSegPmtChangeDate> BalSegPmtChangeDate
        {
            get
            {
                return _balSegPmtChangeDate;
            }
            set
            {
                _balSegPmtChangeDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BalSegPmtChangeDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BalSegPmtChangeDateSpecified
        {
            get
            {
                return ((this.BalSegPmtChangeDate != null) 
                            && (this.BalSegPmtChangeDate.Count != 0));
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanTransactionBalSegPrevFirstPmtDate> _balSegPrevFirstPmtDate;
        
        [XmlElementAttribute("BalSegPrevFirstPmtDate", Order=7, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanTransactionBalSegPrevFirstPmtDate> BalSegPrevFirstPmtDate
        {
            get
            {
                return _balSegPrevFirstPmtDate;
            }
            set
            {
                _balSegPrevFirstPmtDate = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BalSegPrevFirstPmtDate collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BalSegPrevFirstPmtDateSpecified
        {
            get
            {
                return ((this.BalSegPrevFirstPmtDate != null) 
                            && (this.BalSegPrevFirstPmtDate.Count != 0));
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BalanceChange", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal BalanceChangeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalanceChange property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceChangeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BalanceChange
        {
            get
            {
                if (this.BalanceChangeValueSpecified)
                {
                    return this.BalanceChangeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceChangeValue = value.GetValueOrDefault();
                this.BalanceChangeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BatchSequence", Order=9, Form=XmlSchemaForm.Unqualified)]
        public int BatchSequenceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatchSequence property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BatchSequenceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> BatchSequence
        {
            get
            {
                if (this.BatchSequenceValueSpecified)
                {
                    return this.BatchSequenceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BatchSequenceValue = value.GetValueOrDefault();
                this.BatchSequenceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BilledFeeAmount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public decimal BilledFeeAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BilledFeeAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BilledFeeAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BilledFeeAmount
        {
            get
            {
                if (this.BilledFeeAmountValueSpecified)
                {
                    return this.BilledFeeAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BilledFeeAmountValue = value.GetValueOrDefault();
                this.BilledFeeAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=11, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("CalcMicrRt", Order=12, Form=XmlSchemaForm.Unqualified)]
        public string CalcMicrRt { get; set; }
        
        [XmlElementAttribute("Comment", Order=13, Form=XmlSchemaForm.Unqualified)]
        public string Comment { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CommentCode", Order=14, Form=XmlSchemaForm.Unqualified)]
        public short CommentCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommentCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CommentCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> CommentCode
        {
            get
            {
                if (this.CommentCodeValueSpecified)
                {
                    return this.CommentCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommentCodeValue = value.GetValueOrDefault();
                this.CommentCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ConfirmationNumber", Order=15, Form=XmlSchemaForm.Unqualified)]
        public string ConfirmationNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConfirmationSeq", Order=16, Form=XmlSchemaForm.Unqualified)]
        public int ConfirmationSeqValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConfirmationSeq property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConfirmationSeqValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ConfirmationSeq
        {
            get
            {
                if (this.ConfirmationSeqValueSpecified)
                {
                    return this.ConfirmationSeqValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConfirmationSeqValue = value.GetValueOrDefault();
                this.ConfirmationSeqValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ConsoleNumber", Order=17, Form=XmlSchemaForm.Unqualified)]
        public short ConsoleNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsoleNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ConsoleNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ConsoleNumber
        {
            get
            {
                if (this.ConsoleNumberValueSpecified)
                {
                    return this.ConsoleNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConsoleNumberValue = value.GetValueOrDefault();
                this.ConsoleNumberValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Description", Order=18, Form=XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DispositionFee", Order=19, Form=XmlSchemaForm.Unqualified)]
        public decimal DispositionFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DispositionFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DispositionFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DispositionFee
        {
            get
            {
                if (this.DispositionFeeValueSpecified)
                {
                    return this.DispositionFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DispositionFeeValue = value.GetValueOrDefault();
                this.DispositionFeeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("DraftNumber", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string DraftNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EffectiveDate", Order=21, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime EffectiveDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EffectiveDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EffectiveDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> EffectiveDate
        {
            get
            {
                if (this.EffectiveDateValueSpecified)
                {
                    return this.EffectiveDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EffectiveDateValue = value.GetValueOrDefault();
                this.EffectiveDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowAmount", Order=22, Form=XmlSchemaForm.Unqualified)]
        public decimal EscrowAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EscrowAmount
        {
            get
            {
                if (this.EscrowAmountValueSpecified)
                {
                    return this.EscrowAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowAmountValue = value.GetValueOrDefault();
                this.EscrowAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowAppliedBalChg", Order=23, Form=XmlSchemaForm.Unqualified)]
        public decimal EscrowAppliedBalChgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowAppliedBalChg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowAppliedBalChgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EscrowAppliedBalChg
        {
            get
            {
                if (this.EscrowAppliedBalChgValueSpecified)
                {
                    return this.EscrowAppliedBalChgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowAppliedBalChgValue = value.GetValueOrDefault();
                this.EscrowAppliedBalChgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("EscrowUnpaidBalChg", Order=24, Form=XmlSchemaForm.Unqualified)]
        public decimal EscrowUnpaidBalChgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EscrowUnpaidBalChg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EscrowUnpaidBalChgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> EscrowUnpaidBalChg
        {
            get
            {
                if (this.EscrowUnpaidBalChgValueSpecified)
                {
                    return this.EscrowUnpaidBalChgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EscrowUnpaidBalChgValue = value.GetValueOrDefault();
                this.EscrowUnpaidBalChgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeAmount", Order=25, Form=XmlSchemaForm.Unqualified)]
        public decimal FeeAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FeeAmount
        {
            get
            {
                if (this.FeeAmountValueSpecified)
                {
                    return this.FeeAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeAmountValue = value.GetValueOrDefault();
                this.FeeAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeCountBy", Order=26, Form=XmlSchemaForm.Unqualified)]
        public short FeeCountByValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeCountBy property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeCountByValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> FeeCountBy
        {
            get
            {
                if (this.FeeCountByValueSpecified)
                {
                    return this.FeeCountByValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeCountByValue = value.GetValueOrDefault();
                this.FeeCountByValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeeExmtCrtsyAmt", Order=27, Form=XmlSchemaForm.Unqualified)]
        public decimal FeeExmtCrtsyAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeeExmtCrtsyAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeeExmtCrtsyAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FeeExmtCrtsyAmt
        {
            get
            {
                if (this.FeeExmtCrtsyAmtValueSpecified)
                {
                    return this.FeeExmtCrtsyAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeeExmtCrtsyAmtValue = value.GetValueOrDefault();
                this.FeeExmtCrtsyAmtValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Id", Order=28, Form=XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IdType", Order=29, Form=XmlSchemaForm.Unqualified)]
        public short IdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IdType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> IdType
        {
            get
            {
                if (this.IdTypeValueSpecified)
                {
                    return this.IdTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdTypeValue = value.GetValueOrDefault();
                this.IdTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("IntEffectDate", Order=30, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime IntEffectDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IntEffectDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IntEffectDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> IntEffectDate
        {
            get
            {
                if (this.IntEffectDateValueSpecified)
                {
                    return this.IntEffectDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IntEffectDateValue = value.GetValueOrDefault();
                this.IntEffectDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Interest", Order=31, Form=XmlSchemaForm.Unqualified)]
        public decimal InterestValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Interest property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Interest
        {
            get
            {
                if (this.InterestValueSpecified)
                {
                    return this.InterestValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestValue = value.GetValueOrDefault();
                this.InterestValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastTranDate", Order=32, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastTranDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastTranDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastTranDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastTranDate
        {
            get
            {
                if (this.LastTranDateValueSpecified)
                {
                    return this.LastTranDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastTranDateValue = value.GetValueOrDefault();
                this.LastTranDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LateChgFieldsValid", Order=33, Form=XmlSchemaForm.Unqualified)]
        public short LateChgFieldsValidValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LateChgFieldsValid property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LateChgFieldsValidValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> LateChgFieldsValid
        {
            get
            {
                if (this.LateChgFieldsValidValueSpecified)
                {
                    return this.LateChgFieldsValidValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LateChgFieldsValidValue = value.GetValueOrDefault();
                this.LateChgFieldsValidValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LateChgUnpaidChgAmt", Order=34, Form=XmlSchemaForm.Unqualified)]
        public decimal LateChgUnpaidChgAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LateChgUnpaidChgAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LateChgUnpaidChgAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LateChgUnpaidChgAmt
        {
            get
            {
                if (this.LateChgUnpaidChgAmtValueSpecified)
                {
                    return this.LateChgUnpaidChgAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LateChgUnpaidChgAmtValue = value.GetValueOrDefault();
                this.LateChgUnpaidChgAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LateChgWaivedAmt", Order=35, Form=XmlSchemaForm.Unqualified)]
        public decimal LateChgWaivedAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LateChgWaivedAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LateChgWaivedAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LateChgWaivedAmt
        {
            get
            {
                if (this.LateChgWaivedAmtValueSpecified)
                {
                    return this.LateChgWaivedAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LateChgWaivedAmtValue = value.GetValueOrDefault();
                this.LateChgWaivedAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MaturityLoanDueDate", Order=36, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime MaturityLoanDueDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityLoanDueDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaturityLoanDueDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> MaturityLoanDueDate
        {
            get
            {
                if (this.MaturityLoanDueDateValueSpecified)
                {
                    return this.MaturityLoanDueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityLoanDueDateValue = value.GetValueOrDefault();
                this.MaturityLoanDueDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("MemberBranch", Order=37, Form=XmlSchemaForm.Unqualified)]
        public string MemberBranch { get; set; }
        
        [XmlElementAttribute("MicrAcctNum", Order=38, Form=XmlSchemaForm.Unqualified)]
        public string MicrAcctNum { get; set; }
        
        [XmlElementAttribute("MicrRt", Order=39, Form=XmlSchemaForm.Unqualified)]
        public string MicrRt { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MiscExpenseAmount", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal MiscExpenseAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MiscExpenseAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MiscExpenseAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> MiscExpenseAmount
        {
            get
            {
                if (this.MiscExpenseAmountValueSpecified)
                {
                    return this.MiscExpenseAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MiscExpenseAmountValue = value.GetValueOrDefault();
                this.MiscExpenseAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("NewBalance", Order=41, Form=XmlSchemaForm.Unqualified)]
        public decimal NewBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NewBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> NewBalance
        {
            get
            {
                if (this.NewBalanceValueSpecified)
                {
                    return this.NewBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NewBalanceValue = value.GetValueOrDefault();
                this.NewBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostDate", Order=42, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PostDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PostDate
        {
            get
            {
                if (this.PostDateValueSpecified)
                {
                    return this.PostDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostDateValue = value.GetValueOrDefault();
                this.PostDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PostTime", Order=43, Form=XmlSchemaForm.Unqualified)]
        public short PostTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PostTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PostTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PostTime
        {
            get
            {
                if (this.PostTimeValueSpecified)
                {
                    return this.PostTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PostTimeValue = value.GetValueOrDefault();
                this.PostTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevAvailBalance", Order=44, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevAvailBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevAvailBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevAvailBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevAvailBalance
        {
            get
            {
                if (this.PrevAvailBalanceValueSpecified)
                {
                    return this.PrevAvailBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevAvailBalanceValue = value.GetValueOrDefault();
                this.PrevAvailBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevLateChgAccrued", Order=45, Form=XmlSchemaForm.Unqualified)]
        public decimal PrevLateChgAccruedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevLateChgAccrued property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevLateChgAccruedValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PrevLateChgAccrued
        {
            get
            {
                if (this.PrevLateChgAccruedValueSpecified)
                {
                    return this.PrevLateChgAccruedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevLateChgAccruedValue = value.GetValueOrDefault();
                this.PrevLateChgAccruedValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PrevLateChgDate", Order=46, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime PrevLateChgDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevLateChgDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PrevLateChgDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> PrevLateChgDate
        {
            get
            {
                if (this.PrevLateChgDateValueSpecified)
                {
                    return this.PrevLateChgDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrevLateChgDateValue = value.GetValueOrDefault();
                this.PrevLateChgDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ProcessorUser", Order=47, Form=XmlSchemaForm.Unqualified)]
        public short ProcessorUserValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProcessorUser property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ProcessorUserValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ProcessorUser
        {
            get
            {
                if (this.ProcessorUserValueSpecified)
                {
                    return this.ProcessorUserValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProcessorUserValue = value.GetValueOrDefault();
                this.ProcessorUserValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecurringTran", Order=48, Form=XmlSchemaForm.Unqualified)]
        public short RecurringTranValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecurringTran property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecurringTranValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RecurringTran
        {
            get
            {
                if (this.RecurringTranValueSpecified)
                {
                    return this.RecurringTranValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecurringTranValue = value.GetValueOrDefault();
                this.RecurringTranValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDCheckCode", Order=49, Form=XmlSchemaForm.Unqualified)]
        public short RegDCheckCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDCheckCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDCheckCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDCheckCode
        {
            get
            {
                if (this.RegDCheckCodeValueSpecified)
                {
                    return this.RegDCheckCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDCheckCodeValue = value.GetValueOrDefault();
                this.RegDCheckCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegDTransferCode", Order=50, Form=XmlSchemaForm.Unqualified)]
        public short RegDTransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegDTransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegDTransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegDTransferCode
        {
            get
            {
                if (this.RegDTransferCodeValueSpecified)
                {
                    return this.RegDTransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegDTransferCodeValue = value.GetValueOrDefault();
                this.RegDTransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RegECode", Order=51, Form=XmlSchemaForm.Unqualified)]
        public short RegECodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegECode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RegECodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> RegECode
        {
            get
            {
                if (this.RegECodeValueSpecified)
                {
                    return this.RegECodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegECodeValue = value.GetValueOrDefault();
                this.RegECodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SalesTaxAmount", Order=52, Form=XmlSchemaForm.Unqualified)]
        public decimal SalesTaxAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalesTaxAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SalesTaxAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> SalesTaxAmount
        {
            get
            {
                if (this.SalesTaxAmountValueSpecified)
                {
                    return this.SalesTaxAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalesTaxAmountValue = value.GetValueOrDefault();
                this.SalesTaxAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SecurityLevels", Order=53, Form=XmlSchemaForm.Unqualified)]
        public short SecurityLevelsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecurityLevels property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SecurityLevelsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SecurityLevels
        {
            get
            {
                if (this.SecurityLevelsValueSpecified)
                {
                    return this.SecurityLevelsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SecurityLevelsValue = value.GetValueOrDefault();
                this.SecurityLevelsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SequenceNumber", Order=54, Form=XmlSchemaForm.Unqualified)]
        public int SequenceNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SequenceNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SequenceNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> SequenceNumber
        {
            get
            {
                if (this.SequenceNumberValueSpecified)
                {
                    return this.SequenceNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SequenceNumberValue = value.GetValueOrDefault();
                this.SequenceNumberValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SourceCode", Order=55, Form=XmlSchemaForm.Unqualified)]
        public string SourceCode { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<LoanTransactionStmtDesc> _stmtDesc;
        
        [XmlElementAttribute("StmtDesc", Order=56, Form=XmlSchemaForm.Unqualified)]
        public Collection<LoanTransactionStmtDesc> StmtDesc
        {
            get
            {
                return _stmtDesc;
            }
            set
            {
                _stmtDesc = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StmtDesc collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool StmtDescSpecified
        {
            get
            {
                return ((this.StmtDesc != null) 
                            && (this.StmtDesc.Count != 0));
            }
        }
        
        [XmlElementAttribute("SubActionCode", Order=57, Form=XmlSchemaForm.Unqualified)]
        public string SubActionCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubSource", Order=58, Form=XmlSchemaForm.Unqualified)]
        public short SubSourceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubSource property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubSourceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SubSource
        {
            get
            {
                if (this.SubSourceValueSpecified)
                {
                    return this.SubSourceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubSourceValue = value.GetValueOrDefault();
                this.SubSourceValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("SubSourceDescr", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string SubSourceDescr { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TerminationFee", Order=60, Form=XmlSchemaForm.Unqualified)]
        public decimal TerminationFeeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TerminationFee property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TerminationFeeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TerminationFee
        {
            get
            {
                if (this.TerminationFeeValueSpecified)
                {
                    return this.TerminationFeeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TerminationFeeValue = value.GetValueOrDefault();
                this.TerminationFeeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("TracerNumber", Order=61, Form=XmlSchemaForm.Unqualified)]
        public string TracerNumber { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TranAmount", Order=62, Form=XmlSchemaForm.Unqualified)]
        public decimal TranAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TranAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TranAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TranAmount
        {
            get
            {
                if (this.TranAmountValueSpecified)
                {
                    return this.TranAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TranAmountValue = value.GetValueOrDefault();
                this.TranAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TransferCode", Order=63, Form=XmlSchemaForm.Unqualified)]
        public short TransferCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TransferCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> TransferCode
        {
            get
            {
                if (this.TransferCodeValueSpecified)
                {
                    return this.TransferCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TransferCodeValue = value.GetValueOrDefault();
                this.TransferCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnappliedPartialPmtChg", Order=64, Form=XmlSchemaForm.Unqualified)]
        public decimal UnappliedPartialPmtChgValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnappliedPartialPmtChg property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnappliedPartialPmtChgValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnappliedPartialPmtChg
        {
            get
            {
                if (this.UnappliedPartialPmtChgValueSpecified)
                {
                    return this.UnappliedPartialPmtChgValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnappliedPartialPmtChgValue = value.GetValueOrDefault();
                this.UnappliedPartialPmtChgValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber", Order=65, Form=XmlSchemaForm.Unqualified)]
        public short UserNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumberValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserNumber
        {
            get
            {
                if (this.UserNumberValueSpecified)
                {
                    return this.UserNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumberValue = value.GetValueOrDefault();
                this.UserNumberValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserOverride", Order=66, Form=XmlSchemaForm.Unqualified)]
        public short UserOverrideValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserOverride property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserOverrideValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserOverride
        {
            get
            {
                if (this.UserOverrideValueSpecified)
                {
                    return this.UserOverrideValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserOverrideValue = value.GetValueOrDefault();
                this.UserOverrideValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("VoidCode", Order=67, Form=XmlSchemaForm.Unqualified)]
        public short VoidCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VoidCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VoidCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> VoidCode
        {
            get
            {
                if (this.VoidCodeValueSpecified)
                {
                    return this.VoidCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VoidCodeValue = value.GetValueOrDefault();
                this.VoidCodeValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=68, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=69)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
