//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\AccountService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\AccountService\generated-output -n AccountService
namespace AccountService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("LoanScheduleFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("LoanScheduleFields", Namespace="http://www.symxchange.generated.symitar.com/crud/account/dto/retrieve")]
    public partial class LoanScheduleFields
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ApplyAsBilled", Order=0, Form=XmlSchemaForm.Unqualified)]
        public bool ApplyAsBilledValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApplyAsBilled property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ApplyAsBilledValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ApplyAsBilled
        {
            get
            {
                if (this.ApplyAsBilledValueSpecified)
                {
                    return this.ApplyAsBilledValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApplyAsBilledValue = value.GetValueOrDefault();
                this.ApplyAsBilledValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BeginningDate", Order=1, Form=XmlSchemaForm.Unqualified)]
        public bool BeginningDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeginningDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BeginningDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BeginningDate
        {
            get
            {
                if (this.BeginningDateValueSpecified)
                {
                    return this.BeginningDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BeginningDateValue = value.GetValueOrDefault();
                this.BeginningDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingDefaultDays", Order=2, Form=XmlSchemaForm.Unqualified)]
        public bool BillingDefaultDaysValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingDefaultDays property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingDefaultDaysValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingDefaultDays
        {
            get
            {
                if (this.BillingDefaultDaysValueSpecified)
                {
                    return this.BillingDefaultDaysValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingDefaultDaysValue = value.GetValueOrDefault();
                this.BillingDefaultDaysValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingMethod", Order=3, Form=XmlSchemaForm.Unqualified)]
        public bool BillingMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingMethod
        {
            get
            {
                if (this.BillingMethodValueSpecified)
                {
                    return this.BillingMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingMethodValue = value.GetValueOrDefault();
                this.BillingMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingNotice", Order=4, Form=XmlSchemaForm.Unqualified)]
        public bool BillingNoticeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingNotice property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingNoticeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingNotice
        {
            get
            {
                if (this.BillingNoticeValueSpecified)
                {
                    return this.BillingNoticeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingNoticeValue = value.GetValueOrDefault();
                this.BillingNoticeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BillingNoticeMin", Order=5, Form=XmlSchemaForm.Unqualified)]
        public bool BillingNoticeMinValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BillingNoticeMin property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BillingNoticeMinValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> BillingNoticeMin
        {
            get
            {
                if (this.BillingNoticeMinValueSpecified)
                {
                    return this.BillingNoticeMinValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BillingNoticeMinValue = value.GetValueOrDefault();
                this.BillingNoticeMinValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DqCalculationMethod", Order=6, Form=XmlSchemaForm.Unqualified)]
        public bool DqCalculationMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DqCalculationMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DqCalculationMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DqCalculationMethod
        {
            get
            {
                if (this.DqCalculationMethodValueSpecified)
                {
                    return this.DqCalculationMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DqCalculationMethodValue = value.GetValueOrDefault();
                this.DqCalculationMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay1", Order=7, Form=XmlSchemaForm.Unqualified)]
        public bool DueDay1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DueDay1
        {
            get
            {
                if (this.DueDay1ValueSpecified)
                {
                    return this.DueDay1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay1Value = value.GetValueOrDefault();
                this.DueDay1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DueDay2", Order=8, Form=XmlSchemaForm.Unqualified)]
        public bool DueDay2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DueDay2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DueDay2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> DueDay2
        {
            get
            {
                if (this.DueDay2ValueSpecified)
                {
                    return this.DueDay2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DueDay2Value = value.GetValueOrDefault();
                this.DueDay2ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ExceedLevelPmtAmt", Order=9, Form=XmlSchemaForm.Unqualified)]
        public bool ExceedLevelPmtAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExceedLevelPmtAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExceedLevelPmtAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> ExceedLevelPmtAmt
        {
            get
            {
                if (this.ExceedLevelPmtAmtValueSpecified)
                {
                    return this.ExceedLevelPmtAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExceedLevelPmtAmtValue = value.GetValueOrDefault();
                this.ExceedLevelPmtAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Expiration", Order=10, Form=XmlSchemaForm.Unqualified)]
        public bool ExpirationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Expiration property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ExpirationValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Expiration
        {
            get
            {
                if (this.ExpirationValueSpecified)
                {
                    return this.ExpirationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ExpirationValue = value.GetValueOrDefault();
                this.ExpirationValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Id", Order=11, Form=XmlSchemaForm.Unqualified)]
        public bool IdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Id property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool IdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Id
        {
            get
            {
                if (this.IdValueSpecified)
                {
                    return this.IdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdValue = value.GetValueOrDefault();
                this.IdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("InterestType", Order=12, Form=XmlSchemaForm.Unqualified)]
        public bool InterestTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool InterestTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> InterestType
        {
            get
            {
                if (this.InterestTypeValueSpecified)
                {
                    return this.InterestTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestTypeValue = value.GetValueOrDefault();
                this.InterestTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPaymentAmt", Order=13, Form=XmlSchemaForm.Unqualified)]
        public bool LevelPaymentAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPaymentAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPaymentAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LevelPaymentAmt
        {
            get
            {
                if (this.LevelPaymentAmtValueSpecified)
                {
                    return this.LevelPaymentAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPaymentAmtValue = value.GetValueOrDefault();
                this.LevelPaymentAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LevelPrincipalAmt", Order=14, Form=XmlSchemaForm.Unqualified)]
        public bool LevelPrincipalAmtValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LevelPrincipalAmt property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LevelPrincipalAmtValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> LevelPrincipalAmt
        {
            get
            {
                if (this.LevelPrincipalAmtValueSpecified)
                {
                    return this.LevelPrincipalAmtValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LevelPrincipalAmtValue = value.GetValueOrDefault();
                this.LevelPrincipalAmtValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("MinimumPayment", Order=15, Form=XmlSchemaForm.Unqualified)]
        public bool MinimumPaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumPayment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MinimumPaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> MinimumPayment
        {
            get
            {
                if (this.MinimumPaymentValueSpecified)
                {
                    return this.MinimumPaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumPaymentValue = value.GetValueOrDefault();
                this.MinimumPaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Payment", Order=16, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Payment property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> Payment
        {
            get
            {
                if (this.PaymentValueSpecified)
                {
                    return this.PaymentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentValue = value.GetValueOrDefault();
                this.PaymentValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentCalcType", Order=17, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentCalcTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentCalcType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentCalcTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentCalcType
        {
            get
            {
                if (this.PaymentCalcTypeValueSpecified)
                {
                    return this.PaymentCalcTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentCalcTypeValue = value.GetValueOrDefault();
                this.PaymentCalcTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentDescription", Order=18, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentDescriptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentDescription property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentDescriptionValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentDescription
        {
            get
            {
                if (this.PaymentDescriptionValueSpecified)
                {
                    return this.PaymentDescriptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentDescriptionValue = value.GetValueOrDefault();
                this.PaymentDescriptionValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentType", Order=19, Form=XmlSchemaForm.Unqualified)]
        public bool PaymentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PaymentType
        {
            get
            {
                if (this.PaymentTypeValueSpecified)
                {
                    return this.PaymentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentTypeValue = value.GetValueOrDefault();
                this.PaymentTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PercentPrincipal", Order=20, Form=XmlSchemaForm.Unqualified)]
        public bool PercentPrincipalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PercentPrincipal property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PercentPrincipalValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> PercentPrincipal
        {
            get
            {
                if (this.PercentPrincipalValueSpecified)
                {
                    return this.PercentPrincipalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PercentPrincipalValue = value.GetValueOrDefault();
                this.PercentPrincipalValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=21, Form=XmlSchemaForm.Unqualified)]
        public bool RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RepeatCode", Order=22, Form=XmlSchemaForm.Unqualified)]
        public bool RepeatCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RepeatCode property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RepeatCodeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> RepeatCode
        {
            get
            {
                if (this.RepeatCodeValueSpecified)
                {
                    return this.RepeatCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RepeatCodeValue = value.GetValueOrDefault();
                this.RepeatCodeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UseRateChangeProcessIng", Order=23, Form=XmlSchemaForm.Unqualified)]
        public bool UseRateChangeProcessIngValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseRateChangeProcessIng property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UseRateChangeProcessIngValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<bool> UseRateChangeProcessIng
        {
            get
            {
                if (this.UseRateChangeProcessIngValueSpecified)
                {
                    return this.UseRateChangeProcessIngValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseRateChangeProcessIngValue = value.GetValueOrDefault();
                this.UseRateChangeProcessIngValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Version_1", Order=24, Form=XmlSchemaForm.Unqualified)]
        public AccountService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=25)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LoanScheduleFields" /> class.</para>
        /// </summary>
        public LoanScheduleFields()
        {
            this._any = new Collection<XmlElement>();
        }
    }
}
