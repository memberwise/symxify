//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1182.0 using the following command:
// xscgen C:\Users\tbuese\Desktop\Symxchange\ParticipantService/*.xsd --sf --un --uc --order --cn -0 --collectionSettersMode=Public -o C:\Users\tbuese\Desktop\Symxchange\ParticipantService\generated-output -n ParticipantService
namespace ParticipantService
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1182.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("Participant", Namespace="http://www.symxchange.generated.symitar.com/crud/participant/dto/retrieve")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    public partial class Participant
    {
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AchTranCodeOut", Order=0, Form=XmlSchemaForm.Unqualified)]
        public short AchTranCodeOutValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AchTranCodeOut property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AchTranCodeOutValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> AchTranCodeOut
        {
            get
            {
                if (this.AchTranCodeOutValueSpecified)
                {
                    return this.AchTranCodeOutValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AchTranCodeOutValue = value.GetValueOrDefault();
                this.AchTranCodeOutValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Active", Order=1, Form=XmlSchemaForm.Unqualified)]
        public short ActiveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Active property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActiveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Active
        {
            get
            {
                if (this.ActiveValueSpecified)
                {
                    return this.ActiveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActiveValue = value.GetValueOrDefault();
                this.ActiveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("AdjLS", Order=2, Form=XmlSchemaForm.Unqualified)]
        public decimal AdjLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdjLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdjLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> AdjLs
        {
            get
            {
                if (this.AdjLsValueSpecified)
                {
                    return this.AdjLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdjLsValue = value.GetValueOrDefault();
                this.AdjLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Balance", Order=3, Form=XmlSchemaForm.Unqualified)]
        public decimal BalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> Balance
        {
            get
            {
                if (this.BalanceValueSpecified)
                {
                    return this.BalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalanceValue = value.GetValueOrDefault();
                this.BalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("BeginningBalLS", Order=4, Form=XmlSchemaForm.Unqualified)]
        public decimal BeginningBalLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeginningBalLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BeginningBalLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> BeginningBalLs
        {
            get
            {
                if (this.BeginningBalLsValueSpecified)
                {
                    return this.BeginningBalLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BeginningBalLsValue = value.GetValueOrDefault();
                this.BeginningBalLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Branch", Order=5, Form=XmlSchemaForm.Unqualified)]
        public short BranchValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Branch property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool BranchValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Branch
        {
            get
            {
                if (this.BranchValueSpecified)
                {
                    return this.BranchValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BranchValue = value.GetValueOrDefault();
                this.BranchValueSpecified = value.HasValue;
            }
        }
        
        [XmlIgnoreAttribute()]
        private Collection<ParticipantBuckets> _buckets;
        
        [XmlElementAttribute("Buckets", Order=6, Form=XmlSchemaForm.Unqualified)]
        public Collection<ParticipantBuckets> Buckets
        {
            get
            {
                return _buckets;
            }
            set
            {
                _buckets = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Buckets collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BucketsSpecified
        {
            get
            {
                return ((this.Buckets != null) 
                            && (this.Buckets.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Participant" /> class.</para>
        /// </summary>
        public Participant()
        {
            this._buckets = new Collection<ParticipantBuckets>();
            this._any = new Collection<XmlElement>();
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargeOffBalance", Order=7, Form=XmlSchemaForm.Unqualified)]
        public decimal ChargeOffBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargeOffBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargeOffBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChargeOffBalance
        {
            get
            {
                if (this.ChargeOffBalanceValueSpecified)
                {
                    return this.ChargeOffBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargeOffBalanceValue = value.GetValueOrDefault();
                this.ChargeOffBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargebackBalance", Order=8, Form=XmlSchemaForm.Unqualified)]
        public decimal ChargebackBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargebackBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargebackBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChargebackBalance
        {
            get
            {
                if (this.ChargebackBalanceValueSpecified)
                {
                    return this.ChargebackBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargebackBalanceValue = value.GetValueOrDefault();
                this.ChargebackBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChargebackLS", Order=9, Form=XmlSchemaForm.Unqualified)]
        public decimal ChargebackLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChargebackLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChargebackLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> ChargebackLs
        {
            get
            {
                if (this.ChargebackLsValueSpecified)
                {
                    return this.ChargebackLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChargebackLsValue = value.GetValueOrDefault();
                this.ChargebackLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ChgOffLoanCount", Order=10, Form=XmlSchemaForm.Unqualified)]
        public int ChgOffLoanCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ChgOffLoanCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ChgOffLoanCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> ChgOffLoanCount
        {
            get
            {
                if (this.ChgOffLoanCountValueSpecified)
                {
                    return this.ChgOffLoanCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ChgOffLoanCountValue = value.GetValueOrDefault();
                this.ChgOffLoanCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("CloseDate", Order=11, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime CloseDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CloseDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CloseDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> CloseDate
        {
            get
            {
                if (this.CloseDateValueSpecified)
                {
                    return this.CloseDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CloseDateValue = value.GetValueOrDefault();
                this.CloseDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DealerAvailBalance", Order=12, Form=XmlSchemaForm.Unqualified)]
        public decimal DealerAvailBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DealerAvailBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DealerAvailBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DealerAvailBalance
        {
            get
            {
                if (this.DealerAvailBalanceValueSpecified)
                {
                    return this.DealerAvailBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DealerAvailBalanceValue = value.GetValueOrDefault();
                this.DealerAvailBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("DealerTotalBalance", Order=13, Form=XmlSchemaForm.Unqualified)]
        public decimal DealerTotalBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DealerTotalBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DealerTotalBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> DealerTotalBalance
        {
            get
            {
                if (this.DealerTotalBalanceValueSpecified)
                {
                    return this.DealerTotalBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DealerTotalBalanceValue = value.GetValueOrDefault();
                this.DealerTotalBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FeesLS", Order=14, Form=XmlSchemaForm.Unqualified)]
        public decimal FeesLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FeesLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FeesLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> FeesLs
        {
            get
            {
                if (this.FeesLsValueSpecified)
                {
                    return this.FeesLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FeesLsValue = value.GetValueOrDefault();
                this.FeesLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("FmLastPurgeDate", Order=15, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime FmLastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FmLastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FmLastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> FmLastPurgeDate
        {
            get
            {
                if (this.FmLastPurgeDateValueSpecified)
                {
                    return this.FmLastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FmLastPurgeDateValue = value.GetValueOrDefault();
                this.FmLastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("HoldbackLS", Order=16, Form=XmlSchemaForm.Unqualified)]
        public decimal HoldbackLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HoldbackLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool HoldbackLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> HoldbackLs
        {
            get
            {
                if (this.HoldbackLsValueSpecified)
                {
                    return this.HoldbackLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HoldbackLsValue = value.GetValueOrDefault();
                this.HoldbackLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastDisbursalDate", Order=17, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastDisbursalDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastDisbursalDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastDisbursalDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastDisbursalDate
        {
            get
            {
                if (this.LastDisbursalDateValueSpecified)
                {
                    return this.LastDisbursalDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastDisbursalDateValue = value.GetValueOrDefault();
                this.LastDisbursalDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastFmDate", Order=18, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastFmDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastFmDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastFmDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastFmDate
        {
            get
            {
                if (this.LastFmDateValueSpecified)
                {
                    return this.LastFmDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastFmDateValue = value.GetValueOrDefault();
                this.LastFmDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LastPurgeDate", Order=19, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime LastPurgeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastPurgeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LastPurgeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> LastPurgeDate
        {
            get
            {
                if (this.LastPurgeDateValueSpecified)
                {
                    return this.LastPurgeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastPurgeDateValue = value.GetValueOrDefault();
                this.LastPurgeDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("LegacyCode", Order=20, Form=XmlSchemaForm.Unqualified)]
        public string LegacyCode { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanBalanceSlp", Order=21, Form=XmlSchemaForm.Unqualified)]
        public decimal LoanBalanceSlpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanBalanceSlp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanBalanceSlpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> LoanBalanceSlp
        {
            get
            {
                if (this.LoanBalanceSlpValueSpecified)
                {
                    return this.LoanBalanceSlpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanBalanceSlpValue = value.GetValueOrDefault();
                this.LoanBalanceSlpValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCount", Order=22, Form=XmlSchemaForm.Unqualified)]
        public int LoanCountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> LoanCount
        {
            get
            {
                if (this.LoanCountValueSpecified)
                {
                    return this.LoanCountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCountValue = value.GetValueOrDefault();
                this.LoanCountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("LoanCountSlp", Order=23, Form=XmlSchemaForm.Unqualified)]
        public int LoanCountSlpValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoanCountSlp property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoanCountSlpValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> LoanCountSlp
        {
            get
            {
                if (this.LoanCountSlpValueSpecified)
                {
                    return this.LoanCountSlpValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoanCountSlpValue = value.GetValueOrDefault();
                this.LoanCountSlpValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("Name", Order=24, Form=XmlSchemaForm.Unqualified)]
        public string Name { get; set; }
        
        [XmlElementAttribute("Number", Order=25, Form=XmlSchemaForm.Unqualified)]
        public string Number { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("OpenDate", Order=26, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime OpenDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OpenDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool OpenDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> OpenDate
        {
            get
            {
                if (this.OpenDateValueSpecified)
                {
                    return this.OpenDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpenDateValue = value.GetValueOrDefault();
                this.OpenDateValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("ParticipantFmHistoryList", Order=27, Form=XmlSchemaForm.Unqualified)]
        public ParticipantFmHistoryList ParticipantFmHistoryList { get; set; }
        
        [XmlElementAttribute("ParticipantNoteList", Order=28, Form=XmlSchemaForm.Unqualified)]
        public ParticipantNoteList ParticipantNoteList { get; set; }
        
        [XmlElementAttribute("ParticipantTransactionList", Order=29, Form=XmlSchemaForm.Unqualified)]
        public ParticipantTransactionList ParticipantTransactionList { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentMethod", Order=30, Form=XmlSchemaForm.Unqualified)]
        public short PaymentMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> PaymentMethod
        {
            get
            {
                if (this.PaymentMethodValueSpecified)
                {
                    return this.PaymentMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentMethodValue = value.GetValueOrDefault();
                this.PaymentMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentsLTD", Order=31, Form=XmlSchemaForm.Unqualified)]
        public decimal PaymentsLtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentsLtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentsLtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PaymentsLtd
        {
            get
            {
                if (this.PaymentsLtdValueSpecified)
                {
                    return this.PaymentsLtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentsLtdValue = value.GetValueOrDefault();
                this.PaymentsLtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentsLastYear", Order=32, Form=XmlSchemaForm.Unqualified)]
        public decimal PaymentsLastYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentsLastYear property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentsLastYearValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PaymentsLastYear
        {
            get
            {
                if (this.PaymentsLastYearValueSpecified)
                {
                    return this.PaymentsLastYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentsLastYearValue = value.GetValueOrDefault();
                this.PaymentsLastYearValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("PaymentsYtd", Order=33, Form=XmlSchemaForm.Unqualified)]
        public decimal PaymentsYtdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PaymentsYtd property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PaymentsYtdValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> PaymentsYtd
        {
            get
            {
                if (this.PaymentsYtdValueSpecified)
                {
                    return this.PaymentsYtdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PaymentsYtdValue = value.GetValueOrDefault();
                this.PaymentsYtdValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("RecordChangeDate", Order=34, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime RecordChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordChangeDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RecordChangeDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> RecordChangeDate
        {
            get
            {
                if (this.RecordChangeDateValueSpecified)
                {
                    return this.RecordChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordChangeDateValue = value.GetValueOrDefault();
                this.RecordChangeDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("ReservePaymentMethod", Order=35, Form=XmlSchemaForm.Unqualified)]
        public short ReservePaymentMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReservePaymentMethod property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReservePaymentMethodValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> ReservePaymentMethod
        {
            get
            {
                if (this.ReservePaymentMethodValueSpecified)
                {
                    return this.ReservePaymentMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReservePaymentMethodValue = value.GetValueOrDefault();
                this.ReservePaymentMethodValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementDate", Order=36, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime StatementDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> StatementDate
        {
            get
            {
                if (this.StatementDateValueSpecified)
                {
                    return this.StatementDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementDateValue = value.GetValueOrDefault();
                this.StatementDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementGroup", Order=37, Form=XmlSchemaForm.Unqualified)]
        public short StatementGroupValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementGroup property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementGroupValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> StatementGroup
        {
            get
            {
                if (this.StatementGroupValueSpecified)
                {
                    return this.StatementGroupValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementGroupValue = value.GetValueOrDefault();
                this.StatementGroupValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("StatementPrevDate", Order=38, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime StatementPrevDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatementPrevDate property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StatementPrevDateValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> StatementPrevDate
        {
            get
            {
                if (this.StatementPrevDateValueSpecified)
                {
                    return this.StatementPrevDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StatementPrevDateValue = value.GetValueOrDefault();
                this.StatementPrevDateValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("SubType", Order=39, Form=XmlSchemaForm.Unqualified)]
        public short SubTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SubTypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> SubType
        {
            get
            {
                if (this.SubTypeValueSpecified)
                {
                    return this.SubTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SubTypeValue = value.GetValueOrDefault();
                this.SubTypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalEarnedReserve", Order=40, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalEarnedReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalEarnedReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalEarnedReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalEarnedReserve
        {
            get
            {
                if (this.TotalEarnedReserveValueSpecified)
                {
                    return this.TotalEarnedReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalEarnedReserveValue = value.GetValueOrDefault();
                this.TotalEarnedReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalHoldbackAmount", Order=41, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalHoldbackAmountValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalHoldbackAmount property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalHoldbackAmountValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalHoldbackAmount
        {
            get
            {
                if (this.TotalHoldbackAmountValueSpecified)
                {
                    return this.TotalHoldbackAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalHoldbackAmountValue = value.GetValueOrDefault();
                this.TotalHoldbackAmountValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalLoanBalance", Order=42, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalLoanBalanceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalLoanBalance property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalLoanBalanceValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalLoanBalance
        {
            get
            {
                if (this.TotalLoanBalanceValueSpecified)
                {
                    return this.TotalLoanBalanceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalLoanBalanceValue = value.GetValueOrDefault();
                this.TotalLoanBalanceValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalReserveAccrual", Order=43, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalReserveAccrualValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalReserveAccrual property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalReserveAccrualValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalReserveAccrual
        {
            get
            {
                if (this.TotalReserveAccrualValueSpecified)
                {
                    return this.TotalReserveAccrualValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalReserveAccrualValue = value.GetValueOrDefault();
                this.TotalReserveAccrualValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalUnearnedReserve", Order=44, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalUnearnedReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalUnearnedReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalUnearnedReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalUnearnedReserve
        {
            get
            {
                if (this.TotalUnearnedReserveValueSpecified)
                {
                    return this.TotalUnearnedReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalUnearnedReserveValue = value.GetValueOrDefault();
                this.TotalUnearnedReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TotalUpFrontReserve", Order=45, Form=XmlSchemaForm.Unqualified)]
        public decimal TotalUpFrontReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalUpFrontReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalUpFrontReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TotalUpFrontReserve
        {
            get
            {
                if (this.TotalUpFrontReserveValueSpecified)
                {
                    return this.TotalUpFrontReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalUpFrontReserveValue = value.GetValueOrDefault();
                this.TotalUpFrontReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlERsvNoChgD", Order=46, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlERsvNoChgDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlERsvNoChgD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlERsvNoChgDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlERsvNoChgD
        {
            get
            {
                if (this.TtlERsvNoChgDValueSpecified)
                {
                    return this.TtlERsvNoChgDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlERsvNoChgDValue = value.GetValueOrDefault();
                this.TtlERsvNoChgDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlERsvNoClsD", Order=47, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlERsvNoClsDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlERsvNoClsD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlERsvNoClsDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlERsvNoClsD
        {
            get
            {
                if (this.TtlERsvNoClsDValueSpecified)
                {
                    return this.TtlERsvNoClsDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlERsvNoClsDValue = value.GetValueOrDefault();
                this.TtlERsvNoClsDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUeRsvNoChgD", Order=48, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUeRsvNoChgDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUeRsvNoChgD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUeRsvNoChgDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUeRsvNoChgD
        {
            get
            {
                if (this.TtlUeRsvNoChgDValueSpecified)
                {
                    return this.TtlUeRsvNoChgDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUeRsvNoChgDValue = value.GetValueOrDefault();
                this.TtlUeRsvNoChgDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUeRsvNoClsD", Order=49, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUeRsvNoClsDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUeRsvNoClsD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUeRsvNoClsDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUeRsvNoClsD
        {
            get
            {
                if (this.TtlUeRsvNoClsDValueSpecified)
                {
                    return this.TtlUeRsvNoClsDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUeRsvNoClsDValue = value.GetValueOrDefault();
                this.TtlUeRsvNoClsDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUfRsvNoChgD", Order=50, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUfRsvNoChgDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUfRsvNoChgD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUfRsvNoChgDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUfRsvNoChgD
        {
            get
            {
                if (this.TtlUfRsvNoChgDValueSpecified)
                {
                    return this.TtlUfRsvNoChgDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUfRsvNoChgDValue = value.GetValueOrDefault();
                this.TtlUfRsvNoChgDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("TtlUfRsvNoClsD", Order=51, Form=XmlSchemaForm.Unqualified)]
        public decimal TtlUfRsvNoClsDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TtlUfRsvNoClsD property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TtlUfRsvNoClsDValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> TtlUfRsvNoClsD
        {
            get
            {
                if (this.TtlUfRsvNoClsDValueSpecified)
                {
                    return this.TtlUfRsvNoClsDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TtlUfRsvNoClsDValue = value.GetValueOrDefault();
                this.TtlUfRsvNoClsDValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("Type", Order=52, Form=XmlSchemaForm.Unqualified)]
        public short TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UnpaidUpFrontReserve", Order=53, Form=XmlSchemaForm.Unqualified)]
        public decimal UnpaidUpFrontReserveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnpaidUpFrontReserve property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UnpaidUpFrontReserveValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UnpaidUpFrontReserve
        {
            get
            {
                if (this.UnpaidUpFrontReserveValueSpecified)
                {
                    return this.UnpaidUpFrontReserveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UnpaidUpFrontReserveValue = value.GetValueOrDefault();
                this.UnpaidUpFrontReserveValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UpFrontRsrvLS", Order=54, Form=XmlSchemaForm.Unqualified)]
        public decimal UpFrontRsrvLsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UpFrontRsrvLs property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UpFrontRsrvLsValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UpFrontRsrvLs
        {
            get
            {
                if (this.UpFrontRsrvLsValueSpecified)
                {
                    return this.UpFrontRsrvLsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UpFrontRsrvLsValue = value.GetValueOrDefault();
                this.UpFrontRsrvLsValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount1", Order=55, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount1
        {
            get
            {
                if (this.UserAmount1ValueSpecified)
                {
                    return this.UserAmount1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount1Value = value.GetValueOrDefault();
                this.UserAmount1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserAmount2", Order=56, Form=XmlSchemaForm.Unqualified)]
        public decimal UserAmount2Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserAmount2 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserAmount2ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserAmount2
        {
            get
            {
                if (this.UserAmount2ValueSpecified)
                {
                    return this.UserAmount2Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserAmount2Value = value.GetValueOrDefault();
                this.UserAmount2ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("UserChar1", Order=57, Form=XmlSchemaForm.Unqualified)]
        public string UserChar1 { get; set; }
        
        [XmlElementAttribute("UserChar2", Order=58, Form=XmlSchemaForm.Unqualified)]
        public string UserChar2 { get; set; }
        
        [XmlElementAttribute("UserChar3", Order=59, Form=XmlSchemaForm.Unqualified)]
        public string UserChar3 { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserCode1", Order=60, Form=XmlSchemaForm.Unqualified)]
        public short UserCode1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserCode1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserCode1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<short> UserCode1
        {
            get
            {
                if (this.UserCode1ValueSpecified)
                {
                    return this.UserCode1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserCode1Value = value.GetValueOrDefault();
                this.UserCode1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserDate1", Order=61, Form=XmlSchemaForm.Unqualified, DataType="date")]
        public DateTime UserDate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserDate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserDate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<DateTime> UserDate1
        {
            get
            {
                if (this.UserDate1ValueSpecified)
                {
                    return this.UserDate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserDate1Value = value.GetValueOrDefault();
                this.UserDate1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserNumber1", Order=62, Form=XmlSchemaForm.Unqualified)]
        public int UserNumber1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserNumber1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserNumber1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<int> UserNumber1
        {
            get
            {
                if (this.UserNumber1ValueSpecified)
                {
                    return this.UserNumber1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserNumber1Value = value.GetValueOrDefault();
                this.UserNumber1ValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [XmlElementAttribute("UserRate1", Order=63, Form=XmlSchemaForm.Unqualified)]
        public decimal UserRate1Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UserRate1 property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool UserRate1ValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public Nullable<decimal> UserRate1
        {
            get
            {
                if (this.UserRate1ValueSpecified)
                {
                    return this.UserRate1Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UserRate1Value = value.GetValueOrDefault();
                this.UserRate1ValueSpecified = value.HasValue;
            }
        }
        
        [XmlElementAttribute("VendorAltEmail", Order=64, Form=XmlSchemaForm.Unqualified)]
        public string VendorAltEmail { get; set; }
        
        [XmlElementAttribute("VendorCity", Order=65, Form=XmlSchemaForm.Unqualified)]
        public string VendorCity { get; set; }
        
        [XmlElementAttribute("VendorContact", Order=66, Form=XmlSchemaForm.Unqualified)]
        public string VendorContact { get; set; }
        
        [XmlElementAttribute("VendorContact2", Order=67, Form=XmlSchemaForm.Unqualified)]
        public string VendorContact2 { get; set; }
        
        [XmlElementAttribute("VendorContact2Description", Order=68, Form=XmlSchemaForm.Unqualified)]
        public string VendorContact2Description { get; set; }
        
        [XmlElementAttribute("VendorContact2Phone", Order=69, Form=XmlSchemaForm.Unqualified)]
        public string VendorContact2Phone { get; set; }
        
        [XmlElementAttribute("VendorContact2PhoneExt", Order=70, Form=XmlSchemaForm.Unqualified)]
        public string VendorContact2PhoneExt { get; set; }
        
        [XmlElementAttribute("VendorContactDescription", Order=71, Form=XmlSchemaForm.Unqualified)]
        public string VendorContactDescription { get; set; }
        
        [XmlElementAttribute("VendorEmail", Order=72, Form=XmlSchemaForm.Unqualified)]
        public string VendorEmail { get; set; }
        
        [XmlElementAttribute("VendorExtraAddress", Order=73, Form=XmlSchemaForm.Unqualified)]
        public string VendorExtraAddress { get; set; }
        
        [XmlElementAttribute("VendorFax", Order=74, Form=XmlSchemaForm.Unqualified)]
        public string VendorFax { get; set; }
        
        [XmlElementAttribute("VendorName", Order=75, Form=XmlSchemaForm.Unqualified)]
        public string VendorName { get; set; }
        
        [XmlElementAttribute("VendorNumber", Order=76, Form=XmlSchemaForm.Unqualified)]
        public string VendorNumber { get; set; }
        
        [XmlElementAttribute("VendorPhone", Order=77, Form=XmlSchemaForm.Unqualified)]
        public string VendorPhone { get; set; }
        
        [XmlElementAttribute("VendorPhoneExt", Order=78, Form=XmlSchemaForm.Unqualified)]
        public string VendorPhoneExt { get; set; }
        
        [XmlElementAttribute("VendorState", Order=79, Form=XmlSchemaForm.Unqualified)]
        public string VendorState { get; set; }
        
        [XmlElementAttribute("VendorStreet", Order=80, Form=XmlSchemaForm.Unqualified)]
        public string VendorStreet { get; set; }
        
        [XmlElementAttribute("VendorZipCode", Order=81, Form=XmlSchemaForm.Unqualified)]
        public string VendorZipCode { get; set; }
        
        [XmlElementAttribute("Version_1", Order=82, Form=XmlSchemaForm.Unqualified)]
        public ParticipantService.VersionType Version1 { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<XmlElement> _any;
        
        [XmlAnyElementAttribute(Order=83)]
        public Collection<XmlElement> Any
        {
            get
            {
                return _any;
            }
            set
            {
                _any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AnySpecified
        {
            get
            {
                return ((this.Any != null) 
                            && (this.Any.Count != 0));
            }
        }
    }
}
